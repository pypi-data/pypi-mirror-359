! This script is used to apply the rules in phonology.xfst to the
! master lexc file all.lexc

! Read lexc file from disk and compile
read lexc all.lexc
define Lexicon ;

! Punctuation model
define Punct PUNCT:0 [0:"," | 0:"." | 0:"-" | 0:"?" | 0:";" | 0:%!  |
                      0:":" | 0:%"  | 0:"`" | 0:"<" | 0:">" | 0:"+" |
		      0:"*" | 0:"â€“" | 0:"_" | 0:"/" | 0:"|" ]+ ;

define PREBD "<<"+ ;
define SUFBD ">>"+ ;
define BD ["<<" | ">>"]+ ;

! Read rule file from disk and compile
source phonology.xfst
define Rules ;

! Make sure that flag diacritics don't interfere with composition.
set flag-is-epsilon ON 

! Compose lexicon and rules
read regex [ Lexicon .o. Rules ] | Punct ;

! Get rid of unused multichar symbols in sigma. This prevents problems
! where input character sequences are interpreted as a multicharacter
! symbol
compact sigma

! Eliminate all flags which configure lexicon combinatorics. This is
! good practice because generation can get stuck in an infinite loop
! when there are flags. The FST will grow but its behavior remains the
! same.
eliminate flags
set flag-is-epsilon OFF 

! Let's filter out empty strings because those are annoying when you
! run random-pairs. This can only be done after flag elimination.
define Analyzer ;
regex Analyzer .o. [ ?+ ] ;

save stack LANGUAGE_NAME.fomabin
write att > LANGUAGE_NAME.att
