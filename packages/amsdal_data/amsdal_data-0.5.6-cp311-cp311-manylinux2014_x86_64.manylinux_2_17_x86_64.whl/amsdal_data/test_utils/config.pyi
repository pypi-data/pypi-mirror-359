from amsdal_data.aliases.db import POSTGRES_HISTORICAL_ALIAS as POSTGRES_HISTORICAL_ALIAS, POSTGRES_HISTORICAL_ASYNC_ALIAS as POSTGRES_HISTORICAL_ASYNC_ALIAS, POSTGRES_STATE_ALIAS as POSTGRES_STATE_ALIAS, POSTGRES_STATE_ASYNC_ALIAS as POSTGRES_STATE_ASYNC_ALIAS, SQLITE_ALIAS as SQLITE_ALIAS, SQLITE_HISTORICAL_ALIAS as SQLITE_HISTORICAL_ALIAS, SQLITE_HISTORICAL_ASYNC_ALIAS as SQLITE_HISTORICAL_ASYNC_ALIAS, SQLITE_STATE_ASYNC_ALIAS as SQLITE_STATE_ASYNC_ALIAS
from amsdal_data.connections.db_alias_map import CONNECTION_BACKEND_ALIASES as CONNECTION_BACKEND_ALIASES
from amsdal_data.test_utils.common import temp_dir as temp_dir
from amsdal_data.test_utils.constants import PG_TEST_HOST as PG_TEST_HOST, PG_TEST_PASSWORD as PG_TEST_PASSWORD, PG_TEST_PORT as PG_TEST_PORT, PG_TEST_USER as PG_TEST_USER
from amsdal_data.test_utils.db import create_postgres_database as create_postgres_database, drop_postgres_database as drop_postgres_database
from amsdal_utils.config.data_models.amsdal_config import AmsdalConfig
from collections.abc import Iterator
from contextlib import contextmanager

def build_config(lakehouse_backend: str, lakehouse_credentials: dict[str, str], state_backend: str | None = None, state_credentials: dict[str, str] | None = None, *, is_async_mode: bool = False) -> AmsdalConfig: ...
@contextmanager
def sqlite_lakehouse_only_config() -> Iterator[AmsdalConfig]: ...
@contextmanager
def sqlite_async_lakehouse_only_config() -> Iterator[AmsdalConfig]: ...
@contextmanager
def sqlite_config() -> Iterator[AmsdalConfig]: ...
@contextmanager
def sqlite_async_config() -> Iterator[AmsdalConfig]: ...
@contextmanager
def postgres_config() -> Iterator[AmsdalConfig]: ...
@contextmanager
def postgres_async_config() -> Iterator[AmsdalConfig]: ...
