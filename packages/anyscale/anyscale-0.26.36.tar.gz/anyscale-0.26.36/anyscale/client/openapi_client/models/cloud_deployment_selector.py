# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CloudDeploymentSelector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'compute_stack': 'ComputeStack',
        'provider': 'CloudProviders',
        'region': 'str'
    }

    attribute_map = {
        'id': 'id',
        'compute_stack': 'compute_stack',
        'provider': 'provider',
        'region': 'region'
    }

    def __init__(self, id=None, compute_stack=None, provider=None, region=None, local_vars_configuration=None):  # noqa: E501
        """CloudDeploymentSelector - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._compute_stack = None
        self._provider = None
        self._region = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if compute_stack is not None:
            self.compute_stack = compute_stack
        if provider is not None:
            self.provider = provider
        if region is not None:
            self.region = region

    @property
    def id(self):
        """Gets the id of this CloudDeploymentSelector.  # noqa: E501

        Cloud deployment ID. Note that this is not the same as the cloud ID.  # noqa: E501

        :return: The id of this CloudDeploymentSelector.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudDeploymentSelector.

        Cloud deployment ID. Note that this is not the same as the cloud ID.  # noqa: E501

        :param id: The id of this CloudDeploymentSelector.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def compute_stack(self):
        """Gets the compute_stack of this CloudDeploymentSelector.  # noqa: E501

        Cloud deployment compute stack, e.g., `VM` or `K8S`.  # noqa: E501

        :return: The compute_stack of this CloudDeploymentSelector.  # noqa: E501
        :rtype: ComputeStack
        """
        return self._compute_stack

    @compute_stack.setter
    def compute_stack(self, compute_stack):
        """Sets the compute_stack of this CloudDeploymentSelector.

        Cloud deployment compute stack, e.g., `VM` or `K8S`.  # noqa: E501

        :param compute_stack: The compute_stack of this CloudDeploymentSelector.  # noqa: E501
        :type: ComputeStack
        """

        self._compute_stack = compute_stack

    @property
    def provider(self):
        """Gets the provider of this CloudDeploymentSelector.  # noqa: E501

        Cloud deployment provider name, e.g., `AWS` or `GCP`.  # noqa: E501

        :return: The provider of this CloudDeploymentSelector.  # noqa: E501
        :rtype: CloudProviders
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CloudDeploymentSelector.

        Cloud deployment provider name, e.g., `AWS` or `GCP`.  # noqa: E501

        :param provider: The provider of this CloudDeploymentSelector.  # noqa: E501
        :type: CloudProviders
        """

        self._provider = provider

    @property
    def region(self):
        """Gets the region of this CloudDeploymentSelector.  # noqa: E501

        Cloud deployment region, e.g., `us-west-2`.  # noqa: E501

        :return: The region of this CloudDeploymentSelector.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CloudDeploymentSelector.

        Cloud deployment region, e.g., `us-west-2`.  # noqa: E501

        :param region: The region of this CloudDeploymentSelector.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudDeploymentSelector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudDeploymentSelector):
            return True

        return self.to_dict() != other.to_dict()
