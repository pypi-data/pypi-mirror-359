# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import apc_pb2 as apc__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in apc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class APCServiceStub(object):
    """APC Service definition for gRPC communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProposeTask = channel.unary_unary(
                '/apc.APCService/ProposeTask',
                request_serializer=apc__pb2.ProposeTaskRequest.SerializeToString,
                response_deserializer=apc__pb2.Response.FromString,
                _registered_method=True)
        self.SendAccept = channel.unary_unary(
                '/apc.APCService/SendAccept',
                request_serializer=apc__pb2.AcceptResponse.SerializeToString,
                response_deserializer=apc__pb2.Response.FromString,
                _registered_method=True)
        self.SendCompleted = channel.unary_unary(
                '/apc.APCService/SendCompleted',
                request_serializer=apc__pb2.CompletedNotification.SerializeToString,
                response_deserializer=apc__pb2.Response.FromString,
                _registered_method=True)
        self.SendFailed = channel.unary_unary(
                '/apc.APCService/SendFailed',
                request_serializer=apc__pb2.FailedNotification.SerializeToString,
                response_deserializer=apc__pb2.Response.FromString,
                _registered_method=True)
        self.SendReject = channel.unary_unary(
                '/apc.APCService/SendReject',
                request_serializer=apc__pb2.RejectResponse.SerializeToString,
                response_deserializer=apc__pb2.Response.FromString,
                _registered_method=True)
        self.SendTakeOver = channel.unary_unary(
                '/apc.APCService/SendTakeOver',
                request_serializer=apc__pb2.TakeOverRequest.SerializeToString,
                response_deserializer=apc__pb2.Response.FromString,
                _registered_method=True)


class APCServiceServicer(object):
    """APC Service definition for gRPC communication
    """

    def ProposeTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendAccept(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCompleted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFailed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendReject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTakeOver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_APCServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProposeTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ProposeTask,
                    request_deserializer=apc__pb2.ProposeTaskRequest.FromString,
                    response_serializer=apc__pb2.Response.SerializeToString,
            ),
            'SendAccept': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAccept,
                    request_deserializer=apc__pb2.AcceptResponse.FromString,
                    response_serializer=apc__pb2.Response.SerializeToString,
            ),
            'SendCompleted': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCompleted,
                    request_deserializer=apc__pb2.CompletedNotification.FromString,
                    response_serializer=apc__pb2.Response.SerializeToString,
            ),
            'SendFailed': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFailed,
                    request_deserializer=apc__pb2.FailedNotification.FromString,
                    response_serializer=apc__pb2.Response.SerializeToString,
            ),
            'SendReject': grpc.unary_unary_rpc_method_handler(
                    servicer.SendReject,
                    request_deserializer=apc__pb2.RejectResponse.FromString,
                    response_serializer=apc__pb2.Response.SerializeToString,
            ),
            'SendTakeOver': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTakeOver,
                    request_deserializer=apc__pb2.TakeOverRequest.FromString,
                    response_serializer=apc__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'apc.APCService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('apc.APCService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class APCService(object):
    """APC Service definition for gRPC communication
    """

    @staticmethod
    def ProposeTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/apc.APCService/ProposeTask',
            apc__pb2.ProposeTaskRequest.SerializeToString,
            apc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendAccept(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/apc.APCService/SendAccept',
            apc__pb2.AcceptResponse.SerializeToString,
            apc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendCompleted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/apc.APCService/SendCompleted',
            apc__pb2.CompletedNotification.SerializeToString,
            apc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendFailed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/apc.APCService/SendFailed',
            apc__pb2.FailedNotification.SerializeToString,
            apc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendReject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/apc.APCService/SendReject',
            apc__pb2.RejectResponse.SerializeToString,
            apc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendTakeOver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/apc.APCService/SendTakeOver',
            apc__pb2.TakeOverRequest.SerializeToString,
            apc__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
