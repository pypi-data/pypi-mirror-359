#############################################################################
#Options that affect more than one component:

#How many electrons are converted to 1ADU.
gain = 1.0

#The magnitude that corresponds to a flux of 1ADU on the input image.
magnitude-1adu = 10.0

#############################################################################
#Input/Output options
[io]
	#File containing the input source list. Leave undefined for stdin.
	source-list = %(source_list_fname)s

	#File to place FitPSF and SubPixPhot output in. At present only HDF5
	#format is supported.
#	output = subpix.hdf5

	#Filename for PSF map visualization.
	psfmap-image = psfmap.fits

	#Filename for the PSF subtracted image.
	psfsubtracted-image = psfsubtracted.fits

	#Filenames for ds9 regions file displaying CCD pixels on visualized PSF
	#maps. Omit to avoid generating the file.
#	pixels-ds9 = pixels.reg

	#Filenames for ds9 regions file displaying the grid on visualized PSF
	#maps. Omit to avoid generating the file.
#	grid-ds9 = grid.reg

	#HDF5 file defining the PSF map. If not specified, defaults 
	#to the --io.source-list file.
#	psfmap = <filename>

	#FITS file representing the sensitivity structure of a pixel. Uniform
	#sensitivity is assumed if not defined.
	subpix = %(subpix_fname)s
	
	#Uncomment to save the source assignemnt information to a fits file with
	#the given name. A preexisting file wih this name will be overwritten.
#	source-assignment = <filename>

	#A file to read an initial guess for the PSF map from. Leave commented
	#out if no initial guess available. FitPSF only.
#	initial-guess = <filename>

    #If this option is enabled, the input images are expected to have
    #an extension in addition to the primary HDU which holds the
    #estimated errors in the pixel values of the primary image.
    expect-error-hdu = 0

    #Use the primary HDU in the given FITS file as the error estimate
    #for the pixel fluxes. This option supercedes io.expect-error-hdu.
#    error-image = <filename>

	#A comma separated list of input column names. Recognized values are the
	#same as in output-quantities.
	input-columns = %(input_columns)s

	#An xml file defining the structure of the output HDF5 files.
	hdf5_structure = tests/fitpsf/test_data/hdf5_structure.xml

#############################################################################
#Options defining the fit
[psf]
	#The PSF model to fit. Case insensitive. One of: sdk, bicubic, zero.
	model = bicubic

    #The terms the PSF is allowed to depend on. The EBNF grammar defining the
    #language for this variable is:
                                        
    #(* items in angle brackets (< or >) are assumed to be obvious and *)
    #(*thus are not defined. *)
    #
    #termchar = <ascii character> - "," - "}" ;
    #
    #term = termchar , { termchar } ; (* mathematical expressions          *)
    #                                 (* involving variables, floating     *)
    #                                 (* point numbers and pi. The         *)
    #                                 (* complete list of mathematical     *)
    #                                 (* functions from c++99's cmath      *)
    #                                 (* library are supported. *)
    #
    #list = "{" , term , { "," , term } , "}" ; (* simple listing of terms *)
    #                                           (* to include              *)
    #
    #poly = "O" , <integer> , list ; (* Expands to all polynomial terms of *)
    #                                (* up to combined order <integer> of  *)
    #                                (* the entries in list                *)
    #
    #set = list | poly ;
    #
    #cross = set , { "*" , set } ; (* expands to the cross product of all  *)
    #                              (* sets.                                *)
    #
    #expression = cross , { \"+\" , cross } ; (* merge the terms of all    *)
    #                                         (* cross products together.  *)
    terms = %(terms)s

	#The value of the reduced chi squared above which sources are excluded
	#from the fit. This can indicate non-point sources or sources for which
	#the location is wrong among ohter things.
	max-chi2 = 100

	#If the rate of convergence falls below this threshold, iterations are
	#stopped. For piecewise bicubic PSF fitting, the rate is calculated as
	#the fractional decrease in the difference between the amplitude change
	#and the value when it would stop, as determined by the
	#--psf.bicubic.max-abs-amplitude-change and
	#--psf.bicubic.max-rel-amplitude-change parameters. For SDK PSF fitting
	#<++>.
	min-convergence-rate = -10.0

	#No more than this number if iterations will be performed. If convergence
	#is not achieved before then, the latest estimates are output and an
	#exception is thrown. A negative value allows infinite iterations. A
	#value of zero, along with an initial guess for the PSF causes only the
	#amplitudes to be fit for PSF fitting photometry with a known PSF. It is
	#an error to pass a value of zero for this option and not specify and
	#initial guess for the PSF.
	max-iterations = 10000

    #If this option is passed, sources dropped during source selection 
    #will not have their amplitudes fit for. Instead their PSF fit 
    #fluxes/magnitudes and associated errors will all be NaN. This is 
    #useful if PSF fitting is done solely for the purpose of getting a 
    #PSF map.
    ignore-dropped = false

	#Configuration only relevant for elliptical Gaussian PSF model fitting.
	[psf.sdk]
		#The minimum value for the S PSF paramater to consider for the fit.
		minS = 0.1

		#The maximum value for the S PSF paramater to consider for the fit.
		#You need to be careful with this. Severe overestimation will result
		#in painfully slow PSF fitting.
		maxS = 2.0

		#The required size of the simplex before a fit is declared converged.
		fit-tolerance = 0.001

		#Should fitting be done using the GSL simplex minimizer instead of 
		#the much faster Newton-Raphson.
		use-simplex = false

		#Specifies the maximum value of any term appearing in an exponent
		#when calculating PSF integrals. Larger values typically result in
		#faster code, but could lead to extreme numerical round-off errors.
		max-exp-coef = 1

		#Absolute precision up to which integrals of SDK PSFs should be
		#calculated by default (aperture photometry and PSF fitting tune this
		#to optimize for speed).
		abs-int-precision = 0

		#Relative precision up to which integrals of SDK PSFs should be
		#calculated by default (aperture photometry and PSF fitting tune this
		#to optimize for speed).
		rel-int-precision = 1e-5

	#Confifuration only relevant for piecewise bicubic PSF models fitting.
	[psf.bicubic]

		#A comma separated list of grid boundaries. Can either be a single
		#list, in which case it is used for both the horizontal and vertical
		#boundaries. If different splitting is desired in the two directions,
		#two lists should be supplied separated by ';'. The first list should
		#contain the vertical (x) boundaries and the second list gives the
		#horizontal (y) ones.
		grid = %(grid)s

		#A number defining individual pixels to exclude from piceewise
		#bicubic PSF fits. Ignored for elliptical Gaussian PSF fits. Pixels
		#with fitting residuals (normalized by the standard deviation) bigger
		#than this value are excluded. If zero, no pixels are rejected.
		pixrej = 100

		#This aperture is used to derive an initial guess for the amplitudes
		#of sources when fitting for a piecewise bicubic PSF model by doing
		#aperture photometry assuming a perfectly flat PSF.
		initial-aperture = 5.0

		#The absolute root of sum squares tolerance of the source amplitude
		#changes in order to declare the piecewise bicubic PSF fitting
		#converged.
		max-abs-amplitude-change = 0

		#The relative root of sum squares tolerance of the source amplitude
		#changes in order to declare the piecewise bicubic PSF fitting
		#converged.
		max-rel-amplitude-change = 1e-8

		#How much smoothing penalty to impose when fitting the PSF. Comment
		#out for no smoothing. Value can be both positive and negative and
		#will always result in smoothing (less for negative values).
#		smoothing = 0 



#############################################################################
#Options controlling how to perform aperture photometry.
[ap]
	#Comma separated list of apertures to use.
	aperture =2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.65,3.7,3.75,3.8,3.85,3.9,3.95,4.0,4.05,4.1,4.15,4.2,4.25,4.3,4.35,4.4,4.5,4.6,4.7,4.8,4.9,5.0

	#A value to add to the error estimate of a pixel (intended to represent 
	#things like readout noise, truncation noise etc.).
	const-error = 0
	

#############################################################################
#Options defining how to construct and select the sources to fit on.
[src]
	#If this option is true and the PSF model is "bicubic", all pixels that
	#at least partially overlap with the grid are assigned to the
	#corresponding source. This option is ignored for sdk PSF models.
	cover-bicubic-grid = true

	#How far above the background (in units of RMS) should pixels be to still
	#be considered part of a source. Ignored if the piecewise bibucic PSF
	#grid is used to select source pixels (cover-bicubic-grid option).
	min-signal-to-noise = 3

	#If this option has a positive value, pixels are assigned to sources in
	#circular apertures (the smallest such that all pixels that pass the
	#signal to noise cut are still assigned to the source). If an aperture
	#larger than this value is required, an exception is thrown.
	max-aperture = 10 

	#If more than this fraction of the pixels assigned to a source are
	#saturated, the source is excluded from the fit.
	max-sat-frac = 0.02

	#The minimum number of pixels that must be assigned to a source in order
	#to include the source is the PSF fit.
	min-pix = 5

	#The maximum number of pixels that car be assigned to a source before
	#excluding the source from the PSF fit.
	max-pix = 1000

	#The maximum number of sources to include in the fit for the PSF shape.
	#The rest of the sources get their amplitudes fit and are used to
	#determine the overlaps. Sources are ranked according to the sum of
	#(background excess)/(pixel variance+background variance) of their
	#individual non-saturated pixels.
	max-count = 6000

#############################################################################
#Options defining how to measure the background behing the sources.
[bg]
    #Specifies that the background has already been subtracted from the
    #input image.
    zero = false

	#Specifies that an annulus with the given inner radius centered around
	#the source should be used to estimate the background and its error.
	annulus = 6,7

	#If a source's background estimate is based on less than this number of
	#pixels, the source is excluded from the fit.
	min-pix = 5

#############################################################################
#Options defining how to visualize PSF maps.
[visualize]
	#The number of splittings to use in the x direction.
	eval-x = 220,2000,440

	#The number of splittings to use in the y direction.
	eval-y = 220,2000,440

	#The resolution in the x direction of an individual PSF displayed.
	psf-x-resolution = 440

	#The resolution in the y direction of an individual PSF displayed.
	psf-y-resolution = 440

	#The flux to give the displayed PSFs.
	flux = 1e6

	#The background to add under the displayed PSFs.
	bg = 1

    #The variables that the PSF map depends on.
    psfmap-variables = a,b

	[visualize.sdk]
		#The minimum offset in x from the center of the PSF to display.
		min-x = -5

		#The maximum offset in x from the center of the PSF to display.
		max-x = 5

		#The minimum offset in y from the center of the PSF to display.
		min-y = -5

		#The maximum offset in y from the center of the PSF to display.
		max-y = 5
