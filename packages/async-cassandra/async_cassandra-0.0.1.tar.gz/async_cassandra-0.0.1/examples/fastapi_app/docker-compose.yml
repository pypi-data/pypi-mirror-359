version: '3.8'

# FastAPI + async-cassandra Example Application
# This compose file sets up a complete development environment

services:
  # Apache Cassandra Database
  cassandra:
    image: cassandra:5.0
    container_name: fastapi-cassandra
    ports:
      - "9042:9042"  # CQL native transport port
    environment:
      # Cluster configuration
      - CASSANDRA_CLUSTER_NAME=FastAPICluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch

      # Memory settings (optimized for stability)
      - HEAP_NEWSIZE=3G
      - MAX_HEAP_SIZE=12G
      - JVM_OPTS=-XX:+UseG1GC -XX:G1RSetUpdatingPauseTimePercent=5 -XX:MaxGCPauseMillis=300

      # Enable authentication (optional)
      # - CASSANDRA_AUTHENTICATOR=PasswordAuthenticator
      # - CASSANDRA_AUTHORIZER=CassandraAuthorizer

    volumes:
      # Persist data between container restarts
      - cassandra_data:/var/lib/cassandra

    # Resource limits for stability
    deploy:
      resources:
        limits:
          memory: 16G
        reservations:
          memory: 16G

    healthcheck:
      test: ["CMD-SHELL", "nodetool info | grep -q 'Native Transport active: true' && cqlsh -e 'SELECT now() FROM system.local'"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 90s

    networks:
      - app-network

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi-app
    ports:
      - "8000:8000"  # FastAPI port
    environment:
      # Cassandra connection settings
      - CASSANDRA_HOSTS=cassandra
      - CASSANDRA_PORT=9042

      # Application settings
      - LOG_LEVEL=INFO

      # Optional: Authentication (if enabled in Cassandra)
      # - CASSANDRA_USERNAME=cassandra
      # - CASSANDRA_PASSWORD=cassandra

    depends_on:
      cassandra:
        condition: service_healthy

    # Restart policy
    restart: unless-stopped

    # Resource limits (adjust based on needs)
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

    networks:
      - app-network

    # Mount source code for development (remove in production)
    volumes:
      - ./main.py:/app/main.py:ro

    # Override command for development with auto-reload
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Optional: Prometheus for metrics
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   networks:
  #     - app-network

  # Optional: Grafana for visualization
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - app-network

# Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  cassandra_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local
