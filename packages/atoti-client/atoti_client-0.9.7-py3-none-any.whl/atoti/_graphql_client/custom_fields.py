# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from .base_operation import GraphQLField
from .custom_typing_fields import (
    AddExternalDatabaseTableOutputGraphQLField,
    AggregateCacheGraphQLField,
    AggregateProviderFilterLeafConditionUnion,
    AggregateProviderFilterMembershipConditionGraphQLField,
    AggregateProviderFilterRelationalConditionGraphQLField,
    AggregateProviderGraphQLField,
    ClusterGraphQLField,
    ClusterNodeGraphQLField,
    ColumnGraphQLField,
    ConnectToExternalDatabaseOutputGraphQLField,
    CreateAggregateProviderOutputGraphQLField,
    CreateCubeOutputGraphQLField,
    CreateCubeRestrictionOutputGraphQLField,
    CreateHierarchyOutputGraphQLField,
    CreateJoinOutputGraphQLField,
    CreateMeasureOutputGraphQLField,
    CreateMemberPropertyOutputGraphQLField,
    CreateTableOutputGraphQLField,
    CubeGraphQLField,
    CubeRestrictionGraphQLField,
    CubeRestrictionLeafConditionUnion,
    CubeRestrictionMembershipConditionGraphQLField,
    CubeRestrictionRelationalConditionGraphQLField,
    DatabaseGraphQLField,
    DataLoadUnion,
    DataModelGraphQLField,
    DataSourceDataModelUnion,
    DataSourceGraphQLField,
    DataSourceLoadUnion,
    DeleteAggregateProviderOutputGraphQLField,
    DeleteCubeRestrictionOutputGraphQLField,
    DeleteHierarchyOutputGraphQLField,
    DeleteJoinOutputGraphQLField,
    DeleteMeasureOutputGraphQLField,
    DeleteMemberPropertyOutputGraphQLField,
    DeleteTableOutputGraphQLField,
    DimensionGraphQLField,
    ExternalDatabaseCatalogGraphQLField,
    ExternalDatabaseColumnGraphQLField,
    ExternalDatabaseDataSourceDataModelGraphQLField,
    ExternalDatabaseGraphQLField,
    ExternalDatabaseSchemaGraphQLField,
    ExternalDatabaseTableGraphQLField,
    FileSystemDataSourceDataModelGraphQLField,
    FileSystemDataSourceLoadGraphQLField,
    FileSystemFileGraphQLField,
    HierarchyGraphQLField,
    JdbcDataSourceLoadGraphQLField,
    JoinGraphQLField,
    JoinMappingItemGraphQLField,
    LevelGraphQLField,
    MeasureGraphQLField,
    MemberPropertyGraphQLField,
    NamedDataSourceLoadGraphQLField,
    NodeGraphQLField,
    ParameterGraphQLField,
    SelectionFieldGraphQLField,
    TableGraphQLField,
    UnloadMembersFromDataCubeOutputGraphQLField,
    UpdateableCellsGraphQLField,
    UpdateColumnOutputGraphQLField,
    UpdateCubeOutputGraphQLField,
    UpdateDataModelOutputGraphQLField,
    UpdateHierarchyOutputGraphQLField,
)


class AddExternalDatabaseTableOutputFields(GraphQLField):
    @classmethod
    def table(cls) -> "TableFields":
        return TableFields("table")

    def fields(
        self,
        *subfields: Union[AddExternalDatabaseTableOutputGraphQLField, "TableFields"]
    ) -> "AddExternalDatabaseTableOutputFields":
        """Subfields should come from the AddExternalDatabaseTableOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddExternalDatabaseTableOutputFields":
        self._alias = alias
        return self


class AggregateCacheFields(GraphQLField):
    capacity: "AggregateCacheGraphQLField" = AggregateCacheGraphQLField("capacity")

    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    @classmethod
    def measures(cls) -> "MeasureFields":
        return MeasureFields("measures")

    def fields(
        self,
        *subfields: Union[AggregateCacheGraphQLField, "CubeFields", "MeasureFields"]
    ) -> "AggregateCacheFields":
        """Subfields should come from the AggregateCacheFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AggregateCacheFields":
        self._alias = alias
        return self


class AggregateProviderFields(GraphQLField):
    filter: "AggregateProviderFilterLeafConditionUnion" = (
        AggregateProviderFilterLeafConditionUnion("filter")
    )
    id: "AggregateProviderGraphQLField" = AggregateProviderGraphQLField("id")

    @classmethod
    def levels(cls) -> "LevelFields":
        return LevelFields("levels")

    @classmethod
    def measures(cls) -> "MeasureFields":
        return MeasureFields("measures")

    name: "AggregateProviderGraphQLField" = AggregateProviderGraphQLField("name")
    partitioning: "AggregateProviderGraphQLField" = AggregateProviderGraphQLField(
        "partitioning"
    )
    plugin_key: "AggregateProviderGraphQLField" = AggregateProviderGraphQLField(
        "pluginKey"
    )

    def fields(
        self,
        *subfields: Union[
            AggregateProviderGraphQLField,
            "AggregateProviderFilterLeafConditionUnion",
            "LevelFields",
            "MeasureFields",
        ]
    ) -> "AggregateProviderFields":
        """Subfields should come from the AggregateProviderFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AggregateProviderFields":
        self._alias = alias
        return self


class AggregateProviderFilterMembershipConditionFields(GraphQLField):
    elements: "AggregateProviderFilterMembershipConditionGraphQLField" = (
        AggregateProviderFilterMembershipConditionGraphQLField("elements")
    )
    operator: "AggregateProviderFilterMembershipConditionGraphQLField" = (
        AggregateProviderFilterMembershipConditionGraphQLField("operator")
    )

    @classmethod
    def subject(cls) -> "LevelFields":
        return LevelFields("subject")

    def fields(
        self,
        *subfields: Union[
            AggregateProviderFilterMembershipConditionGraphQLField, "LevelFields"
        ]
    ) -> "AggregateProviderFilterMembershipConditionFields":
        """Subfields should come from the AggregateProviderFilterMembershipConditionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AggregateProviderFilterMembershipConditionFields":
        self._alias = alias
        return self


class AggregateProviderFilterRelationalConditionFields(GraphQLField):
    operator: "AggregateProviderFilterRelationalConditionGraphQLField" = (
        AggregateProviderFilterRelationalConditionGraphQLField("operator")
    )

    @classmethod
    def subject(cls) -> "LevelFields":
        return LevelFields("subject")

    target: "AggregateProviderFilterRelationalConditionGraphQLField" = (
        AggregateProviderFilterRelationalConditionGraphQLField("target")
    )

    def fields(
        self,
        *subfields: Union[
            AggregateProviderFilterRelationalConditionGraphQLField, "LevelFields"
        ]
    ) -> "AggregateProviderFilterRelationalConditionFields":
        """Subfields should come from the AggregateProviderFilterRelationalConditionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AggregateProviderFilterRelationalConditionFields":
        self._alias = alias
        return self


class ClusterFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "ClusterNodeFields":
        return ClusterNodeFields("nodes")

    type: "ClusterGraphQLField" = ClusterGraphQLField("type")

    def fields(
        self, *subfields: Union[ClusterGraphQLField, "ClusterNodeFields"]
    ) -> "ClusterFields":
        """Subfields should come from the ClusterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClusterFields":
        self._alias = alias
        return self


class ClusterNodeFields(GraphQLField):
    name: "ClusterNodeGraphQLField" = ClusterNodeGraphQLField("name")

    def fields(self, *subfields: ClusterNodeGraphQLField) -> "ClusterNodeFields":
        """Subfields should come from the ClusterNodeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClusterNodeFields":
        self._alias = alias
        return self


class ColumnFields(GraphQLField):
    data_type: "ColumnGraphQLField" = ColumnGraphQLField("dataType")
    default_value: "ColumnGraphQLField" = ColumnGraphQLField("defaultValue")
    id: "ColumnGraphQLField" = ColumnGraphQLField("id")
    name: "ColumnGraphQLField" = ColumnGraphQLField("name")

    @classmethod
    def table(cls) -> "TableFields":
        return TableFields("table")

    def fields(
        self, *subfields: Union[ColumnGraphQLField, "TableFields"]
    ) -> "ColumnFields":
        """Subfields should come from the ColumnFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ColumnFields":
        self._alias = alias
        return self


class ConnectToExternalDatabaseOutputFields(GraphQLField):
    @classmethod
    def database(cls) -> "ExternalDatabaseFields":
        return ExternalDatabaseFields("database")

    def fields(
        self,
        *subfields: Union[
            ConnectToExternalDatabaseOutputGraphQLField, "ExternalDatabaseFields"
        ]
    ) -> "ConnectToExternalDatabaseOutputFields":
        """Subfields should come from the ConnectToExternalDatabaseOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConnectToExternalDatabaseOutputFields":
        self._alias = alias
        return self


class CreateAggregateProviderOutputFields(GraphQLField):
    @classmethod
    def aggregate_provider(cls) -> "AggregateProviderFields":
        return AggregateProviderFields("aggregate_provider")

    def fields(
        self,
        *subfields: Union[
            CreateAggregateProviderOutputGraphQLField, "AggregateProviderFields"
        ]
    ) -> "CreateAggregateProviderOutputFields":
        """Subfields should come from the CreateAggregateProviderOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateAggregateProviderOutputFields":
        self._alias = alias
        return self


class CreateCubeOutputFields(GraphQLField):
    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    def fields(
        self, *subfields: Union[CreateCubeOutputGraphQLField, "CubeFields"]
    ) -> "CreateCubeOutputFields":
        """Subfields should come from the CreateCubeOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCubeOutputFields":
        self._alias = alias
        return self


class CreateCubeRestrictionOutputFields(GraphQLField):
    @classmethod
    def restriction(cls) -> "CubeRestrictionFields":
        return CubeRestrictionFields("restriction")

    def fields(
        self,
        *subfields: Union[
            CreateCubeRestrictionOutputGraphQLField, "CubeRestrictionFields"
        ]
    ) -> "CreateCubeRestrictionOutputFields":
        """Subfields should come from the CreateCubeRestrictionOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCubeRestrictionOutputFields":
        self._alias = alias
        return self


class CreateHierarchyOutputFields(GraphQLField):
    @classmethod
    def hierarchy(cls) -> "HierarchyFields":
        return HierarchyFields("hierarchy")

    def fields(
        self, *subfields: Union[CreateHierarchyOutputGraphQLField, "HierarchyFields"]
    ) -> "CreateHierarchyOutputFields":
        """Subfields should come from the CreateHierarchyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateHierarchyOutputFields":
        self._alias = alias
        return self


class CreateJoinOutputFields(GraphQLField):
    @classmethod
    def join(cls) -> "JoinFields":
        return JoinFields("join")

    def fields(
        self, *subfields: Union[CreateJoinOutputGraphQLField, "JoinFields"]
    ) -> "CreateJoinOutputFields":
        """Subfields should come from the CreateJoinOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateJoinOutputFields":
        self._alias = alias
        return self


class CreateMeasureOutputFields(GraphQLField):
    @classmethod
    def measure(cls) -> "MeasureFields":
        return MeasureFields("measure")

    def fields(
        self, *subfields: Union[CreateMeasureOutputGraphQLField, "MeasureFields"]
    ) -> "CreateMeasureOutputFields":
        """Subfields should come from the CreateMeasureOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateMeasureOutputFields":
        self._alias = alias
        return self


class CreateMemberPropertyOutputFields(GraphQLField):
    @classmethod
    def member_property(cls) -> "MemberPropertyFields":
        return MemberPropertyFields("member_property")

    def fields(
        self,
        *subfields: Union[
            CreateMemberPropertyOutputGraphQLField, "MemberPropertyFields"
        ]
    ) -> "CreateMemberPropertyOutputFields":
        """Subfields should come from the CreateMemberPropertyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateMemberPropertyOutputFields":
        self._alias = alias
        return self


class CreateTableOutputFields(GraphQLField):
    @classmethod
    def table(cls) -> "TableFields":
        return TableFields("table")

    def fields(
        self, *subfields: Union[CreateTableOutputGraphQLField, "TableFields"]
    ) -> "CreateTableOutputFields":
        """Subfields should come from the CreateTableOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateTableOutputFields":
        self._alias = alias
        return self


class CubeFields(GraphQLField):
    @classmethod
    def aggregate_cache(cls) -> "AggregateCacheFields":
        return AggregateCacheFields("aggregate_cache")

    @classmethod
    def aggregate_provider(cls, name: str) -> "AggregateProviderFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AggregateProviderFields(
            "aggregate_provider", arguments=cleared_arguments
        )

    @classmethod
    def aggregate_providers(cls) -> "AggregateProviderFields":
        return AggregateProviderFields("aggregate_providers")

    @classmethod
    def cluster(cls) -> "ClusterFields":
        return ClusterFields("cluster")

    @classmethod
    def data_model(cls) -> "DataModelFields":
        return DataModelFields("data_model")

    @classmethod
    def dimension(cls, name: str) -> "DimensionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DimensionFields("dimension", arguments=cleared_arguments)

    @classmethod
    def dimensions(cls) -> "DimensionFields":
        return DimensionFields("dimensions")

    @classmethod
    def fact_table(cls) -> "TableFields":
        return TableFields("fact_table")

    id: "CubeGraphQLField" = CubeGraphQLField("id")

    @classmethod
    def measure(cls, name: str) -> "MeasureFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MeasureFields("measure", arguments=cleared_arguments)

    @classmethod
    def measures(cls) -> "MeasureFields":
        return MeasureFields("measures")

    name: "CubeGraphQLField" = CubeGraphQLField("name")

    @classmethod
    def restriction(cls, role: str) -> "CubeRestrictionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "role": {"type": "String!", "value": role}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CubeRestrictionFields("restriction", arguments=cleared_arguments)

    @classmethod
    def restrictions(cls) -> "CubeRestrictionFields":
        return CubeRestrictionFields("restrictions")

    @classmethod
    def updateable_cells(cls) -> "UpdateableCellsFields":
        return UpdateableCellsFields("updateable_cells")

    def fields(
        self,
        *subfields: Union[
            CubeGraphQLField,
            "AggregateCacheFields",
            "AggregateProviderFields",
            "ClusterFields",
            "CubeRestrictionFields",
            "DataModelFields",
            "DimensionFields",
            "MeasureFields",
            "TableFields",
            "UpdateableCellsFields",
        ]
    ) -> "CubeFields":
        """Subfields should come from the CubeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CubeFields":
        self._alias = alias
        return self


class CubeRestrictionFields(GraphQLField):
    condition: "CubeRestrictionLeafConditionUnion" = CubeRestrictionLeafConditionUnion(
        "condition"
    )
    id: "CubeRestrictionGraphQLField" = CubeRestrictionGraphQLField("id")
    role: "CubeRestrictionGraphQLField" = CubeRestrictionGraphQLField("role")

    def fields(
        self,
        *subfields: Union[
            CubeRestrictionGraphQLField, "CubeRestrictionLeafConditionUnion"
        ]
    ) -> "CubeRestrictionFields":
        """Subfields should come from the CubeRestrictionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CubeRestrictionFields":
        self._alias = alias
        return self


class CubeRestrictionMembershipConditionFields(GraphQLField):
    elements: "CubeRestrictionMembershipConditionGraphQLField" = (
        CubeRestrictionMembershipConditionGraphQLField("elements")
    )
    operator: "CubeRestrictionMembershipConditionGraphQLField" = (
        CubeRestrictionMembershipConditionGraphQLField("operator")
    )

    @classmethod
    def subject(cls) -> "LevelFields":
        return LevelFields("subject")

    def fields(
        self,
        *subfields: Union[CubeRestrictionMembershipConditionGraphQLField, "LevelFields"]
    ) -> "CubeRestrictionMembershipConditionFields":
        """Subfields should come from the CubeRestrictionMembershipConditionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CubeRestrictionMembershipConditionFields":
        self._alias = alias
        return self


class CubeRestrictionRelationalConditionFields(GraphQLField):
    operator: "CubeRestrictionRelationalConditionGraphQLField" = (
        CubeRestrictionRelationalConditionGraphQLField("operator")
    )

    @classmethod
    def subject(cls) -> "LevelFields":
        return LevelFields("subject")

    target: "CubeRestrictionRelationalConditionGraphQLField" = (
        CubeRestrictionRelationalConditionGraphQLField("target")
    )

    def fields(
        self,
        *subfields: Union[CubeRestrictionRelationalConditionGraphQLField, "LevelFields"]
    ) -> "CubeRestrictionRelationalConditionFields":
        """Subfields should come from the CubeRestrictionRelationalConditionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CubeRestrictionRelationalConditionFields":
        self._alias = alias
        return self


class DataModelFields(GraphQLField):
    @classmethod
    def cube(cls, name: str) -> "CubeFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CubeFields("cube", arguments=cleared_arguments)

    @classmethod
    def cubes(cls) -> "CubeFields":
        return CubeFields("cubes")

    @classmethod
    def database(cls) -> "DatabaseFields":
        return DatabaseFields("database")

    id: "DataModelGraphQLField" = DataModelGraphQLField("id")
    transaction_id: "DataModelGraphQLField" = DataModelGraphQLField("transactionId")

    def fields(
        self, *subfields: Union[DataModelGraphQLField, "CubeFields", "DatabaseFields"]
    ) -> "DataModelFields":
        """Subfields should come from the DataModelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataModelFields":
        self._alias = alias
        return self


class DataSourceFields(GraphQLField):
    data_model: "DataSourceDataModelUnion" = DataSourceDataModelUnion("dataModel")
    id: "DataSourceGraphQLField" = DataSourceGraphQLField("id")
    key: "DataSourceGraphQLField" = DataSourceGraphQLField("key")
    name: "DataSourceGraphQLField" = DataSourceGraphQLField("name")

    def fields(
        self, *subfields: Union[DataSourceGraphQLField, "DataSourceDataModelUnion"]
    ) -> "DataSourceFields":
        """Subfields should come from the DataSourceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataSourceFields":
        self._alias = alias
        return self


class DatabaseFields(GraphQLField):
    owners: "DatabaseGraphQLField" = DatabaseGraphQLField("owners")
    readers: "DatabaseGraphQLField" = DatabaseGraphQLField("readers")

    @classmethod
    def table(cls, name: str) -> "TableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableFields("table", arguments=cleared_arguments)

    @classmethod
    def tables(cls) -> "TableFields":
        return TableFields("tables")

    def fields(
        self, *subfields: Union[DatabaseGraphQLField, "TableFields"]
    ) -> "DatabaseFields":
        """Subfields should come from the DatabaseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatabaseFields":
        self._alias = alias
        return self


class DeleteAggregateProviderOutputFields(GraphQLField):
    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    status: "DeleteAggregateProviderOutputGraphQLField" = (
        DeleteAggregateProviderOutputGraphQLField("status")
    )

    def fields(
        self, *subfields: Union[DeleteAggregateProviderOutputGraphQLField, "CubeFields"]
    ) -> "DeleteAggregateProviderOutputFields":
        """Subfields should come from the DeleteAggregateProviderOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteAggregateProviderOutputFields":
        self._alias = alias
        return self


class DeleteCubeRestrictionOutputFields(GraphQLField):
    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    status: "DeleteCubeRestrictionOutputGraphQLField" = (
        DeleteCubeRestrictionOutputGraphQLField("status")
    )

    def fields(
        self, *subfields: Union[DeleteCubeRestrictionOutputGraphQLField, "CubeFields"]
    ) -> "DeleteCubeRestrictionOutputFields":
        """Subfields should come from the DeleteCubeRestrictionOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteCubeRestrictionOutputFields":
        self._alias = alias
        return self


class DeleteHierarchyOutputFields(GraphQLField):
    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    status: "DeleteHierarchyOutputGraphQLField" = DeleteHierarchyOutputGraphQLField(
        "status"
    )

    def fields(
        self, *subfields: Union[DeleteHierarchyOutputGraphQLField, "CubeFields"]
    ) -> "DeleteHierarchyOutputFields":
        """Subfields should come from the DeleteHierarchyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteHierarchyOutputFields":
        self._alias = alias
        return self


class DeleteJoinOutputFields(GraphQLField):
    @classmethod
    def source(cls) -> "TableFields":
        return TableFields("source")

    status: "DeleteJoinOutputGraphQLField" = DeleteJoinOutputGraphQLField("status")

    def fields(
        self, *subfields: Union[DeleteJoinOutputGraphQLField, "TableFields"]
    ) -> "DeleteJoinOutputFields":
        """Subfields should come from the DeleteJoinOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteJoinOutputFields":
        self._alias = alias
        return self


class DeleteMeasureOutputFields(GraphQLField):
    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    status: "DeleteMeasureOutputGraphQLField" = DeleteMeasureOutputGraphQLField(
        "status"
    )

    def fields(
        self, *subfields: Union[DeleteMeasureOutputGraphQLField, "CubeFields"]
    ) -> "DeleteMeasureOutputFields":
        """Subfields should come from the DeleteMeasureOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteMeasureOutputFields":
        self._alias = alias
        return self


class DeleteMemberPropertyOutputFields(GraphQLField):
    @classmethod
    def level(cls) -> "LevelFields":
        return LevelFields("level")

    status: "DeleteMemberPropertyOutputGraphQLField" = (
        DeleteMemberPropertyOutputGraphQLField("status")
    )

    def fields(
        self, *subfields: Union[DeleteMemberPropertyOutputGraphQLField, "LevelFields"]
    ) -> "DeleteMemberPropertyOutputFields":
        """Subfields should come from the DeleteMemberPropertyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteMemberPropertyOutputFields":
        self._alias = alias
        return self


class DeleteTableOutputFields(GraphQLField):
    @classmethod
    def database(cls) -> "DatabaseFields":
        return DatabaseFields("database")

    status: "DeleteTableOutputGraphQLField" = DeleteTableOutputGraphQLField("status")

    def fields(
        self, *subfields: Union[DeleteTableOutputGraphQLField, "DatabaseFields"]
    ) -> "DeleteTableOutputFields":
        """Subfields should come from the DeleteTableOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteTableOutputFields":
        self._alias = alias
        return self


class DimensionFields(GraphQLField):
    caption: "DimensionGraphQLField" = DimensionGraphQLField("caption")

    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    @classmethod
    def default_hierarchy(cls) -> "HierarchyFields":
        return HierarchyFields("default_hierarchy")

    @classmethod
    def hierarchies(cls) -> "HierarchyFields":
        return HierarchyFields("hierarchies")

    @classmethod
    def hierarchy(cls, name: str) -> "HierarchyFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFields("hierarchy", arguments=cleared_arguments)

    id: "DimensionGraphQLField" = DimensionGraphQLField("id")
    name: "DimensionGraphQLField" = DimensionGraphQLField("name")

    def fields(
        self, *subfields: Union[DimensionGraphQLField, "CubeFields", "HierarchyFields"]
    ) -> "DimensionFields":
        """Subfields should come from the DimensionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DimensionFields":
        self._alias = alias
        return self


class ExternalDatabaseFields(GraphQLField):
    @classmethod
    def data_model(cls) -> "ExternalDatabaseDataSourceDataModelFields":
        return ExternalDatabaseDataSourceDataModelFields("data_model")

    def fields(
        self,
        *subfields: Union[
            ExternalDatabaseGraphQLField, "ExternalDatabaseDataSourceDataModelFields"
        ]
    ) -> "ExternalDatabaseFields":
        """Subfields should come from the ExternalDatabaseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalDatabaseFields":
        self._alias = alias
        return self


class ExternalDatabaseCatalogFields(GraphQLField):
    @classmethod
    def data_model(cls) -> "ExternalDatabaseDataSourceDataModelFields":
        return ExternalDatabaseDataSourceDataModelFields("data_model")

    id: "ExternalDatabaseCatalogGraphQLField" = ExternalDatabaseCatalogGraphQLField(
        "id"
    )
    name: "ExternalDatabaseCatalogGraphQLField" = ExternalDatabaseCatalogGraphQLField(
        "name"
    )

    @classmethod
    def schema(cls, name: str) -> "ExternalDatabaseSchemaFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExternalDatabaseSchemaFields("schema", arguments=cleared_arguments)

    @classmethod
    def schemas(cls) -> "ExternalDatabaseSchemaFields":
        return ExternalDatabaseSchemaFields("schemas")

    def fields(
        self,
        *subfields: Union[
            ExternalDatabaseCatalogGraphQLField,
            "ExternalDatabaseDataSourceDataModelFields",
            "ExternalDatabaseSchemaFields",
        ]
    ) -> "ExternalDatabaseCatalogFields":
        """Subfields should come from the ExternalDatabaseCatalogFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalDatabaseCatalogFields":
        self._alias = alias
        return self


class ExternalDatabaseColumnFields(GraphQLField):
    data_type: "ExternalDatabaseColumnGraphQLField" = (
        ExternalDatabaseColumnGraphQLField("dataType")
    )
    id: "ExternalDatabaseColumnGraphQLField" = ExternalDatabaseColumnGraphQLField("id")
    name: "ExternalDatabaseColumnGraphQLField" = ExternalDatabaseColumnGraphQLField(
        "name"
    )

    @classmethod
    def table(cls) -> "ExternalDatabaseTableFields":
        return ExternalDatabaseTableFields("table")

    def fields(
        self,
        *subfields: Union[
            ExternalDatabaseColumnGraphQLField, "ExternalDatabaseTableFields"
        ]
    ) -> "ExternalDatabaseColumnFields":
        """Subfields should come from the ExternalDatabaseColumnFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalDatabaseColumnFields":
        self._alias = alias
        return self


class ExternalDatabaseDataSourceDataModelFields(GraphQLField):
    @classmethod
    def catalog(cls, name: str) -> "ExternalDatabaseCatalogFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExternalDatabaseCatalogFields("catalog", arguments=cleared_arguments)

    @classmethod
    def catalogs(cls) -> "ExternalDatabaseCatalogFields":
        return ExternalDatabaseCatalogFields("catalogs")

    @classmethod
    def data_source(cls) -> "DataSourceFields":
        return DataSourceFields("data_source")

    id: "ExternalDatabaseDataSourceDataModelGraphQLField" = (
        ExternalDatabaseDataSourceDataModelGraphQLField("id")
    )

    def fields(
        self,
        *subfields: Union[
            ExternalDatabaseDataSourceDataModelGraphQLField,
            "DataSourceFields",
            "ExternalDatabaseCatalogFields",
        ]
    ) -> "ExternalDatabaseDataSourceDataModelFields":
        """Subfields should come from the ExternalDatabaseDataSourceDataModelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalDatabaseDataSourceDataModelFields":
        self._alias = alias
        return self


class ExternalDatabaseSchemaFields(GraphQLField):
    @classmethod
    def catalog(cls) -> "ExternalDatabaseCatalogFields":
        return ExternalDatabaseCatalogFields("catalog")

    id: "ExternalDatabaseSchemaGraphQLField" = ExternalDatabaseSchemaGraphQLField("id")
    name: "ExternalDatabaseSchemaGraphQLField" = ExternalDatabaseSchemaGraphQLField(
        "name"
    )

    @classmethod
    def table(cls, name: str) -> "ExternalDatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExternalDatabaseTableFields("table", arguments=cleared_arguments)

    @classmethod
    def tables(cls) -> "ExternalDatabaseTableFields":
        return ExternalDatabaseTableFields("tables")

    def fields(
        self,
        *subfields: Union[
            ExternalDatabaseSchemaGraphQLField,
            "ExternalDatabaseCatalogFields",
            "ExternalDatabaseTableFields",
        ]
    ) -> "ExternalDatabaseSchemaFields":
        """Subfields should come from the ExternalDatabaseSchemaFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalDatabaseSchemaFields":
        self._alias = alias
        return self


class ExternalDatabaseTableFields(GraphQLField):
    @classmethod
    def column(cls, name: str) -> "ExternalDatabaseColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ExternalDatabaseColumnFields("column", arguments=cleared_arguments)

    @classmethod
    def columns(cls) -> "ExternalDatabaseColumnFields":
        return ExternalDatabaseColumnFields("columns")

    id: "ExternalDatabaseTableGraphQLField" = ExternalDatabaseTableGraphQLField("id")
    name: "ExternalDatabaseTableGraphQLField" = ExternalDatabaseTableGraphQLField(
        "name"
    )

    @classmethod
    def schema(cls) -> "ExternalDatabaseSchemaFields":
        return ExternalDatabaseSchemaFields("schema")

    def fields(
        self,
        *subfields: Union[
            ExternalDatabaseTableGraphQLField,
            "ExternalDatabaseColumnFields",
            "ExternalDatabaseSchemaFields",
        ]
    ) -> "ExternalDatabaseTableFields":
        """Subfields should come from the ExternalDatabaseTableFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ExternalDatabaseTableFields":
        self._alias = alias
        return self


class FileSystemDataSourceDataModelFields(GraphQLField):
    @classmethod
    def files(cls) -> "FileSystemFileFields":
        return FileSystemFileFields("files")

    def fields(
        self,
        *subfields: Union[
            FileSystemDataSourceDataModelGraphQLField, "FileSystemFileFields"
        ]
    ) -> "FileSystemDataSourceDataModelFields":
        """Subfields should come from the FileSystemDataSourceDataModelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FileSystemDataSourceDataModelFields":
        self._alias = alias
        return self


class FileSystemDataSourceLoadFields(GraphQLField):
    glob: "FileSystemDataSourceLoadGraphQLField" = FileSystemDataSourceLoadGraphQLField(
        "glob"
    )
    type: "FileSystemDataSourceLoadGraphQLField" = FileSystemDataSourceLoadGraphQLField(
        "type"
    )

    def fields(
        self, *subfields: FileSystemDataSourceLoadGraphQLField
    ) -> "FileSystemDataSourceLoadFields":
        """Subfields should come from the FileSystemDataSourceLoadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FileSystemDataSourceLoadFields":
        self._alias = alias
        return self


class FileSystemFileFields(GraphQLField):
    id: "FileSystemFileGraphQLField" = FileSystemFileGraphQLField("id")
    path: "FileSystemFileGraphQLField" = FileSystemFileGraphQLField("path")
    type: "FileSystemFileGraphQLField" = FileSystemFileGraphQLField("type")

    def fields(self, *subfields: FileSystemFileGraphQLField) -> "FileSystemFileFields":
        """Subfields should come from the FileSystemFileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FileSystemFileFields":
        self._alias = alias
        return self


class HierarchyFields(GraphQLField):
    are_members_indexed_by_name: "HierarchyGraphQLField" = HierarchyGraphQLField(
        "areMembersIndexedByName"
    )
    caption: "HierarchyGraphQLField" = HierarchyGraphQLField("caption")

    @classmethod
    def dimension(cls) -> "DimensionFields":
        return DimensionFields("dimension")

    folder: "HierarchyGraphQLField" = HierarchyGraphQLField("folder")
    id: "HierarchyGraphQLField" = HierarchyGraphQLField("id")
    is_slicing: "HierarchyGraphQLField" = HierarchyGraphQLField("isSlicing")
    is_virtual: "HierarchyGraphQLField" = HierarchyGraphQLField("isVirtual")
    is_visible: "HierarchyGraphQLField" = HierarchyGraphQLField("isVisible")

    @classmethod
    def level(cls, name: str) -> "LevelFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LevelFields("level", arguments=cleared_arguments)

    @classmethod
    def levels(cls) -> "LevelFields":
        return LevelFields("levels")

    name: "HierarchyGraphQLField" = HierarchyGraphQLField("name")
    viewers: "HierarchyGraphQLField" = HierarchyGraphQLField("viewers")

    def fields(
        self, *subfields: Union[HierarchyGraphQLField, "DimensionFields", "LevelFields"]
    ) -> "HierarchyFields":
        """Subfields should come from the HierarchyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HierarchyFields":
        self._alias = alias
        return self


class JdbcDataSourceLoadFields(GraphQLField):
    @classmethod
    def parameters(cls) -> "ParameterFields":
        return ParameterFields("parameters")

    query: "JdbcDataSourceLoadGraphQLField" = JdbcDataSourceLoadGraphQLField("query")

    def fields(
        self, *subfields: Union[JdbcDataSourceLoadGraphQLField, "ParameterFields"]
    ) -> "JdbcDataSourceLoadFields":
        """Subfields should come from the JdbcDataSourceLoadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JdbcDataSourceLoadFields":
        self._alias = alias
        return self


class JoinFields(GraphQLField):
    id: "JoinGraphQLField" = JoinGraphQLField("id")
    is_partial: "JoinGraphQLField" = JoinGraphQLField("isPartial")

    @classmethod
    def mapping_item(cls, source_column_name: str) -> "JoinMappingItemFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "sourceColumnName": {"type": "String!", "value": source_column_name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return JoinMappingItemFields("mapping_item", arguments=cleared_arguments)

    @classmethod
    def mapping_items(cls) -> "JoinMappingItemFields":
        return JoinMappingItemFields("mapping_items")

    name: "JoinGraphQLField" = JoinGraphQLField("name")

    @classmethod
    def source(cls) -> "TableFields":
        return TableFields("source")

    @classmethod
    def target(cls) -> "TableFields":
        return TableFields("target")

    target_optionality: "JoinGraphQLField" = JoinGraphQLField("targetOptionality")

    def fields(
        self,
        *subfields: Union[JoinGraphQLField, "JoinMappingItemFields", "TableFields"]
    ) -> "JoinFields":
        """Subfields should come from the JoinFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JoinFields":
        self._alias = alias
        return self


class JoinMappingItemFields(GraphQLField):
    id: "JoinMappingItemGraphQLField" = JoinMappingItemGraphQLField("id")

    @classmethod
    def source(cls) -> "ColumnFields":
        return ColumnFields("source")

    @classmethod
    def target(cls) -> "ColumnFields":
        return ColumnFields("target")

    def fields(
        self, *subfields: Union[JoinMappingItemGraphQLField, "ColumnFields"]
    ) -> "JoinMappingItemFields":
        """Subfields should come from the JoinMappingItemFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JoinMappingItemFields":
        self._alias = alias
        return self


class LevelFields(GraphQLField):
    caption: "LevelGraphQLField" = LevelGraphQLField("caption")

    @classmethod
    def hierarchy(cls) -> "HierarchyFields":
        return HierarchyFields("hierarchy")

    id: "LevelGraphQLField" = LevelGraphQLField("id")

    @classmethod
    def member_properties(cls) -> "MemberPropertyFields":
        return MemberPropertyFields("member_properties")

    @classmethod
    def member_property(cls, name: str) -> "MemberPropertyFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MemberPropertyFields("member_property", arguments=cleared_arguments)

    name: "LevelGraphQLField" = LevelGraphQLField("name")

    @classmethod
    def selection_field(cls) -> "SelectionFieldFields":
        return SelectionFieldFields("selection_field")

    type: "LevelGraphQLField" = LevelGraphQLField("type")

    def fields(
        self,
        *subfields: Union[
            LevelGraphQLField,
            "HierarchyFields",
            "MemberPropertyFields",
            "SelectionFieldFields",
        ]
    ) -> "LevelFields":
        """Subfields should come from the LevelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LevelFields":
        self._alias = alias
        return self


class MeasureFields(GraphQLField):
    caption: "MeasureGraphQLField" = MeasureGraphQLField("caption")

    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    definition_json: "MeasureGraphQLField" = MeasureGraphQLField("definitionJson")
    description: "MeasureGraphQLField" = MeasureGraphQLField("description")
    folder: "MeasureGraphQLField" = MeasureGraphQLField("folder")
    formatter: "MeasureGraphQLField" = MeasureGraphQLField("formatter")
    id: "MeasureGraphQLField" = MeasureGraphQLField("id")
    is_visible: "MeasureGraphQLField" = MeasureGraphQLField("isVisible")
    name: "MeasureGraphQLField" = MeasureGraphQLField("name")

    def fields(
        self, *subfields: Union[MeasureGraphQLField, "CubeFields"]
    ) -> "MeasureFields":
        """Subfields should come from the MeasureFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MeasureFields":
        self._alias = alias
        return self


class MemberPropertyFields(GraphQLField):
    @classmethod
    def column(cls) -> "ColumnFields":
        return ColumnFields("column")

    id: "MemberPropertyGraphQLField" = MemberPropertyGraphQLField("id")

    @classmethod
    def level(cls) -> "LevelFields":
        return LevelFields("level")

    name: "MemberPropertyGraphQLField" = MemberPropertyGraphQLField("name")

    def fields(
        self,
        *subfields: Union[MemberPropertyGraphQLField, "ColumnFields", "LevelFields"]
    ) -> "MemberPropertyFields":
        """Subfields should come from the MemberPropertyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MemberPropertyFields":
        self._alias = alias
        return self


class NamedDataSourceLoadFields(GraphQLField):
    data_source_load: "DataSourceLoadUnion" = DataSourceLoadUnion("dataSourceLoad")
    data_source_name: "NamedDataSourceLoadGraphQLField" = (
        NamedDataSourceLoadGraphQLField("dataSourceName")
    )

    def fields(
        self, *subfields: Union[NamedDataSourceLoadGraphQLField, "DataSourceLoadUnion"]
    ) -> "NamedDataSourceLoadFields":
        """Subfields should come from the NamedDataSourceLoadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NamedDataSourceLoadFields":
        self._alias = alias
        return self


class NodeInterface(GraphQLField):
    id: "NodeGraphQLField" = NodeGraphQLField("id")

    def fields(self, *subfields: NodeGraphQLField) -> "NodeInterface":
        """Subfields should come from the NodeInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NodeInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "NodeInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ParameterFields(GraphQLField):
    name: "ParameterGraphQLField" = ParameterGraphQLField("name")
    value: "ParameterGraphQLField" = ParameterGraphQLField("value")

    def fields(self, *subfields: ParameterGraphQLField) -> "ParameterFields":
        """Subfields should come from the ParameterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ParameterFields":
        self._alias = alias
        return self


class SelectionFieldFields(GraphQLField):
    @classmethod
    def column(cls) -> "ColumnFields":
        return ColumnFields("column")

    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    id: "SelectionFieldGraphQLField" = SelectionFieldGraphQLField("id")

    @classmethod
    def joins(cls) -> "JoinFields":
        return JoinFields("joins")

    def fields(
        self,
        *subfields: Union[
            SelectionFieldGraphQLField, "ColumnFields", "CubeFields", "JoinFields"
        ]
    ) -> "SelectionFieldFields":
        """Subfields should come from the SelectionFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SelectionFieldFields":
        self._alias = alias
        return self


class TableFields(GraphQLField):
    @classmethod
    def column(cls, name: str) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("column", arguments=cleared_arguments)

    @classmethod
    def columns(cls) -> "ColumnFields":
        return ColumnFields("columns")

    data_loads: "DataLoadUnion" = DataLoadUnion("dataLoads")

    @classmethod
    def data_model(cls) -> "DataModelFields":
        return DataModelFields("data_model")

    id: "TableGraphQLField" = TableGraphQLField("id")

    @classmethod
    def join(cls, name: str) -> "JoinFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return JoinFields("join", arguments=cleared_arguments)

    @classmethod
    def joins(cls) -> "JoinFields":
        return JoinFields("joins")

    name: "TableGraphQLField" = TableGraphQLField("name")

    @classmethod
    def primary_index(cls) -> "ColumnFields":
        return ColumnFields("primary_index")

    def fields(
        self,
        *subfields: Union[
            TableGraphQLField,
            "ColumnFields",
            "DataLoadUnion",
            "DataModelFields",
            "JoinFields",
        ]
    ) -> "TableFields":
        """Subfields should come from the TableFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TableFields":
        self._alias = alias
        return self


class UnloadMembersFromDataCubeOutputFields(GraphQLField):
    @classmethod
    def level(cls) -> "LevelFields":
        return LevelFields("level")

    def fields(
        self,
        *subfields: Union[UnloadMembersFromDataCubeOutputGraphQLField, "LevelFields"]
    ) -> "UnloadMembersFromDataCubeOutputFields":
        """Subfields should come from the UnloadMembersFromDataCubeOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnloadMembersFromDataCubeOutputFields":
        self._alias = alias
        return self


class UpdateColumnOutputFields(GraphQLField):
    @classmethod
    def column(cls) -> "ColumnFields":
        return ColumnFields("column")

    def fields(
        self, *subfields: Union[UpdateColumnOutputGraphQLField, "ColumnFields"]
    ) -> "UpdateColumnOutputFields":
        """Subfields should come from the UpdateColumnOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateColumnOutputFields":
        self._alias = alias
        return self


class UpdateCubeOutputFields(GraphQLField):
    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    def fields(
        self, *subfields: Union[UpdateCubeOutputGraphQLField, "CubeFields"]
    ) -> "UpdateCubeOutputFields":
        """Subfields should come from the UpdateCubeOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateCubeOutputFields":
        self._alias = alias
        return self


class UpdateDataModelOutputFields(GraphQLField):
    @classmethod
    def data_model(cls) -> "DataModelFields":
        return DataModelFields("data_model")

    def fields(
        self, *subfields: Union[UpdateDataModelOutputGraphQLField, "DataModelFields"]
    ) -> "UpdateDataModelOutputFields":
        """Subfields should come from the UpdateDataModelOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateDataModelOutputFields":
        self._alias = alias
        return self


class UpdateHierarchyOutputFields(GraphQLField):
    @classmethod
    def hierarchy(cls) -> "HierarchyFields":
        return HierarchyFields("hierarchy")

    def fields(
        self, *subfields: Union[UpdateHierarchyOutputGraphQLField, "HierarchyFields"]
    ) -> "UpdateHierarchyOutputFields":
        """Subfields should come from the UpdateHierarchyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateHierarchyOutputFields":
        self._alias = alias
        return self


class UpdateableCellsFields(GraphQLField):
    @classmethod
    def cube(cls) -> "CubeFields":
        return CubeFields("cube")

    @classmethod
    def hierarchies(cls) -> "HierarchyFields":
        return HierarchyFields("hierarchies")

    @classmethod
    def levels(cls) -> "LevelFields":
        return LevelFields("levels")

    roles: "UpdateableCellsGraphQLField" = UpdateableCellsGraphQLField("roles")

    def fields(
        self,
        *subfields: Union[
            UpdateableCellsGraphQLField, "CubeFields", "HierarchyFields", "LevelFields"
        ]
    ) -> "UpdateableCellsFields":
        """Subfields should come from the UpdateableCellsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateableCellsFields":
        self._alias = alias
        return self
