# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    AddExternalDatabaseTableOutputFields,
    ConnectToExternalDatabaseOutputFields,
    CreateAggregateProviderOutputFields,
    CreateCubeOutputFields,
    CreateCubeRestrictionOutputFields,
    CreateHierarchyOutputFields,
    CreateJoinOutputFields,
    CreateMeasureOutputFields,
    CreateMemberPropertyOutputFields,
    CreateTableOutputFields,
    DeleteAggregateProviderOutputFields,
    DeleteCubeRestrictionOutputFields,
    DeleteHierarchyOutputFields,
    DeleteJoinOutputFields,
    DeleteMeasureOutputFields,
    DeleteMemberPropertyOutputFields,
    DeleteTableOutputFields,
    UnloadMembersFromDataCubeOutputFields,
    UpdateColumnOutputFields,
    UpdateCubeOutputFields,
    UpdateDataModelOutputFields,
    UpdateHierarchyOutputFields,
)
from .input_types import (
    AddExternalDatabaseTableInput,
    ConnectToExternalDatabaseInput,
    CreateAggregateProviderInput,
    CreateCubeInput,
    CreateCubeRestrictionInput,
    CreateHierarchyInput,
    CreateJoinInput,
    CreateMeasureInput,
    CreateMemberPropertyInput,
    CreateTableInput,
    DeleteAggregateProviderInput,
    DeleteCubeRestrictionInput,
    DeleteHierarchyInput,
    DeleteJoinInput,
    DeleteMeasureInput,
    DeleteMemberPropertyInput,
    DeleteTableInput,
    UnloadMembersFromDataCubeInput,
    UpdateColumnInput,
    UpdateCubeInput,
    UpdateDataModelInput,
    UpdateHierarchyInput,
)


class Mutation:
    @classmethod
    def add_external_database_table(
        cls, input: AddExternalDatabaseTableInput
    ) -> AddExternalDatabaseTableOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddExternalDatabaseTableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddExternalDatabaseTableOutputFields(
            field_name="addExternalDatabaseTable", arguments=cleared_arguments
        )

    @classmethod
    def connect_to_external_database(
        cls, input: ConnectToExternalDatabaseInput
    ) -> ConnectToExternalDatabaseOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ConnectToExternalDatabaseInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ConnectToExternalDatabaseOutputFields(
            field_name="connectToExternalDatabase", arguments=cleared_arguments
        )

    @classmethod
    def create_aggregate_provider(
        cls, input: CreateAggregateProviderInput
    ) -> CreateAggregateProviderOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateAggregateProviderInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateAggregateProviderOutputFields(
            field_name="createAggregateProvider", arguments=cleared_arguments
        )

    @classmethod
    def create_cube(cls, input: CreateCubeInput) -> CreateCubeOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCubeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCubeOutputFields(
            field_name="createCube", arguments=cleared_arguments
        )

    @classmethod
    def create_cube_restriction(
        cls, input: CreateCubeRestrictionInput
    ) -> CreateCubeRestrictionOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCubeRestrictionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCubeRestrictionOutputFields(
            field_name="createCubeRestriction", arguments=cleared_arguments
        )

    @classmethod
    def create_hierarchy(
        cls, input: CreateHierarchyInput
    ) -> CreateHierarchyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateHierarchyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateHierarchyOutputFields(
            field_name="createHierarchy", arguments=cleared_arguments
        )

    @classmethod
    def create_join(cls, input: CreateJoinInput) -> CreateJoinOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateJoinInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateJoinOutputFields(
            field_name="createJoin", arguments=cleared_arguments
        )

    @classmethod
    def create_measure(cls, input: CreateMeasureInput) -> CreateMeasureOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateMeasureInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateMeasureOutputFields(
            field_name="createMeasure", arguments=cleared_arguments
        )

    @classmethod
    def create_member_property(
        cls, input: CreateMemberPropertyInput
    ) -> CreateMemberPropertyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateMemberPropertyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateMemberPropertyOutputFields(
            field_name="createMemberProperty", arguments=cleared_arguments
        )

    @classmethod
    def create_table(cls, input: CreateTableInput) -> CreateTableOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateTableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateTableOutputFields(
            field_name="createTable", arguments=cleared_arguments
        )

    @classmethod
    def delete_aggregate_provider(
        cls, input: DeleteAggregateProviderInput
    ) -> DeleteAggregateProviderOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteAggregateProviderInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteAggregateProviderOutputFields(
            field_name="deleteAggregateProvider", arguments=cleared_arguments
        )

    @classmethod
    def delete_cube_restriction(
        cls, input: DeleteCubeRestrictionInput
    ) -> DeleteCubeRestrictionOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteCubeRestrictionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteCubeRestrictionOutputFields(
            field_name="deleteCubeRestriction", arguments=cleared_arguments
        )

    @classmethod
    def delete_hierarchy(
        cls, input: DeleteHierarchyInput
    ) -> DeleteHierarchyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteHierarchyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteHierarchyOutputFields(
            field_name="deleteHierarchy", arguments=cleared_arguments
        )

    @classmethod
    def delete_join(cls, input: DeleteJoinInput) -> DeleteJoinOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteJoinInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteJoinOutputFields(
            field_name="deleteJoin", arguments=cleared_arguments
        )

    @classmethod
    def delete_measure(cls, input: DeleteMeasureInput) -> DeleteMeasureOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteMeasureInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteMeasureOutputFields(
            field_name="deleteMeasure", arguments=cleared_arguments
        )

    @classmethod
    def delete_member_property(
        cls, input: DeleteMemberPropertyInput
    ) -> DeleteMemberPropertyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteMemberPropertyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteMemberPropertyOutputFields(
            field_name="deleteMemberProperty", arguments=cleared_arguments
        )

    @classmethod
    def delete_table(cls, input: DeleteTableInput) -> DeleteTableOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteTableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteTableOutputFields(
            field_name="deleteTable", arguments=cleared_arguments
        )

    @classmethod
    def unload_members_from_data_cube(
        cls, input: UnloadMembersFromDataCubeInput
    ) -> UnloadMembersFromDataCubeOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnloadMembersFromDataCubeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnloadMembersFromDataCubeOutputFields(
            field_name="unloadMembersFromDataCube", arguments=cleared_arguments
        )

    @classmethod
    def update_column(cls, input: UpdateColumnInput) -> UpdateColumnOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateColumnInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateColumnOutputFields(
            field_name="updateColumn", arguments=cleared_arguments
        )

    @classmethod
    def update_cube(cls, input: UpdateCubeInput) -> UpdateCubeOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateCubeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateCubeOutputFields(
            field_name="updateCube", arguments=cleared_arguments
        )

    @classmethod
    def update_data_model(
        cls, input: UpdateDataModelInput
    ) -> UpdateDataModelOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateDataModelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateDataModelOutputFields(
            field_name="updateDataModel", arguments=cleared_arguments
        )

    @classmethod
    def update_hierarchy(
        cls, input: UpdateHierarchyInput
    ) -> UpdateHierarchyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateHierarchyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateHierarchyOutputFields(
            field_name="updateHierarchy", arguments=cleared_arguments
        )
