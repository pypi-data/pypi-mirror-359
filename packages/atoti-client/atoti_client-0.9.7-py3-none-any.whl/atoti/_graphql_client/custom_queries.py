# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import DataModelFields, DataSourceFields, NodeInterface


class Query:
    @classmethod
    def data_model(cls, *, transaction_id: Optional[str] = None) -> DataModelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "transactionId": {"type": "ID", "value": transaction_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataModelFields(field_name="dataModel", arguments=cleared_arguments)

    @classmethod
    def data_source(cls, name: str) -> DataSourceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataSourceFields(field_name="dataSource", arguments=cleared_arguments)

    @classmethod
    def data_sources(cls) -> DataSourceFields:
        return DataSourceFields(field_name="dataSources")

    @classmethod
    def node(cls, id: str) -> NodeInterface:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "ID!", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NodeInterface(field_name="node", arguments=cleared_arguments)
