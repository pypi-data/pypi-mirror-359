# Generated by ariadne-codegen

from .base_operation import GraphQLField


class AddExternalDatabaseTableOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AddExternalDatabaseTableOutputGraphQLField":
        self._alias = alias
        return self


class AggregateCacheGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AggregateCacheGraphQLField":
        self._alias = alias
        return self


class AggregateProviderGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AggregateProviderGraphQLField":
        self._alias = alias
        return self


class AggregateProviderFilterLeafConditionUnion(GraphQLField):
    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "AggregateProviderFilterLeafConditionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "AggregateProviderFilterLeafConditionUnion":
        self._alias = alias
        return self


class AggregateProviderFilterMembershipConditionGraphQLField(GraphQLField):
    def alias(
        self, alias: str
    ) -> "AggregateProviderFilterMembershipConditionGraphQLField":
        self._alias = alias
        return self


class AggregateProviderFilterRelationalConditionGraphQLField(GraphQLField):
    def alias(
        self, alias: str
    ) -> "AggregateProviderFilterRelationalConditionGraphQLField":
        self._alias = alias
        return self


class ClusterGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ClusterGraphQLField":
        self._alias = alias
        return self


class ClusterNodeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ClusterNodeGraphQLField":
        self._alias = alias
        return self


class ColumnGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ColumnGraphQLField":
        self._alias = alias
        return self


class ConnectToExternalDatabaseOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ConnectToExternalDatabaseOutputGraphQLField":
        self._alias = alias
        return self


class CreateAggregateProviderOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateAggregateProviderOutputGraphQLField":
        self._alias = alias
        return self


class CreateCubeOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateCubeOutputGraphQLField":
        self._alias = alias
        return self


class CreateCubeRestrictionOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateCubeRestrictionOutputGraphQLField":
        self._alias = alias
        return self


class CreateHierarchyOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateHierarchyOutputGraphQLField":
        self._alias = alias
        return self


class CreateJoinOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateJoinOutputGraphQLField":
        self._alias = alias
        return self


class CreateMeasureOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateMeasureOutputGraphQLField":
        self._alias = alias
        return self


class CreateMemberPropertyOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateMemberPropertyOutputGraphQLField":
        self._alias = alias
        return self


class CreateTableOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateTableOutputGraphQLField":
        self._alias = alias
        return self


class CubeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CubeGraphQLField":
        self._alias = alias
        return self


class CubeRestrictionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CubeRestrictionGraphQLField":
        self._alias = alias
        return self


class CubeRestrictionLeafConditionUnion(GraphQLField):
    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "CubeRestrictionLeafConditionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "CubeRestrictionLeafConditionUnion":
        self._alias = alias
        return self


class CubeRestrictionMembershipConditionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CubeRestrictionMembershipConditionGraphQLField":
        self._alias = alias
        return self


class CubeRestrictionRelationalConditionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CubeRestrictionRelationalConditionGraphQLField":
        self._alias = alias
        return self


class DataLoadUnion(GraphQLField):
    def on(self, type_name: str, *subfields: GraphQLField) -> "DataLoadUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "DataLoadUnion":
        self._alias = alias
        return self


class DataModelGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DataModelGraphQLField":
        self._alias = alias
        return self


class DataSourceGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DataSourceGraphQLField":
        self._alias = alias
        return self


class DataSourceDataModelUnion(GraphQLField):
    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "DataSourceDataModelUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "DataSourceDataModelUnion":
        self._alias = alias
        return self


class DataSourceLoadUnion(GraphQLField):
    def on(self, type_name: str, *subfields: GraphQLField) -> "DataSourceLoadUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "DataSourceLoadUnion":
        self._alias = alias
        return self


class DatabaseGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DatabaseGraphQLField":
        self._alias = alias
        return self


class DeleteAggregateProviderOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteAggregateProviderOutputGraphQLField":
        self._alias = alias
        return self


class DeleteCubeRestrictionOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteCubeRestrictionOutputGraphQLField":
        self._alias = alias
        return self


class DeleteHierarchyOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteHierarchyOutputGraphQLField":
        self._alias = alias
        return self


class DeleteJoinOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteJoinOutputGraphQLField":
        self._alias = alias
        return self


class DeleteMeasureOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteMeasureOutputGraphQLField":
        self._alias = alias
        return self


class DeleteMemberPropertyOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteMemberPropertyOutputGraphQLField":
        self._alias = alias
        return self


class DeleteTableOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DeleteTableOutputGraphQLField":
        self._alias = alias
        return self


class DimensionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "DimensionGraphQLField":
        self._alias = alias
        return self


class ExternalDatabaseGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ExternalDatabaseGraphQLField":
        self._alias = alias
        return self


class ExternalDatabaseCatalogGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ExternalDatabaseCatalogGraphQLField":
        self._alias = alias
        return self


class ExternalDatabaseColumnGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ExternalDatabaseColumnGraphQLField":
        self._alias = alias
        return self


class ExternalDatabaseDataSourceDataModelGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ExternalDatabaseDataSourceDataModelGraphQLField":
        self._alias = alias
        return self


class ExternalDatabaseSchemaGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ExternalDatabaseSchemaGraphQLField":
        self._alias = alias
        return self


class ExternalDatabaseTableGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ExternalDatabaseTableGraphQLField":
        self._alias = alias
        return self


class FileSystemDataSourceDataModelGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileSystemDataSourceDataModelGraphQLField":
        self._alias = alias
        return self


class FileSystemDataSourceLoadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileSystemDataSourceLoadGraphQLField":
        self._alias = alias
        return self


class FileSystemFileGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileSystemFileGraphQLField":
        self._alias = alias
        return self


class HierarchyGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "HierarchyGraphQLField":
        self._alias = alias
        return self


class JdbcDataSourceLoadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "JdbcDataSourceLoadGraphQLField":
        self._alias = alias
        return self


class JoinGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "JoinGraphQLField":
        self._alias = alias
        return self


class JoinMappingItemGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "JoinMappingItemGraphQLField":
        self._alias = alias
        return self


class LevelGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "LevelGraphQLField":
        self._alias = alias
        return self


class MeasureGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "MeasureGraphQLField":
        self._alias = alias
        return self


class MemberPropertyGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "MemberPropertyGraphQLField":
        self._alias = alias
        return self


class NamedDataSourceLoadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NamedDataSourceLoadGraphQLField":
        self._alias = alias
        return self


class NodeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NodeGraphQLField":
        self._alias = alias
        return self


class ParameterGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ParameterGraphQLField":
        self._alias = alias
        return self


class SelectionFieldGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "SelectionFieldGraphQLField":
        self._alias = alias
        return self


class TableGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "TableGraphQLField":
        self._alias = alias
        return self


class UnloadMembersFromDataCubeOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UnloadMembersFromDataCubeOutputGraphQLField":
        self._alias = alias
        return self


class UpdateColumnOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateColumnOutputGraphQLField":
        self._alias = alias
        return self


class UpdateCubeOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateCubeOutputGraphQLField":
        self._alias = alias
        return self


class UpdateDataModelOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateDataModelOutputGraphQLField":
        self._alias = alias
        return self


class UpdateHierarchyOutputGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateHierarchyOutputGraphQLField":
        self._alias = alias
        return self


class UpdateableCellsGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateableCellsGraphQLField":
        self._alias = alias
        return self
