# Generated by ariadne-codegen
# Source: python/atoti-client/graphql/operations.gql

from collections.abc import Callable
from typing import IO, Any, Dict, Final, List, Optional, Tuple, Union, final

import httpx
from graphql import (
    DocumentNode,
    NamedTypeNode,
    NameNode,
    OperationDefinitionNode,
    OperationType,
    SelectionNode,
    SelectionSetNode,
    VariableDefinitionNode,
    VariableNode,
    print_ast,
)
from pydantic import ValidationError
from typing_extensions import override

from .base_client import BaseClient
from .base_model import UNSET, BaseModel, UnsetType
from .base_operation import GraphQLField
from .create_join import CreateJoin
from .delete_aggregate_provider import DeleteAggregateProvider
from .delete_measure import DeleteMeasure
from .find_aggregate_provider import FindAggregateProvider
from .find_column import FindColumn
from .find_cube import FindCube
from .find_cube_restriction import FindCubeRestriction
from .find_hierarchy import FindHierarchy
from .find_hierarchy_across_dimensions import FindHierarchyAcrossDimensions
from .find_level import FindLevel
from .find_level_across_dimensions import FindLevelAcrossDimensions
from .find_level_across_hierarchies import FindLevelAcrossHierarchies
from .find_level_in_hierarchy import FindLevelInHierarchy
from .find_member_property import FindMemberProperty
from .find_table import FindTable
from .get_aggregate_cache import GetAggregateCache
from .get_aggregate_providers import GetAggregateProviders
from .get_cluster_members import GetClusterMembers
from .get_column_data_type import GetColumnDataType
from .get_column_default_value import GetColumnDefaultValue
from .get_cube_fact_table import GetCubeFactTable
from .get_cube_reachable_columns import GetCubeReachableColumns
from .get_cube_restrictions import GetCubeRestrictions
from .get_cubes import GetCubes
from .get_database_owners import GetDatabaseOwners
from .get_database_readers import GetDatabaseReaders
from .get_database_schema import GetDatabaseSchema
from .get_dimension_default_hierarchy import GetDimensionDefaultHierarchy
from .get_hierarchies import GetHierarchies
from .get_hierarchy_are_members_indexed_by_name import (
    GetHierarchyAreMembersIndexedByName,
)
from .get_hierarchy_folder import GetHierarchyFolder
from .get_hierarchy_is_slicing import GetHierarchyIsSlicing
from .get_hierarchy_is_virtual import GetHierarchyIsVirtual
from .get_hierarchy_is_visible import GetHierarchyIsVisible
from .get_hierarchy_levels import GetHierarchyLevels
from .get_hierarchy_viewers import GetHierarchyViewers
from .get_level_selection_field import GetLevelSelectionField
from .get_levels import GetLevels
from .get_member_properties import GetMemberProperties
from .get_table_columns import GetTableColumns
from .get_table_primary_index import GetTablePrimaryIndex
from .get_tables import GetTables
from .get_updateable_cells import GetUpdateableCells
from .input_types import (
    CreateJoinInput,
    DeleteAggregateProviderInput,
    DeleteMeasureInput,
    UnloadMembersFromDataCubeInput,
    UpdateColumnInput,
    UpdateCubeInput,
    UpdateDataModelInput,
    UpdateHierarchyInput,
)
from .unload_members_from_data_cube import UnloadMembersFromDataCube
from .update_column import UpdateColumn
from .update_cube import UpdateCube
from .update_data_model import UpdateDataModel
from .update_hierarchy import UpdateHierarchy


def gql(q: str) -> str:
    return q


@final
class GraphqlClient(BaseClient):
    def __init__(
        self,
        *,
        get_data_model_transaction_id: Callable[[], str | None],
        headers: dict[str, str] | None = None,
        http_client: httpx.Client,
        url: str = "graphql",
    ) -> None:
        super().__init__(headers=headers, http_client=http_client, url=url)
        self.__get_data_model_transaction_id: Final = get_data_model_transaction_id

    @override
    def _process_variables(
        self, variables: dict[str, Any] | None
    ) -> tuple[
        dict[str, Any], dict[str, tuple[str, IO[bytes], str]], dict[str, list[str]]
    ]:
        reason = "Do not manually set the transaction ID."
        if variables is not None:
            if "dataModelTransactionId" in variables:
                assert variables["dataModelTransactionId"] is UNSET, reason
                match self.__get_data_model_transaction_id():
                    case str() as data_model_transaction_id:
                        variables["dataModelTransactionId"] = data_model_transaction_id
                    case None:
                        del variables["dataModelTransactionId"]
            for value in variables.values():
                if (
                    not isinstance(value, BaseModel)
                    or not "data_model_transaction_id" in value.model_fields
                ):
                    continue
                assert "data_model_transaction_id" not in value.model_fields_set, reason
                match self.__get_data_model_transaction_id():
                    case str() as data_model_transaction_id:
                        value.data_model_transaction_id = data_model_transaction_id
                    case None:
                        ...
        return super()._process_variables(variables)

    def create_join(self, *, input: CreateJoinInput, **kwargs: Any) -> CreateJoin:
        query = gql(
            """
            mutation CreateJoin($input: CreateJoinInput!) {
              createJoin(input: $input) {
                __typename
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="CreateJoin", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return CreateJoin.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def delete_aggregate_provider(
        self, *, input: DeleteAggregateProviderInput, **kwargs: Any
    ) -> DeleteAggregateProvider:
        query = gql(
            """
            mutation DeleteAggregateProvider($input: DeleteAggregateProviderInput!) {
              deleteAggregateProvider(input: $input) {
                status
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="DeleteAggregateProvider",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return DeleteAggregateProvider.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def delete_measure(
        self, *, input: DeleteMeasureInput, **kwargs: Any
    ) -> DeleteMeasure:
        query = gql(
            """
            mutation DeleteMeasure($input: DeleteMeasureInput!) {
              deleteMeasure(input: $input) {
                status
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="DeleteMeasure", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return DeleteMeasure.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_aggregate_provider(
        self,
        *,
        cube_name: str,
        name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindAggregateProvider:
        query = gql(
            """
            query FindAggregateProvider($cubeName: String!, $dataModelTransactionId: ID, $name: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  aggregateProvider(name: $name) {
                    ...aggregateProviderFragment
                  }
                }
              }
            }

            fragment aggregateProviderFilterFragment on AggregateProvider {
              filter {
                ... on AggregateProviderFilterMembershipCondition {
                  __typename
                  elements
                  membershipOperator: operator
                  subject {
                    ...levelIdentifierFragment
                  }
                }
                ... on AggregateProviderFilterRelationalCondition {
                  __typename
                  relationalOperator: operator
                  subject {
                    ...levelIdentifierFragment
                  }
                  target
                }
              }
            }

            fragment aggregateProviderFragment on AggregateProvider {
              ...aggregateProviderFilterFragment
              levels {
                ...levelIdentifierFragment
              }
              measures {
                ...measureIdentifierFragment
              }
              partitioning
              pluginKey
            }

            fragment dimensionIdentifierFragment on Dimension {
              name
            }

            fragment hierarchyIdentifierFragment on Hierarchy {
              dimension {
                ...dimensionIdentifierFragment
              }
              name
            }

            fragment levelIdentifierFragment on Level {
              hierarchy {
                ...hierarchyIdentifierFragment
              }
              name
            }

            fragment measureIdentifierFragment on Measure {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "name": name,
        }
        response = self.execute(
            query=query,
            operation_name="FindAggregateProvider",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return FindAggregateProvider.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_column(
        self,
        *,
        column_name: str,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindColumn:
        query = gql(
            """
            query FindColumn($columnName: String!, $dataModelTransactionId: ID, $tableName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  table(name: $tableName) {
                    column(name: $columnName) {
                      ...columnIdentifierFragment
                    }
                  }
                }
              }
            }

            fragment columnIdentifierFragment on Column {
              name
              table {
                ...tableIdentifierFragment
              }
            }

            fragment tableIdentifierFragment on Table {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "columnName": column_name,
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query, operation_name="FindColumn", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return FindColumn.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_cube(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindCube:
        query = gql(
            """
            query FindCube($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  ...cubeIdentifierFragment
                }
              }
            }

            fragment cubeIdentifierFragment on Cube {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query, operation_name="FindCube", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return FindCube.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_cube_restriction(
        self,
        *,
        cube_name: str,
        role: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindCubeRestriction:
        query = gql(
            """
            query FindCubeRestriction($cubeName: String!, $dataModelTransactionId: ID, $role: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  restriction(role: $role) {
                    ...cubeRestrictionFragment
                  }
                }
              }
            }

            fragment cubeRestrictionFragment on CubeRestriction {
              condition {
                ... on CubeRestrictionMembershipCondition {
                  __typename
                  elements
                  membershipOperator: operator
                  subject {
                    ...levelIdentifierFragment
                  }
                }
                ... on CubeRestrictionRelationalCondition {
                  __typename
                  relationalOperator: operator
                  subject {
                    ...levelIdentifierFragment
                  }
                  target
                }
              }
            }

            fragment dimensionIdentifierFragment on Dimension {
              name
            }

            fragment hierarchyIdentifierFragment on Hierarchy {
              dimension {
                ...dimensionIdentifierFragment
              }
              name
            }

            fragment levelIdentifierFragment on Level {
              hierarchy {
                ...hierarchyIdentifierFragment
              }
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "role": role,
        }
        response = self.execute(
            query=query,
            operation_name="FindCubeRestriction",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return FindCubeRestriction.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_hierarchy(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindHierarchy:
        query = gql(
            """
            query FindHierarchy($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      ...hierarchyIdentifierFragment
                    }
                  }
                }
              }
            }

            fragment dimensionIdentifierFragment on Dimension {
              name
            }

            fragment hierarchyIdentifierFragment on Hierarchy {
              dimension {
                ...dimensionIdentifierFragment
              }
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query, operation_name="FindHierarchy", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return FindHierarchy.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_hierarchy_across_dimensions(
        self,
        *,
        cube_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindHierarchyAcrossDimensions:
        query = gql(
            """
            query FindHierarchyAcrossDimensions($cubeName: String!, $dataModelTransactionId: ID, $hierarchyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchy(name: $hierarchyName) {
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindHierarchyAcrossDimensions",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return FindHierarchyAcrossDimensions.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_level(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        level_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindLevel:
        query = gql(
            """
            query FindLevel($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!, $levelName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      level(name: $levelName) {
                        ...levelIdentifierFragment
                        type
                      }
                    }
                  }
                }
              }
            }

            fragment dimensionIdentifierFragment on Dimension {
              name
            }

            fragment hierarchyIdentifierFragment on Hierarchy {
              dimension {
                ...dimensionIdentifierFragment
              }
              name
            }

            fragment levelIdentifierFragment on Level {
              hierarchy {
                ...hierarchyIdentifierFragment
              }
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
        }
        response = self.execute(
            query=query, operation_name="FindLevel", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return FindLevel.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_level_across_dimensions(
        self,
        *,
        cube_name: str,
        hierarchy_name: str,
        level_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindLevelAcrossDimensions:
        query = gql(
            """
            query FindLevelAcrossDimensions($cubeName: String!, $dataModelTransactionId: ID, $hierarchyName: String!, $levelName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchy(name: $hierarchyName) {
                      level(name: $levelName) {
                        name
                        type
                      }
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindLevelAcrossDimensions",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return FindLevelAcrossDimensions.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_level_across_hierarchies(
        self,
        *,
        cube_name: str,
        level_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindLevelAcrossHierarchies:
        query = gql(
            """
            query FindLevelAcrossHierarchies($cubeName: String!, $dataModelTransactionId: ID, $levelName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchies {
                      level(name: $levelName) {
                        name
                        type
                      }
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "levelName": level_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindLevelAcrossHierarchies",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return FindLevelAcrossHierarchies.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_level_in_hierarchy(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        level_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindLevelInHierarchy:
        query = gql(
            """
            query FindLevelInHierarchy($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!, $levelName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      level(name: $levelName) {
                        ...levelIdentifierFragment
                        type
                      }
                    }
                  }
                }
              }
            }

            fragment dimensionIdentifierFragment on Dimension {
              name
            }

            fragment hierarchyIdentifierFragment on Hierarchy {
              dimension {
                ...dimensionIdentifierFragment
              }
              name
            }

            fragment levelIdentifierFragment on Level {
              hierarchy {
                ...hierarchyIdentifierFragment
              }
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindLevelInHierarchy",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return FindLevelInHierarchy.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_member_property(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        level_name: str,
        property_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindMemberProperty:
        query = gql(
            """
            query FindMemberProperty($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!, $levelName: String!, $propertyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      level(name: $levelName) {
                        memberProperty(name: $propertyName) {
                          ...memberPropertyFragment
                        }
                      }
                    }
                  }
                }
              }
            }

            fragment columnIdentifierFragment on Column {
              name
              table {
                ...tableIdentifierFragment
              }
            }

            fragment memberPropertyFragment on MemberProperty {
              column {
                ...columnIdentifierFragment
              }
              name
            }

            fragment tableIdentifierFragment on Table {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
            "propertyName": property_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindMemberProperty",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return FindMemberProperty.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def find_table(
        self,
        *,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> FindTable:
        query = gql(
            """
            query FindTable($dataModelTransactionId: ID, $tableName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  table(name: $tableName) {
                    ...tableIdentifierFragment
                  }
                }
              }
            }

            fragment tableIdentifierFragment on Table {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query, operation_name="FindTable", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return FindTable.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_aggregate_cache(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetAggregateCache:
        query = gql(
            """
            query GetAggregateCache($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  aggregateCache {
                    capacity
                    measures {
                      ...measureIdentifierFragment
                    }
                  }
                }
              }
            }

            fragment measureIdentifierFragment on Measure {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetAggregateCache",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetAggregateCache.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_aggregate_providers(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetAggregateProviders:
        query = gql(
            """
            query GetAggregateProviders($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  aggregateProviders {
                    ...aggregateProviderFragment
                    name
                  }
                }
              }
            }

            fragment aggregateProviderFilterFragment on AggregateProvider {
              filter {
                ... on AggregateProviderFilterMembershipCondition {
                  __typename
                  elements
                  membershipOperator: operator
                  subject {
                    ...levelIdentifierFragment
                  }
                }
                ... on AggregateProviderFilterRelationalCondition {
                  __typename
                  relationalOperator: operator
                  subject {
                    ...levelIdentifierFragment
                  }
                  target
                }
              }
            }

            fragment aggregateProviderFragment on AggregateProvider {
              ...aggregateProviderFilterFragment
              levels {
                ...levelIdentifierFragment
              }
              measures {
                ...measureIdentifierFragment
              }
              partitioning
              pluginKey
            }

            fragment dimensionIdentifierFragment on Dimension {
              name
            }

            fragment hierarchyIdentifierFragment on Hierarchy {
              dimension {
                ...dimensionIdentifierFragment
              }
              name
            }

            fragment levelIdentifierFragment on Level {
              hierarchy {
                ...hierarchyIdentifierFragment
              }
              name
            }

            fragment measureIdentifierFragment on Measure {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetAggregateProviders",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetAggregateProviders.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_cluster_members(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetClusterMembers:
        query = gql(
            """
            query GetClusterMembers($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  cluster {
                    nodes {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetClusterMembers",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetClusterMembers.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_column_data_type(
        self,
        *,
        column_name: str,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetColumnDataType:
        query = gql(
            """
            query GetColumnDataType($columnName: String!, $dataModelTransactionId: ID, $tableName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  table(name: $tableName) {
                    column(name: $columnName) {
                      dataType
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "columnName": column_name,
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetColumnDataType",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetColumnDataType.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_column_default_value(
        self,
        *,
        column_name: str,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetColumnDefaultValue:
        query = gql(
            """
            query GetColumnDefaultValue($columnName: String!, $dataModelTransactionId: ID, $tableName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  table(name: $tableName) {
                    column(name: $columnName) {
                      defaultValue
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "columnName": column_name,
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetColumnDefaultValue",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetColumnDefaultValue.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_cube_fact_table(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetCubeFactTable:
        query = gql(
            """
            query GetCubeFactTable($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  factTable {
                    ...tableIdentifierFragment
                  }
                }
              }
            }

            fragment tableIdentifierFragment on Table {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetCubeFactTable",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetCubeFactTable.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_cube_reachable_columns(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetCubeReachableColumns:
        query = gql(
            """
            query GetCubeReachableColumns($cubeName: String!, $dataModelTransactionId: ID) {
              cubeDataModel: dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  factTable {
                    ...tableIdentifierFragment
                  }
                }
              }
              databaseDataModel: dataModel(transactionId: $dataModelTransactionId) {
                database {
                  tables {
                    columns {
                      name
                    }
                    joins {
                      ...joinIdentifierFragment
                      target {
                        ...tableIdentifierFragment
                      }
                    }
                    ...tableIdentifierFragment
                  }
                }
              }
            }

            fragment joinIdentifierFragment on Join {
              name
              source {
                ...tableIdentifierFragment
              }
            }

            fragment tableIdentifierFragment on Table {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetCubeReachableColumns",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetCubeReachableColumns.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_cube_restrictions(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetCubeRestrictions:
        query = gql(
            """
            query GetCubeRestrictions($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  restrictions {
                    ...cubeRestrictionFragment
                    role
                  }
                }
              }
            }

            fragment cubeRestrictionFragment on CubeRestriction {
              condition {
                ... on CubeRestrictionMembershipCondition {
                  __typename
                  elements
                  membershipOperator: operator
                  subject {
                    ...levelIdentifierFragment
                  }
                }
                ... on CubeRestrictionRelationalCondition {
                  __typename
                  relationalOperator: operator
                  subject {
                    ...levelIdentifierFragment
                  }
                  target
                }
              }
            }

            fragment dimensionIdentifierFragment on Dimension {
              name
            }

            fragment hierarchyIdentifierFragment on Hierarchy {
              dimension {
                ...dimensionIdentifierFragment
              }
              name
            }

            fragment levelIdentifierFragment on Level {
              hierarchy {
                ...hierarchyIdentifierFragment
              }
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetCubeRestrictions",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetCubeRestrictions.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_cubes(
        self,
        *,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetCubes:
        query = gql(
            """
            query GetCubes($dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cubes {
                  ...cubeIdentifierFragment
                }
              }
            }

            fragment cubeIdentifierFragment on Cube {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id
        }
        response = self.execute(
            query=query, operation_name="GetCubes", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return GetCubes.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_database_owners(
        self,
        *,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetDatabaseOwners:
        query = gql(
            """
            query GetDatabaseOwners($dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  owners
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id
        }
        response = self.execute(
            query=query,
            operation_name="GetDatabaseOwners",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetDatabaseOwners.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_database_readers(
        self,
        *,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetDatabaseReaders:
        query = gql(
            """
            query GetDatabaseReaders($dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  readers
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id
        }
        response = self.execute(
            query=query,
            operation_name="GetDatabaseReaders",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetDatabaseReaders.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_database_schema(
        self,
        *,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetDatabaseSchema:
        query = gql(
            """
            query GetDatabaseSchema($dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  tables {
                    columns {
                      dataType
                      defaultValue
                      name
                    }
                    joins {
                      isPartial
                      mappingItems {
                        source {
                          name
                        }
                        target {
                          name
                        }
                      }
                      target {
                        ...tableIdentifierFragment
                      }
                      targetOptionality
                    }
                    primaryIndex {
                      name
                    }
                    ...tableIdentifierFragment
                  }
                }
              }
            }

            fragment tableIdentifierFragment on Table {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id
        }
        response = self.execute(
            query=query,
            operation_name="GetDatabaseSchema",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetDatabaseSchema.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_dimension_default_hierarchy(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetDimensionDefaultHierarchy:
        query = gql(
            """
            query GetDimensionDefaultHierarchy($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    defaultHierarchy {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetDimensionDefaultHierarchy",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetDimensionDefaultHierarchy.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_hierarchies(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetHierarchies:
        query = gql(
            """
            query GetHierarchies($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchies {
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query, operation_name="GetHierarchies", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return GetHierarchies.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_hierarchy_are_members_indexed_by_name(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetHierarchyAreMembersIndexedByName:
        query = gql(
            """
            query GetHierarchyAreMembersIndexedByName($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      areMembersIndexedByName
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyAreMembersIndexedByName",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetHierarchyAreMembersIndexedByName.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_hierarchy_folder(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetHierarchyFolder:
        query = gql(
            """
            query GetHierarchyFolder($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      folder
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyFolder",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetHierarchyFolder.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_hierarchy_is_slicing(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetHierarchyIsSlicing:
        query = gql(
            """
            query GetHierarchyIsSlicing($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      isSlicing
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyIsSlicing",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetHierarchyIsSlicing.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_hierarchy_is_virtual(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetHierarchyIsVirtual:
        query = gql(
            """
            query GetHierarchyIsVirtual($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      isVirtual
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyIsVirtual",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetHierarchyIsVirtual.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_hierarchy_is_visible(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetHierarchyIsVisible:
        query = gql(
            """
            query GetHierarchyIsVisible($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      isVisible
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyIsVisible",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetHierarchyIsVisible.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_hierarchy_levels(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetHierarchyLevels:
        query = gql(
            """
            query GetHierarchyLevels($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      levels {
                        name
                        type
                      }
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyLevels",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetHierarchyLevels.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_hierarchy_viewers(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetHierarchyViewers:
        query = gql(
            """
            query GetHierarchyViewers($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      viewers
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyViewers",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetHierarchyViewers.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_levels(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetLevels:
        query = gql(
            """
            query GetLevels($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchies {
                      levels {
                        name
                        type
                      }
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query, operation_name="GetLevels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return GetLevels.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_level_selection_field(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        level_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetLevelSelectionField:
        query = gql(
            """
            query GetLevelSelectionField($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!, $levelName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      level(name: $levelName) {
                        selectionField {
                          ...selectionFieldIdentifierFragment
                        }
                      }
                    }
                  }
                }
              }
            }

            fragment columnIdentifierFragment on Column {
              name
              table {
                ...tableIdentifierFragment
              }
            }

            fragment joinIdentifierFragment on Join {
              name
              source {
                ...tableIdentifierFragment
              }
            }

            fragment selectionFieldIdentifierFragment on SelectionField {
              column {
                ...columnIdentifierFragment
              }
              joins {
                ...joinIdentifierFragment
              }
            }

            fragment tableIdentifierFragment on Table {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetLevelSelectionField",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetLevelSelectionField.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_member_properties(
        self,
        *,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        level_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetMemberProperties:
        query = gql(
            """
            query getMemberProperties($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!, $levelName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      level(name: $levelName) {
                        memberProperties {
                          ...memberPropertyFragment
                        }
                      }
                    }
                  }
                }
              }
            }

            fragment columnIdentifierFragment on Column {
              name
              table {
                ...tableIdentifierFragment
              }
            }

            fragment memberPropertyFragment on MemberProperty {
              column {
                ...columnIdentifierFragment
              }
              name
            }

            fragment tableIdentifierFragment on Table {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
        }
        response = self.execute(
            query=query,
            operation_name="getMemberProperties",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetMemberProperties.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_table_columns(
        self,
        *,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetTableColumns:
        query = gql(
            """
            query GetTableColumns($dataModelTransactionId: ID, $tableName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  table(name: $tableName) {
                    columns {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query, operation_name="GetTableColumns", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return GetTableColumns.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_table_primary_index(
        self,
        *,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetTablePrimaryIndex:
        query = gql(
            """
            query GetTablePrimaryIndex($dataModelTransactionId: ID, $tableName: String!) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  table(name: $tableName) {
                    primaryIndex {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetTablePrimaryIndex",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetTablePrimaryIndex.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_tables(
        self,
        *,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetTables:
        query = gql(
            """
            query GetTables($dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                database {
                  tables {
                    ...tableIdentifierFragment
                  }
                }
              }
            }

            fragment tableIdentifierFragment on Table {
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id
        }
        response = self.execute(
            query=query, operation_name="GetTables", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return GetTables.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def get_updateable_cells(
        self,
        *,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any,
    ) -> GetUpdateableCells:
        query = gql(
            """
            query GetUpdateableCells($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(transactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  updateableCells {
                    hierarchies {
                      ...hierarchyIdentifierFragment
                    }
                    levels {
                      ...levelIdentifierFragment
                    }
                    roles
                  }
                }
              }
            }

            fragment dimensionIdentifierFragment on Dimension {
              name
            }

            fragment hierarchyIdentifierFragment on Hierarchy {
              dimension {
                ...dimensionIdentifierFragment
              }
              name
            }

            fragment levelIdentifierFragment on Level {
              hierarchy {
                ...hierarchyIdentifierFragment
              }
              name
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetUpdateableCells",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return GetUpdateableCells.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def unload_members_from_data_cube(
        self, *, input: UnloadMembersFromDataCubeInput, **kwargs: Any
    ) -> UnloadMembersFromDataCube:
        query = gql(
            """
            mutation UnloadMembersFromDataCube($input: UnloadMembersFromDataCubeInput!) {
              unloadMembersFromDataCube(input: $input) {
                __typename
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="UnloadMembersFromDataCube",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        try:
            return UnloadMembersFromDataCube.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def update_column(self, *, input: UpdateColumnInput, **kwargs: Any) -> UpdateColumn:
        query = gql(
            """
            mutation UpdateColumn($input: UpdateColumnInput!) {
              updateColumn(input: $input) {
                __typename
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateColumn", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return UpdateColumn.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def update_cube(self, *, input: UpdateCubeInput, **kwargs: Any) -> UpdateCube:
        query = gql(
            """
            mutation UpdateCube($input: UpdateCubeInput!) {
              updateCube(input: $input) {
                __typename
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateCube", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return UpdateCube.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def update_data_model(
        self, *, input: UpdateDataModelInput, **kwargs: Any
    ) -> UpdateDataModel:
        query = gql(
            """
            mutation UpdateDataModel($input: UpdateDataModelInput!) {
              updateDataModel(input: $input) {
                __typename
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateDataModel", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return UpdateDataModel.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def update_hierarchy(
        self, *, input: UpdateHierarchyInput, **kwargs: Any
    ) -> UpdateHierarchy:
        query = gql(
            """
            mutation UpdateHierarchy($input: UpdateHierarchyInput!) {
              updateHierarchy(input: $input) {
                __typename
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateHierarchy", variables=variables, **kwargs
        )
        data = self.get_data(response)
        try:
            return UpdateHierarchy.model_validate(data)
        except ValidationError as error:
            raise RuntimeError(
                f"Unexpected query output for variables: {variables}."
            ) from error

    def execute_custom_operation(
        self, *fields: GraphQLField, operation_type: OperationType, operation_name: str
    ) -> Dict[str, Any]:
        selections = self._build_selection_set(fields)
        combined_variables = self._combine_variables(fields)
        variable_definitions = self._build_variable_definitions(
            combined_variables["types"]
        )
        operation_ast = self._build_operation_ast(
            selections, operation_type, operation_name, variable_definitions
        )
        response = self.execute(
            print_ast(operation_ast),
            variables=combined_variables["values"],
            operation_name=operation_name,
        )
        return self.get_data(response)

    def _combine_variables(
        self, fields: Tuple[GraphQLField, ...]
    ) -> Dict[str, Dict[str, Any]]:
        variables_types_combined = {}
        processed_variables_combined = {}
        for field in fields:
            formatted_variables = field.get_formatted_variables()
            variables_types_combined.update(
                {k: v["type"] for k, v in formatted_variables.items()}
            )
            processed_variables_combined.update(
                {k: v["value"] for k, v in formatted_variables.items()}
            )
        return {
            "types": variables_types_combined,
            "values": processed_variables_combined,
        }

    def _build_variable_definitions(
        self, variables_types_combined: Dict[str, str]
    ) -> List[VariableDefinitionNode]:
        return [
            VariableDefinitionNode(
                variable=VariableNode(name=NameNode(value=var_name)),
                type=NamedTypeNode(name=NameNode(value=var_value)),
            )
            for var_name, var_value in variables_types_combined.items()
        ]

    def _build_operation_ast(
        self,
        selections: List[SelectionNode],
        operation_type: OperationType,
        operation_name: str,
        variable_definitions: List[VariableDefinitionNode],
    ) -> DocumentNode:
        return DocumentNode(
            definitions=[
                OperationDefinitionNode(
                    operation=operation_type,
                    name=NameNode(value=operation_name),
                    variable_definitions=variable_definitions,
                    selection_set=SelectionSetNode(selections=selections),
                )
            ]
        )

    def _build_selection_set(
        self, fields: Tuple[GraphQLField, ...]
    ) -> List[SelectionNode]:
        return [field.to_ast(idx) for idx, field in enumerate(fields)]

    def query(self, *fields: GraphQLField, operation_name: str) -> Dict[str, Any]:
        return self.execute_custom_operation(
            *fields, operation_type=OperationType.QUERY, operation_name=operation_name
        )

    def mutation(self, *fields: GraphQLField, operation_name: str) -> Dict[str, Any]:
        for index, field in enumerate(fields):
            if not field._alias:
                field.alias(f"{field._field_name}_{index}")
            if not field._subfields:
                field._subfields.append(GraphQLField("__typename"))
        return self.execute_custom_operation(
            *fields,
            operation_type=OperationType.MUTATION,
            operation_name=operation_name,
        )
