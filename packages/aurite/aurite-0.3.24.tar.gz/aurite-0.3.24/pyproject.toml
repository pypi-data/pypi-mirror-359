[project]
name = "aurite"
version = "0.3.24"
description = "Aurite Agents is an agent development and runtime framework."
authors = [
    { name = "Ryan W", email = "ryan@aurite.ai" },
    { name = "Blake R", email = "blake@aurite.ai" },
    { name = "Patrick W", email = "patrick@aurite.ai" },
    { name = "Jiten O", email = "jiten@aurite.ai" },
]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.11"
keywords = ["ai", "agent", "mcp", "framework", "llm", "anthropic"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "mcp (>=1.10.1,<2.0.0)",
    "pydantic (>=2.11.7,<3.0.0)",
    "pyyaml (>=6.0.2,<7.0.0)",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "colorlog (>=6.9.0,<7.0.0)",
    "termcolor (>=3.1.0,<4.0.0)",
    "jsonschema (>=4.24.0,<5.0.0)",
    "exceptiongroup (>=1.3.0,<2.0.0)",
    "pytz (>=2025.2,<2026.0)",
    "fastapi (>=0.115.14,<0.116.0)",
    "typer[all] (>=0.16.0,<0.17.0)",
    "uvicorn (>=0.35.0,<0.36.0)",
    "anyio (>=4.9.0,<5.0.0)",
    "openai (>=1.93.0,<2.0.0)",
    "pydantic-settings (>=2.10.1,<3.0.0)",
    "sqlalchemy (>=2.0.41,<3.0.0)",
    "anthropic (>=0.55.0,<0.56.0)",
    "google-genai (>=1.23.0,<2.0.0)",
    "litellm (>=1.73.6,<2.0.0)",
    "cryptography (>=45.0.4,<46.0.0)",
    "pydub (>=0.25.1,<0.26.0)",
    "httpx (>=0.28.1,<0.29.0)"
]

[project.urls]
Homepage = "https://publish.obsidian.md/aurite/HOME"
Repository = "https://github.com/Aurite-ai/aurite-agents"

[project.scripts]
start-api = "aurite.bin.api.api:start"
start-worker = "aurite.bin.worker:start"
run-cli = "aurite.bin.cli.cli_executor:app"
aurite = "aurite.bin.cli.main:app"

[tool.poetry]
packages = [{ include = "aurite", from = "src" }]
include = ["LICENSE", "src/aurite/packaged"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-timeout = "^2.4.0"
mypy = "^1.16.1"
types-pyyaml = "^6.0.12.20250516"
types-pytz = "^2025.2.0.20250516"
jupyter = "^1.1.1"
pre-commit = "^4.2.0"
alembic = "^1.16.2"
deptry = {version = "^0.23.0", python = ">=3.11,<4.0"}

[tool.poetry.group.storage]
optional = true

[tool.poetry.group.storage.dependencies]
redis = "^6.2.0"
psycopg2-binary = "^2.9.10"
mem0ai = {version = "^0.1.113", python = ">=3.11,<4.0"}

[tool.poetry.group.ml]
optional = true

[tool.poetry.group.ml.dependencies]
pandas = "^2.3.0"
sentence-transformers = "^4.1.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
log_cli = true
log_cli_level = "INFO"
markers = [
    "unit: marks tests as unit tests (fast, isolated)",
    "integration: marks tests as integration tests (component interaction)",
    "e2e: marks tests as end-to-end tests (may require external resources)",
    "anyio: marks tests as anyio-based async tests",
    "core: mark test as core functionality test",
    "user: mark test as requiring user credentials",
    "extended: mark test as extended functionality test",
    "agent: mark test as agent test",
    "infrastructure: mark test as infrastructure/setup verification",
    "evaluation: mark test as agent evaluation test",
    "rubric: mark test that uses an evaluation rubric",
    "multirun: mark test that runs multiple evaluation iterations",
    "benchmark: mark test that compares against benchmarks",
]
pythonpath = [".", "src", "aurite"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::RuntimeWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestUnknownMarkWarning",
    "ignore::pytest.PytestConfigWarning",
]
addopts = "--verbose --no-header --disable-warnings"
junit_family = "xunit2"
timeout = 60

[tool.mypy]
warn_return_any = false
ignore_missing_imports = true
check_untyped_defs = false
disallow_untyped_defs = false
show_error_codes = true
disallow_untyped_calls = false
files=["src/aurite/**/*.py"]
follow_imports = "silent"

[tool.deptry]
known_first_party = ["aurite"]
extend_exclude = ["tests", "docs"]
per_rule_ignores = {DEP004 = ["pandas", "redis", "mem0", "psycopg2", "sentence_transformers"]}

[tool.deptry.package_module_name_map]
"psycopg2-binary" = "psycopg2"
"mem0ai" = "mem0"
"pandas" = "pandas"
"sentence-transformers" = "sentence_transformers"
