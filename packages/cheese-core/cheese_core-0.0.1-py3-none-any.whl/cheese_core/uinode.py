"""
UiNode API wrapper for Cheese Core
"""

from java import jclass
from typing import runtime_checkable, Protocol, Optional, Dict, Any
# 引用 Kotlin 侧的类
CoreFactory = jclass("net.codeocean.cheese.core.CoreFactory")
from net.codeocean.cheese.core import UiNodeCallBack
from java import dynamic_proxy

@runtime_checkable
class ViewNodeList(Protocol):
    """对应TypeScript的ViewNodeList类型定义"""

    def get(self, index: int) -> 'ViewNode': ...

    def size(self) -> int: ...

@runtime_checkable
class ViewNode(Protocol):
    """严格对应TypeScript的ViewNode类型定义"""

    # 基础属性方法
    def getText(self) -> str: ...
    def desc(self) -> str: ...
    def getId(self) -> str: ...

    # 嵌套对象定义
    class Children(Protocol):
        def size(self) -> int: ...
        def get(self, index: int) -> 'ViewNode': ...

    class ActionList(Protocol):
        def get(self, index: int) -> 'ViewNode': ...
        def clear(self) -> None: ...

    # 结构体返回值
    class Rect(Protocol):
        left: int
        top: int
        right: int
        bottom: int

    # 子节点操作
    def getChildren(self) -> 'Children': ...
    def childAt(self, i: int) -> 'ViewNode': ...
    def getChildCount(self) -> int: ...

    # 层级关系
    def getParent(self) -> 'ViewNode': ...
    def getNextSibling(self) -> 'ViewNode': ...
    def getPreviousSibling(self) -> 'ViewNode': ...
    def getRequireParent(self) -> 'ViewNode': ...

    # 坐标信息
    def getBounds(self) -> 'Rect': ...
    def getBoundsInParent(self) -> 'Rect': ...

    # 交互动作
    def click(self) -> bool: ...
    def longClick(self) -> bool: ...
    def doubleClick(self) -> bool: ...
    def globalClick(self) -> bool: ...
    def globalLongClick(self) -> bool: ...
    def tryClick(self) -> bool: ...
    def tryLongClick(self) -> bool: ...
    def trySelect(self) -> bool: ...

    # 滚动操作
    def scrollUp(self) -> bool: ...
    def scrollDown(self) -> bool: ...
    def scrollLeft(self) -> bool: ...
    def scrollRight(self) -> bool: ...
    def scrollForward(self) -> bool: ...
    def scrollBackward(self) -> bool: ...
    def swipeOffset(self, dx: int, dy: int, delay: int) -> bool: ...

    # 状态操作
    def clearFocus(self) -> bool: ...
    def clearSelection(self) -> bool: ...
    def clearChildrenCache(self) -> None: ...
    def refresh(self) -> bool: ...

    # 内容操作
    def appendText(self, text: str) -> None: ...
    def trySetText(self, text: 'Bitmap') -> bool: ...

    # 状态检查
    def isClickable(self) -> bool: ...

    # 元信息
    def getPackageName(self) -> str: ...
    def getClassName(self) -> str: ...
    def getHintText(self) -> str: ...

    # 比较
    def compareTo(self, v: 'ViewNode') -> int: ...

@runtime_checkable
class AccessibilityNodeInfoCompat(Protocol):
    """严格匹配TS接口的Protocol定义"""

    # Boolean 方法 → Python中转换为方法（因为TS是方法调用风格）
    def isEditable(self) -> bool: ...
    def isDismissable(self) -> bool: ...
    def isChecked(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isPassword(self) -> bool: ...
    def isScrollable(self) -> bool: ...
    def isGranularScrollingSupported(self) -> bool: ...
    def isTextSelectable(self) -> bool: ...
    def isImportantForAccessibility(self) -> bool: ...
    def isAccessibilityDataSensitive(self) -> bool: ...

    # 获取属性的方法
    def getText(self) -> str: ...
    def getViewIdResourceName(self) -> Optional[str]: ...
    def getWindowId(self) -> int: ...
    def getClassName(self) -> str: ...
    def getChild(self, i: int) -> Optional['AccessibilityNodeInfoCompat']: ...
    def getRoleDescription(self) -> Optional[str]: ...
    def getStateDescription(self) -> Optional[str]: ...
    def getContentDescription(self) -> Optional[str]: ...
    def getPackageName(self) -> str: ...

    # 返回复杂对象的方法（用Dict模拟TS的Rect）
    def getBoundsInWindow(self) -> Dict[str, int]: ...
    def getBoundsInScreen(self) -> Dict[str, int]: ...

_uinode_cls =  CoreFactory.INSTANCE.getUiNode()
class uinode:

    def __init__(self):
        # 获取 Kotlin 侧的 UiNode 实例
        self._uinode = CoreFactory.INSTANCE.createUiNode()

    @staticmethod
    def clearNodeCache() -> bool:
       return _uinode_cls.clearNodeCache()


    def forEachNode(self, callback: AccessibilityNodeInfoCompat) ->ViewNodeList:
        """
        :param callback: Python函数，包装成 UiNodeCallBack.IUiNodeCallBack 接口的实现
        :return: ViewNode 列表
        """
        # 定义一个 Java 接口回调实现，桥接 Python 回调

        class UiNodeCallBack1(dynamic_proxy(UiNodeCallBack.IUiNodeCallBack)):
           def callbackMethod(self, e):
             return callback(e)
        # class PyUiNodeCallBack(UiNodeCallBack.IUiNodeCallBack):
        #     def callbackMethod(self, node):
        #         # node 是 UiNodeCallBack.node(...) 返回的对象
        #         return callback(node)
        # 调用 Kotlin 的 forEachNode，传入回调对象
        view_nodes = self._uinode.forEachNode(UiNodeCallBack1())
        # view_nodes 是 Java 数组，转换成 Python list 返回
        return view_nodes


