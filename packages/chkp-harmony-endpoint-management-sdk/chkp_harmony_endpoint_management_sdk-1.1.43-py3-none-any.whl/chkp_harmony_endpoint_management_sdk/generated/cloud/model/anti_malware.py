# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class AntiMalware(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
            engineName = schemas.StrSchema
            engineStatus = schemas.StrSchema
            windowsDefenderStatus = schemas.StrSchema
            rebootRequiredReason = schemas.StrSchema
            lastSignatureUpdateSource = schemas.StrSchema
            __annotations__ = {
                "engineName": engineName,
                "engineStatus": engineStatus,
                "windowsDefenderStatus": windowsDefenderStatus,
                "rebootRequiredReason": rebootRequiredReason,
                "lastSignatureUpdateSource": lastSignatureUpdateSource,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engineName"]) -> MetaOapg.properties.engineName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engineStatus"]) -> MetaOapg.properties.engineStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["windowsDefenderStatus"]) -> MetaOapg.properties.windowsDefenderStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rebootRequiredReason"]) -> MetaOapg.properties.rebootRequiredReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastSignatureUpdateSource"]) -> MetaOapg.properties.lastSignatureUpdateSource: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["engineName"], typing_extensions.Literal["engineStatus"], typing_extensions.Literal["windowsDefenderStatus"], typing_extensions.Literal["rebootRequiredReason"], typing_extensions.Literal["lastSignatureUpdateSource"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engineName"]) -> typing.Union[MetaOapg.properties.engineName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engineStatus"]) -> typing.Union[MetaOapg.properties.engineStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["windowsDefenderStatus"]) -> typing.Union[MetaOapg.properties.windowsDefenderStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rebootRequiredReason"]) -> typing.Union[MetaOapg.properties.rebootRequiredReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastSignatureUpdateSource"]) -> typing.Union[MetaOapg.properties.lastSignatureUpdateSource, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["engineName"], typing_extensions.Literal["engineStatus"], typing_extensions.Literal["windowsDefenderStatus"], typing_extensions.Literal["rebootRequiredReason"], typing_extensions.Literal["lastSignatureUpdateSource"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        engineName: typing.Union[MetaOapg.properties.engineName, str, schemas.Unset] = schemas.unset,
        engineStatus: typing.Union[MetaOapg.properties.engineStatus, str, schemas.Unset] = schemas.unset,
        windowsDefenderStatus: typing.Union[MetaOapg.properties.windowsDefenderStatus, str, schemas.Unset] = schemas.unset,
        rebootRequiredReason: typing.Union[MetaOapg.properties.rebootRequiredReason, str, schemas.Unset] = schemas.unset,
        lastSignatureUpdateSource: typing.Union[MetaOapg.properties.lastSignatureUpdateSource, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AntiMalware':
        return super().__new__(
            cls,
            *_args,
            engineName=engineName,
            engineStatus=engineStatus,
            windowsDefenderStatus=windowsDefenderStatus,
            rebootRequiredReason=rebootRequiredReason,
            lastSignatureUpdateSource=lastSignatureUpdateSource,
            _configuration=_configuration,
        )
