# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class IFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A filter by which to select which devices are to be affected by the operation
    """

    class MetaOapg:
        required = {
            "filterValues",
            "columnName",
        }
        
        class properties:
        
            @staticmethod
            def columnName() -> typing.Type['ComputerColumnNames']:
                return ComputerColumnNames
            
            
            class filterValues(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filterValues':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def filterType() -> typing.Type['FilterType']:
                return FilterType
            isJson = schemas.BoolSchema
            __annotations__ = {
                "columnName": columnName,
                "filterValues": filterValues,
                "filterType": filterType,
                "isJson": isJson,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    filterValues: MetaOapg.properties.filterValues
    columnName: 'ComputerColumnNames'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterValues"]) -> MetaOapg.properties.filterValues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnName"]) -> 'ComputerColumnNames': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterType"]) -> 'FilterType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isJson"]) -> MetaOapg.properties.isJson: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["filterValues"], typing_extensions.Literal["columnName"], typing_extensions.Literal["filterType"], typing_extensions.Literal["isJson"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterValues"]) -> MetaOapg.properties.filterValues: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnName"]) -> 'ComputerColumnNames': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterType"]) -> typing.Union['FilterType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isJson"]) -> typing.Union[MetaOapg.properties.isJson, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filterValues"], typing_extensions.Literal["columnName"], typing_extensions.Literal["filterType"], typing_extensions.Literal["isJson"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        filterValues: typing.Union[MetaOapg.properties.filterValues, list, tuple, ],
        columnName: 'ComputerColumnNames',
        filterType: typing.Union['FilterType', schemas.Unset] = schemas.unset,
        isJson: typing.Union[MetaOapg.properties.isJson, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IFilter':
        return super().__new__(
            cls,
            *_args,
            filterValues=filterValues,
            columnName=columnName,
            filterType=filterType,
            isJson=isJson,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.computer_column_names import ComputerColumnNames
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.filter_type import FilterType
