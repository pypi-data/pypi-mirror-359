# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class IMalwareProtectionScanScanTargets(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
            fileSizeLimitMb = schemas.Float64Schema
            limitScanBySize = schemas.BoolSchema
            skipNonExecutables = schemas.BoolSchema
            scanMailMessagesOnAccess = schemas.BoolSchema
            mailMessages = schemas.BoolSchema
            other = schemas.BoolSchema
            networkDrives = schemas.BoolSchema
            criticalSector = schemas.BoolSchema
            removableDrives = schemas.BoolSchema
            localDrives = schemas.BoolSchema
            opticalDrives = schemas.BoolSchema
            __annotations__ = {
                "fileSizeLimitMb": fileSizeLimitMb,
                "limitScanBySize": limitScanBySize,
                "skipNonExecutables": skipNonExecutables,
                "scanMailMessagesOnAccess": scanMailMessagesOnAccess,
                "mailMessages": mailMessages,
                "other": other,
                "networkDrives": networkDrives,
                "criticalSector": criticalSector,
                "removableDrives": removableDrives,
                "localDrives": localDrives,
                "opticalDrives": opticalDrives,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileSizeLimitMb"]) -> MetaOapg.properties.fileSizeLimitMb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limitScanBySize"]) -> MetaOapg.properties.limitScanBySize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skipNonExecutables"]) -> MetaOapg.properties.skipNonExecutables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanMailMessagesOnAccess"]) -> MetaOapg.properties.scanMailMessagesOnAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mailMessages"]) -> MetaOapg.properties.mailMessages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other"]) -> MetaOapg.properties.other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networkDrives"]) -> MetaOapg.properties.networkDrives: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["criticalSector"]) -> MetaOapg.properties.criticalSector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["removableDrives"]) -> MetaOapg.properties.removableDrives: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localDrives"]) -> MetaOapg.properties.localDrives: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opticalDrives"]) -> MetaOapg.properties.opticalDrives: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fileSizeLimitMb"], typing_extensions.Literal["limitScanBySize"], typing_extensions.Literal["skipNonExecutables"], typing_extensions.Literal["scanMailMessagesOnAccess"], typing_extensions.Literal["mailMessages"], typing_extensions.Literal["other"], typing_extensions.Literal["networkDrives"], typing_extensions.Literal["criticalSector"], typing_extensions.Literal["removableDrives"], typing_extensions.Literal["localDrives"], typing_extensions.Literal["opticalDrives"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileSizeLimitMb"]) -> typing.Union[MetaOapg.properties.fileSizeLimitMb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limitScanBySize"]) -> typing.Union[MetaOapg.properties.limitScanBySize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skipNonExecutables"]) -> typing.Union[MetaOapg.properties.skipNonExecutables, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanMailMessagesOnAccess"]) -> typing.Union[MetaOapg.properties.scanMailMessagesOnAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mailMessages"]) -> typing.Union[MetaOapg.properties.mailMessages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other"]) -> typing.Union[MetaOapg.properties.other, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networkDrives"]) -> typing.Union[MetaOapg.properties.networkDrives, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["criticalSector"]) -> typing.Union[MetaOapg.properties.criticalSector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["removableDrives"]) -> typing.Union[MetaOapg.properties.removableDrives, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localDrives"]) -> typing.Union[MetaOapg.properties.localDrives, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opticalDrives"]) -> typing.Union[MetaOapg.properties.opticalDrives, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fileSizeLimitMb"], typing_extensions.Literal["limitScanBySize"], typing_extensions.Literal["skipNonExecutables"], typing_extensions.Literal["scanMailMessagesOnAccess"], typing_extensions.Literal["mailMessages"], typing_extensions.Literal["other"], typing_extensions.Literal["networkDrives"], typing_extensions.Literal["criticalSector"], typing_extensions.Literal["removableDrives"], typing_extensions.Literal["localDrives"], typing_extensions.Literal["opticalDrives"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        fileSizeLimitMb: typing.Union[MetaOapg.properties.fileSizeLimitMb, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        limitScanBySize: typing.Union[MetaOapg.properties.limitScanBySize, bool, schemas.Unset] = schemas.unset,
        skipNonExecutables: typing.Union[MetaOapg.properties.skipNonExecutables, bool, schemas.Unset] = schemas.unset,
        scanMailMessagesOnAccess: typing.Union[MetaOapg.properties.scanMailMessagesOnAccess, bool, schemas.Unset] = schemas.unset,
        mailMessages: typing.Union[MetaOapg.properties.mailMessages, bool, schemas.Unset] = schemas.unset,
        other: typing.Union[MetaOapg.properties.other, bool, schemas.Unset] = schemas.unset,
        networkDrives: typing.Union[MetaOapg.properties.networkDrives, bool, schemas.Unset] = schemas.unset,
        criticalSector: typing.Union[MetaOapg.properties.criticalSector, bool, schemas.Unset] = schemas.unset,
        removableDrives: typing.Union[MetaOapg.properties.removableDrives, bool, schemas.Unset] = schemas.unset,
        localDrives: typing.Union[MetaOapg.properties.localDrives, bool, schemas.Unset] = schemas.unset,
        opticalDrives: typing.Union[MetaOapg.properties.opticalDrives, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IMalwareProtectionScanScanTargets':
        return super().__new__(
            cls,
            *_args,
            fileSizeLimitMb=fileSizeLimitMb,
            limitScanBySize=limitScanBySize,
            skipNonExecutables=skipNonExecutables,
            scanMailMessagesOnAccess=scanMailMessagesOnAccess,
            mailMessages=mailMessages,
            other=other,
            networkDrives=networkDrives,
            criticalSector=criticalSector,
            removableDrives=removableDrives,
            localDrives=localDrives,
            opticalDrives=opticalDrives,
            _configuration=_configuration,
        )
