# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class IMalwareProtectionTreatment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
            sendInfectionDataSample = schemas.BoolSchema
            sendInfectionData = schemas.BoolSchema
        
            @staticmethod
            def treatmentRiskware() -> typing.Type['IMalwareProtectionTreatmentTreatmentRiskware']:
                return IMalwareProtectionTreatmentTreatmentRiskware
        
            @staticmethod
            def treatmentMethod() -> typing.Type['AmTreatment']:
                return AmTreatment
            __annotations__ = {
                "sendInfectionDataSample": sendInfectionDataSample,
                "sendInfectionData": sendInfectionData,
                "treatmentRiskware": treatmentRiskware,
                "treatmentMethod": treatmentMethod,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendInfectionDataSample"]) -> MetaOapg.properties.sendInfectionDataSample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendInfectionData"]) -> MetaOapg.properties.sendInfectionData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["treatmentRiskware"]) -> 'IMalwareProtectionTreatmentTreatmentRiskware': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["treatmentMethod"]) -> 'AmTreatment': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sendInfectionDataSample"], typing_extensions.Literal["sendInfectionData"], typing_extensions.Literal["treatmentRiskware"], typing_extensions.Literal["treatmentMethod"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendInfectionDataSample"]) -> typing.Union[MetaOapg.properties.sendInfectionDataSample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendInfectionData"]) -> typing.Union[MetaOapg.properties.sendInfectionData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["treatmentRiskware"]) -> typing.Union['IMalwareProtectionTreatmentTreatmentRiskware', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["treatmentMethod"]) -> typing.Union['AmTreatment', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sendInfectionDataSample"], typing_extensions.Literal["sendInfectionData"], typing_extensions.Literal["treatmentRiskware"], typing_extensions.Literal["treatmentMethod"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        sendInfectionDataSample: typing.Union[MetaOapg.properties.sendInfectionDataSample, bool, schemas.Unset] = schemas.unset,
        sendInfectionData: typing.Union[MetaOapg.properties.sendInfectionData, bool, schemas.Unset] = schemas.unset,
        treatmentRiskware: typing.Union['IMalwareProtectionTreatmentTreatmentRiskware', schemas.Unset] = schemas.unset,
        treatmentMethod: typing.Union['AmTreatment', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IMalwareProtectionTreatment':
        return super().__new__(
            cls,
            *_args,
            sendInfectionDataSample=sendInfectionDataSample,
            sendInfectionData=sendInfectionData,
            treatmentRiskware=treatmentRiskware,
            treatmentMethod=treatmentMethod,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.am_treatment import AmTreatment
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.i_malware_protection_treatment_treatment_riskware import IMalwareProtectionTreatmentTreatmentRiskware
