# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class QuarantinedFileFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "archiveSizeBytes",
            "quarantinedOn",
            "archivePath",
            "id",
            "originalPath",
            "lastModifiedOn",
            "md5",
            "sizeBytes",
        }
        
        class properties:
        
            @staticmethod
            def lastModifiedOn() -> typing.Type['StandardTimestamp']:
                return StandardTimestamp
        
            @staticmethod
            def quarantinedOn() -> typing.Type['StandardTimestamp']:
                return StandardTimestamp
            md5 = schemas.StrSchema
            archiveSizeBytes = schemas.Float64Schema
            sizeBytes = schemas.Float64Schema
            archivePath = schemas.StrSchema
            originalPath = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class deletedOn(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            StandardTimestamp,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'deletedOn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class restoredOn(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            StandardTimestamp,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'restoredOn':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "lastModifiedOn": lastModifiedOn,
                "quarantinedOn": quarantinedOn,
                "md5": md5,
                "archiveSizeBytes": archiveSizeBytes,
                "sizeBytes": sizeBytes,
                "archivePath": archivePath,
                "originalPath": originalPath,
                "id": id,
                "deletedOn": deletedOn,
                "restoredOn": restoredOn,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    archiveSizeBytes: MetaOapg.properties.archiveSizeBytes
    quarantinedOn: 'StandardTimestamp'
    archivePath: MetaOapg.properties.archivePath
    id: MetaOapg.properties.id
    originalPath: MetaOapg.properties.originalPath
    lastModifiedOn: 'StandardTimestamp'
    md5: MetaOapg.properties.md5
    sizeBytes: MetaOapg.properties.sizeBytes
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archiveSizeBytes"]) -> MetaOapg.properties.archiveSizeBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quarantinedOn"]) -> 'StandardTimestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archivePath"]) -> MetaOapg.properties.archivePath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalPath"]) -> MetaOapg.properties.originalPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModifiedOn"]) -> 'StandardTimestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizeBytes"]) -> MetaOapg.properties.sizeBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletedOn"]) -> MetaOapg.properties.deletedOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restoredOn"]) -> MetaOapg.properties.restoredOn: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["archiveSizeBytes"], typing_extensions.Literal["quarantinedOn"], typing_extensions.Literal["archivePath"], typing_extensions.Literal["id"], typing_extensions.Literal["originalPath"], typing_extensions.Literal["lastModifiedOn"], typing_extensions.Literal["md5"], typing_extensions.Literal["sizeBytes"], typing_extensions.Literal["deletedOn"], typing_extensions.Literal["restoredOn"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archiveSizeBytes"]) -> MetaOapg.properties.archiveSizeBytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quarantinedOn"]) -> 'StandardTimestamp': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archivePath"]) -> MetaOapg.properties.archivePath: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalPath"]) -> MetaOapg.properties.originalPath: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModifiedOn"]) -> 'StandardTimestamp': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizeBytes"]) -> MetaOapg.properties.sizeBytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletedOn"]) -> typing.Union[MetaOapg.properties.deletedOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restoredOn"]) -> typing.Union[MetaOapg.properties.restoredOn, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["archiveSizeBytes"], typing_extensions.Literal["quarantinedOn"], typing_extensions.Literal["archivePath"], typing_extensions.Literal["id"], typing_extensions.Literal["originalPath"], typing_extensions.Literal["lastModifiedOn"], typing_extensions.Literal["md5"], typing_extensions.Literal["sizeBytes"], typing_extensions.Literal["deletedOn"], typing_extensions.Literal["restoredOn"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        archiveSizeBytes: typing.Union[MetaOapg.properties.archiveSizeBytes, decimal.Decimal, int, float, ],
        quarantinedOn: 'StandardTimestamp',
        archivePath: typing.Union[MetaOapg.properties.archivePath, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        originalPath: typing.Union[MetaOapg.properties.originalPath, str, ],
        lastModifiedOn: 'StandardTimestamp',
        md5: typing.Union[MetaOapg.properties.md5, str, ],
        sizeBytes: typing.Union[MetaOapg.properties.sizeBytes, decimal.Decimal, int, float, ],
        deletedOn: typing.Union[MetaOapg.properties.deletedOn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        restoredOn: typing.Union[MetaOapg.properties.restoredOn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'QuarantinedFileFile':
        return super().__new__(
            cls,
            *_args,
            archiveSizeBytes=archiveSizeBytes,
            quarantinedOn=quarantinedOn,
            archivePath=archivePath,
            id=id,
            originalPath=originalPath,
            lastModifiedOn=lastModifiedOn,
            md5=md5,
            sizeBytes=sizeBytes,
            deletedOn=deletedOn,
            restoredOn=restoredOn,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.standard_timestamp import StandardTimestamp
