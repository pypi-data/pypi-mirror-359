# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class ICapabilities(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "onlyInstalledAndRun",
            "onlyNotRunning",
            "onlyInstalledAndRunAndEnabled",
            "onlyInstalled",
        }
        
        class properties:
            
            
            class onlyInstalled(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onlyInstalled':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class onlyInstalledAndRun(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onlyInstalledAndRun':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class onlyInstalledAndRunAndEnabled(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onlyInstalledAndRunAndEnabled':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class onlyNotRunning(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onlyNotRunning':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "onlyInstalled": onlyInstalled,
                "onlyInstalledAndRun": onlyInstalledAndRun,
                "onlyInstalledAndRunAndEnabled": onlyInstalledAndRunAndEnabled,
                "onlyNotRunning": onlyNotRunning,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    onlyInstalledAndRun: MetaOapg.properties.onlyInstalledAndRun
    onlyNotRunning: MetaOapg.properties.onlyNotRunning
    onlyInstalledAndRunAndEnabled: MetaOapg.properties.onlyInstalledAndRunAndEnabled
    onlyInstalled: MetaOapg.properties.onlyInstalled
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onlyInstalledAndRun"]) -> MetaOapg.properties.onlyInstalledAndRun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onlyNotRunning"]) -> MetaOapg.properties.onlyNotRunning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onlyInstalledAndRunAndEnabled"]) -> MetaOapg.properties.onlyInstalledAndRunAndEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onlyInstalled"]) -> MetaOapg.properties.onlyInstalled: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["onlyInstalledAndRun"], typing_extensions.Literal["onlyNotRunning"], typing_extensions.Literal["onlyInstalledAndRunAndEnabled"], typing_extensions.Literal["onlyInstalled"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onlyInstalledAndRun"]) -> MetaOapg.properties.onlyInstalledAndRun: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onlyNotRunning"]) -> MetaOapg.properties.onlyNotRunning: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onlyInstalledAndRunAndEnabled"]) -> MetaOapg.properties.onlyInstalledAndRunAndEnabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onlyInstalled"]) -> MetaOapg.properties.onlyInstalled: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["onlyInstalledAndRun"], typing_extensions.Literal["onlyNotRunning"], typing_extensions.Literal["onlyInstalledAndRunAndEnabled"], typing_extensions.Literal["onlyInstalled"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        onlyInstalledAndRun: typing.Union[MetaOapg.properties.onlyInstalledAndRun, list, tuple, ],
        onlyNotRunning: typing.Union[MetaOapg.properties.onlyNotRunning, list, tuple, ],
        onlyInstalledAndRunAndEnabled: typing.Union[MetaOapg.properties.onlyInstalledAndRunAndEnabled, list, tuple, ],
        onlyInstalled: typing.Union[MetaOapg.properties.onlyInstalled, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ICapabilities':
        return super().__new__(
            cls,
            *_args,
            onlyInstalledAndRun=onlyInstalledAndRun,
            onlyNotRunning=onlyNotRunning,
            onlyInstalledAndRunAndEnabled=onlyInstalledAndRunAndEnabled,
            onlyInstalled=onlyInstalled,
            _configuration=_configuration,
        )
