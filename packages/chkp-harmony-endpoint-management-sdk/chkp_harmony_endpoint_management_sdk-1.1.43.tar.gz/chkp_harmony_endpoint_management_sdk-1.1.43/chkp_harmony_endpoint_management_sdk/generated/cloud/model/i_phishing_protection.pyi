# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class IPhishingProtection(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def protectionMode() -> typing.Type['CapabilityMode']:
                return CapabilityMode
            allowDismissAlert = schemas.BoolSchema
            sendLogForEachScannedSite = schemas.BoolSchema
            allowUserToCancelScan = schemas.BoolSchema
        
            @staticmethod
            def scanLocalHtmlFiles() -> typing.Type['StandardToggleState']:
                return StandardToggleState
            enableNotifications = schemas.BoolSchema
            
            
            class protectedDomains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProtectedNetworkResourceDomain']:
                        return ProtectedNetworkResourceDomain
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProtectedNetworkResourceDomain'], typing.List['ProtectedNetworkResourceDomain']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'protectedDomains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProtectedNetworkResourceDomain':
                    return super().__getitem__(i)
            
            
            class protectedIPs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProtectedNetworkResourceIpRange']:
                        return ProtectedNetworkResourceIpRange
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProtectedNetworkResourceIpRange'], typing.List['ProtectedNetworkResourceIpRange']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'protectedIPs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProtectedNetworkResourceIpRange':
                    return super().__getitem__(i)
            __annotations__ = {
                "protectionMode": protectionMode,
                "allowDismissAlert": allowDismissAlert,
                "sendLogForEachScannedSite": sendLogForEachScannedSite,
                "allowUserToCancelScan": allowUserToCancelScan,
                "scanLocalHtmlFiles": scanLocalHtmlFiles,
                "enableNotifications": enableNotifications,
                "protectedDomains": protectedDomains,
                "protectedIPs": protectedIPs,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protectionMode"]) -> 'CapabilityMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowDismissAlert"]) -> MetaOapg.properties.allowDismissAlert: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendLogForEachScannedSite"]) -> MetaOapg.properties.sendLogForEachScannedSite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowUserToCancelScan"]) -> MetaOapg.properties.allowUserToCancelScan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanLocalHtmlFiles"]) -> 'StandardToggleState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableNotifications"]) -> MetaOapg.properties.enableNotifications: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protectedDomains"]) -> MetaOapg.properties.protectedDomains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protectedIPs"]) -> MetaOapg.properties.protectedIPs: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["protectionMode"], typing_extensions.Literal["allowDismissAlert"], typing_extensions.Literal["sendLogForEachScannedSite"], typing_extensions.Literal["allowUserToCancelScan"], typing_extensions.Literal["scanLocalHtmlFiles"], typing_extensions.Literal["enableNotifications"], typing_extensions.Literal["protectedDomains"], typing_extensions.Literal["protectedIPs"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protectionMode"]) -> typing.Union['CapabilityMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowDismissAlert"]) -> typing.Union[MetaOapg.properties.allowDismissAlert, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendLogForEachScannedSite"]) -> typing.Union[MetaOapg.properties.sendLogForEachScannedSite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowUserToCancelScan"]) -> typing.Union[MetaOapg.properties.allowUserToCancelScan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanLocalHtmlFiles"]) -> typing.Union['StandardToggleState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableNotifications"]) -> typing.Union[MetaOapg.properties.enableNotifications, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protectedDomains"]) -> typing.Union[MetaOapg.properties.protectedDomains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protectedIPs"]) -> typing.Union[MetaOapg.properties.protectedIPs, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["protectionMode"], typing_extensions.Literal["allowDismissAlert"], typing_extensions.Literal["sendLogForEachScannedSite"], typing_extensions.Literal["allowUserToCancelScan"], typing_extensions.Literal["scanLocalHtmlFiles"], typing_extensions.Literal["enableNotifications"], typing_extensions.Literal["protectedDomains"], typing_extensions.Literal["protectedIPs"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        protectionMode: typing.Union['CapabilityMode', schemas.Unset] = schemas.unset,
        allowDismissAlert: typing.Union[MetaOapg.properties.allowDismissAlert, bool, schemas.Unset] = schemas.unset,
        sendLogForEachScannedSite: typing.Union[MetaOapg.properties.sendLogForEachScannedSite, bool, schemas.Unset] = schemas.unset,
        allowUserToCancelScan: typing.Union[MetaOapg.properties.allowUserToCancelScan, bool, schemas.Unset] = schemas.unset,
        scanLocalHtmlFiles: typing.Union['StandardToggleState', schemas.Unset] = schemas.unset,
        enableNotifications: typing.Union[MetaOapg.properties.enableNotifications, bool, schemas.Unset] = schemas.unset,
        protectedDomains: typing.Union[MetaOapg.properties.protectedDomains, list, tuple, schemas.Unset] = schemas.unset,
        protectedIPs: typing.Union[MetaOapg.properties.protectedIPs, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IPhishingProtection':
        return super().__new__(
            cls,
            *_args,
            protectionMode=protectionMode,
            allowDismissAlert=allowDismissAlert,
            sendLogForEachScannedSite=sendLogForEachScannedSite,
            allowUserToCancelScan=allowUserToCancelScan,
            scanLocalHtmlFiles=scanLocalHtmlFiles,
            enableNotifications=enableNotifications,
            protectedDomains=protectedDomains,
            protectedIPs=protectedIPs,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.capability_mode import CapabilityMode
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.protected_network_resource_domain import ProtectedNetworkResourceDomain
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.protected_network_resource_ip_range import ProtectedNetworkResourceIpRange
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.standard_toggle_state import StandardToggleState
