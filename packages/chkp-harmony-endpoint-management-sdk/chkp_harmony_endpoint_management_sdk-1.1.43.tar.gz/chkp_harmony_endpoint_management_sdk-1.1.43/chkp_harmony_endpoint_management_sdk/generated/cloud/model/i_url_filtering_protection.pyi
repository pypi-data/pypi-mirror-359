# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class IUrlFilteringProtection(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def mode() -> typing.Type['CapabilityMode']:
                return CapabilityMode
            enableNetworkLevelFiltering = schemas.BoolSchema
            disableNotificationsForBrowsers = schemas.BoolSchema
            blockMaliciousScripts = schemas.BoolSchema
        
            @staticmethod
            def userOverrides() -> typing.Type['IUrlFilteringProtectionUserOverrides']:
                return IUrlFilteringProtectionUserOverrides
        
            @staticmethod
            def allowLogsForVisitedSites() -> typing.Type['LogsMode']:
                return LogsMode
            __annotations__ = {
                "mode": mode,
                "enableNetworkLevelFiltering": enableNetworkLevelFiltering,
                "disableNotificationsForBrowsers": disableNotificationsForBrowsers,
                "blockMaliciousScripts": blockMaliciousScripts,
                "userOverrides": userOverrides,
                "allowLogsForVisitedSites": allowLogsForVisitedSites,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> 'CapabilityMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableNetworkLevelFiltering"]) -> MetaOapg.properties.enableNetworkLevelFiltering: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disableNotificationsForBrowsers"]) -> MetaOapg.properties.disableNotificationsForBrowsers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockMaliciousScripts"]) -> MetaOapg.properties.blockMaliciousScripts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userOverrides"]) -> 'IUrlFilteringProtectionUserOverrides': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowLogsForVisitedSites"]) -> 'LogsMode': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mode"], typing_extensions.Literal["enableNetworkLevelFiltering"], typing_extensions.Literal["disableNotificationsForBrowsers"], typing_extensions.Literal["blockMaliciousScripts"], typing_extensions.Literal["userOverrides"], typing_extensions.Literal["allowLogsForVisitedSites"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union['CapabilityMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableNetworkLevelFiltering"]) -> typing.Union[MetaOapg.properties.enableNetworkLevelFiltering, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disableNotificationsForBrowsers"]) -> typing.Union[MetaOapg.properties.disableNotificationsForBrowsers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockMaliciousScripts"]) -> typing.Union[MetaOapg.properties.blockMaliciousScripts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userOverrides"]) -> typing.Union['IUrlFilteringProtectionUserOverrides', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowLogsForVisitedSites"]) -> typing.Union['LogsMode', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mode"], typing_extensions.Literal["enableNetworkLevelFiltering"], typing_extensions.Literal["disableNotificationsForBrowsers"], typing_extensions.Literal["blockMaliciousScripts"], typing_extensions.Literal["userOverrides"], typing_extensions.Literal["allowLogsForVisitedSites"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        mode: typing.Union['CapabilityMode', schemas.Unset] = schemas.unset,
        enableNetworkLevelFiltering: typing.Union[MetaOapg.properties.enableNetworkLevelFiltering, bool, schemas.Unset] = schemas.unset,
        disableNotificationsForBrowsers: typing.Union[MetaOapg.properties.disableNotificationsForBrowsers, bool, schemas.Unset] = schemas.unset,
        blockMaliciousScripts: typing.Union[MetaOapg.properties.blockMaliciousScripts, bool, schemas.Unset] = schemas.unset,
        userOverrides: typing.Union['IUrlFilteringProtectionUserOverrides', schemas.Unset] = schemas.unset,
        allowLogsForVisitedSites: typing.Union['LogsMode', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IUrlFilteringProtection':
        return super().__new__(
            cls,
            *_args,
            mode=mode,
            enableNetworkLevelFiltering=enableNetworkLevelFiltering,
            disableNotificationsForBrowsers=disableNotificationsForBrowsers,
            blockMaliciousScripts=blockMaliciousScripts,
            userOverrides=userOverrides,
            allowLogsForVisitedSites=allowLogsForVisitedSites,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.capability_mode import CapabilityMode
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.i_url_filtering_protection_user_overrides import IUrlFilteringProtectionUserOverrides
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.logs_mode import LogsMode
