# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class MissingCITokenErrorExample(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "instance",
            "detail",
            "source",
            "httpCode",
            "title",
            "type",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['ErrorTypesMissingCiToken']:
                return ErrorTypesMissingCiToken
            
            
            class title(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "A CloudInfra token was not provided": "A_CLOUD_INFRA_TOKEN_WAS_NOT_PROVIDED",
                    }
                
                @schemas.classproperty
                def A_CLOUD_INFRA_TOKEN_WAS_NOT_PROVIDED(cls):
                    return cls("A CloudInfra token was not provided")
            
            
            class detail(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "The request did not contain an 'Authorization' header": "THE_REQUEST_DID_NOT_CONTAIN_AN_AUTHORIZATION_HEADER",
                    }
                
                @schemas.classproperty
                def THE_REQUEST_DID_NOT_CONTAIN_AN_AUTHORIZATION_HEADER(cls):
                    return cls("The request did not contain an 'Authorization' header")
            
            
            class instance(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "base/server/authentication/cloudinfra": "BASE_SERVER_AUTHENTICATION_CLOUDINFRA",
                    }
                
                @schemas.classproperty
                def BASE_SERVER_AUTHENTICATION_CLOUDINFRA(cls):
                    return cls("base/server/authentication/cloudinfra")
        
            @staticmethod
            def source() -> typing.Type['ErrorSourceClient']:
                return ErrorSourceClient
            
            
            class httpCode(
                schemas.EnumBase,
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        401: "POSITIVE_401",
                    }
                
                @schemas.classproperty
                def POSITIVE_401(cls):
                    return cls(401)
            referenceId = schemas.StrSchema
            extensions = schemas.DictSchema
            __annotations__ = {
                "type": type,
                "title": title,
                "detail": detail,
                "instance": instance,
                "source": source,
                "httpCode": httpCode,
                "referenceId": referenceId,
                "extensions": extensions,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    instance: MetaOapg.properties.instance
    detail: MetaOapg.properties.detail
    source: 'ErrorSourceClient'
    httpCode: MetaOapg.properties.httpCode
    title: MetaOapg.properties.title
    type: 'ErrorTypesMissingCiToken'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'ErrorSourceClient': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["httpCode"]) -> MetaOapg.properties.httpCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ErrorTypesMissingCiToken': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referenceId"]) -> MetaOapg.properties.referenceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extensions"]) -> MetaOapg.properties.extensions: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["instance"], typing_extensions.Literal["detail"], typing_extensions.Literal["source"], typing_extensions.Literal["httpCode"], typing_extensions.Literal["title"], typing_extensions.Literal["type"], typing_extensions.Literal["referenceId"], typing_extensions.Literal["extensions"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> 'ErrorSourceClient': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["httpCode"]) -> MetaOapg.properties.httpCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'ErrorTypesMissingCiToken': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referenceId"]) -> typing.Union[MetaOapg.properties.referenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extensions"]) -> typing.Union[MetaOapg.properties.extensions, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["instance"], typing_extensions.Literal["detail"], typing_extensions.Literal["source"], typing_extensions.Literal["httpCode"], typing_extensions.Literal["title"], typing_extensions.Literal["type"], typing_extensions.Literal["referenceId"], typing_extensions.Literal["extensions"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        instance: typing.Union[MetaOapg.properties.instance, str, ],
        detail: typing.Union[MetaOapg.properties.detail, str, ],
        source: 'ErrorSourceClient',
        httpCode: typing.Union[MetaOapg.properties.httpCode, decimal.Decimal, int, float, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: 'ErrorTypesMissingCiToken',
        referenceId: typing.Union[MetaOapg.properties.referenceId, str, schemas.Unset] = schemas.unset,
        extensions: typing.Union[MetaOapg.properties.extensions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MissingCITokenErrorExample':
        return super().__new__(
            cls,
            *_args,
            instance=instance,
            detail=detail,
            source=source,
            httpCode=httpCode,
            title=title,
            type=type,
            referenceId=referenceId,
            extensions=extensions,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.error_source_client import ErrorSourceClient
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.error_types_missing_ci_token import ErrorTypesMissingCiToken
