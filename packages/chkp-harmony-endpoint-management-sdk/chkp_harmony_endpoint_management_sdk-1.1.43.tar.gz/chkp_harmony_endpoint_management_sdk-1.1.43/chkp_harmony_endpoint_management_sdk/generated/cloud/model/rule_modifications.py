# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class RuleModifications(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Modifications made to a rule
    """

    class MetaOapg:
        required = {
            "settings",
            "assignments",
            "order",
        }
        
        class properties:
        
            @staticmethod
            def settings() -> typing.Type['RuleSettingsModifications']:
                return RuleSettingsModifications
        
            @staticmethod
            def order() -> typing.Type['RuleOrderModification']:
                return RuleOrderModification
        
            @staticmethod
            def assignments() -> typing.Type['RuleAssignmentsModification']:
                return RuleAssignmentsModification
            __annotations__ = {
                "settings": settings,
                "order": order,
                "assignments": assignments,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    settings: 'RuleSettingsModifications'
    assignments: 'RuleAssignmentsModification'
    order: 'RuleOrderModification'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'RuleSettingsModifications': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignments"]) -> 'RuleAssignmentsModification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> 'RuleOrderModification': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["settings"], typing_extensions.Literal["assignments"], typing_extensions.Literal["order"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> 'RuleSettingsModifications': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignments"]) -> 'RuleAssignmentsModification': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> 'RuleOrderModification': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["settings"], typing_extensions.Literal["assignments"], typing_extensions.Literal["order"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        settings: 'RuleSettingsModifications',
        assignments: 'RuleAssignmentsModification',
        order: 'RuleOrderModification',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RuleModifications':
        return super().__new__(
            cls,
            *_args,
            settings=settings,
            assignments=assignments,
            order=order,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.rule_assignments_modification import RuleAssignmentsModification
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.rule_order_modification import RuleOrderModification
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.rule_settings_modifications import RuleSettingsModifications
