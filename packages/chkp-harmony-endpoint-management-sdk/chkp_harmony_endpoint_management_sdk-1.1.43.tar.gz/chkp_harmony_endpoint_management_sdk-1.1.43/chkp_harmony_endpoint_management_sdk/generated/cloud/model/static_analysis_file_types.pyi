# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class StaticAnalysisFileTypes(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def office() -> typing.Type['CapabilityMode']:
                return CapabilityMode
        
            @staticmethod
            def exe() -> typing.Type['CapabilityMode']:
                return CapabilityMode
        
            @staticmethod
            def dll() -> typing.Type['CapabilityMode']:
                return CapabilityMode
            __annotations__ = {
                "office": office,
                "exe": exe,
                "dll": dll,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["office"]) -> 'CapabilityMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exe"]) -> 'CapabilityMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dll"]) -> 'CapabilityMode': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["office"], typing_extensions.Literal["exe"], typing_extensions.Literal["dll"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["office"]) -> typing.Union['CapabilityMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exe"]) -> typing.Union['CapabilityMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dll"]) -> typing.Union['CapabilityMode', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["office"], typing_extensions.Literal["exe"], typing_extensions.Literal["dll"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        office: typing.Union['CapabilityMode', schemas.Unset] = schemas.unset,
        exe: typing.Union['CapabilityMode', schemas.Unset] = schemas.unset,
        dll: typing.Union['CapabilityMode', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StaticAnalysisFileTypes':
        return super().__new__(
            cls,
            *_args,
            office=office,
            exe=exe,
            dll=dll,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.capability_mode import CapabilityMode
