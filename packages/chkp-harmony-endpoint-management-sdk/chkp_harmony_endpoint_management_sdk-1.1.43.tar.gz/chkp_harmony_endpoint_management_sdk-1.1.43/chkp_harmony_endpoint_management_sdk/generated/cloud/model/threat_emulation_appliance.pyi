# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class ThreatEmulationAppliance(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "apiKey",
            "certificatePublicKey",
            "ipAddress",
            "certificateName",
        }
        
        class properties:
            apiKey = schemas.StrSchema
            ipAddress = schemas.StrSchema
            certificateName = schemas.StrSchema
            certificatePublicKey = schemas.StrSchema
            __annotations__ = {
                "apiKey": apiKey,
                "ipAddress": ipAddress,
                "certificateName": certificateName,
                "certificatePublicKey": certificatePublicKey,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    apiKey: MetaOapg.properties.apiKey
    certificatePublicKey: MetaOapg.properties.certificatePublicKey
    ipAddress: MetaOapg.properties.ipAddress
    certificateName: MetaOapg.properties.certificateName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiKey"]) -> MetaOapg.properties.apiKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificatePublicKey"]) -> MetaOapg.properties.certificatePublicKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificateName"]) -> MetaOapg.properties.certificateName: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["apiKey"], typing_extensions.Literal["certificatePublicKey"], typing_extensions.Literal["ipAddress"], typing_extensions.Literal["certificateName"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiKey"]) -> MetaOapg.properties.apiKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificatePublicKey"]) -> MetaOapg.properties.certificatePublicKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificateName"]) -> MetaOapg.properties.certificateName: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apiKey"], typing_extensions.Literal["certificatePublicKey"], typing_extensions.Literal["ipAddress"], typing_extensions.Literal["certificateName"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        apiKey: typing.Union[MetaOapg.properties.apiKey, str, ],
        certificatePublicKey: typing.Union[MetaOapg.properties.certificatePublicKey, str, ],
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, ],
        certificateName: typing.Union[MetaOapg.properties.certificateName, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ThreatEmulationAppliance':
        return super().__new__(
            cls,
            *_args,
            apiKey=apiKey,
            certificatePublicKey=certificatePublicKey,
            ipAddress=ipAddress,
            certificateName=certificateName,
            _configuration=_configuration,
        )
