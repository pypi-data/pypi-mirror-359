# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.saas import schemas


class AlertThresholdSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['AlertThresholdType']:
                return AlertThresholdType
            lower = schemas.Float64Schema
            upper = schemas.Float64Schema
            turnAlertOffWhenLessThanLowerThreshold = schemas.BoolSchema
            __annotations__ = {
                "type": type,
                "lower": lower,
                "upper": upper,
                "turnAlertOffWhenLessThanLowerThreshold": turnAlertOffWhenLessThanLowerThreshold,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    type: 'AlertThresholdType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'AlertThresholdType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lower"]) -> MetaOapg.properties.lower: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upper"]) -> MetaOapg.properties.upper: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["turnAlertOffWhenLessThanLowerThreshold"]) -> MetaOapg.properties.turnAlertOffWhenLessThanLowerThreshold: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type"], typing_extensions.Literal["lower"], typing_extensions.Literal["upper"], typing_extensions.Literal["turnAlertOffWhenLessThanLowerThreshold"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'AlertThresholdType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lower"]) -> typing.Union[MetaOapg.properties.lower, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upper"]) -> typing.Union[MetaOapg.properties.upper, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["turnAlertOffWhenLessThanLowerThreshold"]) -> typing.Union[MetaOapg.properties.turnAlertOffWhenLessThanLowerThreshold, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type"], typing_extensions.Literal["lower"], typing_extensions.Literal["upper"], typing_extensions.Literal["turnAlertOffWhenLessThanLowerThreshold"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: 'AlertThresholdType',
        lower: typing.Union[MetaOapg.properties.lower, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        upper: typing.Union[MetaOapg.properties.upper, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        turnAlertOffWhenLessThanLowerThreshold: typing.Union[MetaOapg.properties.turnAlertOffWhenLessThanLowerThreshold, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AlertThresholdSettings':
        return super().__new__(
            cls,
            *_args,
            type=type,
            lower=lower,
            upper=upper,
            turnAlertOffWhenLessThanLowerThreshold=turnAlertOffWhenLessThanLowerThreshold,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.saas.model.alert_threshold_type import AlertThresholdType
