# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class AddVpnSiteParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "fingerprint",
            "host",
            "remoteAccessGatewayName",
            "authentication",
        }
        
        class properties:
            host = schemas.StrSchema
            
            
            class authentication(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            VpnSiteAuth,
                            VpnSiteCustomAuth,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'authentication':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            fingerprint = schemas.StrSchema
            remoteAccessGatewayName = schemas.StrSchema
            informUser = schemas.BoolSchema
            allowPostpone = schemas.BoolSchema
            displayName = schemas.StrSchema
            __annotations__ = {
                "host": host,
                "authentication": authentication,
                "fingerprint": fingerprint,
                "remoteAccessGatewayName": remoteAccessGatewayName,
                "informUser": informUser,
                "allowPostpone": allowPostpone,
                "displayName": displayName,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    fingerprint: MetaOapg.properties.fingerprint
    host: MetaOapg.properties.host
    remoteAccessGatewayName: MetaOapg.properties.remoteAccessGatewayName
    authentication: MetaOapg.properties.authentication
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remoteAccessGatewayName"]) -> MetaOapg.properties.remoteAccessGatewayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication"]) -> MetaOapg.properties.authentication: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["informUser"]) -> MetaOapg.properties.informUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowPostpone"]) -> MetaOapg.properties.allowPostpone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fingerprint"], typing_extensions.Literal["host"], typing_extensions.Literal["remoteAccessGatewayName"], typing_extensions.Literal["authentication"], typing_extensions.Literal["informUser"], typing_extensions.Literal["allowPostpone"], typing_extensions.Literal["displayName"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remoteAccessGatewayName"]) -> MetaOapg.properties.remoteAccessGatewayName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication"]) -> MetaOapg.properties.authentication: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["informUser"]) -> typing.Union[MetaOapg.properties.informUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowPostpone"]) -> typing.Union[MetaOapg.properties.allowPostpone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fingerprint"], typing_extensions.Literal["host"], typing_extensions.Literal["remoteAccessGatewayName"], typing_extensions.Literal["authentication"], typing_extensions.Literal["informUser"], typing_extensions.Literal["allowPostpone"], typing_extensions.Literal["displayName"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        fingerprint: typing.Union[MetaOapg.properties.fingerprint, str, ],
        host: typing.Union[MetaOapg.properties.host, str, ],
        remoteAccessGatewayName: typing.Union[MetaOapg.properties.remoteAccessGatewayName, str, ],
        authentication: typing.Union[MetaOapg.properties.authentication, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        informUser: typing.Union[MetaOapg.properties.informUser, bool, schemas.Unset] = schemas.unset,
        allowPostpone: typing.Union[MetaOapg.properties.allowPostpone, bool, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AddVpnSiteParams':
        return super().__new__(
            cls,
            *_args,
            fingerprint=fingerprint,
            host=host,
            remoteAccessGatewayName=remoteAccessGatewayName,
            authentication=authentication,
            informUser=informUser,
            allowPostpone=allowPostpone,
            displayName=displayName,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.vpn_site_auth import VpnSiteAuth
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.vpn_site_custom_auth import VpnSiteCustomAuth
