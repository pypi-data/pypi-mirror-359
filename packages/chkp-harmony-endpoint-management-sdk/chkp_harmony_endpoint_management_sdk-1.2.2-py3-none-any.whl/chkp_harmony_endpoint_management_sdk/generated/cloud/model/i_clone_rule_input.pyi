# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class ICloneRuleInput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "assignments",
            "name",
            "order",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class assignments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assignments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class order(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            RulePositionTop,
                            RulePositionRelative,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'order':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def connectionState() -> typing.Type['ConnectionStates']:
                return ConnectionStates
        
            @staticmethod
            def section() -> typing.Type['Sections']:
                return Sections
            __annotations__ = {
                "name": name,
                "assignments": assignments,
                "order": order,
                "connectionState": connectionState,
                "section": section,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    assignments: MetaOapg.properties.assignments
    name: MetaOapg.properties.name
    order: MetaOapg.properties.order
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignments"]) -> MetaOapg.properties.assignments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionState"]) -> 'ConnectionStates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section"]) -> 'Sections': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assignments"], typing_extensions.Literal["name"], typing_extensions.Literal["order"], typing_extensions.Literal["connectionState"], typing_extensions.Literal["section"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignments"]) -> MetaOapg.properties.assignments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionState"]) -> typing.Union['ConnectionStates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> typing.Union['Sections', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assignments"], typing_extensions.Literal["name"], typing_extensions.Literal["order"], typing_extensions.Literal["connectionState"], typing_extensions.Literal["section"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        assignments: typing.Union[MetaOapg.properties.assignments, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        order: typing.Union[MetaOapg.properties.order, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        connectionState: typing.Union['ConnectionStates', schemas.Unset] = schemas.unset,
        section: typing.Union['Sections', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ICloneRuleInput':
        return super().__new__(
            cls,
            *_args,
            assignments=assignments,
            name=name,
            order=order,
            connectionState=connectionState,
            section=section,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.connection_states import ConnectionStates
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.rule_position_relative import RulePositionRelative
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.rule_position_top import RulePositionTop
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.sections import Sections
