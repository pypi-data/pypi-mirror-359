# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class IMalwareProtectionSignaturesSignatureServers(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
            sharedSignaturesServer = schemas.StrSchema
            externalSignaturesServer = schemas.StrSchema
            internalSignatureServerPath = schemas.StrSchema
            setAsSharedSignaturesServer = schemas.BoolSchema
        
            @staticmethod
            def tertiaryServerType() -> typing.Type['NonePrimarySignatureServerType']:
                return NonePrimarySignatureServerType
            enableTertiaryServer = schemas.BoolSchema
        
            @staticmethod
            def secondaryServerType() -> typing.Type['NonePrimarySignatureServerType']:
                return NonePrimarySignatureServerType
            enableSecondaryServer = schemas.BoolSchema
        
            @staticmethod
            def primaryServerType() -> typing.Type['SignatureServerType']:
                return SignatureServerType
            __annotations__ = {
                "sharedSignaturesServer": sharedSignaturesServer,
                "externalSignaturesServer": externalSignaturesServer,
                "internalSignatureServerPath": internalSignatureServerPath,
                "setAsSharedSignaturesServer": setAsSharedSignaturesServer,
                "tertiaryServerType": tertiaryServerType,
                "enableTertiaryServer": enableTertiaryServer,
                "secondaryServerType": secondaryServerType,
                "enableSecondaryServer": enableSecondaryServer,
                "primaryServerType": primaryServerType,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharedSignaturesServer"]) -> MetaOapg.properties.sharedSignaturesServer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalSignaturesServer"]) -> MetaOapg.properties.externalSignaturesServer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalSignatureServerPath"]) -> MetaOapg.properties.internalSignatureServerPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setAsSharedSignaturesServer"]) -> MetaOapg.properties.setAsSharedSignaturesServer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tertiaryServerType"]) -> 'NonePrimarySignatureServerType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableTertiaryServer"]) -> MetaOapg.properties.enableTertiaryServer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondaryServerType"]) -> 'NonePrimarySignatureServerType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableSecondaryServer"]) -> MetaOapg.properties.enableSecondaryServer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryServerType"]) -> 'SignatureServerType': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sharedSignaturesServer"], typing_extensions.Literal["externalSignaturesServer"], typing_extensions.Literal["internalSignatureServerPath"], typing_extensions.Literal["setAsSharedSignaturesServer"], typing_extensions.Literal["tertiaryServerType"], typing_extensions.Literal["enableTertiaryServer"], typing_extensions.Literal["secondaryServerType"], typing_extensions.Literal["enableSecondaryServer"], typing_extensions.Literal["primaryServerType"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharedSignaturesServer"]) -> typing.Union[MetaOapg.properties.sharedSignaturesServer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalSignaturesServer"]) -> typing.Union[MetaOapg.properties.externalSignaturesServer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalSignatureServerPath"]) -> typing.Union[MetaOapg.properties.internalSignatureServerPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setAsSharedSignaturesServer"]) -> typing.Union[MetaOapg.properties.setAsSharedSignaturesServer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tertiaryServerType"]) -> typing.Union['NonePrimarySignatureServerType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableTertiaryServer"]) -> typing.Union[MetaOapg.properties.enableTertiaryServer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondaryServerType"]) -> typing.Union['NonePrimarySignatureServerType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableSecondaryServer"]) -> typing.Union[MetaOapg.properties.enableSecondaryServer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryServerType"]) -> typing.Union['SignatureServerType', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sharedSignaturesServer"], typing_extensions.Literal["externalSignaturesServer"], typing_extensions.Literal["internalSignatureServerPath"], typing_extensions.Literal["setAsSharedSignaturesServer"], typing_extensions.Literal["tertiaryServerType"], typing_extensions.Literal["enableTertiaryServer"], typing_extensions.Literal["secondaryServerType"], typing_extensions.Literal["enableSecondaryServer"], typing_extensions.Literal["primaryServerType"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        sharedSignaturesServer: typing.Union[MetaOapg.properties.sharedSignaturesServer, str, schemas.Unset] = schemas.unset,
        externalSignaturesServer: typing.Union[MetaOapg.properties.externalSignaturesServer, str, schemas.Unset] = schemas.unset,
        internalSignatureServerPath: typing.Union[MetaOapg.properties.internalSignatureServerPath, str, schemas.Unset] = schemas.unset,
        setAsSharedSignaturesServer: typing.Union[MetaOapg.properties.setAsSharedSignaturesServer, bool, schemas.Unset] = schemas.unset,
        tertiaryServerType: typing.Union['NonePrimarySignatureServerType', schemas.Unset] = schemas.unset,
        enableTertiaryServer: typing.Union[MetaOapg.properties.enableTertiaryServer, bool, schemas.Unset] = schemas.unset,
        secondaryServerType: typing.Union['NonePrimarySignatureServerType', schemas.Unset] = schemas.unset,
        enableSecondaryServer: typing.Union[MetaOapg.properties.enableSecondaryServer, bool, schemas.Unset] = schemas.unset,
        primaryServerType: typing.Union['SignatureServerType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IMalwareProtectionSignaturesSignatureServers':
        return super().__new__(
            cls,
            *_args,
            sharedSignaturesServer=sharedSignaturesServer,
            externalSignaturesServer=externalSignaturesServer,
            internalSignatureServerPath=internalSignatureServerPath,
            setAsSharedSignaturesServer=setAsSharedSignaturesServer,
            tertiaryServerType=tertiaryServerType,
            enableTertiaryServer=enableTertiaryServer,
            secondaryServerType=secondaryServerType,
            enableSecondaryServer=enableSecondaryServer,
            primaryServerType=primaryServerType,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.none_primary_signature_server_type import NonePrimarySignatureServerType
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.signature_server_type import SignatureServerType
