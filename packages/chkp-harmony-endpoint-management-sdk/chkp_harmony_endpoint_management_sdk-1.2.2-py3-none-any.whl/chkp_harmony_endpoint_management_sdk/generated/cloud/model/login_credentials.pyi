# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class LoginCredentials(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Credentials with which to login
    """

    class MetaOapg:
        required = {
            "password",
            "username",
        }
        
        class properties:
            username = schemas.StrSchema
            password = schemas.StrSchema
            __annotations__ = {
                "username": username,
                "password": password,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    password: MetaOapg.properties.password
    username: MetaOapg.properties.username
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["password"], typing_extensions.Literal["username"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["password"], typing_extensions.Literal["username"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        password: typing.Union[MetaOapg.properties.password, str, ],
        username: typing.Union[MetaOapg.properties.username, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'LoginCredentials':
        return super().__new__(
            cls,
            *_args,
            password=password,
            username=username,
            _configuration=_configuration,
        )
