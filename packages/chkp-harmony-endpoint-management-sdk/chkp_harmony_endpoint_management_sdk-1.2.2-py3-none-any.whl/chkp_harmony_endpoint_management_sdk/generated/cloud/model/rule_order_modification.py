# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class RuleOrderModification(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An order modification made to a rule
    """

    class MetaOapg:
        required = {
            "modified",
        }
        
        class properties:
            modified = schemas.BoolSchema
            _from = schemas.Int32Schema
            to = schemas.Int32Schema
            __annotations__ = {
                "modified": modified,
                "from": _from,
                "to": to,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    modified: MetaOapg.properties.modified
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["modified"], typing_extensions.Literal["from"], typing_extensions.Literal["to"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["modified"], typing_extensions.Literal["from"], typing_extensions.Literal["to"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        modified: typing.Union[MetaOapg.properties.modified, bool, ],
        to: typing.Union[MetaOapg.properties.to, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RuleOrderModification':
        return super().__new__(
            cls,
            *_args,
            modified=modified,
            to=to,
            _configuration=_configuration,
        )
