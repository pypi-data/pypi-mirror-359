# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class SlimDeviceParentNode(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "domainName",
            "name",
            "nid",
            "distinguishedName",
            "nodeType",
            "canonicalName",
        }
        
        class properties:
            nid = schemas.StrSchema
            name = schemas.StrSchema
            distinguishedName = schemas.StrSchema
            canonicalName = schemas.StrSchema
            domainName = schemas.StrSchema
        
            @staticmethod
            def nodeType() -> typing.Type['SlimDeviceParentNodeNodeTypeEnum']:
                return SlimDeviceParentNodeNodeTypeEnum
            ouType = schemas.StrSchema
            groupType = schemas.StrSchema
            groupScope = schemas.StrSchema
            readOnly = schemas.BoolSchema
            __annotations__ = {
                "nid": nid,
                "name": name,
                "distinguishedName": distinguishedName,
                "canonicalName": canonicalName,
                "domainName": domainName,
                "nodeType": nodeType,
                "ouType": ouType,
                "groupType": groupType,
                "groupScope": groupScope,
                "readOnly": readOnly,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    domainName: MetaOapg.properties.domainName
    name: MetaOapg.properties.name
    nid: MetaOapg.properties.nid
    distinguishedName: MetaOapg.properties.distinguishedName
    nodeType: 'SlimDeviceParentNodeNodeTypeEnum'
    canonicalName: MetaOapg.properties.canonicalName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domainName"]) -> MetaOapg.properties.domainName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nid"]) -> MetaOapg.properties.nid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distinguishedName"]) -> MetaOapg.properties.distinguishedName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeType"]) -> 'SlimDeviceParentNodeNodeTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canonicalName"]) -> MetaOapg.properties.canonicalName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ouType"]) -> MetaOapg.properties.ouType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupType"]) -> MetaOapg.properties.groupType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupScope"]) -> MetaOapg.properties.groupScope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readOnly"]) -> MetaOapg.properties.readOnly: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["domainName"], typing_extensions.Literal["name"], typing_extensions.Literal["nid"], typing_extensions.Literal["distinguishedName"], typing_extensions.Literal["nodeType"], typing_extensions.Literal["canonicalName"], typing_extensions.Literal["ouType"], typing_extensions.Literal["groupType"], typing_extensions.Literal["groupScope"], typing_extensions.Literal["readOnly"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domainName"]) -> MetaOapg.properties.domainName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nid"]) -> MetaOapg.properties.nid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distinguishedName"]) -> MetaOapg.properties.distinguishedName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeType"]) -> 'SlimDeviceParentNodeNodeTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canonicalName"]) -> MetaOapg.properties.canonicalName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ouType"]) -> typing.Union[MetaOapg.properties.ouType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupType"]) -> typing.Union[MetaOapg.properties.groupType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupScope"]) -> typing.Union[MetaOapg.properties.groupScope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readOnly"]) -> typing.Union[MetaOapg.properties.readOnly, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domainName"], typing_extensions.Literal["name"], typing_extensions.Literal["nid"], typing_extensions.Literal["distinguishedName"], typing_extensions.Literal["nodeType"], typing_extensions.Literal["canonicalName"], typing_extensions.Literal["ouType"], typing_extensions.Literal["groupType"], typing_extensions.Literal["groupScope"], typing_extensions.Literal["readOnly"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        domainName: typing.Union[MetaOapg.properties.domainName, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        nid: typing.Union[MetaOapg.properties.nid, str, ],
        distinguishedName: typing.Union[MetaOapg.properties.distinguishedName, str, ],
        nodeType: 'SlimDeviceParentNodeNodeTypeEnum',
        canonicalName: typing.Union[MetaOapg.properties.canonicalName, str, ],
        ouType: typing.Union[MetaOapg.properties.ouType, str, schemas.Unset] = schemas.unset,
        groupType: typing.Union[MetaOapg.properties.groupType, str, schemas.Unset] = schemas.unset,
        groupScope: typing.Union[MetaOapg.properties.groupScope, str, schemas.Unset] = schemas.unset,
        readOnly: typing.Union[MetaOapg.properties.readOnly, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SlimDeviceParentNode':
        return super().__new__(
            cls,
            *_args,
            domainName=domainName,
            name=name,
            nid=nid,
            distinguishedName=distinguishedName,
            nodeType=nodeType,
            canonicalName=canonicalName,
            ouType=ouType,
            groupType=groupType,
            groupScope=groupScope,
            readOnly=readOnly,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.slim_device_parent_node_node_type_enum import SlimDeviceParentNodeNodeTypeEnum
