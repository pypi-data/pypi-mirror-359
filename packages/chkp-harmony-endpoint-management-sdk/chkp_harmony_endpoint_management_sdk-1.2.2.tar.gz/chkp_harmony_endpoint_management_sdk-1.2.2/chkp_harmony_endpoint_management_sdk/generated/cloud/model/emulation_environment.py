# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class EmulationEnvironment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def environmentMode() -> typing.Type['EmulationEnvironmentMode']:
                return EmulationEnvironmentMode
        
            @staticmethod
            def type() -> typing.Type['EmulationEnvironmentType']:
                return EmulationEnvironmentType
        
            @staticmethod
            def applianceSettings() -> typing.Type['ApplianceEmulationEnvironment']:
                return ApplianceEmulationEnvironment
            
            
            class images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TeImage']:
                        return TeImage
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TeImage'], typing.List['TeImage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TeImage':
                    return super().__getitem__(i)
            __annotations__ = {
                "environmentMode": environmentMode,
                "type": type,
                "applianceSettings": applianceSettings,
                "images": images,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environmentMode"]) -> 'EmulationEnvironmentMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'EmulationEnvironmentType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applianceSettings"]) -> 'ApplianceEmulationEnvironment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["environmentMode"], typing_extensions.Literal["type"], typing_extensions.Literal["applianceSettings"], typing_extensions.Literal["images"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environmentMode"]) -> typing.Union['EmulationEnvironmentMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['EmulationEnvironmentType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applianceSettings"]) -> typing.Union['ApplianceEmulationEnvironment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union[MetaOapg.properties.images, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["environmentMode"], typing_extensions.Literal["type"], typing_extensions.Literal["applianceSettings"], typing_extensions.Literal["images"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        environmentMode: typing.Union['EmulationEnvironmentMode', schemas.Unset] = schemas.unset,
        type: typing.Union['EmulationEnvironmentType', schemas.Unset] = schemas.unset,
        applianceSettings: typing.Union['ApplianceEmulationEnvironment', schemas.Unset] = schemas.unset,
        images: typing.Union[MetaOapg.properties.images, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EmulationEnvironment':
        return super().__new__(
            cls,
            *_args,
            environmentMode=environmentMode,
            type=type,
            applianceSettings=applianceSettings,
            images=images,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.appliance_emulation_environment import ApplianceEmulationEnvironment
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.emulation_environment_mode import EmulationEnvironmentMode
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.emulation_environment_type import EmulationEnvironmentType
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.te_image import TeImage
