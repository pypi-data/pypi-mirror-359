# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class IBehavioralProtectionForensics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
            
            
            class customSettings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomSetting']:
                        return CustomSetting
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CustomSetting'], typing.List['CustomSetting']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customSettings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomSetting':
                    return super().__getitem__(i)
            maximumDatabaseSizeGb = schemas.Float64Schema
            disableRemediationCertificateChainValidation = schemas.BoolSchema
            enableExtensiveDataCollection = schemas.BoolSchema
        
            @staticmethod
            def triggerCondition() -> typing.Type['ForensicsTriggerCondition']:
                return ForensicsTriggerCondition
            __annotations__ = {
                "customSettings": customSettings,
                "maximumDatabaseSizeGb": maximumDatabaseSizeGb,
                "disableRemediationCertificateChainValidation": disableRemediationCertificateChainValidation,
                "enableExtensiveDataCollection": enableExtensiveDataCollection,
                "triggerCondition": triggerCondition,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customSettings"]) -> MetaOapg.properties.customSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximumDatabaseSizeGb"]) -> MetaOapg.properties.maximumDatabaseSizeGb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disableRemediationCertificateChainValidation"]) -> MetaOapg.properties.disableRemediationCertificateChainValidation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableExtensiveDataCollection"]) -> MetaOapg.properties.enableExtensiveDataCollection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triggerCondition"]) -> 'ForensicsTriggerCondition': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customSettings"], typing_extensions.Literal["maximumDatabaseSizeGb"], typing_extensions.Literal["disableRemediationCertificateChainValidation"], typing_extensions.Literal["enableExtensiveDataCollection"], typing_extensions.Literal["triggerCondition"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customSettings"]) -> typing.Union[MetaOapg.properties.customSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximumDatabaseSizeGb"]) -> typing.Union[MetaOapg.properties.maximumDatabaseSizeGb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disableRemediationCertificateChainValidation"]) -> typing.Union[MetaOapg.properties.disableRemediationCertificateChainValidation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableExtensiveDataCollection"]) -> typing.Union[MetaOapg.properties.enableExtensiveDataCollection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triggerCondition"]) -> typing.Union['ForensicsTriggerCondition', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customSettings"], typing_extensions.Literal["maximumDatabaseSizeGb"], typing_extensions.Literal["disableRemediationCertificateChainValidation"], typing_extensions.Literal["enableExtensiveDataCollection"], typing_extensions.Literal["triggerCondition"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        customSettings: typing.Union[MetaOapg.properties.customSettings, list, tuple, schemas.Unset] = schemas.unset,
        maximumDatabaseSizeGb: typing.Union[MetaOapg.properties.maximumDatabaseSizeGb, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        disableRemediationCertificateChainValidation: typing.Union[MetaOapg.properties.disableRemediationCertificateChainValidation, bool, schemas.Unset] = schemas.unset,
        enableExtensiveDataCollection: typing.Union[MetaOapg.properties.enableExtensiveDataCollection, bool, schemas.Unset] = schemas.unset,
        triggerCondition: typing.Union['ForensicsTriggerCondition', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IBehavioralProtectionForensics':
        return super().__new__(
            cls,
            *_args,
            customSettings=customSettings,
            maximumDatabaseSizeGb=maximumDatabaseSizeGb,
            disableRemediationCertificateChainValidation=disableRemediationCertificateChainValidation,
            enableExtensiveDataCollection=enableExtensiveDataCollection,
            triggerCondition=triggerCondition,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.custom_setting import CustomSetting
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.forensics_trigger_condition import ForensicsTriggerCondition
