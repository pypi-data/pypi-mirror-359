# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class IFilesProtectionEmulationDownloadFileActions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        
        class properties:
            
            
            class fileTypeOverrides(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IFilesProtectionEmulationDownloadFileActionsFileTypeOverrides']:
                        return IFilesProtectionEmulationDownloadFileActionsFileTypeOverrides
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IFilesProtectionEmulationDownloadFileActionsFileTypeOverrides'], typing.List['IFilesProtectionEmulationDownloadFileActionsFileTypeOverrides']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fileTypeOverrides':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IFilesProtectionEmulationDownloadFileActionsFileTypeOverrides':
                    return super().__getitem__(i)
        
            @staticmethod
            def emulatedOnly() -> typing.Type['FileTypeActions']:
                return FileTypeActions
        
            @staticmethod
            def unsupported() -> typing.Type['FileTypeActions']:
                return FileTypeActions
        
            @staticmethod
            def supported() -> typing.Type['FileTypeActions']:
                return FileTypeActions
            __annotations__ = {
                "fileTypeOverrides": fileTypeOverrides,
                "emulatedOnly": emulatedOnly,
                "unsupported": unsupported,
                "supported": supported,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileTypeOverrides"]) -> MetaOapg.properties.fileTypeOverrides: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emulatedOnly"]) -> 'FileTypeActions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unsupported"]) -> 'FileTypeActions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supported"]) -> 'FileTypeActions': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fileTypeOverrides"], typing_extensions.Literal["emulatedOnly"], typing_extensions.Literal["unsupported"], typing_extensions.Literal["supported"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileTypeOverrides"]) -> typing.Union[MetaOapg.properties.fileTypeOverrides, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emulatedOnly"]) -> typing.Union['FileTypeActions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unsupported"]) -> typing.Union['FileTypeActions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supported"]) -> typing.Union['FileTypeActions', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fileTypeOverrides"], typing_extensions.Literal["emulatedOnly"], typing_extensions.Literal["unsupported"], typing_extensions.Literal["supported"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        fileTypeOverrides: typing.Union[MetaOapg.properties.fileTypeOverrides, list, tuple, schemas.Unset] = schemas.unset,
        emulatedOnly: typing.Union['FileTypeActions', schemas.Unset] = schemas.unset,
        unsupported: typing.Union['FileTypeActions', schemas.Unset] = schemas.unset,
        supported: typing.Union['FileTypeActions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IFilesProtectionEmulationDownloadFileActions':
        return super().__new__(
            cls,
            *_args,
            fileTypeOverrides=fileTypeOverrides,
            emulatedOnly=emulatedOnly,
            unsupported=unsupported,
            supported=supported,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.file_type_actions import FileTypeActions
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.i_files_protection_emulation_download_file_actions_file_type_overrides import IFilesProtectionEmulationDownloadFileActionsFileTypeOverrides
