# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.cloud import schemas


class IFilesProtectionEmulationDownloadFileActionsFileTypeOverrides(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "defaultAction",
            "name",
            "action",
            "defaultExtractionMode",
            "description",
            "extractionMode",
        }
        
        class properties:
        
            @staticmethod
            def action() -> typing.Type['FileTypeActions']:
                return FileTypeActions
        
            @staticmethod
            def extractionMode() -> typing.Type['ExtractionMode']:
                return ExtractionMode
        
            @staticmethod
            def defaultExtractionMode() -> typing.Type['ExtractionMode']:
                return ExtractionMode
        
            @staticmethod
            def defaultAction() -> typing.Type['FileTypeActions']:
                return FileTypeActions
            description = schemas.StrSchema
            name = schemas.StrSchema
            __annotations__ = {
                "action": action,
                "extractionMode": extractionMode,
                "defaultExtractionMode": defaultExtractionMode,
                "defaultAction": defaultAction,
                "description": description,
                "name": name,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    defaultAction: 'FileTypeActions'
    name: MetaOapg.properties.name
    action: 'FileTypeActions'
    defaultExtractionMode: 'ExtractionMode'
    description: MetaOapg.properties.description
    extractionMode: 'ExtractionMode'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultAction"]) -> 'FileTypeActions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> 'FileTypeActions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultExtractionMode"]) -> 'ExtractionMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extractionMode"]) -> 'ExtractionMode': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["defaultAction"], typing_extensions.Literal["name"], typing_extensions.Literal["action"], typing_extensions.Literal["defaultExtractionMode"], typing_extensions.Literal["description"], typing_extensions.Literal["extractionMode"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultAction"]) -> 'FileTypeActions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> 'FileTypeActions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultExtractionMode"]) -> 'ExtractionMode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extractionMode"]) -> 'ExtractionMode': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["defaultAction"], typing_extensions.Literal["name"], typing_extensions.Literal["action"], typing_extensions.Literal["defaultExtractionMode"], typing_extensions.Literal["description"], typing_extensions.Literal["extractionMode"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        defaultAction: 'FileTypeActions',
        name: typing.Union[MetaOapg.properties.name, str, ],
        action: 'FileTypeActions',
        defaultExtractionMode: 'ExtractionMode',
        description: typing.Union[MetaOapg.properties.description, str, ],
        extractionMode: 'ExtractionMode',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IFilesProtectionEmulationDownloadFileActionsFileTypeOverrides':
        return super().__new__(
            cls,
            *_args,
            defaultAction=defaultAction,
            name=name,
            action=action,
            defaultExtractionMode=defaultExtractionMode,
            description=description,
            extractionMode=extractionMode,
            _configuration=_configuration,
        )

from chkp_harmony_endpoint_management_sdk.generated.cloud.model.extraction_mode import ExtractionMode
from chkp_harmony_endpoint_management_sdk.generated.cloud.model.file_type_actions import FileTypeActions
