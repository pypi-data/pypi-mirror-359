# coding: utf-8

# GTO-MO-1-1 - Removed partial_header
# flake8: noqa

from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid

import frozendict

from chkp_harmony_endpoint_management_sdk.generated.saas import schemas


class PublicServiceInfoLight(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "consoleVersion",
            "webVersion",
            "serverVersion",
            "consoleDate",
            "machineFQDN",
            "serviceVersion",
            "launchTime",
            "numOfClients",
            "numberOfSeats",
            "machineId",
            "MSIUrl",
            "machinePurpose",
            "appType",
            "location",
            "state",
            "fingerPrint",
            "MSIVersion",
            "deployment",
        }
        
        class properties:
            MSIUrl = schemas.StrSchema
            MSIVersion = schemas.StrSchema
            consoleDate = schemas.StrSchema
            consoleVersion = schemas.StrSchema
            
            
            class deployment(
                schemas.DictSchema
            ):
            
                class MetaOapg:
                    required = {
                        "fatalError",
                        "description",
                        "progress",
                        "status",
                    }
                    
                    class properties:
                        status = schemas.StrSchema
                        progress = schemas.Float64Schema
                        description = schemas.StrSchema
                        fatalError = schemas.StrSchema
                        __annotations__ = {
                            "status": status,
                            "progress": progress,
                            "description": description,
                            "fatalError": fatalError,
                        }
                
                fatalError: MetaOapg.properties.fatalError
                description: MetaOapg.properties.description
                progress: MetaOapg.properties.progress
                status: MetaOapg.properties.status
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["progress"]) -> MetaOapg.properties.progress: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["fatalError"]) -> MetaOapg.properties.fatalError: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "progress", "description", "fatalError", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> MetaOapg.properties.progress: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["fatalError"]) -> MetaOapg.properties.fatalError: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "progress", "description", "fatalError", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    fatalError: typing.Union[MetaOapg.properties.fatalError, str, ],
                    description: typing.Union[MetaOapg.properties.description, str, ],
                    progress: typing.Union[MetaOapg.properties.progress, decimal.Decimal, int, float, ],
                    status: typing.Union[MetaOapg.properties.status, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'deployment':
                    return super().__new__(
                        cls,
                        *_args,
                        fatalError=fatalError,
                        description=description,
                        progress=progress,
                        status=status,
                        _configuration=_configuration,
                        **kwargs,
                    )
            fingerPrint = schemas.StrSchema
            launchTime = schemas.StrSchema
            location = schemas.StrSchema
            machineFQDN = schemas.StrSchema
            machineId = schemas.StrSchema
            machinePurpose = schemas.StrSchema
            numberOfSeats = schemas.StrSchema
            serverVersion = schemas.StrSchema
            serviceVersion = schemas.StrSchema
            appType = schemas.StrSchema
            numOfClients = schemas.Float64Schema
            state = schemas.StrSchema
            webVersion = schemas.StrSchema
            __annotations__ = {
                "MSIUrl": MSIUrl,
                "MSIVersion": MSIVersion,
                "consoleDate": consoleDate,
                "consoleVersion": consoleVersion,
                "deployment": deployment,
                "fingerPrint": fingerPrint,
                "launchTime": launchTime,
                "location": location,
                "machineFQDN": machineFQDN,
                "machineId": machineId,
                "machinePurpose": machinePurpose,
                "numberOfSeats": numberOfSeats,
                "serverVersion": serverVersion,
                "serviceVersion": serviceVersion,
                "appType": appType,
                "numOfClients": numOfClients,
                "state": state,
                "webVersion": webVersion,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    consoleVersion: MetaOapg.properties.consoleVersion
    webVersion: MetaOapg.properties.webVersion
    serverVersion: MetaOapg.properties.serverVersion
    consoleDate: MetaOapg.properties.consoleDate
    machineFQDN: MetaOapg.properties.machineFQDN
    serviceVersion: MetaOapg.properties.serviceVersion
    launchTime: MetaOapg.properties.launchTime
    numOfClients: MetaOapg.properties.numOfClients
    numberOfSeats: MetaOapg.properties.numberOfSeats
    machineId: MetaOapg.properties.machineId
    MSIUrl: MetaOapg.properties.MSIUrl
    machinePurpose: MetaOapg.properties.machinePurpose
    appType: MetaOapg.properties.appType
    location: MetaOapg.properties.location
    state: MetaOapg.properties.state
    fingerPrint: MetaOapg.properties.fingerPrint
    MSIVersion: MetaOapg.properties.MSIVersion
    deployment: MetaOapg.properties.deployment
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consoleVersion"]) -> MetaOapg.properties.consoleVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webVersion"]) -> MetaOapg.properties.webVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverVersion"]) -> MetaOapg.properties.serverVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consoleDate"]) -> MetaOapg.properties.consoleDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineFQDN"]) -> MetaOapg.properties.machineFQDN: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceVersion"]) -> MetaOapg.properties.serviceVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["launchTime"]) -> MetaOapg.properties.launchTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numOfClients"]) -> MetaOapg.properties.numOfClients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfSeats"]) -> MetaOapg.properties.numberOfSeats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineId"]) -> MetaOapg.properties.machineId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MSIUrl"]) -> MetaOapg.properties.MSIUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machinePurpose"]) -> MetaOapg.properties.machinePurpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appType"]) -> MetaOapg.properties.appType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fingerPrint"]) -> MetaOapg.properties.fingerPrint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MSIVersion"]) -> MetaOapg.properties.MSIVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deployment"]) -> MetaOapg.properties.deployment: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["consoleVersion"], typing_extensions.Literal["webVersion"], typing_extensions.Literal["serverVersion"], typing_extensions.Literal["consoleDate"], typing_extensions.Literal["machineFQDN"], typing_extensions.Literal["serviceVersion"], typing_extensions.Literal["launchTime"], typing_extensions.Literal["numOfClients"], typing_extensions.Literal["numberOfSeats"], typing_extensions.Literal["machineId"], typing_extensions.Literal["MSIUrl"], typing_extensions.Literal["machinePurpose"], typing_extensions.Literal["appType"], typing_extensions.Literal["location"], typing_extensions.Literal["state"], typing_extensions.Literal["fingerPrint"], typing_extensions.Literal["MSIVersion"], typing_extensions.Literal["deployment"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consoleVersion"]) -> MetaOapg.properties.consoleVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webVersion"]) -> MetaOapg.properties.webVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverVersion"]) -> MetaOapg.properties.serverVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consoleDate"]) -> MetaOapg.properties.consoleDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineFQDN"]) -> MetaOapg.properties.machineFQDN: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceVersion"]) -> MetaOapg.properties.serviceVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["launchTime"]) -> MetaOapg.properties.launchTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numOfClients"]) -> MetaOapg.properties.numOfClients: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfSeats"]) -> MetaOapg.properties.numberOfSeats: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineId"]) -> MetaOapg.properties.machineId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MSIUrl"]) -> MetaOapg.properties.MSIUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machinePurpose"]) -> MetaOapg.properties.machinePurpose: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appType"]) -> MetaOapg.properties.appType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fingerPrint"]) -> MetaOapg.properties.fingerPrint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MSIVersion"]) -> MetaOapg.properties.MSIVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deployment"]) -> MetaOapg.properties.deployment: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["consoleVersion"], typing_extensions.Literal["webVersion"], typing_extensions.Literal["serverVersion"], typing_extensions.Literal["consoleDate"], typing_extensions.Literal["machineFQDN"], typing_extensions.Literal["serviceVersion"], typing_extensions.Literal["launchTime"], typing_extensions.Literal["numOfClients"], typing_extensions.Literal["numberOfSeats"], typing_extensions.Literal["machineId"], typing_extensions.Literal["MSIUrl"], typing_extensions.Literal["machinePurpose"], typing_extensions.Literal["appType"], typing_extensions.Literal["location"], typing_extensions.Literal["state"], typing_extensions.Literal["fingerPrint"], typing_extensions.Literal["MSIVersion"], typing_extensions.Literal["deployment"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        consoleVersion: typing.Union[MetaOapg.properties.consoleVersion, str, ],
        webVersion: typing.Union[MetaOapg.properties.webVersion, str, ],
        serverVersion: typing.Union[MetaOapg.properties.serverVersion, str, ],
        consoleDate: typing.Union[MetaOapg.properties.consoleDate, str, ],
        machineFQDN: typing.Union[MetaOapg.properties.machineFQDN, str, ],
        serviceVersion: typing.Union[MetaOapg.properties.serviceVersion, str, ],
        launchTime: typing.Union[MetaOapg.properties.launchTime, str, ],
        numOfClients: typing.Union[MetaOapg.properties.numOfClients, decimal.Decimal, int, float, ],
        numberOfSeats: typing.Union[MetaOapg.properties.numberOfSeats, str, ],
        machineId: typing.Union[MetaOapg.properties.machineId, str, ],
        MSIUrl: typing.Union[MetaOapg.properties.MSIUrl, str, ],
        machinePurpose: typing.Union[MetaOapg.properties.machinePurpose, str, ],
        appType: typing.Union[MetaOapg.properties.appType, str, ],
        location: typing.Union[MetaOapg.properties.location, str, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        fingerPrint: typing.Union[MetaOapg.properties.fingerPrint, str, ],
        MSIVersion: typing.Union[MetaOapg.properties.MSIVersion, str, ],
        deployment: typing.Union[MetaOapg.properties.deployment, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PublicServiceInfoLight':
        return super().__new__(
            cls,
            *_args,
            consoleVersion=consoleVersion,
            webVersion=webVersion,
            serverVersion=serverVersion,
            consoleDate=consoleDate,
            machineFQDN=machineFQDN,
            serviceVersion=serviceVersion,
            launchTime=launchTime,
            numOfClients=numOfClients,
            numberOfSeats=numberOfSeats,
            machineId=machineId,
            MSIUrl=MSIUrl,
            machinePurpose=machinePurpose,
            appType=appType,
            location=location,
            state=state,
            fingerPrint=fingerPrint,
            MSIVersion=MSIVersion,
            deployment=deployment,
            _configuration=_configuration,
        )
