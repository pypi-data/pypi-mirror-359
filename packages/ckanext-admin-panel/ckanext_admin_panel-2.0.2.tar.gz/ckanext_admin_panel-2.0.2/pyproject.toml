[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ckanext-admin-panel"
version = "2.0.2"
description = "Custom admin panel for CKAN to expand default functionality"
authors = [
    { name = "DataShades", email = "datashades@linkdigital.com.au" },
    { name = "Oleksandr Cherniavskyi", email = "mutantsan@gmail.com" },
]
maintainers = [{ name = "DataShades", email = "datashades@linkdigital.com.au" }]
license = { text = "AGPL" }
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
keywords = ["CKAN"]
requires-python = ">= 3.10"
dependencies = [
    "typing-extensions",
    "ckanext-toolbelt",
    "croniter>=2.0.1,<3.0.0",
    "cron-descriptor>=1.4.0,<2.0.0",
    "ckanext-editable-config==0.0.7",
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/DataShades/ckanext-admin-panel"

[project.entry-points]
"babel.extractors" = { ckan = "ckan.lib.extract:extract_ckan" }

[project.entry-points."ckan.plugins"]
admin_panel = "ckanext.ap_main.plugin:AdminPanelPlugin"
admin_panel_log = "ckanext.ap_log.plugin:AdminPanelLogPlugin"
admin_panel_cron = "ckanext.ap_cron.plugin:AdminPanelCronPlugin"
admin_panel_support = "ckanext.ap_support.plugin:AdminPanelSupportPlugin"
admin_panel_example = "ckanext.ap_example.plugin:AdminPanelExamplePlugin"
admin_panel_doi = "ckanext.ap_doi.plugin:AdminPanelDoiPlugin"
ap_doi = "ckanext.ap_doi.plugin:ApDOIPlugin"
ap_cron_test = "ckanext.ap_cron.tests.factories:ApCronTestPlugin"

[project.optional-dependencies]
test = ["pytest-ckan", "git-changelog"]
docs = ["mkdocs", "mkdocs-material", "mkdocstrings", "mkdocstrings-python", "mkdocs-include-markdown-plugin"]
wysiwyg = ["ckanext-wysiwyg>=0.1.0,<1.0.0"]
doi = ["ckanext-doi>=4.0.0,<5.0.0"]

[tool.setuptools.packages]
find = {}

[tool.ruff]
target-version = "py310"

[tool.isort]
known_ckan = "ckan"
known_ckanext = "ckanext"
known_self = "ckanext.ap_main"
sections = "FUTURE,STDLIB,FIRSTPARTY,THIRDPARTY,CKAN,CKANEXT,SELF,LOCALFOLDER"

[tool.pytest.ini_options]
addopts = "--ckan-ini test.ini"
filterwarnings = [
               "ignore::sqlalchemy.exc.SAWarning",
               "ignore::DeprecationWarning",
]

[tool.pyright]
pythonVersion = "3.10"
include = ["ckanext"]
exclude = [
    "**/test*",
    "**/migration",
]
strict = []

strictParameterNoneValue = true # type must be Optional if default value is None

# Check the meaning of rules here
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportFunctionMemberAccess = true # non-standard member accesses for functions
reportMissingImports = true
reportMissingModuleSource = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false # We are using Context in a way that conflicts with this check
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
reportUntypedFunctionDecorator = false
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnknownVariableType = true
reportUntypedBaseClass = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportUnusedCallResult = false # allow function calls for side-effect only (like logic.check_acces)
useLibraryCodeForTypes = true
reportGeneralTypeIssues = true
reportPropertyTypeMismatch = true
reportWildcardImportFromLibrary = true
reportUntypedClassDecorator = false # authenticator relies on repoze.who class-decorator
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportPrivateImportUsage = true
reportInconsistentConstructor = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportMissingParameterType = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
