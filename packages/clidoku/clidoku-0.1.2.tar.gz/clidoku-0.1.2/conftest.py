import random

import pytest

from src.clidoku.grid import Grid


@pytest.fixture
def grid_random_9x9():
    return Grid(grid=random.choices(range(1, 10), k=(9**2)))


@pytest.fixture
def valid_complete_sudoku():
    """A known valid complete 9x9 sudoku solution."""
    # This is a valid complete sudoku grid
    solution = [
        5,
        3,
        4,
        6,
        7,
        8,
        9,
        1,
        2,
        6,
        7,
        2,
        1,
        9,
        5,
        3,
        4,
        8,
        1,
        9,
        8,
        3,
        4,
        2,
        5,
        6,
        7,
        8,
        5,
        9,
        7,
        6,
        1,
        4,
        2,
        3,
        4,
        2,
        6,
        8,
        5,
        3,
        7,
        9,
        1,
        7,
        1,
        3,
        9,
        2,
        4,
        8,
        5,
        6,
        9,
        6,
        1,
        5,
        3,
        7,
        2,
        8,
        4,
        2,
        8,
        7,
        4,
        1,
        9,
        6,
        3,
        5,
        3,
        4,
        5,
        2,
        8,
        6,
        1,
        7,
        9,
    ]
    return Grid(grid=solution)


@pytest.fixture
def valid_incomplete_sudoku():
    """A known valid incomplete 9x9 sudoku puzzle with no conflicts."""
    # This is a valid incomplete sudoku puzzle (some cells are None)
    puzzle = [
        5,
        3,
        None,
        None,
        7,
        None,
        None,
        None,
        None,
        6,
        None,
        None,
        1,
        9,
        5,
        None,
        None,
        None,
        None,
        9,
        8,
        None,
        None,
        None,
        None,
        6,
        None,
        8,
        None,
        None,
        None,
        6,
        None,
        None,
        None,
        3,
        4,
        None,
        None,
        8,
        None,
        3,
        None,
        None,
        1,
        7,
        None,
        None,
        None,
        2,
        None,
        None,
        None,
        6,
        None,
        6,
        None,
        None,
        None,
        None,
        2,
        8,
        None,
        None,
        None,
        None,
        4,
        1,
        9,
        None,
        None,
        5,
        None,
        None,
        None,
        None,
        8,
        None,
        None,
        7,
        9,
    ]
    return Grid(grid=puzzle)


@pytest.fixture
def invalid_row_conflict():
    """Grid with duplicate numbers in the same row."""
    # Row 0 has two 5s (positions 0 and 8)
    grid_data = [
        5,
        3,
        4,
        6,
        7,
        8,
        9,
        1,
        5,  # Row conflict: two 5s
        6,
        7,
        2,
        1,
        9,
        5,
        3,
        4,
        8,
        1,
        9,
        8,
        3,
        4,
        2,
        5,
        6,
        7,
        8,
        5,
        9,
        7,
        6,
        1,
        4,
        2,
        3,
        4,
        2,
        6,
        8,
        5,
        3,
        7,
        9,
        1,
        7,
        1,
        3,
        9,
        2,
        4,
        8,
        5,
        6,
        9,
        6,
        1,
        5,
        3,
        7,
        2,
        8,
        4,
        2,
        8,
        7,
        4,
        1,
        9,
        6,
        3,
        5,
        3,
        4,
        5,
        2,
        8,
        6,
        1,
        7,
        9,
    ]
    return Grid(grid=grid_data)


@pytest.fixture
def invalid_column_conflict():
    """Grid with duplicate numbers in the same column."""
    # Column 0 has two 5s (positions 0 and 72)
    grid_data = [
        5,
        3,
        4,
        6,
        7,
        8,
        9,
        1,
        2,
        6,
        7,
        2,
        1,
        9,
        5,
        3,
        4,
        8,
        1,
        9,
        8,
        3,
        4,
        2,
        5,
        6,
        7,
        8,
        5,
        9,
        7,
        6,
        1,
        4,
        2,
        3,
        4,
        2,
        6,
        8,
        5,
        3,
        7,
        9,
        1,
        7,
        1,
        3,
        9,
        2,
        4,
        8,
        5,
        6,
        9,
        6,
        1,
        5,
        3,
        7,
        2,
        8,
        4,
        2,
        8,
        7,
        4,
        1,
        9,
        6,
        3,
        5,
        5,
        4,
        5,
        2,
        8,
        6,
        1,
        7,
        9,  # Column conflict: 5 in position 72 (same column as position 0)
    ]
    return Grid(grid=grid_data)


@pytest.fixture
def invalid_box_conflict():
    """Grid with duplicate numbers in the same 3x3 box."""
    # Top-left box has two 5s (positions 0 and 10)
    grid_data = [
        5,
        3,
        4,
        6,
        7,
        8,
        9,
        1,
        2,
        6,
        5,
        2,
        1,
        9,
        5,
        3,
        4,
        8,  # Box conflict: 5 in position 10 (same box as position 0)
        1,
        9,
        8,
        3,
        4,
        2,
        5,
        6,
        7,
        8,
        5,
        9,
        7,
        6,
        1,
        4,
        2,
        3,
        4,
        2,
        6,
        8,
        5,
        3,
        7,
        9,
        1,
        7,
        1,
        3,
        9,
        2,
        4,
        8,
        5,
        6,
        9,
        6,
        1,
        5,
        3,
        7,
        2,
        8,
        4,
        2,
        8,
        7,
        4,
        1,
        9,
        6,
        3,
        5,
        3,
        4,
        5,
        2,
        8,
        6,
        1,
        7,
        9,
    ]
    return Grid(grid=grid_data)


@pytest.fixture
def empty_grid():
    """Completely empty 9x9 grid."""
    return Grid()


@pytest.fixture
def grid_with_invalid_numbers():
    """Grid with numbers outside the valid 1-9 range."""
    grid_data = [
        0,
        3,
        4,
        6,
        7,
        8,
        9,
        1,
        2,  # 0 is invalid
        6,
        7,
        2,
        1,
        9,
        5,
        3,
        4,
        8,
        1,
        9,
        8,
        3,
        4,
        2,
        5,
        6,
        7,
        8,
        5,
        9,
        7,
        6,
        1,
        4,
        2,
        3,
        4,
        2,
        6,
        8,
        5,
        3,
        7,
        9,
        1,
        7,
        1,
        3,
        9,
        2,
        4,
        8,
        5,
        6,
        9,
        6,
        1,
        5,
        3,
        7,
        2,
        8,
        4,
        2,
        8,
        7,
        4,
        1,
        9,
        6,
        3,
        5,
        3,
        4,
        5,
        2,
        8,
        6,
        1,
        7,
        10,  # 10 is invalid
    ]
    return Grid(grid=grid_data)
