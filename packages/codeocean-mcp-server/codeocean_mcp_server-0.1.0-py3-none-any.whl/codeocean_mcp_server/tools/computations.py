from codeocean import CodeOcean
from codeocean.computation import (
    Computation,
    DownloadFileURL,
    Folder,
    RunParams,
)
from mcp.server.fastmcp import FastMCP

from codeocean_mcp_server.file_utils import download_and_read_file
from codeocean_mcp_server.models import dataclass_to_pydantic

ComputationModel = dataclass_to_pydantic(Computation)
DownloadFileURLModel = dataclass_to_pydantic(DownloadFileURL)
FolderModel = dataclass_to_pydantic(Folder)
RunParamsModel = dataclass_to_pydantic(RunParams)


def add_tools(mcp: FastMCP, client: CodeOcean):
    """Add capsule tools to the MCP server."""

    @mcp.tool(description=client.computations.get_computation.__doc__)
    def get_computation(computation_id: str) -> list[ComputationModel]:
        """Retrieve a specific computation by its unique identifier."""
        return [
            dataclass_to_pydantic(computation)
            for computation in client.computations.get_computation(computation_id)
        ]

    @mcp.tool(
        description=(
            str(client.computations.run_capsule.__doc__)
            + "Typical workflow: 1) run_capsule() to start execution "
            "2) wait_until_completed() to monitor progress "
            "3) list_computation_results() and get_result_file_download_url() "
            "to retrieve outputs."
        )
    )
    def run_capsule(run_params: RunParamsModel) -> ComputationModel:
        """Execute a capsule or a pipeline in Code Ocean and don't wait."""
        return dataclass_to_pydantic(client.computations.run_capsule(run_params))

    @mcp.tool(description=client.computations.wait_until_completed.__doc__)
    def wait_until_completed(computation_id: str) -> ComputationModel:
        """Wait until a computation completes and return its details."""
        # first get the computation based on the computation_id:
        computation = client.computations.get_computation(computation_id)
        return dataclass_to_pydantic(client.computations.wait_until_completed(computation))

    @mcp.tool(
        description=(
            str(client.computations.list_computation_results.__doc__)
            + " computation_id is required as string"
        )
    )
    def list_computation_results(computation_id: str) -> FolderModel:
        """List the output files generated by a completed computation."""
        return dataclass_to_pydantic(
            client.computations.list_computation_results(computation_id)
        )

    @mcp.tool(description=(client.computations.get_result_file_download_url.__doc__))
    def get_result_file_download_url(computation_id: str, file_path: str) -> DownloadFileURLModel:
        """Get download URL for a specific result file from computation."""
        return dataclass_to_pydantic(
            client.computations.get_result_file_download_url(computation_id, file_path),
        )

    @mcp.tool(
        description=(
            "Use when you want to read the content of a file from a computation"
        )
    )
    def download_and_read_a_file_from_computation(computation_id: str, file_path: str) -> str:
        """Download a file using the provided URL and return its content."""
        file_url = client.computations.get_result_file_download_url(computation_id, file_path)
        return download_and_read_file(file_url.url)
