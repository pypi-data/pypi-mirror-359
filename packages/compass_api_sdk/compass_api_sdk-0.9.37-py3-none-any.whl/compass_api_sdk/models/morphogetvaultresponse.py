"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .compass_api_backend_models_morpho_read_response_get_vault_asset import (
    CompassAPIBackendModelsMorphoReadResponseGetVaultAsset,
    CompassAPIBackendModelsMorphoReadResponseGetVaultAssetTypedDict,
)
from .compass_api_backend_models_morpho_read_response_get_vault_vaultstate import (
    CompassAPIBackendModelsMorphoReadResponseGetVaultVaultState,
    CompassAPIBackendModelsMorphoReadResponseGetVaultVaultStateTypedDict,
)
from .liquidity import Liquidity, LiquidityTypedDict
from .metadata import Metadata, MetadataTypedDict
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class MorphoGetVaultResponseTypedDict(TypedDict):
    name: str
    r"""The name of the Morpho vault."""
    symbol: str
    r"""The symbol of the Morpho vault."""
    whitelisted: bool
    r"""Whether the vault is whitelisted or not."""
    state: CompassAPIBackendModelsMorphoReadResponseGetVaultVaultStateTypedDict
    liquidity: LiquidityTypedDict
    asset: CompassAPIBackendModelsMorphoReadResponseGetVaultAssetTypedDict
    metadata: NotRequired[Nullable[MetadataTypedDict]]
    r"""Metadata of the vault."""


class MorphoGetVaultResponse(BaseModel):
    name: str
    r"""The name of the Morpho vault."""

    symbol: str
    r"""The symbol of the Morpho vault."""

    whitelisted: bool
    r"""Whether the vault is whitelisted or not."""

    state: CompassAPIBackendModelsMorphoReadResponseGetVaultVaultState

    liquidity: Liquidity

    asset: CompassAPIBackendModelsMorphoReadResponseGetVaultAsset

    metadata: OptionalNullable[Metadata] = UNSET
    r"""Metadata of the vault."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["metadata"]
        nullable_fields = ["metadata"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
