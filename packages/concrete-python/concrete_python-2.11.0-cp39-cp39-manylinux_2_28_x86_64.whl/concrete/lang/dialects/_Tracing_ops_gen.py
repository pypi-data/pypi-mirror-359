
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _Tracing_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "Tracing"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TraceCiphertextOp(_ods_ir.OpView):
  OPERATION_NAME = "Tracing.trace_ciphertext"

  _ODS_REGIONS = (0, True)

  def __init__(self, ciphertext, *, msg=None, nmsb=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(ciphertext))
    _ods_context = _ods_get_default_loc_context(loc)
    if msg is not None: attributes["msg"] = (msg if (
        issubclass(type(msg), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(msg, context=_ods_context))
    if nmsb is not None: attributes["nmsb"] = (nmsb if (
        issubclass(type(nmsb), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I32Attr')) else
          _ods_ir.AttrBuilder.get('I32Attr')(nmsb, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def ciphertext(self):
    return self.operation.operands[0]

  @builtins.property
  def msg(self):
    if "msg" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["msg"])

  @msg.setter
  def msg(self, value):
    if value is not None:
      self.operation.attributes["msg"] = value
    elif "msg" in self.operation.attributes:
      del self.operation.attributes["msg"]

  @msg.deleter
  def msg(self):
    del self.operation.attributes["msg"]

  @builtins.property
  def nmsb(self):
    if "nmsb" not in self.operation.attributes:
      return None
    return _ods_ir.IntegerAttr(self.operation.attributes["nmsb"])

  @nmsb.setter
  def nmsb(self, value):
    if value is not None:
      self.operation.attributes["nmsb"] = value
    elif "nmsb" in self.operation.attributes:
      del self.operation.attributes["nmsb"]

  @nmsb.deleter
  def nmsb(self):
    del self.operation.attributes["nmsb"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TraceMessageOp(_ods_ir.OpView):
  OPERATION_NAME = "Tracing.trace_message"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, msg=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if msg is not None: attributes["msg"] = (msg if (
        issubclass(type(msg), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(msg, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def msg(self):
    if "msg" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["msg"])

  @msg.setter
  def msg(self, value):
    if value is not None:
      self.operation.attributes["msg"] = value
    elif "msg" in self.operation.attributes:
      del self.operation.attributes["msg"]

  @msg.deleter
  def msg(self):
    del self.operation.attributes["msg"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TracePlaintextOp(_ods_ir.OpView):
  OPERATION_NAME = "Tracing.trace_plaintext"

  _ODS_REGIONS = (0, True)

  def __init__(self, plaintext, *, msg=None, nmsb=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(plaintext))
    _ods_context = _ods_get_default_loc_context(loc)
    if msg is not None: attributes["msg"] = (msg if (
        issubclass(type(msg), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(msg, context=_ods_context))
    if nmsb is not None: attributes["nmsb"] = (nmsb if (
        issubclass(type(nmsb), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I32Attr')) else
          _ods_ir.AttrBuilder.get('I32Attr')(nmsb, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def plaintext(self):
    return self.operation.operands[0]

  @builtins.property
  def msg(self):
    if "msg" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["msg"])

  @msg.setter
  def msg(self, value):
    if value is not None:
      self.operation.attributes["msg"] = value
    elif "msg" in self.operation.attributes:
      del self.operation.attributes["msg"]

  @msg.deleter
  def msg(self):
    del self.operation.attributes["msg"]

  @builtins.property
  def nmsb(self):
    if "nmsb" not in self.operation.attributes:
      return None
    return _ods_ir.IntegerAttr(self.operation.attributes["nmsb"])

  @nmsb.setter
  def nmsb(self, value):
    if value is not None:
      self.operation.attributes["nmsb"] = value
    elif "nmsb" in self.operation.attributes:
      del self.operation.attributes["nmsb"]

  @nmsb.deleter
  def nmsb(self):
    del self.operation.attributes["nmsb"]
