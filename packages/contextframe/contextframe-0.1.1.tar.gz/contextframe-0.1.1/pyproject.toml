[project]
name = "contextframe"
version = "0.1.1"
description = "ContextFrame: A global standard file specification for contextual document management with LLMs"
authors = [
    {name = "ContextFrame Team", email = "contact@contextframe.org"}
]
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.10,<3.13"
dependencies = [
    "jsonschema",
    "lance>=0.7.0",
    "pyarrow>=14.0.2",
    "numpy>=1.24",
    "pyyaml>=6.0.0",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
    "Topic :: Text Processing :: Markup :: Markdown",
]

[project.scripts]
contextframe = "contextframe.cli:main"
contextframe-language-server = "contextframe:lsp_server"

[project.urls]
repository = "https://github.com/greyhaven-ai/contextframe"
documentation = "https://contextframe.org"
issues = "https://github.com/greyhaven-ai/contextframe/issues"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["contextframe", "contextframe.examples", "contextframe.helpers", "contextframe.schema", "contextframe.io", "contextframe.builders", "contextframe.extract", "contextframe.embed"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.md", "*.py"]

[project.optional-dependencies]
dev = [
    "pytest==8.3.4",
    "pytest-asyncio==0.25.2",
    "pytest-cov==6.0.0",
    "mypy==1.14.1",
    "ruff>=0.9.5",
    "deptry>=0.12.0",
]
extract = [
    "semantic-text-splitter>=0.3.0",
    "litellm>=1.0.0",
    "tokenizers>=0.13.0",
    "tree-sitter>=0.20.0",
    # Common programming languages
    "tree-sitter-python>=0.20.0",
    "tree-sitter-javascript>=0.20.0",
    "tree-sitter-typescript>=0.20.0",
    "tree-sitter-rust>=0.20.0",
    "tree-sitter-go>=0.19.0",
    "tree-sitter-cpp>=0.20.0",
    "tree-sitter-c>=0.20.0",
    "tree-sitter-java>=0.20.0",
    "tree-sitter-ruby>=0.20.0",
    "tree-sitter-php>=0.19.0",
    # Markup and config languages
    "tree-sitter-html>=0.19.0",
    "tree-sitter-css>=0.19.0",
    "tree-sitter-json>=0.19.0",
    "tree-sitter-yaml>=0.5.0",
    "tree-sitter-toml>=0.5.0",
    "tree-sitter-xml>=0.6.0",
    # Shell and scripting
    "tree-sitter-bash>=0.19.0",
]
embed = [
    "sentence-transformers>=2.2.0",
    "openai>=1.0.0",
    "anthropic>=0.21.0",
    "cohere>=4.0.0",
]
enhance = [
    "openai>=1.0.0",
    "anthropic>=0.21.0",
    "tiktoken>=0.5.0",
    "mirascope[openai,anthropic,litellm]>=1.0.0",
    "pydantic>=2.0.0",
]
encode = [
    "opencv-python>=4.8.0",
    "pillow>=10.0.0",
    "ffmpeg-python>=0.2.0",
    "numpy>=1.24",
]
serve = [
    "mcp>=0.9.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sse-starlette>=1.6.0",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "httpx>=0.25.0",
    "slowapi>=0.1.9",
]
all = [
    "contextframe[extract,embed,enhance,encode,serve,io]",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=contextframe --cov-report=term-missing"
asyncio_mode = "auto"

[tool.ruff]
# Fix without reporting on leftover violations
fix-only = true

# Enumerate all fixed violations
show-fixes = true

# Indent width (default: 4)
indent-width = 4

# Black (default: 88)
line-length = 88

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    "dist",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    "__pycache__",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Use spaces instead of tabs
indent-style = "space"

# Use `\n` line endings for all files
line-ending = "lf"

# Set quote style for strings
quote-style = "preserve"

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = ["D203", "E203", "E251", "E266", "E401", "E402", "E501", "F401", "F403"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TID", "TRY", "UP", "YTT"]

# unfixable = []

[tool.ruff.lint.isort]
combine-as-imports = true
from-first = false
no-sections = true
order-by-type = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.deptry]
ignore_notebooks = true
exclude = [
    ".bzr",
    ".direnv",
    "dist",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    "__pycache__",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
pep621_dev_dependency_groups = ["dev"]
package_module_name_map = {"pyyaml" = "yaml"}