[project]
name = "db2-mcp-server"
version = "0.2.0"
authors = [{ name = "Jien Huang", email = "huangjien@gmail.com" }]
description = "A read-only MCP server for interacting with a DB2 database."
readme = "README.md"
requires-python = ">=3.12"
license = { file="LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License", # Or your chosen license
    "Operating System :: OS Independent",
]
dependencies = [
    "fastmcp>=2.2.6", # Use latest stable FastMCP 
    "ibm_db",               # IBM DB2 Python driver
    "pydantic",             # For data validation
    "python-dotenv",
    "toml",
    "dotenv>=0.9.9"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",        # Testing framework
    "pytest-cov",           # Code coverage
    "uv>=0.6.0,<0.7.0",      # Use uv for environment management
]

[project.urls]
"Homepage" = "https://github.com/huangjien/db2-mcp-server" # Add repository URL if available
"Bug Tracker" = "https://github.com/huangjien/db2-mcp-server/issues" # Add issue tracker URL if available


[project.scripts]
db2-mcp-server = "db2_mcp_server.core:main"
db2-mcp-server-stream-http = "db2_mcp_server.core:main_stream_http"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-fail-under=80"
testpaths = [
    "tests",
]

[tool.coverage.run]
source = ["src/db2_mcp_server"]
omit = [
    "src/db2_mcp_server/__main__.py", # Example: Exclude main entry point if not testable
]

[tool.coverage.report]
fail_under = 90
show_missing = true

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "twine>=6.1.0",
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.uv]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 2

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"