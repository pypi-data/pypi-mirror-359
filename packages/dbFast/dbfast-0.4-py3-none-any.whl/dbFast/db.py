import sqlalchemy
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.orm import sessionmaker, DeclarativeBase


# üìå 1. –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü
class Base(DeclarativeBase):
    pass


# üìå 2. –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Db:
    def __init__(self, db_path="database.db", table_name="data", **columns):
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ç–∞–±–ª–∏—Ü—É"""
        self.engine = create_engine(db_path)  # –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞
        self.Session = sessionmaker(bind=self.engine)
        self.session = self.Session()

        # üü¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        attrs = {"__tablename__": table_name.lower(), "id": Column(Integer, primary_key=True)}

        for col_name, col_data in columns.items():
            if isinstance(col_data, tuple):
                column_type = col_data[0]
                options = {opt.split("=")[0]: opt.split("=")[1] == "True" for opt in col_data[1:]}
            else:
                column_type = col_data
                options = {}

            if column_type == int:
                column_type = Integer
            elif column_type == str:
                column_type = String
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {column_type}")

            attrs[col_name] = Column(column_type, **options)

        self.TableClass = type(table_name, (Base,), attrs)  # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å
        Base.metadata.create_all(self.engine)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É


    def add(self, **kwargs) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            new_entry = self.TableClass(**kwargs)
            self.session.add(new_entry)
            self.session.commit()
        except SQLAlchemyError as e:
            self.session.rollback()
            raise Exception(SQLAlchemyError())

    def delete(self, obj_id) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID"""
        obj = self.session.get(self.TableClass, obj_id)
        if obj:
            self.session.delete(obj)
            self.session.commit()
            return True
        else:
            return False

    def update(self, obj_id, **kwargs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å"""
        obj = self.session.get(self.TableClass, obj_id)
        if obj:
            for key, value in kwargs.items():
                setattr(obj, key, value)
            self.session.commit()
        else:
            print("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    def get_all(self, order_by=None, desc=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
        query = self.session.query(self.TableClass)
        if order_by:
            column = getattr(self.TableClass, order_by, None)
            if column:
                query = query.order_by(column.desc() if desc else column)
        return query.all()

    def get(self, obj_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID"""
        return self.session.get(self.TableClass, obj_id)

    def get_by_one(self, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç **–æ–¥–Ω–æ–≥–æ** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É—Å–ª–æ–≤–∏—é (–∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ—Ç)"""
        query = self.session.query(self.TableClass)
        for key, value in kwargs.items():
            column = getattr(self.TableClass, key, None)
            if column is not None:
                query = query.filter(column == value)
        return query.first()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–ª–∏ None

    def get_by_all(self, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç **–≤—Å–µ—Ö** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Å–ª–æ–≤–∏—é"""
        query = self.session.query(self.TableClass)
        for key, value in kwargs.items():
            column = getattr(self.TableClass, key, None)
            if column is not None:
                query = query.filter(column == value)
        return query.all()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
