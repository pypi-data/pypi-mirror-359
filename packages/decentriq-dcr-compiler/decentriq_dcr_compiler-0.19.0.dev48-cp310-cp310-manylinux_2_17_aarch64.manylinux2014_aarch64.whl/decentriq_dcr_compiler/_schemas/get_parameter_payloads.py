# generated by datamodel-codegen:
#   filename:  get_parameter_payloads.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class Kind(Enum):
    advertiser = 'advertiser'


class Kind4(Enum):
    lookalike = 'lookalike'


class Kind5(Enum):
    rulebased = 'rulebased'


class BooleanOp(Enum):
    and_ = 'and'
    or_ = 'or'


class CombineOperator(Enum):
    intersect = 'intersect'
    union = 'union'
    diff = 'diff'


class FilterOperator(Enum):
    contains_any_of = 'contains_any_of'
    contains_none_of = 'contains_none_of'
    contains_all_of = 'contains_all_of'
    empty = 'empty'
    not_empty = 'not_empty'


class Status(Enum):
    ready = 'ready'
    published = 'published'
    published_as_intermediate = 'published_as_intermediate'


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    boolean_op: BooleanOp
    filters: Sequence[AudienceFilter]


class MutableAudienceData(BaseModel):
    created_at: Optional[str] = None
    name: str
    status: Status


class Audience(BaseModel):
    audience_size: Optional[conint(ge=0)] = None
    audience_type: str
    id: str
    kind: Kind
    mutable: Optional[MutableAudienceData] = None


class Audience6(BaseModel):
    exclude_seed_audience: Optional[bool] = None
    id: str
    kind: Kind4
    mutable: Optional[MutableAudienceData] = None
    reach: conint(ge=0)
    source_ref: str


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    source_ref: str


class Audience7(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    id: str
    kind: Kind5
    mutable: Optional[MutableAudienceData] = None
    source_ref: str


class Audience4(RootModel[Union[Audience, Audience6, Audience7]]):
    root: Union[Audience, Audience6, Audience7]


class RequestedAudiencePayload(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    audiences: Sequence[Audience4]
    target_ref: str


class ParameterPayloads(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    generate: RequestedAudiencePayload = Field(
        ..., description='The parameter to pass for CreateAudienceUserList'
    )
    lal: Optional[RequestedAudiencePayload] = Field(
        None, description='The parameter to pass for CreateAudienceUserListLal'
    )
