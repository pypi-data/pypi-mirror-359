# generated by datamodel-codegen:
#   filename:  media_insights_request.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class RetrieveDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str


class MediaInsightsRequest2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveDataRoom: RetrieveDataRoom


class PublishAdvertiserDataset(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    datasetHashHex: str
    encryptionKeyHex: str
    scopeIdHex: str


class MediaInsightsRequest3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishAdvertiserDataset: PublishAdvertiserDataset


class PublishPublisherUsersDataset(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishPublisherUsersDataset: PublishPublisherUsersDataset


class UnpublishPublisherUsersDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishPublisherUsersDataset: UnpublishPublisherUsersDataset


class UnpublishAdvertiserDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishAdvertiserDataset: UnpublishAdvertiserDataset


class UnpublishDemographicsDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishDemographicsDataset: UnpublishDemographicsDataset


class UnpublishEmbeddingsDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishEmbeddingsDataset: UnpublishEmbeddingsDataset


class UnpublishSegmentsDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishSegmentsDataset: UnpublishSegmentsDataset


class RetrievePublishedDatasets(RetrieveDataRoom):
    pass


class MediaInsightsRequest10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrievePublishedDatasets: RetrievePublishedDatasets


class ComputeInsights(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    scopeIdHex: str


class MediaInsightsRequest11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeInsights: ComputeInsights


class PublishDemographicsDataset(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDemographicsDataset: PublishDemographicsDataset


class PublishSegmentsDataset(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishSegmentsDataset: PublishSegmentsDataset


class PublishEmbeddingsDataset(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishEmbeddingsDataset: PublishEmbeddingsDataset


class PublishActivatedAudiencesConfig(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishActivatedAudiencesConfig: PublishActivatedAudiencesConfig


class UnpublishActivatedAudiencesConfig(RetrieveDataRoom):
    pass


class MediaInsightsRequest16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishActivatedAudiencesConfig: UnpublishActivatedAudiencesConfig


class ComputeAvailableAudiences(ComputeInsights):
    pass


class MediaInsightsRequest17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeAvailableAudiences: ComputeAvailableAudiences


class ComputeOverlapStatistics(ComputeInsights):
    pass


class MediaInsightsRequest18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeOverlapStatistics: ComputeOverlapStatistics


class GetAudiencesForPublisher(ComputeInsights):
    pass


class MediaInsightsRequest21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencesForPublisher: GetAudiencesForPublisher


class GetAudiencesForAdvertiser(ComputeInsights):
    pass


class MediaInsightsRequest22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencesForAdvertiser: GetAudiencesForAdvertiser


class IngestAudiencesReport(ComputeInsights):
    pass


class MediaInsightsRequest23(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ingestAudiencesReport: IngestAudiencesReport


class RetrieveModelQualityReport(ComputeInsights):
    pass


class MediaInsightsRequest24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveModelQualityReport: RetrieveModelQualityReport


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class RequestedAudiencePayload(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    activation_type: str
    audience_type: str
    reach: Optional[float] = None


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValue28(BaseModel):
    type: Type


class Type28(Enum):
    DATASET = 'DATASET'


class RequirementFlagValue29(BaseModel):
    type: Type28


class Type29(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValue30(BaseModel):
    type: Type29
    value: str


class RequirementFlagValue(
    RootModel[
        Union[RequirementFlagValue28, RequirementFlagValue29, RequirementFlagValue30]
    ]
):
    root: Union[RequirementFlagValue28, RequirementFlagValue29, RequirementFlagValue30]


class GetAudienceUserList(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    requestedAudience: RequestedAudiencePayload
    scopeIdHex: str


class MediaInsightsRequest19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserList: GetAudienceUserList


class GetAudienceUserListForAdvertiser(GetAudienceUserList):
    pass


class MediaInsightsRequest20(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserListForAdvertiser: GetAudienceUserListForAdvertiser


class KnownOrUnknownRequirementFlagValue(RootModel[Optional[RequirementFlagValue]]):
    root: Optional[RequirementFlagValue]


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    has: RequirementFlag


class MediaInsightsComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class MediaInsightsComputeV1(MediaInsightsComputeV0):
    pass


class MediaInsightsComputeV2(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: Optional[Sequence[str]] = None
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class MediaInsightsComputeV3(MediaInsightsComputeV2):
    pass


class MediaInsightsComputeV4(MediaInsightsComputeV2):
    pass


class MediaInsightsComputeV5(MediaInsightsComputeV2):
    pass


class MediaInsightsCompute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: MediaInsightsComputeV0


class MediaInsightsCompute14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: MediaInsightsComputeV1


class MediaInsightsCompute15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: MediaInsightsComputeV2


class MediaInsightsCompute16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: MediaInsightsComputeV3


class MediaInsightsCompute17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: MediaInsightsComputeV4


class MediaInsightsCompute18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: MediaInsightsComputeV5


class MediaInsightsCompute12(
    RootModel[
        Union[
            MediaInsightsCompute,
            MediaInsightsCompute14,
            MediaInsightsCompute15,
            MediaInsightsCompute16,
            MediaInsightsCompute17,
            MediaInsightsCompute18,
        ]
    ]
):
    root: Union[
        MediaInsightsCompute,
        MediaInsightsCompute14,
        MediaInsightsCompute15,
        MediaInsightsCompute16,
        MediaInsightsCompute17,
        MediaInsightsCompute18,
    ]


class MediaInsightsComputeOrUnknown(RootModel[Optional[MediaInsightsCompute12]]):
    root: Optional[MediaInsightsCompute12]


class PublishDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoom: MediaInsightsDcr
    requirePassword: bool
    showOrganizationLogo: bool


class MediaInsightsRequest1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDataRoom: PublishDataRoom


class MediaInsightsRequest(
    RootModel[
        Union[
            MediaInsightsRequest1,
            MediaInsightsRequest2,
            MediaInsightsRequest3,
            MediaInsightsRequest4,
            MediaInsightsRequest5,
            MediaInsightsRequest6,
            MediaInsightsRequest7,
            MediaInsightsRequest8,
            MediaInsightsRequest9,
            MediaInsightsRequest10,
            MediaInsightsRequest11,
            MediaInsightsRequest12,
            MediaInsightsRequest13,
            MediaInsightsRequest14,
            MediaInsightsRequest15,
            MediaInsightsRequest16,
            MediaInsightsRequest17,
            MediaInsightsRequest18,
            MediaInsightsRequest19,
            MediaInsightsRequest20,
            MediaInsightsRequest21,
            MediaInsightsRequest22,
            MediaInsightsRequest23,
            MediaInsightsRequest24,
        ]
    ]
):
    root: Union[
        MediaInsightsRequest1,
        MediaInsightsRequest2,
        MediaInsightsRequest3,
        MediaInsightsRequest4,
        MediaInsightsRequest5,
        MediaInsightsRequest6,
        MediaInsightsRequest7,
        MediaInsightsRequest8,
        MediaInsightsRequest9,
        MediaInsightsRequest10,
        MediaInsightsRequest11,
        MediaInsightsRequest12,
        MediaInsightsRequest13,
        MediaInsightsRequest14,
        MediaInsightsRequest15,
        MediaInsightsRequest16,
        MediaInsightsRequest17,
        MediaInsightsRequest18,
        MediaInsightsRequest19,
        MediaInsightsRequest20,
        MediaInsightsRequest21,
        MediaInsightsRequest22,
        MediaInsightsRequest23,
        MediaInsightsRequest24,
    ] = Field(..., title='MediaInsightsRequest')


class ConsumerRequirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Optional[RequirementOp] = None


class MediaInsightsDcr3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: MediaInsightsDcrInner


class MediaInsightsDcr(RootModel[MediaInsightsDcr3]):
    root: MediaInsightsDcr3


class MediaInsightsDcrInner(BaseModel):
    compute: MediaInsightsComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


class RequirementOp21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    or_: Sequence[RequirementOp] = Field(..., alias='or')


class RequirementOp22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    and_: Sequence[RequirementOp] = Field(..., alias='and')


class RequirementOp23(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exclusiveOr: Sequence[RequirementOp]


class RequirementOp(
    RootModel[Union[RequirementOp21, RequirementOp22, RequirementOp23, RequirementOp24]]
):
    root: Union[
        RequirementOp21, RequirementOp22, RequirementOp23, RequirementOp24
    ] = Field(
        ...,
        description='An expression that can be used to check whether a data lab (as a "data provider") provides certain datasets or certain data properties. This was introduced because the system used in the LM DCR didn\'t allow the MediaInsights DCR to express that _either_ a segments or an embeddings dataset is required in case it was configured to enable lookalike modelling.',
    )


PublishDataRoom.model_rebuild()
ConsumerRequirements.model_rebuild()
MediaInsightsDcr3.model_rebuild()
RequirementOp21.model_rebuild()
RequirementOp22.model_rebuild()
RequirementOp23.model_rebuild()
