# generated by datamodel-codegen:
#   filename:  lookalike_media_request.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class RetrieveDataRoom(TypedDict):
    dataRoomIdHex: str


class LookalikeMediaRequest2(TypedDict):
    retrieveDataRoom: RetrieveDataRoom


class PublishAdvertiserDataset(TypedDict):
    dataRoomIdHex: str
    datasetHashHex: str
    encryptionKeyHex: str
    scopeIdHex: str


class LookalikeMediaRequest3(TypedDict):
    publishAdvertiserDataset: PublishAdvertiserDataset


class PublishPublisherUsersDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest4(TypedDict):
    publishPublisherUsersDataset: PublishPublisherUsersDataset


class UnpublishPublisherUsersDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest5(TypedDict):
    unpublishPublisherUsersDataset: UnpublishPublisherUsersDataset


class UnpublishAdvertiserDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest6(TypedDict):
    unpublishAdvertiserDataset: UnpublishAdvertiserDataset


class UnpublishDemographicsDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest7(TypedDict):
    unpublishDemographicsDataset: UnpublishDemographicsDataset


class UnpublishEmbeddingsDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest8(TypedDict):
    unpublishEmbeddingsDataset: UnpublishEmbeddingsDataset


class UnpublishSegmentsDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest9(TypedDict):
    unpublishSegmentsDataset: UnpublishSegmentsDataset


class RetrievePublishedDatasets(RetrieveDataRoom):
    pass


class LookalikeMediaRequest10(TypedDict):
    retrievePublishedDatasets: RetrievePublishedDatasets


class CalculateOverlapBasic(TypedDict):
    dataRoomIdHex: str
    scopeIdHex: str


class LookalikeMediaRequest11(TypedDict):
    calculateOverlapBasic: CalculateOverlapBasic


class CalculateOverlapInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest12(TypedDict):
    calculateOverlapInsights: CalculateOverlapInsights


class PublishDemographicsDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest13(TypedDict):
    publishDemographicsDataset: PublishDemographicsDataset


class PublishSegmentsDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest14(TypedDict):
    publishSegmentsDataset: PublishSegmentsDataset


class PublishEmbeddingsDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest15(TypedDict):
    publishEmbeddingsDataset: PublishEmbeddingsDataset


class PublishActivatedAudiencesConfig(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest16(TypedDict):
    publishActivatedAudiencesConfig: PublishActivatedAudiencesConfig


class UnpublishActivatedAudiencesConfig(RetrieveDataRoom):
    pass


class LookalikeMediaRequest17(TypedDict):
    unpublishActivatedAudiencesConfig: UnpublishActivatedAudiencesConfig


class CalculateModelledAudienceInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest18(TypedDict):
    calculateModelledAudienceInsights: CalculateModelledAudienceInsights


class CalculateModelledAudienceInsightsView(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest19(TypedDict):
    calculateModelledAudienceInsightsView: CalculateModelledAudienceInsightsView


class ComputeAudienceSizes(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest20(TypedDict):
    computeAudienceSizes: ComputeAudienceSizes


class ViewPublishedActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest22(TypedDict):
    viewPublishedActivatedAudiences: ViewPublishedActivatedAudiences


class ViewActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest23(TypedDict):
    viewActivatedAudiences: ViewActivatedAudiences


class IngestAudiencesReport(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest24(TypedDict):
    ingestAudiencesReport: IngestAudiencesReport


class RetrieveModelQualityReport(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest25(TypedDict):
    retrieveModelQualityReport: RetrieveModelQualityReport


class EnclaveSpecificationV0(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


class LookalikeMediaDataRoomV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDcrComputeV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class RequestedAudiencePayload(TypedDict):
    audienceType: str
    reach: float


class RequirementFlagValue19(TypedDict):
    type: Literal['SUPPORTED']


class RequirementFlagValue20(TypedDict):
    type: Literal['DATASET']


class RequirementFlagValue21(TypedDict):
    type: Literal['PROPERTY']
    value: str


RequirementFlagValue = Union[
    RequirementFlagValue19, RequirementFlagValue20, RequirementFlagValue21
]


class GetLookalikeAudience(TypedDict):
    dataRoomIdHex: str
    requestedAudience: RequestedAudiencePayload
    scopeIdHex: str


class LookalikeMediaRequest21(TypedDict):
    getLookalikeAudience: GetLookalikeAudience


KnownOrUnknownRequirementFlagValue = Optional[RequirementFlagValue]


class LookalikeMediaDataRoom5(TypedDict):
    v0: LookalikeMediaDataRoomV0


class LookalikeMediaDataRoom6(TypedDict):
    v1: LookalikeMediaDataRoomV1


class LookalikeMediaDataRoom7(TypedDict):
    v2: LookalikeMediaDataRoomV2


class LookalikeMediaDcrCompute(TypedDict):
    v0: LookalikeMediaDcrComputeV0


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(TypedDict):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class Requirements(TypedDict):
    optional: Sequence[RequirementFlag]
    required: Sequence[RequirementFlag]


class LookalikeMediaDcrComputeV1(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableDebugMode: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class LookalikeMediaDcrComputeV2(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrComputeV3(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrCompute7(TypedDict):
    v1: LookalikeMediaDcrComputeV1


class LookalikeMediaDcrCompute8(TypedDict):
    v2: LookalikeMediaDcrComputeV2


class LookalikeMediaDcrCompute9(TypedDict):
    v3: LookalikeMediaDcrComputeV3


LookalikeMediaDcrCompute5 = Union[
    LookalikeMediaDcrCompute,
    LookalikeMediaDcrCompute7,
    LookalikeMediaDcrCompute8,
    LookalikeMediaDcrCompute9,
]


LookalikeMediaDcrComputeOrUnknown = Optional[LookalikeMediaDcrCompute5]


class LookalikeMediaDcrWrapper(TypedDict):
    compute: LookalikeMediaDcrComputeOrUnknown
    consumes: Requirements
    features: Sequence[str]


class LookalikeMediaDataRoom8(TypedDict):
    v3: LookalikeMediaDcrWrapper


LookalikeMediaDataRoom = Union[
    LookalikeMediaDataRoom5,
    LookalikeMediaDataRoom6,
    LookalikeMediaDataRoom7,
    LookalikeMediaDataRoom8,
]


class PublishDataRoom(TypedDict):
    dataRoom: LookalikeMediaDataRoom
    requirePassword: bool
    showOrganizationLogo: bool


class LookalikeMediaRequest1(TypedDict):
    publishDataRoom: PublishDataRoom


LookalikeMediaRequest = Union[
    LookalikeMediaRequest1,
    LookalikeMediaRequest2,
    LookalikeMediaRequest3,
    LookalikeMediaRequest4,
    LookalikeMediaRequest5,
    LookalikeMediaRequest6,
    LookalikeMediaRequest7,
    LookalikeMediaRequest8,
    LookalikeMediaRequest9,
    LookalikeMediaRequest10,
    LookalikeMediaRequest11,
    LookalikeMediaRequest12,
    LookalikeMediaRequest13,
    LookalikeMediaRequest14,
    LookalikeMediaRequest15,
    LookalikeMediaRequest16,
    LookalikeMediaRequest17,
    LookalikeMediaRequest18,
    LookalikeMediaRequest19,
    LookalikeMediaRequest20,
    LookalikeMediaRequest21,
    LookalikeMediaRequest22,
    LookalikeMediaRequest23,
    LookalikeMediaRequest24,
    LookalikeMediaRequest25,
]
