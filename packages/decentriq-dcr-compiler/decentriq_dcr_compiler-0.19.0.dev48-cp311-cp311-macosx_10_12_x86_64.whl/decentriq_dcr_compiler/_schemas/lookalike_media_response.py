# generated by datamodel-codegen:
#   filename:  lookalike_media_response.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class PublishDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomId: str


class LookalikeMediaResponse1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDataRoom: PublishDataRoom


class LookalikeMediaResponse3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishAdvertiserDataset: Mapping[str, Any]


class LookalikeMediaResponse4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishPublisherUsersDataset: Mapping[str, Any]


class LookalikeMediaResponse5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishPublisherUsersDataset: Mapping[str, Any]


class LookalikeMediaResponse6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDemographicsDataset: Mapping[str, Any]


class LookalikeMediaResponse7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishDemographicsDataset: Mapping[str, Any]


class LookalikeMediaResponse8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishSegmentsDataset: Mapping[str, Any]


class LookalikeMediaResponse9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishSegmentsDataset: Mapping[str, Any]


class LookalikeMediaResponse10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishEmbeddingsDataset: Mapping[str, Any]


class LookalikeMediaResponse11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishEmbeddingsDataset: Mapping[str, Any]


class LookalikeMediaResponse12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishAdvertiserDataset: Mapping[str, Any]


class RetrievePublishedDatasets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    advertiserDatasetHashHex: Optional[str] = None
    demographicsDatasetHashHex: Optional[str] = None
    embeddingsDatasetHashHex: Optional[str] = None
    publisherDatasetHashHex: Optional[str] = None
    segmentsDatasetHashHex: Optional[str] = None


class LookalikeMediaResponse13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrievePublishedDatasets: RetrievePublishedDatasets


class CalculateOverlapBasic(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeNodeName: str
    jobIdHex: str


class LookalikeMediaResponse14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    calculateOverlapBasic: CalculateOverlapBasic


class ComputeAudienceSizes(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeAudienceSizes: ComputeAudienceSizes


class CalculateOverlapInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    calculateOverlapInsights: CalculateOverlapInsights


class LookalikeMediaResponse17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishActivatedAudiencesConfig: Mapping[str, Any]


class LookalikeMediaResponse18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishActivatedAudiencesConfig: Mapping[str, Any]


class GetLookalikeAudience(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getLookalikeAudience: GetLookalikeAudience


class CalculateModelledAudienceInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse20(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    calculateModelledAudienceInsights: CalculateModelledAudienceInsights


class CalculateModelledAudienceInsightsView(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    calculateModelledAudienceInsightsView: CalculateModelledAudienceInsightsView


class ViewPublishedActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    viewPublishedActivatedAudiences: ViewPublishedActivatedAudiences


class ViewActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse23(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    viewActivatedAudiences: ViewActivatedAudiences


class IngestAudiencesReport(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ingestAudiencesReport: IngestAudiencesReport


class RetrieveModelQualityReport(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse25(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveModelQualityReport: RetrieveModelQualityReport


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class LookalikeMediaDataRoomV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDcrComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValue22(BaseModel):
    type: Type


class Type22(Enum):
    DATASET = 'DATASET'


class RequirementFlagValue23(BaseModel):
    type: Type22


class Type23(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValue24(BaseModel):
    type: Type23
    value: str


class RequirementFlagValue(
    RootModel[
        Union[RequirementFlagValue22, RequirementFlagValue23, RequirementFlagValue24]
    ]
):
    root: Union[RequirementFlagValue22, RequirementFlagValue23, RequirementFlagValue24]


class KnownOrUnknownRequirementFlagValue(RootModel[Optional[RequirementFlagValue]]):
    root: Optional[RequirementFlagValue]


class LookalikeMediaDataRoom9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: LookalikeMediaDataRoomV0


class LookalikeMediaDataRoom10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: LookalikeMediaDataRoomV1


class LookalikeMediaDataRoom11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: LookalikeMediaDataRoomV2


class LookalikeMediaDcrCompute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: LookalikeMediaDcrComputeV0


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class Requirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Sequence[RequirementFlag]


class LookalikeMediaDcrComputeV1(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableDebugMode: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class LookalikeMediaDcrComputeV2(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrComputeV3(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrCompute12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: LookalikeMediaDcrComputeV1


class LookalikeMediaDcrCompute13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: LookalikeMediaDcrComputeV2


class LookalikeMediaDcrCompute14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: LookalikeMediaDcrComputeV3


class LookalikeMediaDcrCompute10(
    RootModel[
        Union[
            LookalikeMediaDcrCompute,
            LookalikeMediaDcrCompute12,
            LookalikeMediaDcrCompute13,
            LookalikeMediaDcrCompute14,
        ]
    ]
):
    root: Union[
        LookalikeMediaDcrCompute,
        LookalikeMediaDcrCompute12,
        LookalikeMediaDcrCompute13,
        LookalikeMediaDcrCompute14,
    ]


class LookalikeMediaDcrComputeOrUnknown(
    RootModel[Optional[LookalikeMediaDcrCompute10]]
):
    root: Optional[LookalikeMediaDcrCompute10]


class LookalikeMediaDcrWrapper(BaseModel):
    compute: LookalikeMediaDcrComputeOrUnknown
    consumes: Requirements
    features: Sequence[str]


class LookalikeMediaDataRoom12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: LookalikeMediaDcrWrapper


class LookalikeMediaDataRoom(
    RootModel[
        Union[
            LookalikeMediaDataRoom9,
            LookalikeMediaDataRoom10,
            LookalikeMediaDataRoom11,
            LookalikeMediaDataRoom12,
        ]
    ]
):
    root: Union[
        LookalikeMediaDataRoom9,
        LookalikeMediaDataRoom10,
        LookalikeMediaDataRoom11,
        LookalikeMediaDataRoom12,
    ] = Field(
        ...,
        description='The high-level representation of an LMDCR. Starting with version 4, an outer structure has been introduced that exposes the "features" supported by the LMDCR via string-based flags. This way, every version of DDC can extract these feature flags and inform the SDKs whether a particular function is supported by this LMDCR. In a similar way, the LMDCR exposes what datasets it needs as input from a DataLab such that we can check the compatibility between a DataLab and a LMDCR from any version of DDC/the SDKs.',
    )


class RetrieveDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoom: LookalikeMediaDataRoom


class LookalikeMediaResponse2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveDataRoom: RetrieveDataRoom


class LookalikeMediaResponse(
    RootModel[
        Union[
            LookalikeMediaResponse1,
            LookalikeMediaResponse2,
            LookalikeMediaResponse3,
            LookalikeMediaResponse4,
            LookalikeMediaResponse5,
            LookalikeMediaResponse6,
            LookalikeMediaResponse7,
            LookalikeMediaResponse8,
            LookalikeMediaResponse9,
            LookalikeMediaResponse10,
            LookalikeMediaResponse11,
            LookalikeMediaResponse12,
            LookalikeMediaResponse13,
            LookalikeMediaResponse14,
            LookalikeMediaResponse15,
            LookalikeMediaResponse16,
            LookalikeMediaResponse17,
            LookalikeMediaResponse18,
            LookalikeMediaResponse19,
            LookalikeMediaResponse20,
            LookalikeMediaResponse21,
            LookalikeMediaResponse22,
            LookalikeMediaResponse23,
            LookalikeMediaResponse24,
            LookalikeMediaResponse25,
        ]
    ]
):
    root: Union[
        LookalikeMediaResponse1,
        LookalikeMediaResponse2,
        LookalikeMediaResponse3,
        LookalikeMediaResponse4,
        LookalikeMediaResponse5,
        LookalikeMediaResponse6,
        LookalikeMediaResponse7,
        LookalikeMediaResponse8,
        LookalikeMediaResponse9,
        LookalikeMediaResponse10,
        LookalikeMediaResponse11,
        LookalikeMediaResponse12,
        LookalikeMediaResponse13,
        LookalikeMediaResponse14,
        LookalikeMediaResponse15,
        LookalikeMediaResponse16,
        LookalikeMediaResponse17,
        LookalikeMediaResponse18,
        LookalikeMediaResponse19,
        LookalikeMediaResponse20,
        LookalikeMediaResponse21,
        LookalikeMediaResponse22,
        LookalikeMediaResponse23,
        LookalikeMediaResponse24,
        LookalikeMediaResponse25,
    ] = Field(
        ..., description='GcgResponse -> MediaResponse', title='LookalikeMediaResponse'
    )
