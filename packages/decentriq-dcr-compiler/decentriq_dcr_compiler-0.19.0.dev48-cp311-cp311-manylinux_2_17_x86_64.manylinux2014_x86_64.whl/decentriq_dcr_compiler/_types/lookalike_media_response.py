# generated by datamodel-codegen:
#   filename:  lookalike_media_response.json

from __future__ import annotations

from typing import Any, Mapping, Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class PublishDataRoom(TypedDict):
    dataRoomId: str


class LookalikeMediaResponse1(TypedDict):
    publishDataRoom: PublishDataRoom


class LookalikeMediaResponse3(TypedDict):
    publishAdvertiserDataset: Mapping[str, Any]


class LookalikeMediaResponse4(TypedDict):
    publishPublisherUsersDataset: Mapping[str, Any]


class LookalikeMediaResponse5(TypedDict):
    unpublishPublisherUsersDataset: Mapping[str, Any]


class LookalikeMediaResponse6(TypedDict):
    publishDemographicsDataset: Mapping[str, Any]


class LookalikeMediaResponse7(TypedDict):
    unpublishDemographicsDataset: Mapping[str, Any]


class LookalikeMediaResponse8(TypedDict):
    publishSegmentsDataset: Mapping[str, Any]


class LookalikeMediaResponse9(TypedDict):
    unpublishSegmentsDataset: Mapping[str, Any]


class LookalikeMediaResponse10(TypedDict):
    publishEmbeddingsDataset: Mapping[str, Any]


class LookalikeMediaResponse11(TypedDict):
    unpublishEmbeddingsDataset: Mapping[str, Any]


class LookalikeMediaResponse12(TypedDict):
    unpublishAdvertiserDataset: Mapping[str, Any]


class RetrievePublishedDatasets(TypedDict):
    advertiserDatasetHashHex: NotRequired[Optional[str]]
    demographicsDatasetHashHex: NotRequired[Optional[str]]
    embeddingsDatasetHashHex: NotRequired[Optional[str]]
    publisherDatasetHashHex: NotRequired[Optional[str]]
    segmentsDatasetHashHex: NotRequired[Optional[str]]


class LookalikeMediaResponse13(TypedDict):
    retrievePublishedDatasets: RetrievePublishedDatasets


class CalculateOverlapBasic(TypedDict):
    computeNodeName: str
    jobIdHex: str


class LookalikeMediaResponse14(TypedDict):
    calculateOverlapBasic: CalculateOverlapBasic


class ComputeAudienceSizes(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse15(TypedDict):
    computeAudienceSizes: ComputeAudienceSizes


class CalculateOverlapInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse16(TypedDict):
    calculateOverlapInsights: CalculateOverlapInsights


class LookalikeMediaResponse17(TypedDict):
    publishActivatedAudiencesConfig: Mapping[str, Any]


class LookalikeMediaResponse18(TypedDict):
    unpublishActivatedAudiencesConfig: Mapping[str, Any]


class GetLookalikeAudience(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse19(TypedDict):
    getLookalikeAudience: GetLookalikeAudience


class CalculateModelledAudienceInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse20(TypedDict):
    calculateModelledAudienceInsights: CalculateModelledAudienceInsights


class CalculateModelledAudienceInsightsView(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse21(TypedDict):
    calculateModelledAudienceInsightsView: CalculateModelledAudienceInsightsView


class ViewPublishedActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse22(TypedDict):
    viewPublishedActivatedAudiences: ViewPublishedActivatedAudiences


class ViewActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse23(TypedDict):
    viewActivatedAudiences: ViewActivatedAudiences


class IngestAudiencesReport(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse24(TypedDict):
    ingestAudiencesReport: IngestAudiencesReport


class RetrieveModelQualityReport(CalculateOverlapBasic):
    pass


class LookalikeMediaResponse25(TypedDict):
    retrieveModelQualityReport: RetrieveModelQualityReport


class EnclaveSpecificationV0(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


class LookalikeMediaDataRoomV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDcrComputeV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class RequirementFlagValue22(TypedDict):
    type: Literal['SUPPORTED']


class RequirementFlagValue23(TypedDict):
    type: Literal['DATASET']


class RequirementFlagValue24(TypedDict):
    type: Literal['PROPERTY']
    value: str


RequirementFlagValue = Union[
    RequirementFlagValue22, RequirementFlagValue23, RequirementFlagValue24
]


KnownOrUnknownRequirementFlagValue = Optional[RequirementFlagValue]


class LookalikeMediaDataRoom9(TypedDict):
    v0: LookalikeMediaDataRoomV0


class LookalikeMediaDataRoom10(TypedDict):
    v1: LookalikeMediaDataRoomV1


class LookalikeMediaDataRoom11(TypedDict):
    v2: LookalikeMediaDataRoomV2


class LookalikeMediaDcrCompute(TypedDict):
    v0: LookalikeMediaDcrComputeV0


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(TypedDict):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class Requirements(TypedDict):
    optional: Sequence[RequirementFlag]
    required: Sequence[RequirementFlag]


class LookalikeMediaDcrComputeV1(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableDebugMode: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class LookalikeMediaDcrComputeV2(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrComputeV3(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrCompute12(TypedDict):
    v1: LookalikeMediaDcrComputeV1


class LookalikeMediaDcrCompute13(TypedDict):
    v2: LookalikeMediaDcrComputeV2


class LookalikeMediaDcrCompute14(TypedDict):
    v3: LookalikeMediaDcrComputeV3


LookalikeMediaDcrCompute10 = Union[
    LookalikeMediaDcrCompute,
    LookalikeMediaDcrCompute12,
    LookalikeMediaDcrCompute13,
    LookalikeMediaDcrCompute14,
]


LookalikeMediaDcrComputeOrUnknown = Optional[LookalikeMediaDcrCompute10]


class LookalikeMediaDcrWrapper(TypedDict):
    compute: LookalikeMediaDcrComputeOrUnknown
    consumes: Requirements
    features: Sequence[str]


class LookalikeMediaDataRoom12(TypedDict):
    v3: LookalikeMediaDcrWrapper


LookalikeMediaDataRoom = Union[
    LookalikeMediaDataRoom9,
    LookalikeMediaDataRoom10,
    LookalikeMediaDataRoom11,
    LookalikeMediaDataRoom12,
]


class RetrieveDataRoom(TypedDict):
    dataRoom: LookalikeMediaDataRoom


class LookalikeMediaResponse2(TypedDict):
    retrieveDataRoom: RetrieveDataRoom


LookalikeMediaResponse = Union[
    LookalikeMediaResponse1,
    LookalikeMediaResponse2,
    LookalikeMediaResponse3,
    LookalikeMediaResponse4,
    LookalikeMediaResponse5,
    LookalikeMediaResponse6,
    LookalikeMediaResponse7,
    LookalikeMediaResponse8,
    LookalikeMediaResponse9,
    LookalikeMediaResponse10,
    LookalikeMediaResponse11,
    LookalikeMediaResponse12,
    LookalikeMediaResponse13,
    LookalikeMediaResponse14,
    LookalikeMediaResponse15,
    LookalikeMediaResponse16,
    LookalikeMediaResponse17,
    LookalikeMediaResponse18,
    LookalikeMediaResponse19,
    LookalikeMediaResponse20,
    LookalikeMediaResponse21,
    LookalikeMediaResponse22,
    LookalikeMediaResponse23,
    LookalikeMediaResponse24,
    LookalikeMediaResponse25,
]
