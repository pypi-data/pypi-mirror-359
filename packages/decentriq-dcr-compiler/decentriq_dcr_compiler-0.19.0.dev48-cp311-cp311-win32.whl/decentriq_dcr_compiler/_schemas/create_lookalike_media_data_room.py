# generated by datamodel-codegen:
#   filename:  create_lookalike_media_data_room.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class LookalikeMediaDataRoomV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class CreateLookalikeMediaDataRoom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: LookalikeMediaDataRoomV0


class CreateLookalikeMediaDataRoom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: LookalikeMediaDataRoomV1


class CreateLookalikeMediaDataRoom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: LookalikeMediaDataRoomV2


class CreateLookalikeMediaDcrComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableRateLimitingOnPublishDataset: Optional[bool] = None
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = None
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = None


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class CreateLookalikeMediaDcrCompute1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: CreateLookalikeMediaDcrComputeV0


class CreateLookalikeMediaDcrComputeV1(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDebugMode: bool
    enableDevComputations: bool
    enableRateLimitingOnPublishDataset: Optional[bool] = None
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = None
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = None


class CreateLookalikeMediaDcrComputeV2(CreateLookalikeMediaDcrComputeV1):
    pass


class CreateLookalikeMediaDcrComputeV3(CreateLookalikeMediaDcrComputeV1):
    pass


class CreateLookalikeMediaDcrCompute2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: CreateLookalikeMediaDcrComputeV1


class CreateLookalikeMediaDcrCompute3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: CreateLookalikeMediaDcrComputeV2


class CreateLookalikeMediaDcrCompute4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: CreateLookalikeMediaDcrComputeV3


class CreateLookalikeMediaDcrCompute(
    RootModel[
        Union[
            CreateLookalikeMediaDcrCompute1,
            CreateLookalikeMediaDcrCompute2,
            CreateLookalikeMediaDcrCompute3,
            CreateLookalikeMediaDcrCompute4,
        ]
    ]
):
    root: Union[
        CreateLookalikeMediaDcrCompute1,
        CreateLookalikeMediaDcrCompute2,
        CreateLookalikeMediaDcrCompute3,
        CreateLookalikeMediaDcrCompute4,
    ]


class CreateLookalikeMediaDataRoom4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: CreateLookalikeMediaDcrCompute


class CreateLookalikeMediaDataRoom(
    RootModel[
        Union[
            CreateLookalikeMediaDataRoom1,
            CreateLookalikeMediaDataRoom2,
            CreateLookalikeMediaDataRoom3,
            CreateLookalikeMediaDataRoom4,
        ]
    ]
):
    root: Union[
        CreateLookalikeMediaDataRoom1,
        CreateLookalikeMediaDataRoom2,
        CreateLookalikeMediaDataRoom3,
        CreateLookalikeMediaDataRoom4,
    ] = Field(
        ...,
        description='Arguments for creating a specific version of an LMDCR.',
        title='CreateLookalikeMediaDataRoom',
    )
