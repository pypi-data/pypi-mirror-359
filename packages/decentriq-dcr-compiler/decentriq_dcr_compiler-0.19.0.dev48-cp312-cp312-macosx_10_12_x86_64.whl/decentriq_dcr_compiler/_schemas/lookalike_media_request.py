# generated by datamodel-codegen:
#   filename:  lookalike_media_request.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class RetrieveDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str


class LookalikeMediaRequest2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveDataRoom: RetrieveDataRoom


class PublishAdvertiserDataset(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    datasetHashHex: str
    encryptionKeyHex: str
    scopeIdHex: str


class LookalikeMediaRequest3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishAdvertiserDataset: PublishAdvertiserDataset


class PublishPublisherUsersDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishPublisherUsersDataset: PublishPublisherUsersDataset


class UnpublishPublisherUsersDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishPublisherUsersDataset: UnpublishPublisherUsersDataset


class UnpublishAdvertiserDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishAdvertiserDataset: UnpublishAdvertiserDataset


class UnpublishDemographicsDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishDemographicsDataset: UnpublishDemographicsDataset


class UnpublishEmbeddingsDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishEmbeddingsDataset: UnpublishEmbeddingsDataset


class UnpublishSegmentsDataset(RetrieveDataRoom):
    pass


class LookalikeMediaRequest9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishSegmentsDataset: UnpublishSegmentsDataset


class RetrievePublishedDatasets(RetrieveDataRoom):
    pass


class LookalikeMediaRequest10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrievePublishedDatasets: RetrievePublishedDatasets


class CalculateOverlapBasic(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    scopeIdHex: str


class LookalikeMediaRequest11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    calculateOverlapBasic: CalculateOverlapBasic


class CalculateOverlapInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    calculateOverlapInsights: CalculateOverlapInsights


class PublishDemographicsDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDemographicsDataset: PublishDemographicsDataset


class PublishSegmentsDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishSegmentsDataset: PublishSegmentsDataset


class PublishEmbeddingsDataset(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishEmbeddingsDataset: PublishEmbeddingsDataset


class PublishActivatedAudiencesConfig(PublishAdvertiserDataset):
    pass


class LookalikeMediaRequest16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishActivatedAudiencesConfig: PublishActivatedAudiencesConfig


class UnpublishActivatedAudiencesConfig(RetrieveDataRoom):
    pass


class LookalikeMediaRequest17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    unpublishActivatedAudiencesConfig: UnpublishActivatedAudiencesConfig


class CalculateModelledAudienceInsights(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    calculateModelledAudienceInsights: CalculateModelledAudienceInsights


class CalculateModelledAudienceInsightsView(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    calculateModelledAudienceInsightsView: CalculateModelledAudienceInsightsView


class ComputeAudienceSizes(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest20(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeAudienceSizes: ComputeAudienceSizes


class ViewPublishedActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    viewPublishedActivatedAudiences: ViewPublishedActivatedAudiences


class ViewActivatedAudiences(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest23(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    viewActivatedAudiences: ViewActivatedAudiences


class IngestAudiencesReport(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ingestAudiencesReport: IngestAudiencesReport


class RetrieveModelQualityReport(CalculateOverlapBasic):
    pass


class LookalikeMediaRequest25(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveModelQualityReport: RetrieveModelQualityReport


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class LookalikeMediaDataRoomV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDcrComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class RequestedAudiencePayload(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    audienceType: str
    reach: float


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValue19(BaseModel):
    type: Type


class Type19(Enum):
    DATASET = 'DATASET'


class RequirementFlagValue20(BaseModel):
    type: Type19


class Type20(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValue21(BaseModel):
    type: Type20
    value: str


class RequirementFlagValue(
    RootModel[
        Union[RequirementFlagValue19, RequirementFlagValue20, RequirementFlagValue21]
    ]
):
    root: Union[RequirementFlagValue19, RequirementFlagValue20, RequirementFlagValue21]


class GetLookalikeAudience(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoomIdHex: str
    requestedAudience: RequestedAudiencePayload
    scopeIdHex: str


class LookalikeMediaRequest21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getLookalikeAudience: GetLookalikeAudience


class KnownOrUnknownRequirementFlagValue(RootModel[Optional[RequirementFlagValue]]):
    root: Optional[RequirementFlagValue]


class LookalikeMediaDataRoom5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: LookalikeMediaDataRoomV0


class LookalikeMediaDataRoom6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: LookalikeMediaDataRoomV1


class LookalikeMediaDataRoom7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: LookalikeMediaDataRoomV2


class LookalikeMediaDcrCompute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: LookalikeMediaDcrComputeV0


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class Requirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Sequence[RequirementFlag]


class LookalikeMediaDcrComputeV1(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableDebugMode: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class LookalikeMediaDcrComputeV2(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrComputeV3(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrCompute7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: LookalikeMediaDcrComputeV1


class LookalikeMediaDcrCompute8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: LookalikeMediaDcrComputeV2


class LookalikeMediaDcrCompute9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: LookalikeMediaDcrComputeV3


class LookalikeMediaDcrCompute5(
    RootModel[
        Union[
            LookalikeMediaDcrCompute,
            LookalikeMediaDcrCompute7,
            LookalikeMediaDcrCompute8,
            LookalikeMediaDcrCompute9,
        ]
    ]
):
    root: Union[
        LookalikeMediaDcrCompute,
        LookalikeMediaDcrCompute7,
        LookalikeMediaDcrCompute8,
        LookalikeMediaDcrCompute9,
    ]


class LookalikeMediaDcrComputeOrUnknown(RootModel[Optional[LookalikeMediaDcrCompute5]]):
    root: Optional[LookalikeMediaDcrCompute5]


class LookalikeMediaDcrWrapper(BaseModel):
    compute: LookalikeMediaDcrComputeOrUnknown
    consumes: Requirements
    features: Sequence[str]


class LookalikeMediaDataRoom8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: LookalikeMediaDcrWrapper


class LookalikeMediaDataRoom(
    RootModel[
        Union[
            LookalikeMediaDataRoom5,
            LookalikeMediaDataRoom6,
            LookalikeMediaDataRoom7,
            LookalikeMediaDataRoom8,
        ]
    ]
):
    root: Union[
        LookalikeMediaDataRoom5,
        LookalikeMediaDataRoom6,
        LookalikeMediaDataRoom7,
        LookalikeMediaDataRoom8,
    ] = Field(
        ...,
        description='The high-level representation of an LMDCR. Starting with version 4, an outer structure has been introduced that exposes the "features" supported by the LMDCR via string-based flags. This way, every version of DDC can extract these feature flags and inform the SDKs whether a particular function is supported by this LMDCR. In a similar way, the LMDCR exposes what datasets it needs as input from a DataLab such that we can check the compatibility between a DataLab and a LMDCR from any version of DDC/the SDKs.',
    )


class PublishDataRoom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataRoom: LookalikeMediaDataRoom
    requirePassword: bool
    showOrganizationLogo: bool


class LookalikeMediaRequest1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    publishDataRoom: PublishDataRoom


class LookalikeMediaRequest(
    RootModel[
        Union[
            LookalikeMediaRequest1,
            LookalikeMediaRequest2,
            LookalikeMediaRequest3,
            LookalikeMediaRequest4,
            LookalikeMediaRequest5,
            LookalikeMediaRequest6,
            LookalikeMediaRequest7,
            LookalikeMediaRequest8,
            LookalikeMediaRequest9,
            LookalikeMediaRequest10,
            LookalikeMediaRequest11,
            LookalikeMediaRequest12,
            LookalikeMediaRequest13,
            LookalikeMediaRequest14,
            LookalikeMediaRequest15,
            LookalikeMediaRequest16,
            LookalikeMediaRequest17,
            LookalikeMediaRequest18,
            LookalikeMediaRequest19,
            LookalikeMediaRequest20,
            LookalikeMediaRequest21,
            LookalikeMediaRequest22,
            LookalikeMediaRequest23,
            LookalikeMediaRequest24,
            LookalikeMediaRequest25,
        ]
    ]
):
    root: Union[
        LookalikeMediaRequest1,
        LookalikeMediaRequest2,
        LookalikeMediaRequest3,
        LookalikeMediaRequest4,
        LookalikeMediaRequest5,
        LookalikeMediaRequest6,
        LookalikeMediaRequest7,
        LookalikeMediaRequest8,
        LookalikeMediaRequest9,
        LookalikeMediaRequest10,
        LookalikeMediaRequest11,
        LookalikeMediaRequest12,
        LookalikeMediaRequest13,
        LookalikeMediaRequest14,
        LookalikeMediaRequest15,
        LookalikeMediaRequest16,
        LookalikeMediaRequest17,
        LookalikeMediaRequest18,
        LookalikeMediaRequest19,
        LookalikeMediaRequest20,
        LookalikeMediaRequest21,
        LookalikeMediaRequest22,
        LookalikeMediaRequest23,
        LookalikeMediaRequest24,
        LookalikeMediaRequest25,
    ] = Field(
        ..., description='MediaRequest -> GcgRequest', title='LookalikeMediaRequest'
    )
