# generated by datamodel-codegen:
#   filename:  media_insights_request.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class RetrieveDataRoom(TypedDict):
    dataRoomIdHex: str


class MediaInsightsRequest2(TypedDict):
    retrieveDataRoom: RetrieveDataRoom


class PublishAdvertiserDataset(TypedDict):
    dataRoomIdHex: str
    datasetHashHex: str
    encryptionKeyHex: str
    scopeIdHex: str


class MediaInsightsRequest3(TypedDict):
    publishAdvertiserDataset: PublishAdvertiserDataset


class PublishPublisherUsersDataset(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest4(TypedDict):
    publishPublisherUsersDataset: PublishPublisherUsersDataset


class UnpublishPublisherUsersDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest5(TypedDict):
    unpublishPublisherUsersDataset: UnpublishPublisherUsersDataset


class UnpublishAdvertiserDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest6(TypedDict):
    unpublishAdvertiserDataset: UnpublishAdvertiserDataset


class UnpublishDemographicsDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest7(TypedDict):
    unpublishDemographicsDataset: UnpublishDemographicsDataset


class UnpublishEmbeddingsDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest8(TypedDict):
    unpublishEmbeddingsDataset: UnpublishEmbeddingsDataset


class UnpublishSegmentsDataset(RetrieveDataRoom):
    pass


class MediaInsightsRequest9(TypedDict):
    unpublishSegmentsDataset: UnpublishSegmentsDataset


class RetrievePublishedDatasets(RetrieveDataRoom):
    pass


class MediaInsightsRequest10(TypedDict):
    retrievePublishedDatasets: RetrievePublishedDatasets


class ComputeInsights(TypedDict):
    dataRoomIdHex: str
    scopeIdHex: str


class MediaInsightsRequest11(TypedDict):
    computeInsights: ComputeInsights


class PublishDemographicsDataset(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest12(TypedDict):
    publishDemographicsDataset: PublishDemographicsDataset


class PublishSegmentsDataset(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest13(TypedDict):
    publishSegmentsDataset: PublishSegmentsDataset


class PublishEmbeddingsDataset(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest14(TypedDict):
    publishEmbeddingsDataset: PublishEmbeddingsDataset


class PublishActivatedAudiencesConfig(PublishAdvertiserDataset):
    pass


class MediaInsightsRequest15(TypedDict):
    publishActivatedAudiencesConfig: PublishActivatedAudiencesConfig


class UnpublishActivatedAudiencesConfig(RetrieveDataRoom):
    pass


class MediaInsightsRequest16(TypedDict):
    unpublishActivatedAudiencesConfig: UnpublishActivatedAudiencesConfig


class ComputeAvailableAudiences(ComputeInsights):
    pass


class MediaInsightsRequest17(TypedDict):
    computeAvailableAudiences: ComputeAvailableAudiences


class ComputeOverlapStatistics(ComputeInsights):
    pass


class MediaInsightsRequest18(TypedDict):
    computeOverlapStatistics: ComputeOverlapStatistics


class GetAudiencesForPublisher(ComputeInsights):
    pass


class MediaInsightsRequest21(TypedDict):
    getAudiencesForPublisher: GetAudiencesForPublisher


class GetAudiencesForAdvertiser(ComputeInsights):
    pass


class MediaInsightsRequest22(TypedDict):
    getAudiencesForAdvertiser: GetAudiencesForAdvertiser


class IngestAudiencesReport(ComputeInsights):
    pass


class MediaInsightsRequest23(TypedDict):
    ingestAudiencesReport: IngestAudiencesReport


class RetrieveModelQualityReport(ComputeInsights):
    pass


class MediaInsightsRequest24(TypedDict):
    retrieveModelQualityReport: RetrieveModelQualityReport


class EnclaveSpecificationV0(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class RequestedAudiencePayload(TypedDict):
    activation_type: str
    audience_type: str
    reach: NotRequired[Optional[float]]


class RequirementFlagValue28(TypedDict):
    type: Literal['SUPPORTED']


class RequirementFlagValue29(TypedDict):
    type: Literal['DATASET']


class RequirementFlagValue30(TypedDict):
    type: Literal['PROPERTY']
    value: str


RequirementFlagValue = Union[
    RequirementFlagValue28, RequirementFlagValue29, RequirementFlagValue30
]


class GetAudienceUserList(TypedDict):
    dataRoomIdHex: str
    requestedAudience: RequestedAudiencePayload
    scopeIdHex: str


class MediaInsightsRequest19(TypedDict):
    getAudienceUserList: GetAudienceUserList


class GetAudienceUserListForAdvertiser(GetAudienceUserList):
    pass


class MediaInsightsRequest20(TypedDict):
    getAudienceUserListForAdvertiser: GetAudienceUserListForAdvertiser


KnownOrUnknownRequirementFlagValue = Optional[RequirementFlagValue]


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(TypedDict):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp24(TypedDict):
    has: RequirementFlag


class MediaInsightsComputeV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class MediaInsightsComputeV1(MediaInsightsComputeV0):
    pass


class MediaInsightsComputeV2(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: NotRequired[Sequence[str]]
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class MediaInsightsComputeV3(MediaInsightsComputeV2):
    pass


class MediaInsightsComputeV4(MediaInsightsComputeV2):
    pass


class MediaInsightsComputeV5(MediaInsightsComputeV2):
    pass


class MediaInsightsCompute(TypedDict):
    v0: MediaInsightsComputeV0


class MediaInsightsCompute14(TypedDict):
    v1: MediaInsightsComputeV1


class MediaInsightsCompute15(TypedDict):
    v2: MediaInsightsComputeV2


class MediaInsightsCompute16(TypedDict):
    v3: MediaInsightsComputeV3


class MediaInsightsCompute17(TypedDict):
    v4: MediaInsightsComputeV4


class MediaInsightsCompute18(TypedDict):
    v5: MediaInsightsComputeV5


MediaInsightsCompute12 = Union[
    MediaInsightsCompute,
    MediaInsightsCompute14,
    MediaInsightsCompute15,
    MediaInsightsCompute16,
    MediaInsightsCompute17,
    MediaInsightsCompute18,
]


MediaInsightsComputeOrUnknown = Optional[MediaInsightsCompute12]


class PublishDataRoom(TypedDict):
    dataRoom: MediaInsightsDcr
    requirePassword: bool
    showOrganizationLogo: bool


class MediaInsightsRequest1(TypedDict):
    publishDataRoom: PublishDataRoom


MediaInsightsRequest = Union[
    MediaInsightsRequest1,
    MediaInsightsRequest2,
    MediaInsightsRequest3,
    MediaInsightsRequest4,
    MediaInsightsRequest5,
    MediaInsightsRequest6,
    MediaInsightsRequest7,
    MediaInsightsRequest8,
    MediaInsightsRequest9,
    MediaInsightsRequest10,
    MediaInsightsRequest11,
    MediaInsightsRequest12,
    MediaInsightsRequest13,
    MediaInsightsRequest14,
    MediaInsightsRequest15,
    MediaInsightsRequest16,
    MediaInsightsRequest17,
    MediaInsightsRequest18,
    MediaInsightsRequest19,
    MediaInsightsRequest20,
    MediaInsightsRequest21,
    MediaInsightsRequest22,
    MediaInsightsRequest23,
    MediaInsightsRequest24,
]


class ConsumerRequirements(TypedDict):
    optional: Sequence[RequirementFlag]
    required: NotRequired[Optional[RequirementOp]]


class MediaInsightsDcr3(TypedDict):
    v0: MediaInsightsDcrInner


MediaInsightsDcr = MediaInsightsDcr3


class MediaInsightsDcrInner(TypedDict):
    compute: MediaInsightsComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


RequirementOp21 = TypedDict(
    'RequirementOp21',
    {
        'or': Sequence[RequirementOp],
    },
)


RequirementOp22 = TypedDict(
    'RequirementOp22',
    {
        'and': Sequence[RequirementOp],
    },
)


class RequirementOp23(TypedDict):
    exclusiveOr: Sequence[RequirementOp]


RequirementOp = Union[
    RequirementOp21, RequirementOp22, RequirementOp23, RequirementOp24
]
