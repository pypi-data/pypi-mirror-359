# generated by datamodel-codegen:
#   filename:  create_lookalike_media_data_room.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class EnclaveSpecificationV0(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


class LookalikeMediaDataRoomV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class CreateLookalikeMediaDataRoom1(TypedDict):
    v0: LookalikeMediaDataRoomV0


class CreateLookalikeMediaDataRoom2(TypedDict):
    v1: LookalikeMediaDataRoomV1


class CreateLookalikeMediaDataRoom3(TypedDict):
    v2: LookalikeMediaDataRoomV2


class CreateLookalikeMediaDcrComputeV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableRateLimitingOnPublishDataset: NotRequired[Optional[bool]]
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[Optional[int]]
    rateLimitPublishDataWindowSeconds: NotRequired[Optional[int]]


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class CreateLookalikeMediaDcrCompute1(TypedDict):
    v0: CreateLookalikeMediaDcrComputeV0


class CreateLookalikeMediaDcrComputeV1(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDebugMode: bool
    enableDevComputations: bool
    enableRateLimitingOnPublishDataset: NotRequired[Optional[bool]]
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[Optional[int]]
    rateLimitPublishDataWindowSeconds: NotRequired[Optional[int]]


class CreateLookalikeMediaDcrComputeV2(CreateLookalikeMediaDcrComputeV1):
    pass


class CreateLookalikeMediaDcrComputeV3(CreateLookalikeMediaDcrComputeV1):
    pass


class CreateLookalikeMediaDcrCompute2(TypedDict):
    v1: CreateLookalikeMediaDcrComputeV1


class CreateLookalikeMediaDcrCompute3(TypedDict):
    v2: CreateLookalikeMediaDcrComputeV2


class CreateLookalikeMediaDcrCompute4(TypedDict):
    v3: CreateLookalikeMediaDcrComputeV3


CreateLookalikeMediaDcrCompute = Union[
    CreateLookalikeMediaDcrCompute1,
    CreateLookalikeMediaDcrCompute2,
    CreateLookalikeMediaDcrCompute3,
    CreateLookalikeMediaDcrCompute4,
]


class CreateLookalikeMediaDataRoom4(TypedDict):
    v3: CreateLookalikeMediaDcrCompute


CreateLookalikeMediaDataRoom = Union[
    CreateLookalikeMediaDataRoom1,
    CreateLookalikeMediaDataRoom2,
    CreateLookalikeMediaDataRoom3,
    CreateLookalikeMediaDataRoom4,
]
