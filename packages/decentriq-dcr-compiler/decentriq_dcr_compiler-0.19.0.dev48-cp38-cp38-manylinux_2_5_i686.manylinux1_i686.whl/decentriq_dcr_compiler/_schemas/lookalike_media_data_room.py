# generated by datamodel-codegen:
#   filename:  lookalike_media_data_room.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class LookalikeMediaDataRoomV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDcrComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValue16(BaseModel):
    type: Type


class Type16(Enum):
    DATASET = 'DATASET'


class RequirementFlagValue17(BaseModel):
    type: Type16


class Type17(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValue18(BaseModel):
    type: Type17
    value: str


class RequirementFlagValue(
    RootModel[
        Union[RequirementFlagValue16, RequirementFlagValue17, RequirementFlagValue18]
    ]
):
    root: Union[RequirementFlagValue16, RequirementFlagValue17, RequirementFlagValue18]


class LookalikeMediaDataRoom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: LookalikeMediaDataRoomV0


class LookalikeMediaDataRoom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: LookalikeMediaDataRoomV1


class LookalikeMediaDataRoom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: LookalikeMediaDataRoomV2


class KnownOrUnknownRequirementFlagValue(RootModel[Optional[RequirementFlagValue]]):
    root: Optional[RequirementFlagValue]


class LookalikeMediaDcrCompute1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: LookalikeMediaDcrComputeV0


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class Requirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Sequence[RequirementFlag]


class LookalikeMediaDcrComputeV1(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableDebugMode: bool
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class LookalikeMediaDcrComputeV2(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrComputeV3(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrCompute2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: LookalikeMediaDcrComputeV1


class LookalikeMediaDcrCompute3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: LookalikeMediaDcrComputeV2


class LookalikeMediaDcrCompute4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: LookalikeMediaDcrComputeV3


class LookalikeMediaDcrCompute(
    RootModel[
        Union[
            LookalikeMediaDcrCompute1,
            LookalikeMediaDcrCompute2,
            LookalikeMediaDcrCompute3,
            LookalikeMediaDcrCompute4,
        ]
    ]
):
    root: Union[
        LookalikeMediaDcrCompute1,
        LookalikeMediaDcrCompute2,
        LookalikeMediaDcrCompute3,
        LookalikeMediaDcrCompute4,
    ]


class LookalikeMediaDcrComputeOrUnknown(RootModel[Optional[LookalikeMediaDcrCompute]]):
    root: Optional[LookalikeMediaDcrCompute]


class LookalikeMediaDcrWrapper(BaseModel):
    compute: LookalikeMediaDcrComputeOrUnknown
    consumes: Requirements
    features: Sequence[str]


class LookalikeMediaDataRoom4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: LookalikeMediaDcrWrapper


class LookalikeMediaDataRoom(
    RootModel[
        Union[
            LookalikeMediaDataRoom1,
            LookalikeMediaDataRoom2,
            LookalikeMediaDataRoom3,
            LookalikeMediaDataRoom4,
        ]
    ]
):
    root: Union[
        LookalikeMediaDataRoom1,
        LookalikeMediaDataRoom2,
        LookalikeMediaDataRoom3,
        LookalikeMediaDataRoom4,
    ] = Field(
        ...,
        description='The high-level representation of an LMDCR. Starting with version 4, an outer structure has been introduced that exposes the "features" supported by the LMDCR via string-based flags. This way, every version of DDC can extract these feature flags and inform the SDKs whether a particular function is supported by this LMDCR. In a similar way, the LMDCR exposes what datasets it needs as input from a DataLab such that we can check the compatibility between a DataLab and a LMDCR from any version of DDC/the SDKs.',
        title='LookalikeMediaDataRoom',
    )
