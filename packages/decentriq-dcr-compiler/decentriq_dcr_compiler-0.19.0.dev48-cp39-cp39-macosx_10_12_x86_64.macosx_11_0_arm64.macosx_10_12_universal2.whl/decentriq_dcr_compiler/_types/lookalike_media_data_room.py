# generated by datamodel-codegen:
#   filename:  lookalike_media_data_room.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class EnclaveSpecificationV0(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


class LookalikeMediaDataRoomV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDcrComputeV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class RequirementFlagValue16(TypedDict):
    type: Literal['SUPPORTED']


class RequirementFlagValue17(TypedDict):
    type: Literal['DATASET']


class RequirementFlagValue18(TypedDict):
    type: Literal['PROPERTY']
    value: str


RequirementFlagValue = Union[
    RequirementFlagValue16, RequirementFlagValue17, RequirementFlagValue18
]


class LookalikeMediaDataRoom1(TypedDict):
    v0: LookalikeMediaDataRoomV0


class LookalikeMediaDataRoom2(TypedDict):
    v1: LookalikeMediaDataRoomV1


class LookalikeMediaDataRoom3(TypedDict):
    v2: LookalikeMediaDataRoomV2


KnownOrUnknownRequirementFlagValue = Optional[RequirementFlagValue]


class LookalikeMediaDcrCompute1(TypedDict):
    v0: LookalikeMediaDcrComputeV0


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(TypedDict):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class Requirements(TypedDict):
    optional: Sequence[RequirementFlag]
    required: Sequence[RequirementFlag]


class LookalikeMediaDcrComputeV1(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableDebugMode: bool
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class LookalikeMediaDcrComputeV2(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrComputeV3(LookalikeMediaDcrComputeV1):
    pass


class LookalikeMediaDcrCompute2(TypedDict):
    v1: LookalikeMediaDcrComputeV1


class LookalikeMediaDcrCompute3(TypedDict):
    v2: LookalikeMediaDcrComputeV2


class LookalikeMediaDcrCompute4(TypedDict):
    v3: LookalikeMediaDcrComputeV3


LookalikeMediaDcrCompute = Union[
    LookalikeMediaDcrCompute1,
    LookalikeMediaDcrCompute2,
    LookalikeMediaDcrCompute3,
    LookalikeMediaDcrCompute4,
]


LookalikeMediaDcrComputeOrUnknown = Optional[LookalikeMediaDcrCompute]


class LookalikeMediaDcrWrapper(TypedDict):
    compute: LookalikeMediaDcrComputeOrUnknown
    consumes: Requirements
    features: Sequence[str]


class LookalikeMediaDataRoom4(TypedDict):
    v3: LookalikeMediaDcrWrapper


LookalikeMediaDataRoom = Union[
    LookalikeMediaDataRoom1,
    LookalikeMediaDataRoom2,
    LookalikeMediaDataRoom3,
    LookalikeMediaDataRoom4,
]
