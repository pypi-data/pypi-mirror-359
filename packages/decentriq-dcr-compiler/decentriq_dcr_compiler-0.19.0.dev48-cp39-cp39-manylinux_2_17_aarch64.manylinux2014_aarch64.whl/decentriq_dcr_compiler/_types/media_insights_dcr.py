# generated by datamodel-codegen:
#   filename:  media_insights_dcr.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class EnclaveSpecificationV0(TypedDict):
    attestationProtoBase64: str
    id: str
    workerProtocol: int


FormatType = Literal[
    'STRING',
    'INTEGER',
    'FLOAT',
    'EMAIL',
    'DATE_ISO8601',
    'PHONE_NUMBER_E164',
    'HASH_SHA256_HEX',
]


HashingAlgorithm = Literal['SHA256_HEX']


ModelEvaluationType = Literal['ROC_CURVE', 'DISTANCE_TO_EMBEDDING', 'JACCARD']


class RequirementFlagValue25(TypedDict):
    type: Literal['SUPPORTED']


class RequirementFlagValue26(TypedDict):
    type: Literal['DATASET']


class RequirementFlagValue27(TypedDict):
    type: Literal['PROPERTY']
    value: str


RequirementFlagValue = Union[
    RequirementFlagValue25, RequirementFlagValue26, RequirementFlagValue27
]


KnownOrUnknownRequirementFlagValue = Optional[RequirementFlagValue]


class ModelEvaluationConfig(TypedDict):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(TypedDict):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp20(TypedDict):
    has: RequirementFlag


class MediaInsightsComputeV0(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class MediaInsightsComputeV1(MediaInsightsComputeV0):
    pass


class MediaInsightsComputeV2(TypedDict):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: NotRequired[Sequence[str]]
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: NotRequired[Optional[HashingAlgorithm]]
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: NotRequired[Optional[ModelEvaluationConfig]]
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: NotRequired[int]
    rateLimitPublishDataWindowSeconds: NotRequired[int]


class MediaInsightsComputeV3(MediaInsightsComputeV2):
    pass


class MediaInsightsComputeV4(MediaInsightsComputeV2):
    pass


class MediaInsightsComputeV5(MediaInsightsComputeV2):
    pass


class MediaInsightsCompute(TypedDict):
    v0: MediaInsightsComputeV0


class MediaInsightsCompute7(TypedDict):
    v1: MediaInsightsComputeV1


class MediaInsightsCompute8(TypedDict):
    v2: MediaInsightsComputeV2


class MediaInsightsCompute9(TypedDict):
    v3: MediaInsightsComputeV3


class MediaInsightsCompute10(TypedDict):
    v4: MediaInsightsComputeV4


class MediaInsightsCompute11(TypedDict):
    v5: MediaInsightsComputeV5


MediaInsightsCompute5 = Union[
    MediaInsightsCompute,
    MediaInsightsCompute7,
    MediaInsightsCompute8,
    MediaInsightsCompute9,
    MediaInsightsCompute10,
    MediaInsightsCompute11,
]


MediaInsightsComputeOrUnknown = Optional[MediaInsightsCompute5]


class MediaInsightsDcr2(TypedDict):
    v0: MediaInsightsDcrInner


MediaInsightsDcr = MediaInsightsDcr2


class ConsumerRequirements(TypedDict):
    optional: Sequence[RequirementFlag]
    required: NotRequired[Optional[RequirementOp]]


class MediaInsightsDcrInner(TypedDict):
    compute: MediaInsightsComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


RequirementOp17 = TypedDict(
    'RequirementOp17',
    {
        'or': Sequence[RequirementOp],
    },
)


RequirementOp18 = TypedDict(
    'RequirementOp18',
    {
        'and': Sequence[RequirementOp],
    },
)


class RequirementOp19(TypedDict):
    exclusiveOr: Sequence[RequirementOp]


RequirementOp = Union[
    RequirementOp17, RequirementOp18, RequirementOp19, RequirementOp20
]
