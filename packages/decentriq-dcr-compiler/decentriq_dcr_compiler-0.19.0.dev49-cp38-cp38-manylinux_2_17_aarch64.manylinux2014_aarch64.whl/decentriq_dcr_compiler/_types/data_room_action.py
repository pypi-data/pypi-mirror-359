# generated by datamodel-codegen:
#   filename:  data_room_action.json

from __future__ import annotations

from typing import Any, Mapping, Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class ProvisionBaseAudiencePolicyIds(TypedDict):
    demographicsPolicyId: NotRequired[Optional[str]]
    embeddingsPolicyId: NotRequired[Optional[str]]
    matchingPolicyId: str
    segmentsPolicyId: NotRequired[Optional[str]]


class DataRoomAction1(TypedDict):
    kind: Literal['media']
    provisionBaseAudiencePolicyIds: ProvisionBaseAudiencePolicyIds


class DataRoomAction2(TypedDict):
    kind: Literal['media']
    deprovisionBaseAudiencePolicyIds: Mapping[str, Any]


class ProvisionSeedAudiencePolicyIds(TypedDict):
    audiencesPolicyId: str


class DataRoomAction3(TypedDict):
    kind: Literal['media']
    provisionSeedAudiencePolicyIds: ProvisionSeedAudiencePolicyIds


class DataRoomAction4(TypedDict):
    kind: Literal['media']
    deprovisionSeedAudiencePolicyIds: Mapping[str, Any]


class DeleteCustomAudience(TypedDict):
    audienceId: str
    forceDeletePrerequisites: bool


class DataRoomAction6(TypedDict):
    kind: Literal['media']
    deleteCustomAudience: DeleteCustomAudience


class GetAudiencePrerequisites(TypedDict):
    audienceId: str


class DataRoomAction7(TypedDict):
    kind: Literal['media']
    getAudiencePrerequisites: GetAudiencePrerequisites


class AudienceReference10(TypedDict):
    kind: Literal['BASE']


class AudienceReference11(TypedDict):
    id: str
    kind: Literal['CUSTOM']


class AudienceReference12(TypedDict):
    audienceType: str
    kind: Literal['SEED']


AudienceReference = Union[AudienceReference10, AudienceReference11, AudienceReference12]


BooleanOp = Literal['AND', 'OR']


CombineOperator = Literal['INTERSECT', 'UNION', 'DIFF']


class CustomAudienceDefinition7(TypedDict):
    excludeSeedAudience: NotRequired[Optional[bool]]
    kind: Literal['LOOKALIKE']
    reach: int
    sourceRef: AudienceReference


FilterOperator = Literal[
    'CONTAINS_ANY_OF', 'CONTAINS_NONE_OF', 'CONTAINS_ALL_OF', 'EMPTY', 'NOT_EMPTY'
]


class AudienceFilter(TypedDict):
    attribute: str
    operator: FilterOperator
    values: NotRequired[Sequence[str]]


class AudienceFilters(TypedDict):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class AudienceCombinator(TypedDict):
    filters: NotRequired[Optional[AudienceFilters]]
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition8(TypedDict):
    combine: NotRequired[Sequence[AudienceCombinator]]
    filters: NotRequired[Optional[AudienceFilters]]
    kind: Literal['RULE_BASED']
    sourceRef: AudienceReference


CustomAudienceDefinition = Union[CustomAudienceDefinition7, CustomAudienceDefinition8]


class CreateCustomAudience(TypedDict):
    definition: CustomAudienceDefinition
    name: str
    sharedWith: Sequence[str]


class DataRoomAction5(TypedDict):
    kind: Literal['media']
    createCustomAudience: CreateCustomAudience


class UpdateCustomAudience(TypedDict):
    audienceId: str
    definition: NotRequired[Optional[CustomAudienceDefinition]]
    name: NotRequired[Optional[str]]
    sharedWith: NotRequired[Sequence[str]]


class DataRoomAction8(TypedDict):
    kind: Literal['media']
    updateCustomAudience: UpdateCustomAudience


DataRoomAction = Union[
    DataRoomAction1,
    DataRoomAction2,
    DataRoomAction3,
    DataRoomAction4,
    DataRoomAction5,
    DataRoomAction6,
    DataRoomAction7,
    DataRoomAction8,
]
