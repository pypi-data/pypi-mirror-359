name: "daily_events_microbatch"
description: "Process daily events with microbatch strategy"

variables:
  microbatch:
    event_time_column: "created_at"
    batch_size: "day"
    lookback: 2
    begin: "2024-01-01T00:00:00"

steps:
  # Extract events for specific batch window
  - id: "extract_events"
    type: "source"
    source_type: "postgresql"
    config:
      query: |
        SELECT 
          event_id,
          user_id,
          event_type,
          created_at,
          data
        FROM events
        WHERE created_at >= '{{ batch_start.strftime('%Y-%m-%d %H:%M:%S') }}'
          AND created_at < '{{ batch_end.strftime('%Y-%m-%d %H:%M:%S') }}'
      connection: "events_db"

  # Process events data (example with validator)
  - id: "validate_events"
    type: "processor"
    processor_type: "validator"
    depends_on:
      - "extract_events"
    config:
      checks:
        - check: "row_count"
          min_rows: 1
        - check: "required_columns"
          columns: ["event_id", "user_id", "event_type", "created_at"]

  # Load to analytics table with automatic batch delete
  - id: "load_daily_stats"
    type: "endpoint"
    endpoint_type: "postgresql"
    depends_on:
      - "validate_events"
    config:
      table: "validated_events"
      connection: "analytics_db"
      event_time_column: "created_at"  # Required for microbatch auto-delete
      schema:
        event_id: "VARCHAR(100)"
        user_id: "VARCHAR(100)"
        event_type: "VARCHAR(100)"
        created_at: "TIMESTAMP"
        data: "JSONB"

---
name: "hourly_metrics_microbatch"
description: "Real-time hourly metrics processing"

variables:
  microbatch:
    event_time_column: "timestamp"
    batch_size: "hour"
    lookback: 3  # Process last 3 hours on each run

steps:
  - id: "extract_metrics"
    type: "source"
    source_type: "postgresql"
    config:
      query: |
        SELECT 
          metric_name,
          metric_value,
          timestamp
        FROM metrics
        WHERE timestamp >= '{{ batch_start.strftime('%Y-%m-%d %H:%M:%S') }}'
          AND timestamp < '{{ batch_end.strftime('%Y-%m-%d %H:%M:%S') }}'
      connection: "metrics_db"

  - id: "validate_metrics"
    type: "processor"
    processor_type: "validator"
    depends_on:
      - "extract_metrics"
    config:
      checks:
        - check: "required_columns"
          columns: ["metric_name", "metric_value", "timestamp"]
        - check: "row_count"
          min_rows: 1

  - id: "load_hourly_metrics"
    type: "endpoint"
    endpoint_type: "postgresql"
    depends_on:
      - "validate_metrics"
    config:
      table: "raw_metrics"
      connection: "analytics_db"
      event_time_column: "timestamp"
      schema:
        metric_name: "VARCHAR(100)"
        metric_value: "DECIMAL(10,4)"
        timestamp: "TIMESTAMP"

---
name: "weekly_reports_microbatch"
description: "Weekly reporting with lookback for late data"

variables:
  microbatch:
    event_time_column: "transaction_date"
    batch_size: "week"
    lookback: 1
    begin: "2024-01-01T00:00:00"

steps:
  - id: "extract_transactions"
    type: "source"
    source_type: "postgresql"
    config:
      query: |
        SELECT 
          transaction_id,
          user_id,
          amount,
          transaction_date,
          category
        FROM transactions
        WHERE transaction_date >= '{{ batch_start.strftime('%Y-%m-%d') }}'::date
          AND transaction_date < '{{ batch_end.strftime('%Y-%m-%d') }}'::date
      connection: "finance_db"

  - id: "validate_transactions"
    type: "processor" 
    processor_type: "validator"
    depends_on:
      - "extract_transactions"
    config:
      checks:
        - check: "required_columns"
          columns: ["transaction_id", "user_id", "amount", "transaction_date", "category"]
        - check: "row_count"
          min_rows: 1

  - id: "load_weekly_reports"
    type: "endpoint"
    endpoint_type: "postgresql"
    depends_on:
      - "validate_transactions"
    config:
      table: "validated_transactions"
      connection: "reports_db"
      event_time_column: "transaction_date"
      schema:
        transaction_id: "VARCHAR(100)"
        user_id: "VARCHAR(100)"
        amount: "DECIMAL(12,2)"
        transaction_date: "DATE"
        category: "VARCHAR(100)"