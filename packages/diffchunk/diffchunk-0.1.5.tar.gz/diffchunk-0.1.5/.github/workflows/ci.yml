name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run tests
      run: uv run pytest -v --tb=short

    - name: Run type checking
      run: uv run mypy src/

    - name: Run linting
      run: uv run ruff check

    - name: Check formatting
      run: uv run ruff format --check

  test-server-startup:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: uv sync --dev

    - name: Test MCP server startup
      run: |
        timeout 3s uv run python -m src.main || exit_code=$?
        if [ "${exit_code:-0}" -eq 124 ]; then
          echo "✓ Server started successfully (timeout expected)"
          exit 0
        elif [ "${exit_code:-0}" -eq 0 ]; then
          echo "✓ Server started and exited cleanly"
          exit 0
        else
          echo "✗ Server failed to start (exit code: ${exit_code:-0})"
          exit 1
        fi

  coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: uv sync --dev

    - name: Run coverage
      run: |
        uv add --dev pytest-cov
        uv run pytest --cov=src --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}