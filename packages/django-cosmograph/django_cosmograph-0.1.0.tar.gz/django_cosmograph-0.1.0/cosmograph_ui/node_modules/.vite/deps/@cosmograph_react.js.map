{
  "version": 3,
  "sources": ["../../@cosmograph/src/context.tsx", "../../@cosmograph/src/components/timeline/index.tsx", "../../@cosmograph/src/components/histogram/index.tsx", "../../@cosmograph/src/components/cosmograph/index.tsx", "../../@cosmograph/src/components/search/index.tsx"],
  "sourcesContent": ["import React, { createContext, useContext, ReactElement, useState } from 'react'\nimport { Cosmograph } from '@cosmograph/cosmograph'\nimport { CosmosInputLink, CosmosInputNode } from '@cosmograph/cosmos'\n\nexport interface CosmographProviderProps<N extends CosmosInputNode, L extends CosmosInputLink> {\n  nodes?: N[];\n  links?: L[];\n}\n\nexport type CosmographContextData<N extends CosmosInputNode, L extends CosmosInputLink> = {\n  cosmograph?: Cosmograph<N, L>;\n  nodes?: N[];\n  links?: L[];\n  initCosmograph: (cosmograph: Cosmograph<N, L>) => void;\n};\n\nexport const CosmographContext = createContext<CosmographContextData<any, any> | null>(null)\n\nexport function CosmographProvider<N extends CosmosInputNode, L extends CosmosInputLink> (\n  { children, nodes, links }: React.PropsWithChildren<CosmographProviderProps<N, L>>\n): ReactElement {\n  const [cosmograph, setCosmograph] = useState<Cosmograph<N, L>>()\n\n  const initCosmograph = (instance: Cosmograph<N, L>): void => {\n    setCosmograph(instance)\n  }\n\n  return (\n  // TODO: check generic type here\n    <CosmographContext.Provider value={{ cosmograph, nodes, links, initCosmograph } as CosmographContextData<N, L> }>\n      {children}\n    </CosmographContext.Provider>\n  )\n}\n\nexport function useCosmograph<N extends CosmosInputNode, L extends CosmosInputLink> (): CosmographContextData<N, L> | null {\n  const context = useContext(CosmographContext as React.Context<CosmographContextData<N, L>>)\n  if (!context) {\n    // todo\n    console.warn('useCosmograph must be used under CosmographProvider')\n    // throw new Error('useCosmograph must be used under CosmographProvider')\n  }\n  return context\n}\n", "import React, { Ref, ForwardedRef, useRef, useState, useEffect, useImperativeHandle } from 'react'\nimport { CosmographTimeline as _CosmographTimeline, CosmographTimelineInputConfig } from '@cosmograph/cosmograph'\nimport { CosmosInputLink, CosmosInputNode } from '@cosmograph/cosmos'\nimport { useCosmograph } from '../../context'\n\nexport type CosmographTimelineProps<Datum> = {\n  style?: object;\n  className?: string;\n} & CosmographTimelineInputConfig<Datum>\n\nexport type CosmographTimelineRef<Datum> = _CosmographTimeline<Datum> | undefined;\n\nexport function CosmographTimelineFC<Datum> (\n  { style, className, ...config }: CosmographTimelineProps<Datum>,\n  ref: ForwardedRef<CosmographTimelineRef<Datum>>\n): React.ReactElement {\n  const context = useCosmograph<CosmosInputNode, CosmosInputLink>()\n  const container = useRef<HTMLDivElement>(null)\n  const timelineInstance = useRef<_CosmographTimeline<Datum>>()\n  const [isComponentMounted, setComponentMounted] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (container.current && context?.cosmograph) {\n      timelineInstance.current = new _CosmographTimeline(context?.cosmograph, container.current, config)\n      setComponentMounted(true)\n    }\n    return () => {\n      timelineInstance.current?.remove()\n    }\n  }, [context?.cosmograph])\n\n  useEffect(() => {\n    timelineInstance.current?.setConfig(config)\n  }, [config])\n\n  useImperativeHandle(ref, () => timelineInstance.current, [isComponentMounted])\n\n  return <div id=\"CosmographTimeline\" style={style} className={className} ref={container}/>\n}\n\n// https://stackoverflow.com/a/58473012\nexport const CosmographTimeline = React.forwardRef(CosmographTimelineFC) as\n  <Datum>(\n    props: CosmographTimelineProps<Datum> & { ref?: Ref<CosmographTimelineRef<Datum>> }\n  ) => React.ReactElement\n\nexport type { CosmographTimelineInputConfig }\n", "import React, { Ref, ForwardedRef, useRef, useState, useEffect, useImperativeHandle } from 'react'\nimport { CosmographHistogram as _CosmographHistogram, CosmographHistogramInputConfig } from '@cosmograph/cosmograph'\nimport { CosmosInputLink, CosmosInputNode } from '@cosmograph/cosmos'\nimport { useCosmograph } from '../../context'\n\nexport type CosmographHistogramProps<OutDatum, InDatum = OutDatum> = {\n  style?: object;\n  className?: string;\n} & CosmographHistogramInputConfig<OutDatum, InDatum>\n\nexport type CosmographHistogramRef<OutDatum, InDatum = OutDatum> = _CosmographHistogram<OutDatum, InDatum> | undefined;\n\nexport function CosmographHistogramFC<OutDatum, InDatum = OutDatum> (\n  { style, className, ...config }: CosmographHistogramProps<OutDatum, InDatum>,\n  ref: ForwardedRef<_CosmographHistogram<OutDatum, InDatum> | undefined>\n): React.ReactElement {\n  const context = useCosmograph<CosmosInputNode, CosmosInputLink>()\n  const container = useRef<HTMLDivElement>(null)\n  const histogramInstance = useRef<_CosmographHistogram<OutDatum, InDatum>>()\n  const [isComponentMounted, setComponentMounted] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (container.current && context?.cosmograph) {\n      histogramInstance.current = new _CosmographHistogram(context?.cosmograph, container.current, config)\n      setComponentMounted(true)\n    }\n    return () => {\n      histogramInstance.current?.remove()\n    }\n  }, [context?.cosmograph])\n\n  useEffect(() => {\n    histogramInstance.current?.setConfig(config)\n  }, [config])\n\n  useImperativeHandle(ref, () => histogramInstance.current, [isComponentMounted])\n\n  return <div id=\"CosmographHistogram\" style={style} className={className} ref={container}/>\n}\n\n// https://stackoverflow.com/a/58473012\nexport const CosmographHistogram = React.forwardRef(CosmographHistogramFC) as\n  <OutDatum, InDatum = OutDatum>(\n    props: CosmographHistogramProps<OutDatum, InDatum> & { ref?: Ref<_CosmographHistogram<OutDatum, InDatum> | undefined> }\n  ) => React.ReactElement\n\nexport type { CosmographHistogramInputConfig }\n", "import React, { Ref, ForwardedRef, useRef, useState, useEffect, useImperativeHandle } from 'react'\nimport { Cosmograph as _Cosmograph, CosmographInputConfig } from '@cosmograph/cosmograph'\nimport { CosmosInputLink, CosmosInputNode } from '@cosmograph/cosmos'\nimport { useCosmograph } from '../../context'\n\nexport type CosmographProps<N extends CosmosInputNode, L extends CosmosInputLink> = {\n  nodes?: N[];\n  links?: L[];\n  style?: object;\n  className?: string;\n} & CosmographInputConfig<N, L>\n\nexport type CosmographRef<N extends CosmosInputNode = CosmosInputNode, L extends CosmosInputLink = CosmosInputLink> = _Cosmograph<N, L> | undefined;\n\nexport function CosmographFC<N extends CosmosInputNode, L extends CosmosInputLink> (\n  { style, className, nodes, links, ...args }: CosmographProps<N, L>,\n  ref: ForwardedRef<CosmographRef<N, L>>\n): React.ReactElement {\n  const context = useCosmograph<N, L>()\n  const container = useRef<HTMLDivElement>(null)\n  const cosmographInstance = useRef<_Cosmograph<N, L>>()\n  const [isComponentMounted, setComponentMounted] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (container.current) {\n      cosmographInstance.current = new _Cosmograph<N, L>(container.current, args)\n      setComponentMounted(true)\n      context?.initCosmograph(cosmographInstance.current)\n    }\n\n    return () => {\n      cosmographInstance.current?.remove()\n    }\n  }, [])\n\n  useEffect(() => {\n    cosmographInstance.current?.setConfig(args)\n  }, [args])\n\n  useEffect(() => {\n    if (nodes || links) {\n      cosmographInstance.current?.setData(nodes ?? [], links ?? [])\n    }\n  }, [nodes, links])\n\n  useEffect(() => {\n    // Nodes and links from the context has a lower priority\n    if ((!nodes && !links) && (context?.nodes || context?.links)) {\n      cosmographInstance.current?.setData(context?.nodes ?? [], context?.links ?? [])\n    }\n  }, [context?.nodes, context?.links])\n\n  useImperativeHandle(ref, () => cosmographInstance.current, [isComponentMounted])\n\n  return (\n    <div style={{ ...style }} className={className} ref={container} />\n  )\n}\n\n// https://stackoverflow.com/a/58473012\nexport const Cosmograph = React.forwardRef(CosmographFC) as\n  <N extends CosmosInputNode, L extends CosmosInputLink>(\n    props: CosmographProps<N, L> & { ref?: Ref<CosmographRef<N, L>> }\n  ) => React.ReactElement\n\nexport type { CosmographInputConfig }\n", "import React, { Ref, ForwardedRef, useRef, useState, useEffect, useImperativeHandle } from 'react'\nimport { CosmographSearch as _CosmographSearch, CosmographSearchInputConfig } from '@cosmograph/cosmograph'\nimport { CosmosInputLink, CosmosInputNode } from '@cosmograph/cosmos'\nimport { useCosmograph } from '../../index'\n\nexport type CosmographSearchProps<N extends CosmosInputNode> = {\n  style?: object;\n  className?: string;\n} & CosmographSearchInputConfig<N>\n\nexport type CosmographSearchRef<N extends CosmosInputNode = CosmosInputNode, L extends CosmosInputLink = CosmosInputLink> = _CosmographSearch<N, L> | undefined;\n\nexport function CosmographSearchFC<N extends CosmosInputNode, L extends CosmosInputLink> (\n  { style, className, ...config }: CosmographSearchProps<N>,\n  ref: ForwardedRef<CosmographSearchRef<N, L>>\n): React.ReactElement {\n  const context = useCosmograph<N, L>()\n  const container = useRef<HTMLDivElement>(null)\n  const searchInstance = useRef<_CosmographSearch<N, L>>()\n  const [isComponentMounted, setComponentMounted] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (container.current && context?.cosmograph) {\n      searchInstance.current = new _CosmographSearch<N, L>(context?.cosmograph, container.current, config)\n      setComponentMounted(true)\n    }\n    return () => {\n      searchInstance.current?.remove()\n    }\n  }, [context?.cosmograph])\n\n  useEffect(() => {\n    searchInstance.current?.setConfig(config)\n  }, [config])\n\n  useImperativeHandle(ref, () => searchInstance.current, [isComponentMounted])\n\n  return <div id=\"CosmographSearch\" style={style} className={className} ref={container}/>\n}\n\n// https://stackoverflow.com/a/58473012\nexport const CosmographSearch = React.forwardRef(CosmographSearchFC) as\n  <N extends CosmosInputNode, L extends CosmosInputLink>(\n    props: CosmographSearchProps<N> & { ref?: Ref<CosmographSearchRef<N, L>> }\n  ) => React.ReactElement\n\nexport type { CosmographSearchInputConfig }\n"],
  "mappings": "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",
  "names": ["CosmographContext", "createContext", "CosmographProvider", "children", "nodes", "links", "cosmograph", "setCosmograph", "useState", "React", "createElement", "Provider", "value", "initCosmograph", "instance", "useCosmograph", "context", "useContext", "console", "warn", "CosmographTimelineFC", "style", "className", "config", "ref", "context", "useCosmograph", "container", "useRef", "timelineInstance", "isComponentMounted", "setComponentMounted", "useState", "useEffect", "current", "cosmograph", "_CosmographTimeline", "r", "_a", "remove", "setConfig", "useImperativeHandle", "React", "id", "CosmographTimeline", "forwardRef", "CosmographHistogramFC", "style", "className", "config", "ref", "context", "useCosmograph", "container", "useRef", "histogramInstance", "isComponentMounted", "setComponentMounted", "useState", "useEffect", "current", "cosmograph", "_CosmographHistogram", "r", "_a", "remove", "setConfig", "useImperativeHandle", "React", "id", "CosmographHistogram", "forwardRef", "CosmographFC", "style", "className", "nodes", "links", "args", "ref", "context", "useCosmograph", "container", "useRef", "cosmographInstance", "isComponentMounted", "setComponentMounted", "useState", "useEffect", "current", "_Cosmograph", "initCosmograph", "n", "_a", "remove", "setConfig", "setData", "l", "r", "_b", "_c", "useImperativeHandle", "React", "createElement", "Cosmograph", "forwardRef", "CosmographSearchFC", "style", "className", "config", "ref", "context", "useCosmograph", "container", "useRef", "searchInstance", "isComponentMounted", "setComponentMounted", "useState", "useEffect", "current", "cosmograph", "_CosmographSearch", "r", "_a", "remove", "setConfig", "useImperativeHandle", "React", "id", "CosmographSearch", "forwardRef"]
}
