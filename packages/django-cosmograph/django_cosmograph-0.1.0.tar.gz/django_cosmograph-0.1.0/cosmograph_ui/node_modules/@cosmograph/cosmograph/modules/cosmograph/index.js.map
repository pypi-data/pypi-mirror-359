{"version":3,"file":"index.js","sources":["../../../src/modules/cosmograph/index.ts"],"sourcesContent":["import { Graph, GraphConfigInterface, GraphEvents, GraphSimulationSettings, CosmosInputNode, CosmosInputLink } from '@cosmograph/cosmos'\nimport { CssLabel, LabelRenderer, LabelOptions } from '@interacta/css-labels'\nimport { merge } from '@cosmograph/ui'\nimport { color } from 'd3-color'\nimport { watermark } from './watermark'\nimport { addMetrics } from '../../api/supabase/supabase'\nimport s from './style.module.css'\n\nimport { defaultCosmographConfig, type CosmographConfigInterface, type CosmographInputConfig } from './config'\nimport type { CosmographData } from './types'\nimport { Crossfilter, Filter } from './crossfilter'\n\nexport class Cosmograph<N extends CosmosInputNode, L extends CosmosInputLink> {\n  private _data: CosmographData<N, L> = { nodes: [], links: [] }\n  private _previousData: CosmographData<N, L> = { nodes: [], links: [] }\n  private _cosmographConfig: CosmographConfigInterface<N, L> = {}\n  private _cosmosConfig: GraphConfigInterface<N, L> = {}\n  private _containerNode: HTMLDivElement\n  private _labelsDivElement: HTMLDivElement\n  private _watermarkDivElement: HTMLDivElement\n  private _canvasElement: HTMLCanvasElement\n  private _hoveredCssLabel: CssLabel\n  private _hoveredNode: N | undefined\n  private _cssLabelsRenderer: LabelRenderer\n  private _selectedNodesSet: Set<N> | undefined\n  private _nodesForTopLabels = new Set<N>()\n  private _nodesForForcedLabels = new Set<N>()\n  private _trackedNodeToLabel = new Map<N, string>()\n  private _isLabelsDestroyed = false\n  private _svgParser = new DOMParser()\n  private _nodesCrossfilter = new Crossfilter<N>(this._applyLinksFilter.bind(this))\n  private _linksCrossfilter = new Crossfilter<L>(this._applyNodesFilter.bind(this))\n  /** Filters nodes based on a links crossfilter result  */\n  private _nodesFilter = this._nodesCrossfilter.addFilter(false)\n  /** Filters links based on a nodes crossfilter result  */\n  private _linksFilter = this._linksCrossfilter.addFilter(false)\n  /** Filters node based on selected nodes */\n  private _selectedNodesFilter = this._nodesCrossfilter.addFilter()\n  private _disableSimulation: boolean | null | undefined\n\n  private _cosmos?: Graph<N, L>\n\n  /**\n  * @deprecated Direct use of the cosmos can lead to unexpected results,\n  * so we do not recommend using it. Will be removed in version 2.0.0\n  * */\n  public cosmos?: Graph<N, L>\n\n  public constructor (containerNode: HTMLDivElement, config?: CosmographInputConfig<N, L>) {\n    this._containerNode = containerNode\n    this._containerNode.classList.add(s.cosmograph)\n    this._cosmographConfig = merge(defaultCosmographConfig, config ?? {})\n    this._cosmosConfig = this._createCosmosConfig(config)\n\n    this._canvasElement = document.createElement('canvas')\n\n    this._labelsDivElement = document.createElement('div')\n    this._watermarkDivElement = document.createElement('div')\n    this._watermarkDivElement.classList.add(s.watermark)\n    this._watermarkDivElement.onclick = () => window.open('https://cosmograph.app/', '_blank')?.focus()\n\n    containerNode.appendChild(this._canvasElement)\n    containerNode.appendChild(this._labelsDivElement)\n    containerNode.appendChild(this._watermarkDivElement)\n\n    this._cssLabelsRenderer = new LabelRenderer(this._labelsDivElement, {\n      dispatchWheelEventElement: this._canvasElement,\n      pointerEvents: 'all',\n      onLabelClick: this._onLabelClick.bind(this),\n    })\n    this._hoveredCssLabel = new CssLabel(this._labelsDivElement)\n    this._hoveredCssLabel.setPointerEvents('all')\n    this._hoveredCssLabel.element.addEventListener('click', this._onHoveredNodeClick.bind(this))\n\n    this._linksFilter.setAccessor(d => ([d.source, d.target]))\n    this._nodesFilter.setAccessor(d => d.id)\n    this._selectedNodesFilter.setAccessor(d => d.id)\n    this._nodesCrossfilter.onFiltered = () => {\n      let selectedNodes\n      if (this._nodesCrossfilter.isAnyFiltersActive()) {\n        selectedNodes = this._nodesCrossfilter.getFilteredRecords()\n        this._cosmos?.selectNodesByIds(selectedNodes.map(d => d.id))\n      } else {\n        this._cosmos?.unselectNodes()\n      }\n      this._updateSelectedNodesSet(selectedNodes)\n      this._cosmographConfig.onNodesFiltered?.(selectedNodes)\n    }\n    this._linksCrossfilter.onFiltered = () => {\n      let selectedLinks\n      if (this._linksCrossfilter.isAnyFiltersActive()) {\n        selectedLinks = this._linksCrossfilter.getFilteredRecords()\n      }\n      this._cosmographConfig.onLinksFiltered?.(selectedLinks)\n    }\n\n    const svgElement = this._svgParser.parseFromString(watermark, 'image/svg+xml').firstChild as SVGElement\n    this._watermarkDivElement?.appendChild(svgElement)\n  }\n\n  public get data (): CosmographData<N, L> {\n    return this._data\n  }\n\n  /**\n   * Progress value indicates how far the simulation goes from 0 to 1,\n   * where 0 represents the start of the simulation and 1 represents the end.\n   */\n  public get progress (): number | undefined {\n    return this._cosmos?.progress\n  }\n\n  /**\n   * A value that gives information about the running simulation status.\n   */\n  public get isSimulationRunning (): boolean | undefined {\n    return this._cosmos?.isSimulationRunning\n  }\n\n  /**\n   * The maximum point size.\n   * This value is the maximum size of the `gl.POINTS` primitive that WebGL can render on the user's hardware.\n   */\n  public get maxPointSize (): number | undefined {\n    return this._cosmos?.maxPointSize\n  }\n\n  /**\n   * Sets the data for the graph.\n   * @param nodes - Nodes to be added to the graph.\n   * @param links - Links to be added to the graph.\n   * @param runSimulation When set to `false`, the simulation won't be started automatically (`true` by default).\n   */\n  public setData (nodes: N[], links: L[], runSimulation = true): void {\n    const { _cosmographConfig } = this\n    this._data = { nodes, links }\n\n    const nextDisableSimulation = _cosmographConfig.disableSimulation === null ? !links.length : _cosmographConfig.disableSimulation\n    // First initialization of Cosmos\n    if (!this._cosmos) {\n      // If `disableSimulation` is `null` and no links are provided, consider that this is an embedding.\n      this._disableSimulation = nextDisableSimulation\n      this._cosmosConfig.disableSimulation = this._disableSimulation\n      this._cosmos = new Graph(this._canvasElement, this._cosmosConfig)\n      this.cosmos = this._cosmos\n    }\n\n    if (this._disableSimulation !== nextDisableSimulation) {\n      console.warn(\n        `The \\`disableSimulation\\` was initialized to \\`${this._disableSimulation}\\` during initialization and will not be modified.`\n      )\n    }\n\n    this._cosmos.setData(nodes, links, runSimulation)\n    this._nodesCrossfilter.addRecords(nodes)\n    this._linksCrossfilter.addRecords(links)\n    this._updateLabels()\n    this._cosmographConfig.onSetData?.(nodes, links)\n\n    if (this._isDataDifferent()) {\n    /* eslint-disable @typescript-eslint/naming-convention */\n      if (!['cosmograph.app'].includes(window.location.hostname)) {\n        addMetrics({\n          browser: navigator.userAgent,\n          hostname: window.location.hostname,\n          mode: null,\n          is_library_metric: true,\n          links_count: links.length,\n          links_have_time: null,\n          links_raw_columns: links.length ? Object.keys(links?.[0] as L).length ?? 0 : 0,\n          links_raw_lines: null,\n          nodes_count: nodes.length,\n          nodes_have_time: null,\n          nodes_raw_columns: nodes.length ? Object.keys(nodes?.[0] as N).length ?? 0 : 0,\n          nodes_raw_lines: null,\n        })\n      }\n    }\n    this._previousData = { nodes, links }\n    /* eslint-enable @typescript-eslint/naming-convention */\n  }\n\n  /**\n   * Sets the config for the graph.\n   * @param config - Config to be applied to the graph.\n   */\n  public setConfig (config?: CosmographInputConfig<N, L>): void {\n    this._cosmographConfig = merge(defaultCosmographConfig, config ?? {})\n    this._cosmosConfig = this._createCosmosConfig(config)\n    this._cosmos?.setConfig(this._cosmosConfig)\n    if (config?.backgroundColor) {\n      const hexColor = color(config?.backgroundColor)?.formatHex()\n      if (hexColor) {\n        const brightness = this._checkBrightness(hexColor)\n        const root = document.querySelector(':root') as HTMLDivElement\n        if (brightness > 0.65) {\n          root?.style.setProperty('--cosmograph-watermark-color', '#000000')\n        } else {\n          root?.style.setProperty('--cosmograph-watermark-color', '#ffffff')\n        }\n      }\n    }\n    this._updateLabels()\n  }\n\n  /**\n   * Creates a filter for the nodes, adds the filter to the nodes crossfilter and returns this filter.\n   */\n  public addNodesFilter (): Filter<N> {\n    return this._nodesCrossfilter.addFilter()\n  }\n\n  /**\n   * Creates a filter for the links, adds the filter to the links crossfilter and returns this filter.\n   */\n  public addLinksFilter (): Filter<L> {\n    return this._linksCrossfilter.addFilter()\n  }\n\n  /**\n   * Selects nodes inside a rectangular area.\n   * @param selection Array of two corners of the rectangle `[[left, top], [right, bottom]]`.\n   * The `left` and `right` coordinates should be relative to the width of the canvas. The\n   * `top` and `bottom` coordinates should be relative to the height of the canvas.\n   */\n  public selectNodesInRange (selection: [[number, number], [number, number]] | null): void {\n    if (!this._cosmos) return\n    this._cosmos.selectNodesInRange(selection)\n    const selectedNodeIds = new Set((this.getSelectedNodes() ?? []).map(d => d.id))\n    this._selectedNodesFilter.applyFilter(d => selectedNodeIds.has(d as string))\n  }\n\n  /**\n   * Selects nodes.\n   * @param nodes Array of nodes to be selected.\n   */\n  public selectNodes (nodes: N[]): void {\n    if (!this._cosmos) return\n    const selectedNodeIds = new Set(nodes.map(d => d.id))\n    this._selectedNodesFilter.applyFilter(d => selectedNodeIds.has(d as string))\n  }\n\n  /**\n   * Selects a node and, optionally, select its connected nodes.\n   * @param node Selected node.\n   * @param selectAdjacentNodes Optional parameter determining whether to also select the connected nodes.\n   */\n  public selectNode (node: N, selectAdjacentNodes = false): void {\n    if (!this._cosmos) return\n    const selectedNodes = new Set([node, ...(selectAdjacentNodes ? (this._cosmos.getAdjacentNodes(node.id) || []) : [])].map(d => d.id))\n    this._selectedNodesFilter.applyFilter(d => selectedNodes.has(d as string))\n  }\n\n  /**\n   * Unselects all nodes.\n   */\n  public unselectNodes (): void {\n    if (!this._cosmos) return\n    this._selectedNodesFilter.clear()\n  }\n\n\n  /**\n   * Get nodes that are currently selected.\n   * @returns Array of selected nodes.\n   */\n  public getSelectedNodes (): N[] | null | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getSelectedNodes()\n  }\n\n  /**\n   * Center the view and zoom in to a node.\n   * @param node Node to be zoomed in.\n   */\n  public zoomToNode (node: N): void {\n    if (!this._cosmos) return\n    this._cosmos.zoomToNodeById(node.id)\n  }\n\n  /**\n   * Zoom the view in or out to the specified zoom level.\n   * @param value Zoom level\n   * @param duration Duration of the zoom in/out transition.\n   */\n\n  public setZoomLevel (value: number, duration = 0): void {\n    if (!this._cosmos) return\n    this._cosmos.setZoomLevel(value, duration)\n  }\n\n  /**\n   * Get zoom level.\n   * @returns Zoom level value of the view.\n   */\n  public getZoomLevel (): number | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getZoomLevel()\n  }\n\n  /**\n   * Get current X and Y coordinates of the nodes.\n   * @returns Object where keys are the ids of the nodes and values are corresponding `{ x: number; y: number }` objects.\n   */\n  public getNodePositions (): { [key: string]: { x: number; y: number } } | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodePositions()\n  }\n\n  /**\n   * Get current X and Y coordinates of the nodes.\n   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.\n   */\n  public getNodePositionsMap (): Map<string, [number, number]> | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodePositionsMap()\n  }\n\n  /**\n   * Get current X and Y coordinates of the nodes.\n   * @returns Array of `[x: number, y: number]` arrays.\n   */\n  public getNodePositionsArray (): [number, number][] | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodePositionsArray()\n  }\n\n  /**\n   * Center and zoom in/out the view to fit all nodes in the scene.\n   * @param duration Duration of the center and zoom in/out animation in milliseconds (`250` by default).\n   */\n  public fitView (duration = 250): void {\n    if (!this._cosmos) return\n    this._cosmos.fitView(duration)\n  }\n\n  /**\n   * Center and zoom in/out the view to fit nodes by their ids in the scene.\n   * @param duration Duration of the center and zoom in/out animation in milliseconds (`250` by default).\n   */\n  public fitViewByNodeIds (ids: string[], duration = 250): void {\n    if (!this._cosmos) return\n    this._cosmos.fitViewByNodeIds(ids, duration)\n  }\n\n  /**\n   * Set focus on a node. A ring will be drawn around the focused node.\n   * If no node is focused, the ring will be cleared.\n   * @param node Node to be focused.\n   */\n  public focusNode (node?: N): void {\n    if (!this._cosmos) return\n    this._cosmos.setFocusedNodeById(node?.id)\n  }\n\n  /**\n   * Get nodes that are adjacent to a specific node by its id.\n   * @param id Id of the node.\n   * @returns Array of adjacent nodes.\n   */\n\n  public getAdjacentNodes (id: string): N[] | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getAdjacentNodes(id)\n  }\n\n  /**\n   * Converts the X and Y node coordinates from the space coordinate system to the screen coordinate system.\n   * @param spacePosition Array of x and y coordinates in the space coordinate system.\n   * @returns Array of x and y coordinates in the screen coordinate system.\n   */\n\n  public spaceToScreenPosition (spacePosition: [number, number]): [number, number] | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.spaceToScreenPosition(spacePosition)\n  }\n\n  /**\n   * Converts the node radius value from the space coordinate system to the screen coordinate system.\n   * @param spaceRadius Radius of Node in the space coordinate system.\n   * @returns Radius of Node in the screen coordinate system.\n   */\n  public spaceToScreenRadius (spaceRadius: number): number | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.spaceToScreenRadius(spaceRadius)\n  }\n\n  /**\n   * Get node radius by its index.\n   * @param index Index of the node.\n   * @returns Radius of the node.\n   */\n  public getNodeRadiusByIndex (index: number): number | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodeRadiusByIndex(index)\n  }\n\n  /**\n   * Get node radius by its id.\n   * @param id Id of the node.\n   * @returns Radius of the node.\n   */\n  public getNodeRadiusById (id: string): number | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodeRadiusById(id)\n  }\n\n  /**\n   * For the nodes that are currently visible on the screen, get a sample of node ids with their coordinates.\n   * The resulting number of nodes will depend on the `nodeSamplingDistance` configuration property,\n   * and the sampled nodes will be evenly distributed.\n   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.\n   */\n  public getSampledNodePositionsMap (): Map<string, [number, number]> | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getSampledNodePositionsMap()\n  }\n\n  /**\n   * Starts the simulation.\n   * @param alpha Value between 0 and 1. The higher the value,\n   * the more initial energy the simulation will get.\n   */\n  public start (alpha = 1): void {\n    if (!this._cosmos) return\n    this._cosmos.start(alpha)\n  }\n\n  /**\n   * Pause the simulation.\n   */\n  public pause (): void {\n    if (!this._cosmos) return\n    this._cosmos.pause()\n  }\n\n  /**\n   * Restarts the simulation.\n   */\n  public restart (): void {\n    if (!this._cosmos) return\n    this._cosmos.restart()\n  }\n\n  /**\n   * Render only one frame of the simulation (stops the simulation if it was running).\n   */\n  public step (): void {\n    if (!this._cosmos) return\n    this._cosmos.step()\n  }\n\n  /**\n   * Destroy the graph and clean up the context.\n   */\n  public remove (): void {\n    this._cosmos?.destroy()\n    if (this._isLabelsDestroyed) return\n    this._containerNode.innerHTML = ''\n    this._isLabelsDestroyed = true\n    this._hoveredCssLabel.element.removeEventListener('click', this._onHoveredNodeClick.bind(this))\n    this._hoveredCssLabel.destroy()\n    this._cssLabelsRenderer.destroy()\n  }\n\n  /**\n   * Create new Cosmos instance.\n   */\n  public create (): void {\n    if (!this._cosmos) return\n    this._cosmos.create()\n  }\n\n  /**\n   * Returns an array of nodes with their degree values in the order they were sent to Cosmograph.\n   */\n  public getNodeDegrees (): number[] | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.graph.degree\n  }\n\n  private _createCosmosConfig (config?: CosmographInputConfig<N, L>): GraphConfigInterface<N, L> {\n    const cosmosConfig = {\n      ...config,\n      simulation: {\n        ...Object.keys(config ?? {})\n          .filter(d => d.indexOf('simulation') !== -1)\n          .reduce<Record<string, any>>((acc, d) => {\n          const key = d.replace('simulation', '')\n          acc[key.charAt(0).toLowerCase() + key.slice(1)] = config?.[d as keyof CosmographInputConfig<N, L>]\n          return acc\n        }, {}),\n        onStart: this._onStart.bind(this),\n        onTick: this._onTick.bind(this),\n        onEnd: this._onEnd.bind(this),\n        onPause: this._onPause.bind(this),\n        onRestart: this._onRestart.bind(this),\n      },\n      events: {\n        onClick: this._onClick.bind(this),\n        onNodeMouseOver: this._onNodeMouseOver.bind(this),\n        onNodeMouseOut: this._onNodeMouseOut.bind(this),\n        onMouseMove: this._onMouseMove.bind(this),\n        onZoomStart: this._onZoomStart.bind(this),\n        onZoom: this._onZoom.bind(this),\n        onZoomEnd: this._onZoomEnd.bind(this),\n      },\n    }\n    delete cosmosConfig.disableSimulation\n\n    return cosmosConfig as Omit<CosmographInputConfig<N, L>, 'disableSimulation'>\n  }\n\n  private _updateLabels (): void {\n    if (this._isLabelsDestroyed || !this._cosmos) return\n    const { _cosmos, data: { nodes }, _cosmographConfig: { showTopLabels, showTopLabelsLimit, showLabelsFor, showTopLabelsValueKey, nodeLabelAccessor } } = this\n    this._nodesForTopLabels.clear()\n\n    if (showTopLabels && showTopLabelsLimit) {\n      let sortedNodes: (N | undefined)[]\n      if (showTopLabelsValueKey) {\n        sortedNodes = [...nodes].sort((a, b) => {\n          const aValue = a[showTopLabelsValueKey]\n          const bValue = b[showTopLabelsValueKey]\n\n          if (typeof aValue === 'number' && typeof bValue === 'number') return bValue - aValue\n          else return 0\n        })\n      } else {\n        sortedNodes = Object.entries(_cosmos.graph.degree)\n          .sort((a, b) => b[1] - a[1])\n          .slice(0, showTopLabelsLimit)\n          .map(d => _cosmos.graph.getNodeByIndex(+d[0]))\n      }\n      for (let i = 0; i < showTopLabelsLimit; i++) {\n        if (i >= nodes.length) break\n        const node = sortedNodes[i]\n        if (node) this._nodesForTopLabels.add(node)\n      }\n    }\n    this._nodesForForcedLabels.clear()\n    showLabelsFor?.forEach(this._nodesForForcedLabels.add, this._nodesForForcedLabels)\n\n    this._trackedNodeToLabel.clear()\n    _cosmos.trackNodePositionsByIds([\n      ...(showTopLabels ? this._nodesForTopLabels : []),\n      ...this._nodesForForcedLabels,\n    ].map(d => {\n      this._trackedNodeToLabel.set(d, nodeLabelAccessor?.(d) ?? d.id)\n      return d.id\n    }))\n    this._renderLabels()\n  }\n\n  private _updateSelectedNodesSet (selectedNodes: N[] | undefined): void {\n    if (this._isLabelsDestroyed) return\n    if (selectedNodes) {\n      this._selectedNodesSet = new Set<N>()\n      selectedNodes?.forEach(this._selectedNodesSet.add, this._selectedNodesSet)\n    } else {\n      this._selectedNodesSet = undefined\n    }\n    this._renderLabels()\n  }\n\n  private _renderLabels (): void {\n    if (this._isLabelsDestroyed || !this._cosmos) return\n    const { _cosmos, _selectedNodesSet, _cosmographConfig: { showDynamicLabels, nodeLabelAccessor, nodeLabelColor, nodeLabelClassName } } = this\n    let labels: LabelOptions[] = []\n    const trackedNodesPositions = _cosmos.getTrackedNodePositionsMap()\n    const nodeToLabelInfo = new Map<N, [string | undefined, [number, number] | undefined, string, number]>()\n    if (showDynamicLabels) {\n      const sampledNodesPositions = this.getSampledNodePositionsMap()\n      sampledNodesPositions?.forEach((positions, id) => {\n        const node = _cosmos.graph.getNodeById(id)\n        if (node) nodeToLabelInfo.set(node, [nodeLabelAccessor?.(node) ?? node.id, positions, s.cosmographShowDynamicLabels, 0.7])\n      })\n    }\n    this._nodesForTopLabels.forEach(node => {\n      nodeToLabelInfo.set(node, [this._trackedNodeToLabel.get(node), trackedNodesPositions.get(node.id), s.cosmographShowTopLabels, 0.9])\n    })\n    this._nodesForForcedLabels.forEach(node => {\n      nodeToLabelInfo.set(node, [this._trackedNodeToLabel.get(node), trackedNodesPositions.get(node.id), s.cosmographShowLabelsFor, 1.0])\n    })\n    labels = [...nodeToLabelInfo.entries()].map(([p, [text, positions, className, weight]]) => {\n      const screenPosition = this.spaceToScreenPosition([positions?.[0] ?? 0, positions?.[1] ?? 0]) as [number, number]\n      const radius = this.spaceToScreenRadius(_cosmos.config.nodeSizeScale * (this.getNodeRadiusById(p.id) as number)) as number\n      const hasSelectedNodes = !!_selectedNodesSet\n      const isNodeSelected = _selectedNodesSet?.has(p)\n      return {\n        id: p.id,\n        text: text ?? '',\n        x: screenPosition[0],\n        y: screenPosition[1] - (radius / 2) - radius * 0.1,\n        weight: (hasSelectedNodes && !isNodeSelected) ? 0.1 : weight,\n        shouldBeShown: this._nodesForForcedLabels.has(p),\n        style: (hasSelectedNodes && !isNodeSelected) ? 'opacity: 0.1;' : '',\n        color: nodeLabelColor && (typeof nodeLabelColor === 'string' ? nodeLabelColor : nodeLabelColor?.(p)),\n        className: (typeof nodeLabelClassName === 'string' ? nodeLabelClassName : nodeLabelClassName?.(p)) ?? className,\n      }\n    })\n    this._cssLabelsRenderer.setLabels(labels)\n    this._cssLabelsRenderer.draw(true)\n  }\n\n  private _renderLabelForHovered (node?: N, nodeSpacePosition?: [number, number]): void {\n    if (!this._cosmos) return\n    const { _cosmographConfig: { showHoveredNodeLabel, nodeLabelAccessor, hoveredNodeLabelClassName, hoveredNodeLabelColor } } = this\n    if (this._isLabelsDestroyed) return\n\n    if (showHoveredNodeLabel && node && nodeSpacePosition) {\n      const screenPosition = this.spaceToScreenPosition(nodeSpacePosition) as [number, number]\n      const radius = this.spaceToScreenRadius(this.getNodeRadiusById(node.id) as number) as number\n      this._hoveredCssLabel.setText(nodeLabelAccessor?.(node) ?? node.id)\n      this._hoveredCssLabel.setVisibility(true)\n      this._hoveredCssLabel.setPosition(screenPosition[0], screenPosition[1] - (radius / 2) - radius * 0.1)\n      this._hoveredCssLabel.setClassName(\n        typeof hoveredNodeLabelClassName === 'string' ? hoveredNodeLabelClassName : hoveredNodeLabelClassName?.(node) ?? ''\n      )\n      const textColor = hoveredNodeLabelColor && (typeof hoveredNodeLabelColor === 'string' ? hoveredNodeLabelColor : hoveredNodeLabelColor?.(node))\n      if (textColor) this._hoveredCssLabel.setColor(textColor)\n    } else {\n      this._hoveredCssLabel.setVisibility(false)\n    }\n    this._hoveredCssLabel.draw()\n  }\n\n  /** Apply crossfiltered nodes result to links crossfilter */\n  private _applyLinksFilter (): void {\n    if (this._nodesCrossfilter.isAnyFiltersActive(this._nodesFilter)) {\n      const crossSelectedNodes = this._nodesCrossfilter.getFilteredRecords(this._nodesFilter)\n      const crossSelectedNodeIdSet = new Set(crossSelectedNodes.map(d => d.id))\n      this._linksFilter.applyFilter(d => {\n        const source = (d as [string, string])?.[0]\n        const target = (d as [string, string])?.[1]\n        return crossSelectedNodeIdSet.has(source) && crossSelectedNodeIdSet.has(target)\n      })\n    } else {\n      this._linksFilter.clear()\n    }\n  }\n\n  /** Apply crossfiltered links result to nodes crossfilter */\n  private _applyNodesFilter (): void {\n    if (this._linksCrossfilter.isAnyFiltersActive(this._linksFilter)) {\n      const crossSelectedLinks = this._linksCrossfilter.getFilteredRecords(this._linksFilter)\n      const crossSelectedNodeIdSet = new Set(crossSelectedLinks.map(d => ([d.source, d.target])).flat())\n      this._nodesFilter.applyFilter(d => crossSelectedNodeIdSet.has(d as string))\n    } else {\n      this._nodesFilter.clear()\n    }\n  }\n\n  private _checkBrightness (hex: string): number {\n    const hexToRgb = (hex: string): { r: number; g: number; b: number } => {\n      const parsed = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n      return parsed ? {\n        r: parseInt((parsed[1] || 0).toString(), 16),\n        g: parseInt((parsed[2] || 0).toString(), 16),\n        b: parseInt((parsed[3] || 0).toString(), 16),\n      } : { r: 0, g: 0, b: 0 }\n    }\n    const rgb = hexToRgb(hex)\n    return (0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b) / 255\n  }\n\n  private _isDataDifferent = (): boolean => {\n    const nodesJSON = JSON.stringify(this._data.nodes)\n    const prevNodesJSON = JSON.stringify(this._previousData.nodes)\n    const linksJSON = JSON.stringify(this._data.links)\n    const prevLinksJSON = JSON.stringify(this._previousData.links)\n\n    if (nodesJSON !== prevNodesJSON || linksJSON !== prevLinksJSON) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  private _onClick: Exclude<GraphEvents<N>['onClick'], undefined> = (...args) => {\n    this._cosmographConfig.onClick?.(...args)\n  }\n\n  private _onLabelClick = (e: MouseEvent, label: LabelOptions): void => {\n    const node = this._cosmos?.graph.getNodeById(label.id)\n    if (!node) return\n    this._cosmographConfig.onLabelClick?.(node, e)\n  }\n\n  private _onHoveredNodeClick = (e: MouseEvent): void => {\n    if (!this._hoveredNode) return\n    this._cosmographConfig.onLabelClick?.(this._hoveredNode, e)\n  }\n\n  private _onNodeMouseOver: Exclude<GraphEvents<N>['onNodeMouseOver'], undefined> = (...args) => {\n    this._cosmographConfig.onNodeMouseOver?.(...args)\n    const [hoveredNode, , nodePosition] = args\n    this._hoveredNode = hoveredNode\n    this._renderLabelForHovered(hoveredNode, nodePosition)\n  }\n\n  private _onNodeMouseOut: Exclude<GraphEvents<N>['onNodeMouseOut'], undefined> = (...args) => {\n    this._cosmographConfig.onNodeMouseOut?.(...args)\n    this._renderLabelForHovered()\n  }\n\n  private _onMouseMove: Exclude<GraphEvents<N>['onMouseMove'], undefined> = (...args) => {\n    this._cosmographConfig.onMouseMove?.(...args)\n    const [node, , nodePosition] = args\n    this._renderLabelForHovered(node, nodePosition)\n  }\n\n  private _onZoomStart: Exclude<GraphEvents<N>['onZoomStart'], undefined> = (...args) => {\n    this._cosmographConfig.onZoomStart?.(...args)\n  }\n\n  private _onZoom: Exclude<GraphEvents<N>['onZoom'], undefined> = (...args) => {\n    this._cosmographConfig.onZoom?.(...args)\n    this._renderLabelForHovered()\n    this._renderLabels()\n  }\n\n  private _onZoomEnd: Exclude<GraphEvents<N>['onZoomEnd'], undefined> = (...args) => {\n    this._cosmographConfig.onZoomEnd?.(...args)\n  }\n\n  private _onStart: Exclude<GraphSimulationSettings<N>['onStart'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationStart?.(...args)\n  }\n\n  private _onTick: Exclude<GraphSimulationSettings<N>['onTick'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationTick?.(...args)\n    this._renderLabels()\n  }\n\n  private _onEnd: Exclude<GraphSimulationSettings<N>['onEnd'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationEnd?.(...args)\n  }\n\n  private _onPause: Exclude<GraphSimulationSettings<N>['onPause'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationPause?.(...args)\n  }\n\n  private _onRestart: Exclude<GraphSimulationSettings<N>['onRestart'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationRestart?.(...args)\n  }\n}\n\nexport type { CosmographData, CosmographConfigInterface, CosmographInputConfig, Filter }\n"],"names":["Cosmograph","constructor","containerNode","config","this","_data","nodes","links","_previousData","_cosmographConfig","_cosmosConfig","_nodesForTopLabels","Set","_nodesForForcedLabels","_trackedNodeToLabel","Map","_isLabelsDestroyed","_svgParser","DOMParser","_nodesCrossfilter","Crossfilter","_applyLinksFilter","bind","_linksCrossfilter","_applyNodesFilter","_nodesFilter","addFilter","_linksFilter","_selectedNodesFilter","_isDataDifferent","nodesJSON","JSON","stringify","prevNodesJSON","linksJSON","prevLinksJSON","_onClick","args","_b","_a","onClick","call","_onLabelClick","e","label","node","_cosmos","graph","getNodeById","id","_c","onLabelClick","_onHoveredNodeClick","_hoveredNode","_onNodeMouseOver","onNodeMouseOver","hoveredNode","nodePosition","_renderLabelForHovered","_onNodeMouseOut","onNodeMouseOut","_onMouseMove","onMouseMove","_onZoomStart","onZoomStart","_onZoom","onZoom","_renderLabels","_onZoomEnd","onZoomEnd","_onStart","onSimulationStart","_onTick","onSimulationTick","_onEnd","onSimulationEnd","_onPause","onSimulationPause","_onRestart","onSimulationRestart","_containerNode","classList","add","s","cosmograph","merge","defaultCosmographConfig","_createCosmosConfig","_canvasElement","document","createElement","_labelsDivElement","_watermarkDivElement","watermark","onclick","window","open","focus","appendChild","_cssLabelsRenderer","LabelRenderer","dispatchWheelEventElement","pointerEvents","_hoveredCssLabel","CssLabel","setPointerEvents","element","addEventListener","setAccessor","d","source","target","onFiltered","selectedNodes","isAnyFiltersActive","getFilteredRecords","selectNodesByIds","map","unselectNodes","_updateSelectedNodesSet","_d","onNodesFiltered","selectedLinks","onLinksFiltered","svgElement","parseFromString","firstChild","data","progress","isSimulationRunning","maxPointSize","setData","runSimulation","nextDisableSimulation","disableSimulation","length","_disableSimulation","Graph","cosmos","console","warn","addRecords","_updateLabels","onSetData","includes","location","hostname","addMetrics","browser","navigator","userAgent","mode","is_library_metric","links_count","links_have_time","links_raw_columns","Object","keys","links_raw_lines","nodes_count","nodes_have_time","nodes_raw_columns","nodes_raw_lines","setConfig","backgroundColor","hexColor","color","formatHex","brightness","_checkBrightness","root","querySelector","style","setProperty","addNodesFilter","addLinksFilter","selectNodesInRange","selection","selectedNodeIds","getSelectedNodes","applyFilter","has","selectNodes","selectNode","selectAdjacentNodes","getAdjacentNodes","clear","zoomToNode","zoomToNodeById","setZoomLevel","value","duration","getZoomLevel","getNodePositions","getNodePositionsMap","getNodePositionsArray","fitView","fitViewByNodeIds","ids","focusNode","setFocusedNodeById","spaceToScreenPosition","spacePosition","spaceToScreenRadius","spaceRadius","getNodeRadiusByIndex","index","getNodeRadiusById","getSampledNodePositionsMap","start","alpha","pause","restart","step","remove","destroy","innerHTML","removeEventListener","create","getNodeDegrees","degree","cosmosConfig","simulation","filter","indexOf","reduce","acc","key","replace","charAt","toLowerCase","slice","onStart","onTick","onEnd","onPause","onRestart","events","showTopLabels","showTopLabelsLimit","showLabelsFor","showTopLabelsValueKey","nodeLabelAccessor","sortedNodes","sort","a","b","aValue","bValue","entries","getNodeByIndex","i","forEach","trackNodePositionsByIds","set","_selectedNodesSet","undefined","showDynamicLabels","nodeLabelColor","nodeLabelClassName","labels","trackedNodesPositions","getTrackedNodePositionsMap","nodeToLabelInfo","sampledNodesPositions","positions","cosmographShowDynamicLabels","get","cosmographShowTopLabels","cosmographShowLabelsFor","p","text","className","weight","screenPosition","radius","nodeSizeScale","hasSelectedNodes","isNodeSelected","x","y","shouldBeShown","setLabels","draw","nodeSpacePosition","showHoveredNodeLabel","hoveredNodeLabelClassName","hoveredNodeLabelColor","setText","setVisibility","setPosition","setClassName","textColor","setColor","crossSelectedNodes","crossSelectedNodeIdSet","crossSelectedLinks","flat","hex","rgb","parsed","exec","r","parseInt","toString","g","hexToRgb"],"mappings":"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"}