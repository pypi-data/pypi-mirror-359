import{merge as t,Histogram as i}from"@cosmograph/ui";import{FilterType as e}from"../cosmograph/types.js";import{defaultCosmographHistogramConfig as s}from"./config.js";class o{constructor(o,r,a){this._onBrush=(t,i)=>{var e,s;this._applyFilter(t),null===(s=(e=this._config).onSelection)||void 0===s||s.call(e,t,i)},this._onBarHover=(...t)=>{var i,e;null===(e=(i=this._config).onBarHover)||void 0===e||e.call(i,...t)},this._cosmograph=o,this._config=t(s,null!=a?a:{}),this._histogram=new i(r,this._createHistogramConfig(a)),this._filter=this._config.filterType===e.Nodes?this._cosmograph.addNodesFilter():this._cosmograph.addLinksFilter(),this._filter.onDataAdded=()=>{this._updateData()},this._filter.onFiltered=()=>{this._config.highlightCrossfiltered&&this._updateDynamicData()},this._updateDimension(),this._updateData()}setConfig(i){const e=t(s,null!=i?i:{});this._histogram.setConfig(this._createHistogramConfig(i)),e.accessor===this._config.accessor&&e.data===this._config.data&&e.filterFunction===this._config.filterFunction||(this._updateDimension(),this._updateData(),this.setSelection()),this._config=e}getCurrentSelection(){return this._histogram.getCurrentSelection}getCurrentSelectionInPixels(){return this._histogram.getCurrentSelectionInPixels}getBarWidth(){return this._histogram.getBarWidth()}setSelection(t){this._histogram.setSelection(t)}getConfig(){return this._config}remove(){this._histogram.destroy()}_createHistogramConfig(t){return{...t,events:{onBrush:this._onBrush.bind(this),onBarHover:this._onBarHover.bind(this)}}}_updateDimension(){const{_config:{accessor:t,filterFunction:i,data:s,filterType:o},_filter:r}=this;if(!t)return;i&&s?o===e.Nodes?r.setAccessor((t=>t.id)):r.setAccessor((t=>[t.source,t.target])):r.setAccessor(t)}_applyFilter(t){const{_filter:i,_config:{filterFunction:s,data:o,filterType:r}}=this;if(t){if(s&&o){const a=i.getFilteredRecords();if(r===e.Nodes){const e=s(t,o,a),r=new Set(e.map((t=>t.id)));i.applyFilter((t=>r.has(t)))}else{const e=s(t,o,a),r=new Set(e.map((t=>[t.source,t.target])).flat());i.applyFilter((t=>{const i=null==t?void 0:t[0],e=null==t?void 0:t[1];return r.has(i)&&r.has(e)}))}}else i.applyFilter((i=>i>=t[0]&&i<=t[1]))}else i.clear()}_updateData(){const{_config:{data:t,filterFunction:i,accessor:e}}=this,s=i&&t&&e?t.map(e):this._filter.getAllValues();s&&this._histogram.setHistogramData(s,this._config.customExtent)}_updateDynamicData(){const t=this._filter.getFilteredValues();this._histogram.setHighlightedData(t)}}export{o as CosmographHistogram};
//# sourceMappingURL=index.js.map
