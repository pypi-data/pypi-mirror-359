import{merge as s,Search as t}from"@cosmograph/ui";import{defaultCosmographSearchConfig as e}from"./config.js";class i{constructor(i,o,c){this._config={},this._data=[],this._defaultAccessors=[],this._createDefaultAccessorOptions=s=>s.length>0&&s[0]?Object.keys(s[0]).map((s=>({label:s,accessor:t=>String(t[s])}))):[{label:"id",accessor:s=>s.id}],this._onSelect=(...s)=>{this._onSelectResult(...s)},this._onSearch=(...s)=>{var t,e;null===(e=(t=this._config).onSearch)||void 0===e||e.call(t,...s)},this._onEnter=(...s)=>{var t,e;null===(e=(t=this._config).onEnter)||void 0===e||e.call(t,...s)},this._onAccessorSelect=(...s)=>{var t,e;null===(e=(t=this._config).onAccessorSelect)||void 0===e||e.call(t,...s)},this._cosmograph=i,this._config=s(e,null!=c?c:{}),this.search=new t(o,this._createSearchConfig(c)),this._filter=this._cosmograph.addNodesFilter(),this._filter.onDataAdded=()=>{this._updateData()},this._updateData()}setConfig(t){const i=s(e,null!=t?t:{});this._data.length&&void 0===i.accessors&&(i.accessors=this._defaultAccessors),this.search.setConfig(this._createSearchConfig(i)),this._config=i}_updateData(){const s=this._cosmograph.data.nodes;(null==s?void 0:s.length)&&(this._data=s,this.search.setData(this._data),void 0===this._config.accessors&&(this._defaultAccessors=this._createDefaultAccessorOptions(this._data),this.setConfig({accessors:this._defaultAccessors})))}getConfig(){return this._config}remove(){this.search.destroy()}setListState(s){this.search.setListState(s)}clearInput(){this.search.clearInput()}_onSelectResult(s){var t,e;this._cosmograph.pause(),this._cosmograph.zoomToNode(s),this._cosmograph.selectNode(s),null===(e=(t=this._config).onSelectResult)||void 0===e||e.call(t,s)}_createSearchConfig(s){return{...s,events:{onSelect:this._onSelect.bind(this),onSearch:this._onSearch.bind(this),onEnter:this._onEnter.bind(this),onAccessorSelect:this._onAccessorSelect.bind(this)}}}}export{i as CosmographSearch};
//# sourceMappingURL=index.js.map
