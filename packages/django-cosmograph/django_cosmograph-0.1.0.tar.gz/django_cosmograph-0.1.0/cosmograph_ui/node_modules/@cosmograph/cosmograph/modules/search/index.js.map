{"version":3,"file":"index.js","sources":["../../../src/modules/search/index.ts"],"sourcesContent":["import { CosmosInputNode, CosmosInputLink } from '@cosmograph/cosmos'\nimport { Search, type SearchConfigInterface, merge, SearchEvents, SearchAccessorOption } from '@cosmograph/ui'\nimport { CosmographSearchInputConfig, CosmographSearchConfigInterface, defaultCosmographSearchConfig } from './config'\nimport { Cosmograph, Filter } from '../cosmograph'\n\nexport class CosmographSearch<N extends CosmosInputNode, L extends CosmosInputLink> {\n  private _cosmograph: Cosmograph<N, L>\n  private _config: CosmographSearchInputConfig<N> = {}\n  private _data: N[] = []\n  private _filter: Filter<CosmosInputNode>\n  private _defaultAccessors: SearchAccessorOption<N>[] = []\n\n  public search: Search<N>\n\n  public constructor (cosmograph: Cosmograph<N, L>, targetElement: HTMLElement, config?: SearchConfigInterface<N>) {\n    this._cosmograph = cosmograph\n    this._config = merge(defaultCosmographSearchConfig, config ?? {}) as CosmographSearchInputConfig<N>\n    this.search = new Search<N>(targetElement, this._createSearchConfig(config))\n    this._filter = this._cosmograph.addNodesFilter()\n    this._filter.onDataAdded = () => {\n      this._updateData()\n    }\n    this._updateData()\n  }\n\n  /**  `setConfig`: Sets config for the `Search` instance. */\n  public setConfig (config?: CosmographSearchInputConfig<N>): void {\n    const nextConfig = merge(defaultCosmographSearchConfig, config ?? {})\n    // Check if `accessors` is still empty after merging configs,\n    // if yes - use default `accessors`\n    if (this._data.length && nextConfig.accessors === undefined) {\n      nextConfig.accessors = this._defaultAccessors as (SearchAccessorOption<CosmosInputNode>[] & SearchAccessorOption<N>[]) | undefined\n    }\n    this.search.setConfig(this._createSearchConfig(nextConfig))\n    this._config = nextConfig\n  }\n\n  private _updateData (): void {\n    const data = this._cosmograph.data.nodes\n    if (data?.length) {\n      this._data = data as unknown as N[]\n      this.search.setData(this._data)\n      if (this._config.accessors === undefined) {\n        this._defaultAccessors = this._createDefaultAccessorOptions(this._data)\n        this.setConfig({ accessors: this._defaultAccessors })\n      }\n    }\n  }\n\n\n  /**  `getConfig`: Returns current `Search` configuration. */\n  public getConfig (): CosmographSearchConfigInterface<N> {\n    return this._config\n  }\n\n  /**  `remove`: Destroys current `Search` instance. */\n  public remove (): void {\n    this.search.destroy()\n  }\n\n  /**  `setListState`: Manages the state of the `Search` suggestions/accessors dropdown list. */\n  public setListState (state: boolean): void {\n    this.search.setListState(state)\n  }\n\n  /**  `clearInput`: Clears the text input of `Search` instance. */\n  public clearInput (): void {\n    this.search.clearInput()\n  }\n\n  private _createDefaultAccessorOptions = (data: N[]): SearchAccessorOption<N>[] => {\n    if (data.length > 0 && data[0]) {\n      return Object.keys(data[0]).map((key) => {\n        return { label: key, accessor: (n: N) => String(n[key as keyof typeof n]) }\n      })\n    } else {\n      return [{ label: 'id', accessor: (n: N) => n.id }]\n    }\n  }\n\n  private _onSelectResult (node: N): void {\n    this._cosmograph.pause()\n    this._cosmograph.zoomToNode(node)\n    this._cosmograph.selectNode(node)\n    this._config.onSelectResult?.(node)\n  }\n\n  private _createSearchConfig (config?: CosmographSearchInputConfig<N>): SearchConfigInterface<N> {\n    return {\n      ...config,\n      events: {\n        onSelect: this._onSelect.bind(this),\n        onSearch: this._onSearch.bind(this),\n        onEnter: this._onEnter.bind(this),\n        onAccessorSelect: this._onAccessorSelect.bind(this),\n      },\n    }\n  }\n\n  private _onSelect: Exclude<SearchEvents<N>['onSelect'], undefined> = (...args) => {\n    this._onSelectResult(...args)\n    // this._config.onSelect?.(...args)\n  }\n\n  private _onSearch: Exclude<SearchEvents<N>['onSearch'], undefined> = (...args) => {\n    this._config.onSearch?.(...args)\n  }\n\n  private _onEnter: Exclude<SearchEvents<N>['onEnter'], undefined> = (...args) => {\n    this._config.onEnter?.(...args)\n  }\n\n  private _onAccessorSelect: Exclude<SearchEvents<N>['onAccessorSelect'], undefined> = (...args) => {\n    this._config.onAccessorSelect?.(...args)\n  }\n}\n\nexport type { SearchConfigInterface as CosmographSearchConfigInterface, CosmographSearchInputConfig }\n"],"names":["CosmographSearch","constructor","cosmograph","targetElement","config","this","_config","_data","_defaultAccessors","_createDefaultAccessorOptions","data","length","Object","keys","map","key","label","accessor","n","String","id","_onSelect","args","_onSelectResult","_onSearch","_b","_a","onSearch","call","_onEnter","onEnter","_onAccessorSelect","onAccessorSelect","_cosmograph","merge","defaultCosmographSearchConfig","search","Search","_createSearchConfig","_filter","addNodesFilter","onDataAdded","_updateData","setConfig","nextConfig","undefined","accessors","nodes","setData","getConfig","remove","destroy","setListState","state","clearInput","node","pause","zoomToNode","selectNode","onSelectResult","events","onSelect","bind"],"mappings":"qHAKaA,EASX,WAAAC,CAAoBC,EAA8BC,EAA4BC,GAPtEC,KAAOC,QAAmC,GAC1CD,KAAKE,MAAQ,GAEbF,KAAiBG,kBAA8B,GA4D/CH,KAAAI,8BAAiCC,GACnCA,EAAKC,OAAS,GAAKD,EAAK,GACnBE,OAAOC,KAAKH,EAAK,IAAII,KAAKC,IACxB,CAAEC,MAAOD,EAAKE,SAAWC,GAASC,OAAOD,EAAEH,QAG7C,CAAC,CAAEC,MAAO,KAAMC,SAAWC,GAASA,EAAEE,KAuBzCf,KAAAgB,UAA6D,IAAIC,KACvEjB,KAAKkB,mBAAmBD,EAAK,EAIvBjB,KAAAmB,UAA6D,IAAIF,aAC/C,QAAxBG,GAAAC,EAAArB,KAAKC,SAAQqB,gBAAW,IAAAF,GAAAA,EAAAG,KAAAF,KAAGJ,EAAK,EAG1BjB,KAAAwB,SAA2D,IAAIP,aAC9C,QAAvBG,GAAAC,EAAArB,KAAKC,SAAQwB,eAAU,IAAAL,GAAAA,EAAAG,KAAAF,KAAGJ,EAAK,EAGzBjB,KAAA0B,kBAA6E,IAAIT,aACvD,QAAhCG,GAAAC,EAAArB,KAAKC,SAAQ0B,wBAAmB,IAAAP,GAAAA,EAAAG,KAAAF,KAAGJ,EAAK,EAlGxCjB,KAAK4B,YAAc/B,EACnBG,KAAKC,QAAU4B,EAAMC,EAA+B/B,QAAAA,EAAU,CAAE,GAChEC,KAAK+B,OAAS,IAAIC,EAAUlC,EAAeE,KAAKiC,oBAAoBlC,IACpEC,KAAKkC,QAAUlC,KAAK4B,YAAYO,iBAChCnC,KAAKkC,QAAQE,YAAc,KACzBpC,KAAKqC,aAAa,EAEpBrC,KAAKqC,aACN,CAGM,SAAAC,CAAWvC,GAChB,MAAMwC,EAAaV,EAAMC,EAA+B/B,QAAAA,EAAU,CAAA,GAG9DC,KAAKE,MAAMI,aAAmCkC,IAAzBD,EAAWE,YAClCF,EAAWE,UAAYzC,KAAKG,mBAE9BH,KAAK+B,OAAOO,UAAUtC,KAAKiC,oBAAoBM,IAC/CvC,KAAKC,QAAUsC,CAChB,CAEO,WAAAF,GACN,MAAMhC,EAAOL,KAAK4B,YAAYvB,KAAKqC,OAC/BrC,eAAAA,EAAMC,UACRN,KAAKE,MAAQG,EACbL,KAAK+B,OAAOY,QAAQ3C,KAAKE,YACMsC,IAA3BxC,KAAKC,QAAQwC,YACfzC,KAAKG,kBAAoBH,KAAKI,8BAA8BJ,KAAKE,OACjEF,KAAKsC,UAAU,CAAEG,UAAWzC,KAAKG,qBAGtC,CAIM,SAAAyC,GACL,OAAO5C,KAAKC,OACb,CAGM,MAAA4C,GACL7C,KAAK+B,OAAOe,SACb,CAGM,YAAAC,CAAcC,GACnBhD,KAAK+B,OAAOgB,aAAaC,EAC1B,CAGM,UAAAC,GACLjD,KAAK+B,OAAOkB,YACb,CAYO,eAAA/B,CAAiBgC,WACvBlD,KAAK4B,YAAYuB,QACjBnD,KAAK4B,YAAYwB,WAAWF,GAC5BlD,KAAK4B,YAAYyB,WAAWH,GACD,QAA3B9B,GAAAC,EAAArB,KAAKC,SAAQqD,sBAAc,IAAAlC,GAAAA,EAAAG,KAAAF,EAAG6B,EAC/B,CAEO,mBAAAjB,CAAqBlC,GAC3B,MAAO,IACFA,EACHwD,OAAQ,CACNC,SAAUxD,KAAKgB,UAAUyC,KAAKzD,MAC9BsB,SAAUtB,KAAKmB,UAAUsC,KAAKzD,MAC9ByB,QAASzB,KAAKwB,SAASiC,KAAKzD,MAC5B2B,iBAAkB3B,KAAK0B,kBAAkB+B,KAAKzD,OAGnD"}