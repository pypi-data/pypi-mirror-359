import{merge as i,Timeline as t}from"@cosmograph/ui";import{FilterType as e}from"../cosmograph/types.js";import{defaultCosmographTimelineConfig as n}from"./config.js";class s{constructor(s,o,a){this._config={},this.playAnimation=()=>{this.timeline.playAnimation()},this.pauseAnimation=()=>{this.timeline.pauseAnimation()},this.stopAnimation=()=>{this.timeline.stopAnimation()},this._onBrush=(i,t)=>{var e,n;this._applyFilter(i),null===(n=(e=this._config).onSelection)||void 0===n||n.call(e,i,t)},this._onBarHover=(...i)=>{var t,e;null===(e=(t=this._config).onBarHover)||void 0===e||e.call(t,...i)},this._onAnimationPlay=(...i)=>{var t,e;null===(e=(t=this._config).onAnimationPlay)||void 0===e||e.call(t,...i)},this._onAnimationPause=(...i)=>{var t,e;null===(e=(t=this._config).onAnimationPause)||void 0===e||e.call(t,...i)},this._config=i(n,null!=a?a:{}),this.timeline=new t(o,this._createTimelineConfig(a)),this._cosmograph=s,this._filter=this._config.filterType===e.Nodes?this._cosmograph.addNodesFilter():this._cosmograph.addLinksFilter(),this._filter.onDataAdded=()=>{this._updateData()},this._updateDimension(),this._updateData()}setConfig(t){var e,s;const o=i(n,null!=t?t:{});this.timeline.setConfig(this._createTimelineConfig(t)),(null===(e=this._config.accessor)||void 0===e?void 0:e.toString())!==(null===(s=o.accessor)||void 0===s?void 0:s.toString())&&this._updateData(),this._config=o}getCurrentSelection(){return this.timeline.getCurrentSelection()}getCurrentSelectionInPixels(){return this.timeline.getCurrentSelectionInPixels()}getBarWidth(){return this.timeline.getBarWidth()}getIsAnimationRunning(){return this.timeline.getIsAnimationRunning()}setSelection(i){this.timeline.setSelection(i)}setSelectionInPixels(i){this.timeline.setSelectionInPixels(i)}_updateData(){const i=this._filter.getAllValues();i&&this.timeline.setTimeData(i),this.timeline.render(),this.timeline.resize()}_updateDimension(){const{_config:{accessor:i},_filter:t}=this;t.setAccessor(i)}_applyFilter(i){const{_filter:t}=this;i?t.applyFilter((t=>t>=i[0]&&t<=i[1])):t.clear()}getConfig(){return this._config}remove(){this.timeline.destroy()}_createTimelineConfig(i){return{...i,events:{onBrush:this._onBrush.bind(this),onBarHover:this._onBarHover.bind(this),onAnimationPlay:this._onAnimationPlay.bind(this),onAnimationPause:this._onAnimationPause.bind(this)}}}}export{s as CosmographTimeline};
//# sourceMappingURL=index.js.map
