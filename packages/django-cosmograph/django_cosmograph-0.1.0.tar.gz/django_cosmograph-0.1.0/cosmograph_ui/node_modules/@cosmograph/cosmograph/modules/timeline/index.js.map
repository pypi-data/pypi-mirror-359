{"version":3,"file":"index.js","sources":["../../../src/modules/timeline/index.ts"],"sourcesContent":["import { CosmosInputNode, CosmosInputLink } from '@cosmograph/cosmos'\nimport { Timeline, TimelineConfigInterface, type TimelineData, TimelineEvents, merge } from '@cosmograph/ui'\nimport { Cosmograph, Filter } from '../cosmograph'\nimport { FilterType } from '../cosmograph/types'\nimport { CosmographTimelineInputConfig, CosmographTimelineConfigInterface, defaultCosmographTimelineConfig } from './config'\n\nexport class CosmographTimeline<Datum> {\n  private _cosmograph: Cosmograph<CosmosInputNode, CosmosInputLink>\n  private _config: CosmographTimelineConfigInterface<Datum> = {}\n  private _filter: Filter<CosmosInputNode | CosmosInputLink>\n\n  public timeline: Timeline\n\n  public constructor (cosmograph: Cosmograph<CosmosInputNode, CosmosInputLink>, targetElement: HTMLElement, config?: CosmographTimelineInputConfig<Datum>) {\n    this._config = merge(defaultCosmographTimelineConfig, config ?? {})\n    this.timeline = new Timeline(targetElement, this._createTimelineConfig(config))\n    this._cosmograph = cosmograph\n    this._filter = this._config.filterType === FilterType.Nodes ? this._cosmograph.addNodesFilter() : this._cosmograph.addLinksFilter()\n    this._filter.onDataAdded = () => {\n      this._updateData()\n    }\n    this._updateDimension()\n    this._updateData()\n  }\n\n  /**\n   * Sets the configuration for the timeline.\n   * @param config Configuration to be applied to the timeline.\n   */\n  public setConfig (config?: CosmographTimelineInputConfig<Datum>): void {\n    const nextConfig = merge(defaultCosmographTimelineConfig, config ?? {})\n    this.timeline.setConfig(this._createTimelineConfig(config))\n    if (this._config.accessor?.toString() !== nextConfig.accessor?.toString()) {\n      this._updateData()\n    }\n    this._config = nextConfig\n  }\n\n  /**  `getCurrentSelection`: Returns current brush selection in data units (`Date` or `number`). */\n  public getCurrentSelection (): [Date, Date] | [number, number] | undefined {\n    return this.timeline.getCurrentSelection()\n  }\n\n  /**  `getCurrentSelectionInPixels`: Returns current brush selection in pixels. */\n  public getCurrentSelectionInPixels (): [number, number] | undefined {\n    return this.timeline.getCurrentSelectionInPixels()\n  }\n\n  /**  `getBarWidth`: Returns computed bar width in pixels */\n  public getBarWidth (): number {\n    return this.timeline.getBarWidth()\n  }\n\n  /**  `getIsAnimationRunning`: Returns a boolean value indicating if the animation is running. */\n  public getIsAnimationRunning (): boolean {\n    return this.timeline.getIsAnimationRunning()\n  }\n\n  /**  `setSelection`: Set the selected range on a `Timeline`. Takes a selection range as a parameter, which can be a range of dates or a range of numbers if `TimelineData` is numeric. */\n  public setSelection (selectionRange?: [Date, Date] | [number, number]): void {\n    this.timeline.setSelection(selectionRange)\n  }\n\n  /**  `setSelectionInPixels`: Set the selected range on a `Timeline` in pixels. Takes an array containing two numeric values representing selection range in pixels. */\n  public setSelectionInPixels (coordinates?: [number, number]): void {\n    this.timeline.setSelectionInPixels(coordinates)\n  }\n\n  /**  `playAnimation`: If some interval is selected on `Timeline`, starts animation for it. The selected interval is moved forward by each timeline bar according to the speed passed in the `animationSpeed` of the `Timeline` `config`. */\n  public playAnimation = (): void => {\n    this.timeline.playAnimation()\n  }\n\n  /**  `pauseAnimation`: Pauses animation of selected timeline interval. */\n  public pauseAnimation = (): void => {\n    this.timeline.pauseAnimation()\n  }\n\n  /**  `stopAnimation`: Same as `pauseAnimation()`, but resets selection and returns `undefined` value for the `onBrush` callback. */\n  public stopAnimation = (): void => {\n    this.timeline.stopAnimation()\n  }\n\n  private _updateData (): void {\n    const timelineData = this._filter.getAllValues() as TimelineData\n    if (timelineData) this.timeline.setTimeData(timelineData)\n    this.timeline.render()\n    this.timeline.resize()\n  }\n\n  private _updateDimension (): void {\n    const { _config: { accessor }, _filter } = this\n    _filter.setAccessor(accessor as (d: CosmosInputNode | CosmosInputLink) => number)\n  }\n\n  private _applyFilter (selection?: [Date, Date] | [number, number]): void {\n    const { _filter } = this\n    if (selection) {\n      _filter.applyFilter(d => (d as number | Date) >= selection[0] && (d as number | Date) <= selection[1])\n    } else {\n      _filter.clear()\n    }\n  }\n\n  private _onBrush: Exclude<TimelineEvents['onBrush'], undefined> = (selection, isManuallySelected) => {\n    this._applyFilter(selection)\n    this._config.onSelection?.(selection, isManuallySelected)\n  }\n\n  private _onBarHover: Exclude<TimelineEvents['onBarHover'], undefined> = (...args) => {\n    this._config.onBarHover?.(...args)\n  }\n\n  private _onAnimationPlay: Exclude<TimelineEvents['onAnimationPlay'], undefined> = (...args) => {\n    this._config.onAnimationPlay?.(...args)\n  }\n\n  private _onAnimationPause: Exclude<TimelineEvents['onAnimationPause'], undefined> = (...args) => {\n    this._config.onAnimationPause?.(...args)\n  }\n\n  /**  `getConfig`: Returns current `Timeline` configuration */\n  public getConfig (): CosmographTimelineConfigInterface<Datum> {\n    return this._config\n  }\n\n  public remove (): void {\n    this.timeline.destroy()\n  }\n\n  private _createTimelineConfig (config?: CosmographTimelineInputConfig<Datum>): TimelineConfigInterface {\n    return {\n      ...config,\n      events: {\n        onBrush: this._onBrush.bind(this),\n        onBarHover: this._onBarHover.bind(this),\n        onAnimationPlay: this._onAnimationPlay.bind(this),\n        onAnimationPause: this._onAnimationPause.bind(this),\n      },\n    }\n  }\n}\n\nexport type { CosmographTimelineConfigInterface, CosmographTimelineInputConfig }\n"],"names":["CosmographTimeline","constructor","cosmograph","targetElement","config","this","_config","playAnimation","timeline","pauseAnimation","stopAnimation","_onBrush","selection","isManuallySelected","_applyFilter","_b","_a","onSelection","call","_onBarHover","args","onBarHover","_onAnimationPlay","onAnimationPlay","_onAnimationPause","onAnimationPause","merge","defaultCosmographTimelineConfig","Timeline","_createTimelineConfig","_cosmograph","_filter","filterType","FilterType","Nodes","addNodesFilter","addLinksFilter","onDataAdded","_updateData","_updateDimension","setConfig","nextConfig","accessor","toString","getCurrentSelection","getCurrentSelectionInPixels","getBarWidth","getIsAnimationRunning","setSelection","selectionRange","setSelectionInPixels","coordinates","timelineData","getAllValues","setTimeData","render","resize","setAccessor","applyFilter","d","clear","getConfig","remove","destroy","events","onBrush","bind"],"mappings":"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"}