import React, { Ref, ForwardedRef } from 'react';
import { Cosmograph as _Cosmograph, CosmographInputConfig } from '@cosmograph/cosmograph';
import { CosmosInputLink, CosmosInputNode } from '@cosmograph/cosmos';
export type CosmographProps<N extends CosmosInputNode, L extends CosmosInputLink> = {
    nodes?: N[];
    links?: L[];
    style?: object;
    className?: string;
} & CosmographInputConfig<N, L>;
export type CosmographRef<N extends CosmosInputNode = CosmosInputNode, L extends CosmosInputLink = CosmosInputLink> = _Cosmograph<N, L> | undefined;
export declare function CosmographFC<N extends CosmosInputNode, L extends CosmosInputLink>({ style, className, nodes, links, ...args }: CosmographProps<N, L>, ref: ForwardedRef<CosmographRef<N, L>>): React.ReactElement;
export declare const Cosmograph: <N extends CosmosInputNode, L extends CosmosInputLink>(props: {
    nodes?: N[] | undefined;
    links?: L[] | undefined;
    style?: object | undefined;
    className?: string | undefined;
} & {
    disableSimulation?: boolean | null | undefined;
    showDynamicLabels?: boolean | undefined;
    showTopLabels?: boolean | undefined;
    showTopLabelsLimit?: number | undefined;
    showTopLabelsValueKey?: keyof N | undefined;
    showLabelsFor?: N[] | undefined;
    showHoveredNodeLabel?: boolean | undefined;
    nodeLabelAccessor?: ((node: N) => string) | undefined;
    nodeLabelClassName?: string | ((node: N) => string) | undefined;
    nodeLabelColor?: string | ((node: N) => string) | undefined;
    hoveredNodeLabelClassName?: string | ((node: N) => string) | undefined;
    hoveredNodeLabelColor?: string | ((node: N) => string) | undefined;
    onSetData?: ((nodes: N[], links: L[]) => void) | undefined;
    onNodesFiltered?: ((filteredNodes: N[] | undefined) => void) | undefined;
    onLinksFiltered?: ((filteredLinks: L[] | undefined) => void) | undefined;
    onLabelClick?: ((node: N, event: MouseEvent) => void) | undefined;
} & import("@cosmograph/cosmos").GraphEvents<N> & {
    simulationDecay?: number | undefined;
    simulationGravity?: number | undefined;
    simulationCenter?: number | undefined;
    simulationRepulsion?: number | undefined;
    simulationRepulsionTheta?: number | undefined;
    simulationRepulsionQuadtreeLevels?: number | undefined;
    simulationLinkSpring?: number | undefined;
    simulationLinkDistance?: number | undefined;
    simulationLinkDistRandomVariationRange?: number[] | undefined;
    simulationRepulsionFromMouse?: number | undefined;
    simulationFriction?: number | undefined;
    onSimulationStart?: (() => void) | undefined;
    onSimulationTick?: ((alpha: number, hoveredNode?: N | undefined, index?: number | undefined, nodePosition?: [number, number] | undefined) => void) | undefined;
    onSimulationEnd?: (() => void) | undefined;
    onSimulationPause?: (() => void) | undefined;
    onSimulationRestart?: (() => void) | undefined;
} & Omit<import("@cosmograph/cosmos").GraphConfigInterface<N, L>, "events" | "simulation" | "disableSimulation"> & {
    ref?: React.Ref<CosmographRef<N, L>> | undefined;
}) => React.ReactElement;
export type { CosmographInputConfig };
