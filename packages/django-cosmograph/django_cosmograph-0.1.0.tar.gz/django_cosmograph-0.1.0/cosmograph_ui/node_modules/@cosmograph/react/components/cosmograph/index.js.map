{"version":3,"file":"index.js","sources":["../../../src/components/cosmograph/index.tsx"],"sourcesContent":["import React, { Ref, ForwardedRef, useRef, useState, useEffect, useImperativeHandle } from 'react'\nimport { Cosmograph as _Cosmograph, CosmographInputConfig } from '@cosmograph/cosmograph'\nimport { CosmosInputLink, CosmosInputNode } from '@cosmograph/cosmos'\nimport { useCosmograph } from '../../context'\n\nexport type CosmographProps<N extends CosmosInputNode, L extends CosmosInputLink> = {\n  nodes?: N[];\n  links?: L[];\n  style?: object;\n  className?: string;\n} & CosmographInputConfig<N, L>\n\nexport type CosmographRef<N extends CosmosInputNode = CosmosInputNode, L extends CosmosInputLink = CosmosInputLink> = _Cosmograph<N, L> | undefined;\n\nexport function CosmographFC<N extends CosmosInputNode, L extends CosmosInputLink> (\n  { style, className, nodes, links, ...args }: CosmographProps<N, L>,\n  ref: ForwardedRef<CosmographRef<N, L>>\n): React.ReactElement {\n  const context = useCosmograph<N, L>()\n  const container = useRef<HTMLDivElement>(null)\n  const cosmographInstance = useRef<_Cosmograph<N, L>>()\n  const [isComponentMounted, setComponentMounted] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (container.current) {\n      cosmographInstance.current = new _Cosmograph<N, L>(container.current, args)\n      setComponentMounted(true)\n      context?.initCosmograph(cosmographInstance.current)\n    }\n\n    return () => {\n      cosmographInstance.current?.remove()\n    }\n  }, [])\n\n  useEffect(() => {\n    cosmographInstance.current?.setConfig(args)\n  }, [args])\n\n  useEffect(() => {\n    if (nodes || links) {\n      cosmographInstance.current?.setData(nodes ?? [], links ?? [])\n    }\n  }, [nodes, links])\n\n  useEffect(() => {\n    // Nodes and links from the context has a lower priority\n    if ((!nodes && !links) && (context?.nodes || context?.links)) {\n      cosmographInstance.current?.setData(context?.nodes ?? [], context?.links ?? [])\n    }\n  }, [context?.nodes, context?.links])\n\n  useImperativeHandle(ref, () => cosmographInstance.current, [isComponentMounted])\n\n  return (\n    <div style={{ ...style }} className={className} ref={container} />\n  )\n}\n\n// https://stackoverflow.com/a/58473012\nexport const Cosmograph = React.forwardRef(CosmographFC) as\n  <N extends CosmosInputNode, L extends CosmosInputLink>(\n    props: CosmographProps<N, L> & { ref?: Ref<CosmographRef<N, L>> }\n  ) => React.ReactElement\n\nexport type { CosmographInputConfig }\n"],"names":["CosmographFC","style","className","nodes","links","args","ref","context","useCosmograph","container","useRef","cosmographInstance","isComponentMounted","setComponentMounted","useState","useEffect","current","_Cosmograph","initCosmograph","_a","remove","setConfig","setData","_b","_c","useImperativeHandle","React","createElement","Cosmograph","forwardRef"],"mappings":"sMAcgBA,GACdC,MAAEA,EAAKC,UAAEA,EAASC,MAAEA,EAAKC,MAAEA,KAAUC,GACrCC,GAEA,MAAMC,EAAUC,IACVC,EAAYC,EAAuB,MACnCC,EAAqBD,KACpBE,EAAoBC,GAAuBC,GAAkB,GAiCpE,OA/BAC,GAAU,KACJN,EAAUO,UACZL,EAAmBK,QAAU,IAAIC,EAAkBR,EAAUO,QAASX,GACtEQ,GAAoB,GACpBN,SAAAA,EAASW,eAAeP,EAAmBK,UAGtC,WACuB,QAA5BG,EAAAR,EAAmBK,eAAS,IAAAG,GAAAA,EAAAC,QAAQ,IAErC,IAEHL,GAAU,WACkB,QAA1BI,EAAAR,EAAmBK,eAAO,IAAAG,GAAAA,EAAEE,UAAUhB,EAAK,GAC1C,CAACA,IAEJU,GAAU,YACJZ,GAASC,KACe,QAA1Be,EAAAR,EAAmBK,eAAO,IAAAG,GAAAA,EAAEG,QAAQnB,QAAAA,EAAS,GAAIC,QAAAA,EAAS,IAC3D,GACA,CAACD,EAAOC,IAEXW,GAAU,eAEFZ,GAAUC,KAAWG,aAAA,EAAAA,EAASJ,UAASI,aAAA,EAAAA,EAASH,QAC1B,QAA1Be,EAAAR,EAAmBK,eAAO,IAAAG,GAAAA,EAAEG,QAA0B,QAAlBC,EAAAhB,aAAA,EAAAA,EAASJ,aAAS,IAAAoB,EAAAA,EAAA,GAAkB,QAAdC,EAAAjB,aAAO,EAAPA,EAASH,aAAK,IAAAoB,EAAAA,EAAI,GAC7E,GACA,CAACjB,aAAO,EAAPA,EAASJ,MAAOI,aAAA,EAAAA,EAASH,QAE7BqB,EAAoBnB,GAAK,IAAMK,EAAmBK,SAAS,CAACJ,IAG1Dc,EAAKC,cAAA,MAAA,CAAA1B,MAAO,IAAKA,GAASC,UAAWA,EAAWI,IAAKG,GAEzD,CAGa,MAAAmB,EAAaF,EAAMG,WAAW7B"}