import React, { Ref, ForwardedRef } from 'react';
import { CosmographSearch as _CosmographSearch, CosmographSearchInputConfig } from '@cosmograph/cosmograph';
import { CosmosInputLink, CosmosInputNode } from '@cosmograph/cosmos';
export type CosmographSearchProps<N extends CosmosInputNode> = {
    style?: object;
    className?: string;
} & CosmographSearchInputConfig<N>;
export type CosmographSearchRef<N extends CosmosInputNode = CosmosInputNode, L extends CosmosInputLink = CosmosInputLink> = _CosmographSearch<N, L> | undefined;
export declare function CosmographSearchFC<N extends CosmosInputNode, L extends CosmosInputLink>({ style, className, ...config }: CosmographSearchProps<N>, ref: ForwardedRef<CosmographSearchRef<N, L>>): React.ReactElement;
export declare const CosmographSearch: <N extends CosmosInputNode, L extends CosmosInputLink>(props: {
    style?: object | undefined;
    className?: string | undefined;
} & {
    onSelectResult?: ((node?: N | undefined) => void) | undefined;
} & Omit<import("@cosmograph/ui").SearchEvents<N>, "onSelect"> & Omit<import("@cosmograph/cosmograph").CosmographSearchConfigInterface<N>, "events"> & {
    ref?: React.Ref<CosmographSearchRef<N, L>> | undefined;
}) => React.ReactElement;
export type { CosmographSearchInputConfig };
