/* Generated by Cython 3.0.12 */

#ifndef __PYX_HAVE__dpctl___sycl_context
#define __PYX_HAVE__dpctl___sycl_context

#include "Python.h"
struct Py_SyclContextObject;
struct PySyclContextObject;

/* "dpctl/_sycl_context.pxd":29
 * 
 * 
 * cdef public api class _SyclContext [             # <<<<<<<<<<<<<<
 *     object Py_SyclContextObject,
 *     type Py_SyclContextType
 */
struct Py_SyclContextObject {
  PyObject_HEAD
  DPCTLSyclContextRef _ctxt_ref;
};

/* "dpctl/_sycl_context.pxd":38
 * 
 * 
 * cdef public api class SyclContext(_SyclContext) [             # <<<<<<<<<<<<<<
 *     object PySyclContextObject,
 *     type PySyclContextType
 */
struct PySyclContextObject {
  struct Py_SyclContextObject __pyx_base;
  struct __pyx_vtabstruct_5dpctl_13_sycl_context_SyclContext *__pyx_vtab;
};

#ifndef __PYX_HAVE_API__dpctl___sycl_context

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(_T) _T
#endif

__PYX_EXTERN_C DL_IMPORT(PyTypeObject) Py_SyclContextType;
__PYX_EXTERN_C DL_IMPORT(PyTypeObject) PySyclContextType;

#endif /* !__PYX_HAVE_API__dpctl___sycl_context */

/* WARNING: the interface of the module init function changed in CPython 3.5. */
/* It now returns a PyModuleDef instance instead of a PyModule instance. */

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_sycl_context(void);
#else
/* WARNING: Use PyImport_AppendInittab("_sycl_context", PyInit__sycl_context) instead of calling PyInit__sycl_context directly from Python 3.5 */
PyMODINIT_FUNC PyInit__sycl_context(void);

#if PY_VERSION_HEX >= 0x03050000 && (defined(__GNUC__) || defined(__clang__) || defined(_MSC_VER) || (defined(__cplusplus) && __cplusplus >= 201402L))
#if defined(__cplusplus) && __cplusplus >= 201402L
[[deprecated("Use PyImport_AppendInittab(\"_sycl_context\", PyInit__sycl_context) instead of calling PyInit__sycl_context directly.")]] inline
#elif defined(__GNUC__) || defined(__clang__)
__attribute__ ((__deprecated__("Use PyImport_AppendInittab(\"_sycl_context\", PyInit__sycl_context) instead of calling PyInit__sycl_context directly."), __unused__)) __inline__
#elif defined(_MSC_VER)
__declspec(deprecated("Use PyImport_AppendInittab(\"_sycl_context\", PyInit__sycl_context) instead of calling PyInit__sycl_context directly.")) __inline
#endif
static PyObject* __PYX_WARN_IF_PyInit__sycl_context_INIT_CALLED(PyObject* res) {
  return res;
}
#define PyInit__sycl_context() __PYX_WARN_IF_PyInit__sycl_context_INIT_CALLED(PyInit__sycl_context())
#endif
#endif

#endif /* !__PYX_HAVE__dpctl___sycl_context */
