/* Generated by Cython 3.1.2 */

#ifndef __PYX_HAVE__dpctl___sycl_queue
#define __PYX_HAVE__dpctl___sycl_queue

#include "Python.h"
struct Py_SyclQueueObject;
struct PySyclQueueObject;
struct Py_WorkGroupMemoryObject;
struct PyWorkGroupMemoryObject;
struct Py_RawKernelArgObject;
struct PyRawKernelArgObject;

/* "dpctl/_sycl_queue.pxd":38
 * 
 * 
 * cdef public api class _SyclQueue [             # <<<<<<<<<<<<<<
 *     object Py_SyclQueueObject, type Py_SyclQueueType
 * ]:
*/
struct Py_SyclQueueObject {
  PyObject_HEAD
  DPCTLSyclQueueRef _queue_ref;
  struct PySyclContextObject *_context;
  struct PySyclDeviceObject *_device;
};

/* "dpctl/_sycl_queue.pxd":48
 * 
 * 
 * cdef public api class SyclQueue (_SyclQueue) [             # <<<<<<<<<<<<<<
 *     object PySyclQueueObject, type PySyclQueueType
 * ]:
*/
struct PySyclQueueObject {
  struct Py_SyclQueueObject __pyx_base;
  struct __pyx_vtabstruct_5dpctl_11_sycl_queue_SyclQueue *__pyx_vtab;
};

/* "dpctl/_sycl_queue.pxd":110
 *     cpdef SyclEvent submit_barrier(self, dependent_events=*)
 * 
 * cdef public api class _WorkGroupMemory [             # <<<<<<<<<<<<<<
 *     object Py_WorkGroupMemoryObject, type Py_WorkGroupMemoryType
 * ]:
*/
struct Py_WorkGroupMemoryObject {
  PyObject_HEAD
  DPCTLSyclWorkGroupMemoryRef _mem_ref;
};

/* "dpctl/_sycl_queue.pxd":115
 *     cdef DPCTLSyclWorkGroupMemoryRef _mem_ref
 * 
 * cdef public api class WorkGroupMemory(_WorkGroupMemory) [             # <<<<<<<<<<<<<<
 *     object PyWorkGroupMemoryObject, type PyWorkGroupMemoryType
 * ]:
*/
struct PyWorkGroupMemoryObject {
  struct Py_WorkGroupMemoryObject __pyx_base;
};

/* "dpctl/_sycl_queue.pxd":120
 *     pass
 * 
 * cdef public api class _RawKernelArg [             # <<<<<<<<<<<<<<
 *     object Py_RawKernelArgObject, type Py_RawKernelArgType
 * ]:
*/
struct Py_RawKernelArgObject {
  PyObject_HEAD
  DPCTLSyclRawKernelArgRef _arg_ref;
};

/* "dpctl/_sycl_queue.pxd":125
 *     cdef DPCTLSyclRawKernelArgRef _arg_ref
 * 
 * cdef public api class RawKernelArg(_RawKernelArg) [             # <<<<<<<<<<<<<<
 *     object PyRawKernelArgObject, type PyRawKernelArgType
 * ]:
*/
struct PyRawKernelArgObject {
  struct Py_RawKernelArgObject __pyx_base;
};

#ifndef __PYX_HAVE_API__dpctl___sycl_queue

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(_T) _T
#endif

__PYX_EXTERN_C DL_IMPORT(PyTypeObject) Py_SyclQueueType;
__PYX_EXTERN_C DL_IMPORT(PyTypeObject) PySyclQueueType;
__PYX_EXTERN_C DL_IMPORT(PyTypeObject) Py_WorkGroupMemoryType;
__PYX_EXTERN_C DL_IMPORT(PyTypeObject) PyWorkGroupMemoryType;
__PYX_EXTERN_C DL_IMPORT(PyTypeObject) Py_RawKernelArgType;
__PYX_EXTERN_C DL_IMPORT(PyTypeObject) PyRawKernelArgType;

#endif /* !__PYX_HAVE_API__dpctl___sycl_queue */

/* WARNING: the interface of the module init function changed in CPython 3.5. */
/* It now returns a PyModuleDef instance instead of a PyModule instance. */

/* WARNING: Use PyImport_AppendInittab("_sycl_queue", PyInit__sycl_queue) instead of calling PyInit__sycl_queue directly from Python 3.5 */
PyMODINIT_FUNC PyInit__sycl_queue(void);

#if PY_VERSION_HEX >= 0x03050000 && (defined(__GNUC__) || defined(__clang__) || defined(_MSC_VER) || (defined(__cplusplus) && __cplusplus >= 201402L))
#if defined(__cplusplus) && __cplusplus >= 201402L
[[deprecated("Use PyImport_AppendInittab(\"_sycl_queue\", PyInit__sycl_queue) instead of calling PyInit__sycl_queue directly.")]] inline
#elif defined(__GNUC__) || defined(__clang__)
__attribute__ ((__deprecated__("Use PyImport_AppendInittab(\"_sycl_queue\", PyInit__sycl_queue) instead of calling PyInit__sycl_queue directly."), __unused__)) __inline__
#elif defined(_MSC_VER)
__declspec(deprecated("Use PyImport_AppendInittab(\"_sycl_queue\", PyInit__sycl_queue) instead of calling PyInit__sycl_queue directly.")) __inline
#endif
static PyObject* __PYX_WARN_IF_PyInit__sycl_queue_INIT_CALLED(PyObject* res) {
  return res;
}
#define PyInit__sycl_queue() __PYX_WARN_IF_PyInit__sycl_queue_INIT_CALLED(PyInit__sycl_queue())
#endif

#endif /* !__PYX_HAVE__dpctl___sycl_queue */
