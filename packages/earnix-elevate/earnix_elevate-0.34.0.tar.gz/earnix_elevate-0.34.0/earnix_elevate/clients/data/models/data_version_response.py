# coding: utf-8

"""
Earnix DataService API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing_extensions import Self

from earnix_elevate.clients.data.models.data_version_metadata_response import (
    DataVersionMetadataResponse,
)
from earnix_elevate.clients.data.models.data_version_status_response import (
    DataVersionStatusResponse,
)
from earnix_elevate.clients.data.models.user_response import UserResponse


class DataVersionResponse(BaseModel):
    """
    DataVersionResponse
    """  # noqa: E501

    data_table_id: Optional[StrictInt] = Field(default=None, alias="dataTableId")
    version_number: Optional[StrictInt] = Field(default=None, alias="versionNumber")
    status: Optional[DataVersionStatusResponse] = None
    metadata: Optional[DataVersionMetadataResponse] = None
    created_by: Optional[UserResponse] = Field(default=None, alias="createdBy")
    created_date: Optional[datetime] = Field(default=None, alias="createdDate")
    last_modified_by: Optional[UserResponse] = Field(
        default=None, alias="lastModifiedBy"
    )
    last_modified_date: Optional[datetime] = Field(
        default=None, alias="lastModifiedDate"
    )
    __properties: ClassVar[List[str]] = [
        "dataTableId",
        "versionNumber",
        "status",
        "metadata",
        "createdBy",
        "createdDate",
        "lastModifiedBy",
        "lastModifiedDate",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataVersionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict["metadata"] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict["createdBy"] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_modified_by
        if self.last_modified_by:
            _dict["lastModifiedBy"] = self.last_modified_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataVersionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "dataTableId": obj.get("dataTableId"),
                "versionNumber": obj.get("versionNumber"),
                "status": DataVersionStatusResponse.from_dict(obj["status"])
                if obj.get("status") is not None
                else None,
                "metadata": DataVersionMetadataResponse.from_dict(obj["metadata"])
                if obj.get("metadata") is not None
                else None,
                "createdBy": UserResponse.from_dict(obj["createdBy"])
                if obj.get("createdBy") is not None
                else None,
                "createdDate": obj.get("createdDate"),
                "lastModifiedBy": UserResponse.from_dict(obj["lastModifiedBy"])
                if obj.get("lastModifiedBy") is not None
                else None,
                "lastModifiedDate": obj.get("lastModifiedDate"),
            }
        )
        return _obj
