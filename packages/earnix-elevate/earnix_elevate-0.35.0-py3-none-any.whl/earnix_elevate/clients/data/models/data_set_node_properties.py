# coding: utf-8

"""
Earnix DataService API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, validator


class DataSetNodeProperties(BaseModel):
    """
    DataSetNodeProperties
    """

    node_type: Optional[StrictStr] = Field(default=None, alias="nodeType")
    data_set_id: Optional[StrictInt] = Field(default=None, alias="dataSetId")
    __properties = ["nodeType", "dataSetId"]

    @validator("node_type")
    def node_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "TABLE",
            "RECIPE",
        ):
            raise ValueError("must be one of enum values ('TABLE', 'RECIPE')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataSetNodeProperties:
        """Create an instance of DataSetNodeProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataSetNodeProperties:
        """Create an instance of DataSetNodeProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataSetNodeProperties.parse_obj(obj)

        _obj = DataSetNodeProperties.parse_obj(
            {"node_type": obj.get("nodeType"), "data_set_id": obj.get("dataSetId")}
        )
        return _obj
