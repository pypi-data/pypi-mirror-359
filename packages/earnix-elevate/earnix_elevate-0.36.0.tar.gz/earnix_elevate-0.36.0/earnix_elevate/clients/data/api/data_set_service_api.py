# coding: utf-8

"""
Earnix DataService API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401
from typing import List

from pydantic.v1 import Field, StrictInt, StrictStr, validate_arguments
from typing_extensions import Annotated

from earnix_elevate.clients.data.api_client import ApiClient
from earnix_elevate.clients.data.api_response import ApiResponse
from earnix_elevate.clients.data.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)
from earnix_elevate.clients.data.models.add_data_set_node_request import (
    AddDataSetNodeRequest,
)
from earnix_elevate.clients.data.models.create_data_set_request import (
    CreateDataSetRequest,
)
from earnix_elevate.clients.data.models.create_data_set_version_request import (
    CreateDataSetVersionRequest,
)
from earnix_elevate.clients.data.models.data_set_node_response import (
    DataSetNodeResponse,
)
from earnix_elevate.clients.data.models.data_set_response import DataSetResponse
from earnix_elevate.clients.data.models.execute_recipe_request import (
    ExecuteRecipeRequest,
)
from earnix_elevate.clients.data.models.execute_recipe_response import (
    ExecuteRecipeResponse,
)
from earnix_elevate.clients.data.models.execution_progress_response import (
    ExecutionProgressResponse,
)
from earnix_elevate.clients.data.models.recipe_status_response import (
    RecipeStatusResponse,
)
from earnix_elevate.clients.data.models.transformation_graph_response import (
    TransformationGraphResponse,
)
from earnix_elevate.clients.data.models.transformation_graph_wrapper_response import (
    TransformationGraphWrapperResponse,
)
from earnix_elevate.clients.data.models.update_data_set_node_request import (
    UpdateDataSetNodeRequest,
)
from earnix_elevate.clients.data.models.update_data_set_request import (
    UpdateDataSetRequest,
)


class DataSetServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_data_set_node_to_transformaion_graph(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        add_data_set_node_request: Annotated[
            AddDataSetNodeRequest, Field(..., description="Add Data Set Node Request")
        ],
        **kwargs,
    ) -> TransformationGraphWrapperResponse:  # noqa: E501
        """add_data_set_node_to_transformaion_graph  # noqa: E501

        Adds a node (recipe or dataTable) to the transformation graph  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param add_data_set_node_request: Add Data Set Node Request (required)
        :type add_data_set_node_request: AddDataSetNodeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransformationGraphWrapperResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the add_data_set_node_to_transformaion_graph_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_data_set_node_to_transformaion_graph_with_http_info(
            data_set_id,
            transformation_graph_version_number,
            add_data_set_node_request,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def add_data_set_node_to_transformaion_graph_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        add_data_set_node_request: Annotated[
            AddDataSetNodeRequest, Field(..., description="Add Data Set Node Request")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """add_data_set_node_to_transformaion_graph  # noqa: E501

        Adds a node (recipe or dataTable) to the transformation graph  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param add_data_set_node_request: Add Data Set Node Request (required)
        :type add_data_set_node_request: AddDataSetNodeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransformationGraphWrapperResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "data_set_id",
            "transformation_graph_version_number",
            "add_data_set_node_request",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_data_set_node_to_transformaion_graph" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        if _params["transformation_graph_version_number"] is not None:
            _path_params["transformation-graph-version-number"] = _params[
                "transformation_graph_version_number"
            ]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["add_data_set_node_request"] is not None:
            _body_params = _params["add_data_set_node_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "TransformationGraphWrapperResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}/transformation-graphs/{transformation-graph-version-number}/nodes",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_data_set(
        self,
        create_data_set_request: Annotated[
            CreateDataSetRequest, Field(..., description="Create DataSet Request")
        ],
        **kwargs,
    ) -> DataSetResponse:  # noqa: E501
        """create_data_set  # noqa: E501

        Creates a data set.  # noqa: E501

        :param create_data_set_request: Create DataSet Request (required)
        :type create_data_set_request: CreateDataSetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DataSetResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_data_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_data_set_with_http_info(create_data_set_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_data_set_with_http_info(
        self,
        create_data_set_request: Annotated[
            CreateDataSetRequest, Field(..., description="Create DataSet Request")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """create_data_set  # noqa: E501

        Creates a data set.  # noqa: E501

        :param create_data_set_request: Create DataSet Request (required)
        :type create_data_set_request: CreateDataSetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DataSetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_data_set_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_data_set" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_data_set_request"] is not None:
            _body_params = _params["create_data_set_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "DataSetResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_new_version_to_data_set(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        create_data_set_version_request: Annotated[
            CreateDataSetVersionRequest,
            Field(..., description="Create DataSet Version Request"),
        ],
        **kwargs,
    ) -> TransformationGraphWrapperResponse:  # noqa: E501
        """create_new_version_to_data_set  # noqa: E501

        Create a new version to a dataSet.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param create_data_set_version_request: Create DataSet Version Request (required)
        :type create_data_set_version_request: CreateDataSetVersionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransformationGraphWrapperResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_new_version_to_data_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_new_version_to_data_set_with_http_info(
            data_set_id, create_data_set_version_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_new_version_to_data_set_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        create_data_set_version_request: Annotated[
            CreateDataSetVersionRequest,
            Field(..., description="Create DataSet Version Request"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """create_new_version_to_data_set  # noqa: E501

        Create a new version to a dataSet.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param create_data_set_version_request: Create DataSet Version Request (required)
        :type create_data_set_version_request: CreateDataSetVersionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransformationGraphWrapperResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["data_set_id", "create_data_set_version_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_version_to_data_set" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_data_set_version_request"] is not None:
            _body_params = _params["create_data_set_version_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "TransformationGraphWrapperResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}/transformation-graphs",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_data_set(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        **kwargs,
    ) -> None:  # noqa: E501
        """delete_data_set  # noqa: E501

        Deletes the entire data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_data_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_data_set_with_http_info(data_set_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_data_set_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """delete_data_set  # noqa: E501

        Deletes the entire data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["data_set_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_data_set" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/problem+json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_data_set_version(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        **kwargs,
    ) -> None:  # noqa: E501
        """delete_data_set_version  # noqa: E501

        Deletes the specified version of the data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_data_set_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_data_set_version_with_http_info(
            data_set_id, transformation_graph_version_number, **kwargs
        )  # noqa: E501

    @validate_arguments
    def delete_data_set_version_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """delete_data_set_version  # noqa: E501

        Deletes the specified version of the data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["data_set_id", "transformation_graph_version_number"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_data_set_version" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        if _params["transformation_graph_version_number"] is not None:
            _path_params["transformation-graph-version-number"] = _params[
                "transformation_graph_version_number"
            ]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/problem+json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}/transformation-graphs/{transformation-graph-version-number}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def execute_recipe(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        data_set_node_id: Annotated[
            StrictInt, Field(..., description="The data set node id.")
        ],
        execute_recipe_request: Annotated[
            ExecuteRecipeRequest, Field(..., description="Execute Recipe Request")
        ],
        **kwargs,
    ) -> ExecuteRecipeResponse:  # noqa: E501
        """execute_recipe  # noqa: E501

        Executes a recipe in the data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param data_set_node_id: The data set node id. (required)
        :type data_set_node_id: int
        :param execute_recipe_request: Execute Recipe Request (required)
        :type execute_recipe_request: ExecuteRecipeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExecuteRecipeResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the execute_recipe_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.execute_recipe_with_http_info(
            data_set_id,
            transformation_graph_version_number,
            data_set_node_id,
            execute_recipe_request,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def execute_recipe_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        data_set_node_id: Annotated[
            StrictInt, Field(..., description="The data set node id.")
        ],
        execute_recipe_request: Annotated[
            ExecuteRecipeRequest, Field(..., description="Execute Recipe Request")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """execute_recipe  # noqa: E501

        Executes a recipe in the data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param data_set_node_id: The data set node id. (required)
        :type data_set_node_id: int
        :param execute_recipe_request: Execute Recipe Request (required)
        :type execute_recipe_request: ExecuteRecipeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExecuteRecipeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "data_set_id",
            "transformation_graph_version_number",
            "data_set_node_id",
            "execute_recipe_request",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_recipe" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        if _params["transformation_graph_version_number"] is not None:
            _path_params["transformation-graph-version-number"] = _params[
                "transformation_graph_version_number"
            ]

        if _params["data_set_node_id"] is not None:
            _path_params["data-set-node-id"] = _params["data_set_node_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["execute_recipe_request"] is not None:
            _body_params = _params["execute_recipe_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ExecuteRecipeResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}/transformation-graphs/{transformation-graph-version-number}/nodes/{data-set-node-id}/execute",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_data_set(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        **kwargs,
    ) -> DataSetResponse:  # noqa: E501
        """get_data_set  # noqa: E501

        Gets a data set. Returns NOT_FOUND if the data set does not exist.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DataSetResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_data_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_data_set_with_http_info(data_set_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_data_set_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_data_set  # noqa: E501

        Gets a data set. Returns NOT_FOUND if the data set does not exist.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DataSetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["data_set_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_set" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "DataSetResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_data_set_by_version(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        **kwargs,
    ) -> DataSetResponse:  # noqa: E501
        """get_data_set_by_version  # noqa: E501

        Gets the specified version of the data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DataSetResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_data_set_by_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_data_set_by_version_with_http_info(
            data_set_id, transformation_graph_version_number, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_data_set_by_version_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_data_set_by_version  # noqa: E501

        Gets the specified version of the data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DataSetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["data_set_id", "transformation_graph_version_number"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_set_by_version" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        if _params["transformation_graph_version_number"] is not None:
            _path_params["transformation-graph-version-number"] = _params[
                "transformation_graph_version_number"
            ]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "DataSetResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}/transformation-graphs/{transformation-graph-version-number}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_latest_recipe_status(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        data_set_node_id: Annotated[
            StrictInt, Field(..., description="The data set node id.")
        ],
        **kwargs,
    ) -> RecipeStatusResponse:  # noqa: E501
        """get_latest_recipe_status  # noqa: E501

        Get the latest status of a recipe node in a transformation graph  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param data_set_node_id: The data set node id. (required)
        :type data_set_node_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RecipeStatusResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_latest_recipe_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_latest_recipe_status_with_http_info(
            data_set_id, transformation_graph_version_number, data_set_node_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_latest_recipe_status_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        data_set_node_id: Annotated[
            StrictInt, Field(..., description="The data set node id.")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_latest_recipe_status  # noqa: E501

        Get the latest status of a recipe node in a transformation graph  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param data_set_node_id: The data set node id. (required)
        :type data_set_node_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RecipeStatusResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "data_set_id",
            "transformation_graph_version_number",
            "data_set_node_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_recipe_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        if _params["transformation_graph_version_number"] is not None:
            _path_params["transformation-graph-version-number"] = _params[
                "transformation_graph_version_number"
            ]

        if _params["data_set_node_id"] is not None:
            _path_params["data-set-node-id"] = _params["data_set_node_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "RecipeStatusResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}/transformation-graphs/{transformation-graph-version-number}/nodes/{data-set-node-id}/latest-recipe-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_recipe_execution_progress(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        data_set_node_id: Annotated[
            StrictInt, Field(..., description="The data set node id.")
        ],
        **kwargs,
    ) -> ExecutionProgressResponse:  # noqa: E501
        """get_recipe_execution_progress  # noqa: E501

        get recipe execution progress  in the data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param data_set_node_id: The data set node id. (required)
        :type data_set_node_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExecutionProgressResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_recipe_execution_progress_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_recipe_execution_progress_with_http_info(
            data_set_id, transformation_graph_version_number, data_set_node_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_recipe_execution_progress_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        data_set_node_id: Annotated[
            StrictInt, Field(..., description="The data set node id.")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_recipe_execution_progress  # noqa: E501

        get recipe execution progress  in the data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param data_set_node_id: The data set node id. (required)
        :type data_set_node_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExecutionProgressResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "data_set_id",
            "transformation_graph_version_number",
            "data_set_node_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recipe_execution_progress" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        if _params["transformation_graph_version_number"] is not None:
            _path_params["transformation-graph-version-number"] = _params[
                "transformation_graph_version_number"
            ]

        if _params["data_set_node_id"] is not None:
            _path_params["data-set-node-id"] = _params["data_set_node_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ExecutionProgressResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}/transformation-graphs/{transformation-graph-version-number}/nodes/{data-set-node-id}/execution-progress",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def is_data_set_name_available(
        self,
        name: Annotated[StrictStr, Field(..., description="The name of the data set")],
        **kwargs,
    ) -> bool:  # noqa: E501
        """is_data_set_name_available  # noqa: E501

        Check if a data set name is available  # noqa: E501

        :param name: The name of the data set (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bool
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the is_data_set_name_available_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.is_data_set_name_available_with_http_info(name, **kwargs)  # noqa: E501

    @validate_arguments
    def is_data_set_name_available_with_http_info(
        self,
        name: Annotated[StrictStr, Field(..., description="The name of the data set")],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """is_data_set_name_available  # noqa: E501

        Check if a data set name is available  # noqa: E501

        :param name: The name of the data set (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bool, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method is_data_set_name_available" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["name"] is not None:
            _path_params["name"] = _params["name"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "bool",
        }

        return self.api_client.call_api(
            "/v1/data-set-utils/is-name-available/{name}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def is_recipe_node_name_available(
        self,
        name: Annotated[
            StrictStr, Field(..., description="The name of the recipe node")
        ],
        data_set_data_table_id: Annotated[
            StrictInt,
            Field(..., description="The id of the data table in the data set"),
        ],
        **kwargs,
    ) -> bool:  # noqa: E501
        """is_recipe_node_name_available  # noqa: E501

        Check if a recipe node name is available  # noqa: E501

        :param name: The name of the recipe node (required)
        :type name: str
        :param data_set_data_table_id: The id of the data table in the data set (required)
        :type data_set_data_table_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bool
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the is_recipe_node_name_available_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.is_recipe_node_name_available_with_http_info(
            name, data_set_data_table_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def is_recipe_node_name_available_with_http_info(
        self,
        name: Annotated[
            StrictStr, Field(..., description="The name of the recipe node")
        ],
        data_set_data_table_id: Annotated[
            StrictInt,
            Field(..., description="The id of the data table in the data set"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """is_recipe_node_name_available  # noqa: E501

        Check if a recipe node name is available  # noqa: E501

        :param name: The name of the recipe node (required)
        :type name: str
        :param data_set_data_table_id: The id of the data table in the data set (required)
        :type data_set_data_table_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bool, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["name", "data_set_data_table_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method is_recipe_node_name_available" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["name"] is not None:
            _path_params["name"] = _params["name"]

        if _params["data_set_data_table_id"] is not None:
            _path_params["data-set-data-table-id"] = _params["data_set_data_table_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "bool",
        }

        return self.api_client.call_api(
            "/v1/recipe-utils/is-name-available/{name}/{data-set-data-table-id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_data_sets(self, **kwargs) -> List[DataSetResponse]:  # noqa: E501
        """list_data_sets  # noqa: E501

        Lists of all data sets  # noqa: E501

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DataSetResponse]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_data_sets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_data_sets_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def list_data_sets_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """list_data_sets  # noqa: E501

        Lists of all data sets  # noqa: E501

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DataSetResponse], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = []
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_data_sets" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "List[DataSetResponse]",
        }

        return self.api_client.call_api(
            "/v1/data-sets",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_transformation_graphs(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        **kwargs,
    ) -> List[TransformationGraphResponse]:  # noqa: E501
        """list_transformation_graphs  # noqa: E501

        Gets all transformation graphs of a data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[TransformationGraphResponse]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_transformation_graphs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_transformation_graphs_with_http_info(data_set_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_transformation_graphs_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """list_transformation_graphs  # noqa: E501

        Gets all transformation graphs of a data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[TransformationGraphResponse], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["data_set_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transformation_graphs" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "List[TransformationGraphResponse]",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}/transformation-graphs",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_data_set(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        update_data_set_request: Annotated[
            UpdateDataSetRequest, Field(..., description="Update DataSet Request")
        ],
        **kwargs,
    ) -> DataSetResponse:  # noqa: E501
        """update_data_set  # noqa: E501

        Updates a data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param update_data_set_request: Update DataSet Request (required)
        :type update_data_set_request: UpdateDataSetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DataSetResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the update_data_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_data_set_with_http_info(
            data_set_id, update_data_set_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_data_set_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        update_data_set_request: Annotated[
            UpdateDataSetRequest, Field(..., description="Update DataSet Request")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """update_data_set  # noqa: E501

        Updates a data set.  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param update_data_set_request: Update DataSet Request (required)
        :type update_data_set_request: UpdateDataSetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DataSetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["data_set_id", "update_data_set_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_data_set" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["update_data_set_request"] is not None:
            _body_params = _params["update_data_set_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "DataSetResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_data_set_node_in_transformation_graph(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        data_set_node_id: Annotated[
            StrictInt, Field(..., description="The data set node id.")
        ],
        update_data_set_node_request: Annotated[
            UpdateDataSetNodeRequest,
            Field(..., description="Update Data Set Node Request"),
        ],
        **kwargs,
    ) -> DataSetNodeResponse:  # noqa: E501
        """update_data_set_node_in_transformation_graph  # noqa: E501

        Updates a node (recipe or dataTable) in a transformation graph  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param data_set_node_id: The data set node id. (required)
        :type data_set_node_id: int
        :param update_data_set_node_request: Update Data Set Node Request (required)
        :type update_data_set_node_request: UpdateDataSetNodeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DataSetNodeResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the update_data_set_node_in_transformation_graph_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_data_set_node_in_transformation_graph_with_http_info(
            data_set_id,
            transformation_graph_version_number,
            data_set_node_id,
            update_data_set_node_request,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def update_data_set_node_in_transformation_graph_with_http_info(
        self,
        data_set_id: Annotated[StrictInt, Field(..., description="The data set id.")],
        transformation_graph_version_number: Annotated[
            StrictInt, Field(..., description="The transformation graph number.")
        ],
        data_set_node_id: Annotated[
            StrictInt, Field(..., description="The data set node id.")
        ],
        update_data_set_node_request: Annotated[
            UpdateDataSetNodeRequest,
            Field(..., description="Update Data Set Node Request"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """update_data_set_node_in_transformation_graph  # noqa: E501

        Updates a node (recipe or dataTable) in a transformation graph  # noqa: E501

        :param data_set_id: The data set id. (required)
        :type data_set_id: int
        :param transformation_graph_version_number: The transformation graph number. (required)
        :type transformation_graph_version_number: int
        :param data_set_node_id: The data set node id. (required)
        :type data_set_node_id: int
        :param update_data_set_node_request: Update Data Set Node Request (required)
        :type update_data_set_node_request: UpdateDataSetNodeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DataSetNodeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "data_set_id",
            "transformation_graph_version_number",
            "data_set_node_id",
            "update_data_set_node_request",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_data_set_node_in_transformation_graph" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["data_set_id"] is not None:
            _path_params["data-set-id"] = _params["data_set_id"]

        if _params["transformation_graph_version_number"] is not None:
            _path_params["transformation-graph-version-number"] = _params[
                "transformation_graph_version_number"
            ]

        if _params["data_set_node_id"] is not None:
            _path_params["data-set-node-id"] = _params["data_set_node_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["update_data_set_node_request"] is not None:
            _body_params = _params["update_data_set_node_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/problem+json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "DataSetNodeResponse",
        }

        return self.api_client.call_api(
            "/v1/data-sets/{data-set-id}/transformation-graphs/{transformation-graph-version-number}/nodes/{data-set-node-id}",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
