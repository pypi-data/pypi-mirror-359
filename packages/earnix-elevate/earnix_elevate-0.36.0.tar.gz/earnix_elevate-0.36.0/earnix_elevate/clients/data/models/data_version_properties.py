# coding: utf-8

"""
Earnix DataService API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic.v1 import BaseModel, Field, StrictInt

from earnix_elevate.clients.data.models.data_version_metadata_response import (
    DataVersionMetadataResponse,
)
from earnix_elevate.clients.data.models.data_version_status_response import (
    DataVersionStatusResponse,
)


class DataVersionProperties(BaseModel):
    """
    DataVersionProperties
    """

    data_table_id: Optional[StrictInt] = Field(default=None, alias="dataTableId")
    version_number: Optional[StrictInt] = Field(default=None, alias="versionNumber")
    status: Optional[DataVersionStatusResponse] = None
    metadata: Optional[DataVersionMetadataResponse] = None
    __properties = ["dataTableId", "versionNumber", "status", "metadata"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataVersionProperties:
        """Create an instance of DataVersionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict["metadata"] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataVersionProperties:
        """Create an instance of DataVersionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataVersionProperties.parse_obj(obj)

        _obj = DataVersionProperties.parse_obj(
            {
                "data_table_id": obj.get("dataTableId"),
                "version_number": obj.get("versionNumber"),
                "status": DataVersionStatusResponse.from_dict(obj.get("status"))
                if obj.get("status") is not None
                else None,
                "metadata": DataVersionMetadataResponse.from_dict(obj.get("metadata"))
                if obj.get("metadata") is not None
                else None,
            }
        )
        return _obj
