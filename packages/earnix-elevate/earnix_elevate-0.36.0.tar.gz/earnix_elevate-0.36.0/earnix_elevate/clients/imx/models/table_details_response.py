# coding: utf-8

"""
Earnix import export API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic.v1 import BaseModel, Field, StrictStr


class TableDetailsResponse(BaseModel):
    """
    TableDetailsResponse
    """

    name: Optional[StrictStr] = None
    database: Optional[StrictStr] = None
    var_schema: Optional[StrictStr] = Field(default=None, alias="schema")
    __properties = ["name", "database", "schema"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TableDetailsResponse:
        """Create an instance of TableDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TableDetailsResponse:
        """Create an instance of TableDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TableDetailsResponse.parse_obj(obj)

        _obj = TableDetailsResponse.parse_obj(
            {
                "name": obj.get("name"),
                "database": obj.get("database"),
                "var_schema": obj.get("schema"),
            }
        )
        return _obj
