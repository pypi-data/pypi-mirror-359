# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Users(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userid': 'int',
        'firstname': 'str',
        'lastname': 'str',
        'initials': 'str',
        'email': 'str',
        'validated': 'int',
        'valid_until': 'str',
        'archived': 'int',
        'last_login': 'str',
        'fullname': 'str',
        'orcid': 'str',
        'orgid': 'str',
        'auth_service': 'int',
        'is_sysadmin': 'int',
        'entrypoint': 'int',
        'sig_pubkey': 'str',
        'teams': 'list[UsersTeams]'
    }

    attribute_map = {
        'userid': 'userid',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'initials': 'initials',
        'email': 'email',
        'validated': 'validated',
        'valid_until': 'valid_until',
        'archived': 'archived',
        'last_login': 'last_login',
        'fullname': 'fullname',
        'orcid': 'orcid',
        'orgid': 'orgid',
        'auth_service': 'auth_service',
        'is_sysadmin': 'is_sysadmin',
        'entrypoint': 'entrypoint',
        'sig_pubkey': 'sig_pubkey',
        'teams': 'teams'
    }

    def __init__(self, userid=None, firstname=None, lastname=None, initials=None, email=None, validated=None, valid_until=None, archived=None, last_login=None, fullname=None, orcid=None, orgid=None, auth_service=None, is_sysadmin=None, entrypoint=None, sig_pubkey=None, teams=None):  # noqa: E501
        """Users - a model defined in Swagger"""  # noqa: E501
        self._userid = None
        self._firstname = None
        self._lastname = None
        self._initials = None
        self._email = None
        self._validated = None
        self._valid_until = None
        self._archived = None
        self._last_login = None
        self._fullname = None
        self._orcid = None
        self._orgid = None
        self._auth_service = None
        self._is_sysadmin = None
        self._entrypoint = None
        self._sig_pubkey = None
        self._teams = None
        self.discriminator = None
        if userid is not None:
            self.userid = userid
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if initials is not None:
            self.initials = initials
        if email is not None:
            self.email = email
        if validated is not None:
            self.validated = validated
        if valid_until is not None:
            self.valid_until = valid_until
        if archived is not None:
            self.archived = archived
        if last_login is not None:
            self.last_login = last_login
        if fullname is not None:
            self.fullname = fullname
        if orcid is not None:
            self.orcid = orcid
        if orgid is not None:
            self.orgid = orgid
        if auth_service is not None:
            self.auth_service = auth_service
        if is_sysadmin is not None:
            self.is_sysadmin = is_sysadmin
        if entrypoint is not None:
            self.entrypoint = entrypoint
        if sig_pubkey is not None:
            self.sig_pubkey = sig_pubkey
        if teams is not None:
            self.teams = teams

    @property
    def userid(self):
        """Gets the userid of this Users.  # noqa: E501


        :return: The userid of this Users.  # noqa: E501
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Users.


        :param userid: The userid of this Users.  # noqa: E501
        :type: int
        """

        self._userid = userid

    @property
    def firstname(self):
        """Gets the firstname of this Users.  # noqa: E501


        :return: The firstname of this Users.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this Users.


        :param firstname: The firstname of this Users.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this Users.  # noqa: E501


        :return: The lastname of this Users.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this Users.


        :param lastname: The lastname of this Users.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def initials(self):
        """Gets the initials of this Users.  # noqa: E501


        :return: The initials of this Users.  # noqa: E501
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this Users.


        :param initials: The initials of this Users.  # noqa: E501
        :type: str
        """

        self._initials = initials

    @property
    def email(self):
        """Gets the email of this Users.  # noqa: E501


        :return: The email of this Users.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Users.


        :param email: The email of this Users.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def validated(self):
        """Gets the validated of this Users.  # noqa: E501


        :return: The validated of this Users.  # noqa: E501
        :rtype: int
        """
        return self._validated

    @validated.setter
    def validated(self, validated):
        """Sets the validated of this Users.


        :param validated: The validated of this Users.  # noqa: E501
        :type: int
        """

        self._validated = validated

    @property
    def valid_until(self):
        """Gets the valid_until of this Users.  # noqa: E501


        :return: The valid_until of this Users.  # noqa: E501
        :rtype: str
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this Users.


        :param valid_until: The valid_until of this Users.  # noqa: E501
        :type: str
        """

        self._valid_until = valid_until

    @property
    def archived(self):
        """Gets the archived of this Users.  # noqa: E501


        :return: The archived of this Users.  # noqa: E501
        :rtype: int
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Users.


        :param archived: The archived of this Users.  # noqa: E501
        :type: int
        """

        self._archived = archived

    @property
    def last_login(self):
        """Gets the last_login of this Users.  # noqa: E501


        :return: The last_login of this Users.  # noqa: E501
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Users.


        :param last_login: The last_login of this Users.  # noqa: E501
        :type: str
        """

        self._last_login = last_login

    @property
    def fullname(self):
        """Gets the fullname of this Users.  # noqa: E501


        :return: The fullname of this Users.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this Users.


        :param fullname: The fullname of this Users.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def orcid(self):
        """Gets the orcid of this Users.  # noqa: E501


        :return: The orcid of this Users.  # noqa: E501
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """Sets the orcid of this Users.


        :param orcid: The orcid of this Users.  # noqa: E501
        :type: str
        """

        self._orcid = orcid

    @property
    def orgid(self):
        """Gets the orgid of this Users.  # noqa: E501


        :return: The orgid of this Users.  # noqa: E501
        :rtype: str
        """
        return self._orgid

    @orgid.setter
    def orgid(self, orgid):
        """Sets the orgid of this Users.


        :param orgid: The orgid of this Users.  # noqa: E501
        :type: str
        """

        self._orgid = orgid

    @property
    def auth_service(self):
        """Gets the auth_service of this Users.  # noqa: E501


        :return: The auth_service of this Users.  # noqa: E501
        :rtype: int
        """
        return self._auth_service

    @auth_service.setter
    def auth_service(self, auth_service):
        """Sets the auth_service of this Users.


        :param auth_service: The auth_service of this Users.  # noqa: E501
        :type: int
        """

        self._auth_service = auth_service

    @property
    def is_sysadmin(self):
        """Gets the is_sysadmin of this Users.  # noqa: E501


        :return: The is_sysadmin of this Users.  # noqa: E501
        :rtype: int
        """
        return self._is_sysadmin

    @is_sysadmin.setter
    def is_sysadmin(self, is_sysadmin):
        """Sets the is_sysadmin of this Users.


        :param is_sysadmin: The is_sysadmin of this Users.  # noqa: E501
        :type: int
        """

        self._is_sysadmin = is_sysadmin

    @property
    def entrypoint(self):
        """Gets the entrypoint of this Users.  # noqa: E501


        :return: The entrypoint of this Users.  # noqa: E501
        :rtype: int
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this Users.


        :param entrypoint: The entrypoint of this Users.  # noqa: E501
        :type: int
        """

        self._entrypoint = entrypoint

    @property
    def sig_pubkey(self):
        """Gets the sig_pubkey of this Users.  # noqa: E501

        Public signature key (minisign format)  # noqa: E501

        :return: The sig_pubkey of this Users.  # noqa: E501
        :rtype: str
        """
        return self._sig_pubkey

    @sig_pubkey.setter
    def sig_pubkey(self, sig_pubkey):
        """Sets the sig_pubkey of this Users.

        Public signature key (minisign format)  # noqa: E501

        :param sig_pubkey: The sig_pubkey of this Users.  # noqa: E501
        :type: str
        """

        self._sig_pubkey = sig_pubkey

    @property
    def teams(self):
        """Gets the teams of this Users.  # noqa: E501


        :return: The teams of this Users.  # noqa: E501
        :rtype: list[UsersTeams]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this Users.


        :param teams: The teams of this Users.  # noqa: E501
        :type: list[UsersTeams]
        """

        self._teams = teams

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Users, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Users):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
