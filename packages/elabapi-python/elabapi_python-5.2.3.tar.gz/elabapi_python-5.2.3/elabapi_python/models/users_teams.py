# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersTeams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'usergroup': 'int',
        'is_owner': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'usergroup': 'usergroup',
        'is_owner': 'is_owner'
    }

    def __init__(self, id=None, name=None, usergroup=None, is_owner=None):  # noqa: E501
        """UsersTeams - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._usergroup = None
        self._is_owner = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if usergroup is not None:
            self.usergroup = usergroup
        if is_owner is not None:
            self.is_owner = is_owner

    @property
    def id(self):
        """Gets the id of this UsersTeams.  # noqa: E501


        :return: The id of this UsersTeams.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UsersTeams.


        :param id: The id of this UsersTeams.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UsersTeams.  # noqa: E501


        :return: The name of this UsersTeams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UsersTeams.


        :param name: The name of this UsersTeams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def usergroup(self):
        """Gets the usergroup of this UsersTeams.  # noqa: E501


        :return: The usergroup of this UsersTeams.  # noqa: E501
        :rtype: int
        """
        return self._usergroup

    @usergroup.setter
    def usergroup(self, usergroup):
        """Sets the usergroup of this UsersTeams.


        :param usergroup: The usergroup of this UsersTeams.  # noqa: E501
        :type: int
        """

        self._usergroup = usergroup

    @property
    def is_owner(self):
        """Gets the is_owner of this UsersTeams.  # noqa: E501


        :return: The is_owner of this UsersTeams.  # noqa: E501
        :rtype: int
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this UsersTeams.


        :param is_owner: The is_owner of this UsersTeams.  # noqa: E501
        :type: int
        """

        self._is_owner = is_owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersTeams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersTeams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
