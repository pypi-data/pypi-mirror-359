---
image: ubuntu:focal

stages:
  - build
  - test
  - publish

variables:
  GIT_STRATEGY: clone
  # Default Python version, for build stage(s). Should be included in test matrix.
  PYTHON_VERSION: "3.10.17"

.before_script_template: &build_module
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update && apt-get upgrade -y
    - apt-get install -y --no-install-recommends --reinstall ca-certificates
    - apt-get install -y --no-install-recommends git
    - git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    # Install pyenv dependencies, esp. for building python, and set up pyenv.
    - apt-get install -y --no-install-recommends build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev curl libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev pandoc
    - export PYENV_ROOT="$HOME/.pyenv"
    - command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    - eval "$(pyenv init -)"
    - pyenv install ${PYTHON_VERSION}
    - pyenv global ${PYTHON_VERSION}
    - python --version
    # Install and activate venv.
    - python -m venv ../venv
    - . ../venv/bin/activate
    # Install/upgrade build tools.
    - export SETUPTOOLS_SCM_DEBUG=1
    - python -m pip install --upgrade --progress-bar off pip setuptools wheel build
    - python -m pip --version
    # Install package.
    - python -m pip install --progress-bar off .[test]
    - python -m pip list
    - python -m build
    - python -m check_manifest

build-branch:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH
  <<: *build_module
  script: echo Build artifact created. Expires in 1 week.
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
    when: always
    paths:
      - dist
    expire_in: 1 week

build-tag:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/' # Enforce semver in tag.
  <<: *build_module
  script: echo Build artifact created. Expires never.
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_TAG
    when: always
    paths:
      - dist
    expire_in: never

docs-branch:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH
  <<: *build_module
  script:
    - echo Creating documentation artifact that expires in 1 week.
    - apt-get install -y --no-install-recommends zip
    - cd docs
    - mkdir -p dist/html
    - mkdir -p dist/xml
    - make clean
    - make html
    - zip -r  dist/html/${CI_PROJECT_NAME}-docs-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}.zip build/*
    - make clean
    - make xml
    - zip -r dist/xml/${CI_PROJECT_NAME}-docs-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}.zip build/*
  artifacts:
    name: ${CI_PROJECT_NAME}-docs-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}
    when: always
    paths:
      - docs/dist
    expire_in: 1 week

docs-tag:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/' # Enforce semver in tag.
  <<: *build_module
  script:
    - echo Creating documentation artifact that expires never.
    - apt-get install -y --no-install-recommends zip
    - cd docs
    - mkdir -p dist/html
    - mkdir -p dist/xml
    - make clean
    - make html
    - zip -r  dist/html/${CI_PROJECT_NAME}-docs-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}.zip build/*
    - make clean
    - make xml
    - zip -r dist/xml/${CI_PROJECT_NAME}-docs-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}.zip build/*
  artifacts:
    name: ${CI_PROJECT_NAME}-docs-${CI_COMMIT_TAG}
    when: always
    paths:
      - docs/dist
    expire_in: never

code-check-semgrep:
  stage: test
  allow_failure: true
  image: returntocorp/semgrep-agent:v1
  variables:
    SEMGREP_RULES: >-
      p/security-audit
      p/secrets
  script: semgrep-agent

code-check-trivy:
  stage: test
  <<: *build_module
  script:
    - export TRIVY_VER=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - curl -L -o trivy.tgz https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VER}/trivy_${TRIVY_VER}_Linux-64bit.tar.gz
    - tar xzf trivy.tgz
    - mv trivy /usr/local/bin/
    - trivy fs --exit-code 1 .

code-check-megalinter:
  stage: test
  allow_failure: true
  image: oxsecurity/megalinter:v7
  script:
    - ["/bin/bash /entrypoint.sh"]
  variables:
    DEFAULT_WORKSPACE: $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - megalinter-reports
    expire_in: 1 week

publish-prod-module:
  stage: publish
  only:
    - tags
  when: manual
  allow_failure: false
  <<: *build_module
  script:
    - pip3 install twine==3.7.1
    - twine upload -u ${PUBLIC_PYPI_USERNAME} -p ${PUBLIC_PYPI_PASSWORD} dist/*
  cache:
    key: ${CI_PIPELINE_ID}
    paths:
      - docs/build
