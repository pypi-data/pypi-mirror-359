# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from emucore_direct import emucore_pb2 as emucore__direct_dot_emucore__pb2


class EmuCoreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.reservoir_reset = channel.unary_unary(
                '/EmuCore.EmuCoreService/reservoir_reset',
                request_serializer=emucore__direct_dot_emucore__pb2.reset_message.SerializeToString,
                response_deserializer=emucore__direct_dot_emucore__pb2.status_message.FromString,
                )
        self.rc_config = channel.unary_unary(
                '/EmuCore.EmuCoreService/rc_config',
                request_serializer=emucore__direct_dot_emucore__pb2.rc_config_message.SerializeToString,
                response_deserializer=emucore__direct_dot_emucore__pb2.status_message.FromString,
                )
        self.rc_run = channel.unary_unary(
                '/EmuCore.EmuCoreService/rc_run',
                request_serializer=emucore__direct_dot_emucore__pb2.rc_run_message.SerializeToString,
                response_deserializer=emucore__direct_dot_emucore__pb2.rc_response_message.FromString,
                )
        self.acquire_lock = channel.unary_unary(
                '/EmuCore.EmuCoreService/acquire_lock',
                request_serializer=emucore__direct_dot_emucore__pb2.empty_message.SerializeToString,
                response_deserializer=emucore__direct_dot_emucore__pb2.lock_output.FromString,
                )
        self.release_lock = channel.unary_unary(
                '/EmuCore.EmuCoreService/release_lock',
                request_serializer=emucore__direct_dot_emucore__pb2.lock_message.SerializeToString,
                response_deserializer=emucore__direct_dot_emucore__pb2.status_message.FromString,
                )
        self.system_info = channel.unary_unary(
                '/EmuCore.EmuCoreService/system_info',
                request_serializer=emucore__direct_dot_emucore__pb2.empty_message.SerializeToString,
                response_deserializer=emucore__direct_dot_emucore__pb2.system_info_message.FromString,
                )
        self.check_lock = channel.unary_unary(
                '/EmuCore.EmuCoreService/check_lock',
                request_serializer=emucore__direct_dot_emucore__pb2.lock_message.SerializeToString,
                response_deserializer=emucore__direct_dot_emucore__pb2.status_message.FromString,
                )


class EmuCoreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def reservoir_reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rc_config(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rc_run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def acquire_lock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def release_lock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def system_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_lock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmuCoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'reservoir_reset': grpc.unary_unary_rpc_method_handler(
                    servicer.reservoir_reset,
                    request_deserializer=emucore__direct_dot_emucore__pb2.reset_message.FromString,
                    response_serializer=emucore__direct_dot_emucore__pb2.status_message.SerializeToString,
            ),
            'rc_config': grpc.unary_unary_rpc_method_handler(
                    servicer.rc_config,
                    request_deserializer=emucore__direct_dot_emucore__pb2.rc_config_message.FromString,
                    response_serializer=emucore__direct_dot_emucore__pb2.status_message.SerializeToString,
            ),
            'rc_run': grpc.unary_unary_rpc_method_handler(
                    servicer.rc_run,
                    request_deserializer=emucore__direct_dot_emucore__pb2.rc_run_message.FromString,
                    response_serializer=emucore__direct_dot_emucore__pb2.rc_response_message.SerializeToString,
            ),
            'acquire_lock': grpc.unary_unary_rpc_method_handler(
                    servicer.acquire_lock,
                    request_deserializer=emucore__direct_dot_emucore__pb2.empty_message.FromString,
                    response_serializer=emucore__direct_dot_emucore__pb2.lock_output.SerializeToString,
            ),
            'release_lock': grpc.unary_unary_rpc_method_handler(
                    servicer.release_lock,
                    request_deserializer=emucore__direct_dot_emucore__pb2.lock_message.FromString,
                    response_serializer=emucore__direct_dot_emucore__pb2.status_message.SerializeToString,
            ),
            'system_info': grpc.unary_unary_rpc_method_handler(
                    servicer.system_info,
                    request_deserializer=emucore__direct_dot_emucore__pb2.empty_message.FromString,
                    response_serializer=emucore__direct_dot_emucore__pb2.system_info_message.SerializeToString,
            ),
            'check_lock': grpc.unary_unary_rpc_method_handler(
                    servicer.check_lock,
                    request_deserializer=emucore__direct_dot_emucore__pb2.lock_message.FromString,
                    response_serializer=emucore__direct_dot_emucore__pb2.status_message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EmuCore.EmuCoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmuCoreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def reservoir_reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmuCore.EmuCoreService/reservoir_reset',
            emucore__direct_dot_emucore__pb2.reset_message.SerializeToString,
            emucore__direct_dot_emucore__pb2.status_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rc_config(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmuCore.EmuCoreService/rc_config',
            emucore__direct_dot_emucore__pb2.rc_config_message.SerializeToString,
            emucore__direct_dot_emucore__pb2.status_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rc_run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmuCore.EmuCoreService/rc_run',
            emucore__direct_dot_emucore__pb2.rc_run_message.SerializeToString,
            emucore__direct_dot_emucore__pb2.rc_response_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def acquire_lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmuCore.EmuCoreService/acquire_lock',
            emucore__direct_dot_emucore__pb2.empty_message.SerializeToString,
            emucore__direct_dot_emucore__pb2.lock_output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def release_lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmuCore.EmuCoreService/release_lock',
            emucore__direct_dot_emucore__pb2.lock_message.SerializeToString,
            emucore__direct_dot_emucore__pb2.status_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def system_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmuCore.EmuCoreService/system_info',
            emucore__direct_dot_emucore__pb2.empty_message.SerializeToString,
            emucore__direct_dot_emucore__pb2.system_info_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmuCore.EmuCoreService/check_lock',
            emucore__direct_dot_emucore__pb2.lock_message.SerializeToString,
            emucore__direct_dot_emucore__pb2.status_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
