[tool.poetry]
name = "expliot"
version = "0.11.1"
description = "IoT security testing and exploitation framework"
license = "AGPLv3+"

authors = [
    "The EXPLIoT authors <info@expliot.io>"
]

readme = ["README.md"]

keywords = ["IoT", "IIoT", "security", "hacking", "hardware", "expliot", "exploit framework"]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Security",
    "Topic :: Software Development :: Embedded Systems",
    "Topic :: Software Development :: Testing",
]

[tool.poetry.urls]
homepage = "https://expliot.io"
repository = "https://gitlab.com/expliot_framework/expliot"
"Issues" = "https://gitlab.com/expliot_framework/expliot/issues/new?issue%5Bassignee_id%5D=&issue%5Bmilestone_id%5D="
documentation = "https://expliot.readthedocs.io/"
"Bug Tracker" = "https://github.com/python-poetry/poetry/issues"
"Online shop" = "https://expliot.io/collections/frontpage"
"Discord chat rooms" = "https://discord.gg/AafG232"

[tool.poetry.scripts]
expliot = "expliot.expliot:EfCli.main"

[tool.poetry.dependencies]
python = "^3.10"
aiocoap = "^0.4.9"
awsiotpythonsdk = "^1.5.4"
bluepy = "^1.3.0"
cmd2 = "^2.4.3"
cryptography = "^42.0.7"
jsonschema = "^4.22.0"
paho-mqtt = "<=2.0"
pyi2cflash = "^0.2.2"
pymodbus = "^3.6.9"
pynetdicom = "^2.0.2"
pyparsing = "^3.1.2"
pyserial = "^3.5"
pyspiflash = "^0.6.3"
python-can = "^4.4.2"
python-magic = "^0.4.27"
upnpy = "^1.1.8"
xmltodict = "^0.13.0"
zeroconf = "<=0.40"
distro = "^1.9.0"
pyudev = "^0.24.3"
setuptools = "^70.0.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.1"
black = "^24.4.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 70
include = [ "*.py" ]
exclude = [ "docs" ]
indent-width = 4

[tool.ruff.lint]
select = [
    "A001", # Variable {name} is shadowing a Python builtin
    "B002", # Python does not support the unary prefix increment
    "B005", # Using .strip() with multi-character strings is misleading
    "B014", # Exception handler with duplicate exception
    "B015", # Pointless comparison. Did you mean to assign a value? Otherwise, prepend assert or remove it.
    "B017", # pytest.raises(BaseException) should be considered evil
    "B018", # Found useless attribute access. Either assign it to a variable or remove it.
    "B023", # Function definition does not bind loop variable {name}
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B032", # Possible unintentional type annotation (using :). Did you mean to assign (using =)?
    "B904", # Use raise from to specify exception cause
    "B905", # zip() without an explicit strict= parameter
    "C", # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "D", # docstrings
    "DTZ003", # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004", # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E", # pycodestyle
    "F", # pyflakes/autoflake
    "FLY", # flynt
    "G", # flake8-logging-format
    "I", # isort
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "ICN001", # import concentions; {name} should be imported as {asname}
    "LOG", # flake8-logging
    "N804", # First argument of a class method should be named cls
    "N805", # First argument of a method should be named self
    "N815", # Variable {name} in class scope should not be mixedCase
    "PERF", # Perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF005", # Consider iterable unpacking instead of concatenation
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "RUF013", # PEP 484 prohibits implicit Optional
    "RUF018", # Avoid assignment expressions in assert statements
    "RUF019", # Unnecessary key check before dictionary access
    "RUF100", # Unused `noqa` directive
    "S102", # Use of exec detected
    "S103", # bad-file-permissions
    "S108", # hardcoded-temp-file
    "S306", # suspicious-mktemp-usage
    "S307", # suspicious-eval-usage
    "S313", # suspicious-xmlc-element-tree-usage
    "S314", # suspicious-xml-element-tree-usage
    "S315", # suspicious-xml-expat-reader-usage
    "S316", # suspicious-xml-expat-builder-usage
    "S317", # suspicious-xml-sax-usage
    "S318", # suspicious-xml-mini-dom-usage
    "S319", # suspicious-xml-pull-dom-usage
    "S320", # suspicious-xmle-tree-usage
    "S601", # paramiko-call
    "S602", # subprocess-popen-with-shell-equals-true
    "S604", # call-with-shell-equals-true
    "S608", # hardcoded-sql-expression
    "S609", # unix-command-wildcard-injection
    "SIM", # flake8-simplify
    "SLOT", # flake8-slots
    "T100", # Trace found: {name} used
    "T20", # flake8-print
    "TID251", # Banned imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle
]

ignore = [
    "B007", # Loop control variable {name} not used within loop body
    "C408", # Unnecessary `dict` call
    "C901", # Element is too complex
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D401", # First line of docstring should be in imperative mood
    "D417", # Missing argument description in the docstring
    "D406", # Section name should end with a newline
    "D407", # Section name underlining
    "E501", # line too long
    "E721", # Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks (temp ignore XXX fix it) 
    "E722", # Do not use bare `except`
    "F401", # Imported but unused
    "PERF402",
    "PLC1901", # {existing} can be simplified to {replacement} as an empty string is falsey; too many false positives
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "PT004", # Fixture {fixture} does not return anything, add leading underscore
    "PT011", # pytest.raises({exception}) is too broad, set the `match` parameter or use a more specific exception
    "PT012", # `pytest.raises()` block should contain a single simple statement
    "PT018", # Assertion should be broken down into multiple parts
    "PYI024",
    "RET503",
    "RET504", # Unnecessary assignment
    "RUF001", # String contains ambiguous unicode character.
    "RUF002", # Docstring contains ambiguous unicode character.
    "RUF003", # Comment contains ambiguous unicode character.
    "RUF015", # Prefer next(...) over single element slice
    "SIM102", # Use a single if statement instead of nested if statements
    "SIM103", # Return the condition directly (temp ignore. XXX fix)  
    "SIM108", # Use ternary operator {contents} instead of if-else-block
    "SIM115", # Use context handler for opening files
    "SIM118",
    "SLOT002", # Subclasses
    "T201", # print
    "TRY002", # Exception
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY201", # Use `raise` without specifying exception name
    "TRY301", # Abstract `raise` to an inner function
    "TRY400", # Use `logging.exception` instead of `logging.error`
    # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    # Ignored due to incompatible with mypy: https://github.com/python/mypy/issues/15238
    "UP040", # Checks for use of TypeAlias annotation for declaring type aliases.

    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",

    # Disabled because ruff does not understand type of __all__ generated by a function
    "PLE0605",
    "PIE794",
    "PLR1714",
]
