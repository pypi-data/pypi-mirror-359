name: Get Version

on:
  workflow_call:
    inputs:
      branch-name:
        description: "The branch to get the version from"
        required: true
        type: string
      file-path:
        description: "The path to the file containing the version information"
        required: true
        type: string
    outputs:
      version:
        description: "The version extracted from the specified file"
        value: ${{ jobs.extract_version.outputs.version }}

jobs:
  extract_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Clone specific branch and checkout specified file
        run: |
          git clone -b ${{ inputs.branch-name }} --no-checkout https://github.com/${{ github.repository }}.git temp_repo
          cd temp_repo
          # Check if the file exists in the branch using git ls-tree
          if git ls-tree -r --name-only HEAD | grep -q "${{ inputs.file-path }}"; then
            git restore --staged ${{ inputs.file-path }}
            git checkout -f ${{ inputs.file-path }}
          else
            echo "Warning: File ${{ inputs.file-path }} not found in branch ${{ inputs.branch-name }}."
            mkdir -p "$(dirname "${{ inputs.file-path }}")"
            echo '__version__ = "0.0.0"' > ${{ inputs.file-path }}
            echo "Created a temporary file with version 0.0.0 for the next step."
          fi
        shell: bash

      - name: Extract version from specified file
        id: get_version
        run: |
          version_line=$(grep "__version__ =" temp_repo/${{ inputs.file-path }} || true)
          if [[ -z "$version_line" ]]; then
            echo "Error: Version line not found in file: ${{ inputs.file-path }}" >&2
            exit 1
          fi
          version=$(echo "$version_line" | cut -d '"' -f 2)
          if [[ -z "$version" || ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Extracted version is invalid: $version" >&2
            exit 1
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
