# fastpluggy/core/view_builer/components/grid.py
from typing import List, Optional, Union, Dict, Any

from fastpluggy.core.view_builer.components import AbstractComponentView, WidgetRender


class GridItem(WidgetRender):
    """
    Represents a single item in the grid with responsive column sizing.
    """

    def __init__(
            self,
            component: AbstractComponentView,
            col_xs: Optional[int] = None,
            col_sm: Optional[int] = None,
            col_md: Optional[int] = None,
            col_lg: Optional[int] = None,
            col_xl: Optional[int] = None,
            col_xxl: Optional[int] = None,
            offset_xs: Optional[int] = None,
            offset_sm: Optional[int] = None,
            offset_md: Optional[int] = None,
            offset_lg: Optional[int] = None,
            offset_xl: Optional[int] = None,
            offset_xxl: Optional[int] = None,
            css_class: Optional[str] = None,
            order: Optional[int] = None,
            **kwargs
    ):
        """
        Initialize a grid item.

        Args:
            component: The component to render in this grid cell
            col_xs/sm/md/lg/xl/xxl: Column width for different breakpoints (1-12)
            offset_xs/sm/md/lg/xl/xxl: Column offset for different breakpoints
            css_class: Additional CSS classes for the column
            order: Bootstrap order class (1-5)
        """
        self.component = component
        self.col_xs = col_xs
        self.col_sm = col_sm
        self.col_md = col_md
        self.col_lg = col_lg
        self.col_xl = col_xl
        self.col_xxl = col_xxl
        self.offset_xs = offset_xs
        self.offset_sm = offset_sm
        self.offset_md = offset_md
        self.offset_lg = offset_lg
        self.offset_xl = offset_xl
        self.offset_xxl = offset_xxl
        self.css_class = css_class
        self.order = order

    def get_column_classes(self) -> str:
        """Generate Bootstrap column classes for this item."""
        classes = []

        # Column sizes
        if self.col_xs:
            classes.append(f"col-{self.col_xs}")
        if self.col_sm:
            classes.append(f"col-sm-{self.col_sm}")
        if self.col_md:
            classes.append(f"col-md-{self.col_md}")
        if self.col_lg:
            classes.append(f"col-lg-{self.col_lg}")
        if self.col_xl:
            classes.append(f"col-xl-{self.col_xl}")
        if self.col_xxl:
            classes.append(f"col-xxl-{self.col_xxl}")

        # Offsets
        if self.offset_xs:
            classes.append(f"offset-{self.offset_xs}")
        if self.offset_sm:
            classes.append(f"offset-sm-{self.offset_sm}")
        if self.offset_md:
            classes.append(f"offset-md-{self.offset_md}")
        if self.offset_lg:
            classes.append(f"offset-lg-{self.offset_lg}")
        if self.offset_xl:
            classes.append(f"offset-xl-{self.offset_xl}")
        if self.offset_xxl:
            classes.append(f"offset-xxl-{self.offset_xxl}")

        # Order
        if self.order:
            classes.append(f"order-{self.order}")

        # Custom CSS class
        if self.css_class:
            classes.append(self.css_class)

        # Default to col if no specific column class
        if not any(cls.startswith('col-') for cls in classes):
            classes.append('col')

        return " ".join(classes)


class GridView(AbstractComponentView, WidgetRender):
    """
    A flexible grid component using Bootstrap's grid system.
    Integrates with your existing ViewBuilder system.
    """
    type = "grid"
    template_name = "components/grid.html.j2"

    def __init__(
            self,
            items: Optional[List[Union[GridItem, AbstractComponentView, Dict[str, Any]]]] = None,
            title: Optional[str] = None,
            gutter: Optional[str] = None,  # 'g-0', 'g-1', 'g-2', etc.
            row_class: Optional[str] = None,
            container_class: Optional[str] = None,
            equal_height: bool = False,
            vertical_align: Optional[str] = None,  # 'start', 'center', 'end'
            horizontal_align: Optional[str] = None,  # 'start', 'center', 'end', 'around', 'between'
            responsive: bool = True,
            collapsed: bool = False,
            **kwargs
    ):
        """
        Initialize the GridView component.

        Args:
            items: List of GridItem objects, components, or dicts with component config
            title: Optional title for the grid section
            gutter: Bootstrap gutter class (g-0, g-1, g-2, etc.)
            row_class: Additional CSS classes for the row
            container_class: CSS classes for the container div
            equal_height: Whether to make all columns equal height
            vertical_align: Vertical alignment of columns
            horizontal_align: Horizontal alignment of columns
            responsive: Whether to add responsive row-cards class
            collapsed: Whether the grid should start collapsed
        """
        super().__init__(collapsed=collapsed, **kwargs)

        self.items = items or []
        self.title = title
        self.gutter = gutter
        self.row_class = row_class
        self.container_class = container_class
        self.equal_height = equal_height
        self.vertical_align = vertical_align
        self.horizontal_align = horizontal_align
        self.responsive = responsive

        # For ViewBuilder integration
        self.request = None
        self.db = None

    def process(self, **kwargs) -> None:
        """
        Process the grid items and prepare them for rendering.
        This method is called by the ViewBuilder system.
        """
        # Process items into GridItem objects
        processed_items = []

        for item in self.items:
            if isinstance(item, GridItem):
                # Process the component inside the GridItem
                component = item.component

                # Inject request and db into the component if it supports them
                if hasattr(component, "request"):
                    component.request = self.request
                if hasattr(component, "db"):
                    component.db = self.db
                if hasattr(component, "process"):
                    component.process(**kwargs)

                processed_items.append(item)

            elif isinstance(item, AbstractComponentView):
                # Inject request and db into the component
                if hasattr(item, "request"):
                    item.request = self.request
                if hasattr(item, "db"):
                    item.db = self.db
                if hasattr(item, "process"):
                    item.process(**kwargs)

                # Wrap component in default GridItem
                processed_items.append(GridItem(component=item))

            elif isinstance(item, dict):
                # Create GridItem from dict config
                component = item.pop('component')

                # Inject request and db into the component
                if hasattr(component, "request"):
                    component.request = self.request
                if hasattr(component, "db"):
                    component.db = self.db
                if hasattr(component, "process"):
                    component.process(**kwargs)

                processed_items.append(GridItem(component=component, **item))
            else:
                raise ValueError(f"Invalid grid item type: {type(item)}")

        self.processed_items = processed_items

        # Build row CSS classes
        row_classes = ["row"]

        if self.responsive:
            row_classes.append("row-cards")

        if self.gutter:
            row_classes.append(self.gutter)

        if self.equal_height:
            row_classes.append("row-deck")

        if self.vertical_align:
            row_classes.append(f"align-items-{self.vertical_align}")

        if self.horizontal_align:
            if self.horizontal_align in ['around', 'between']:
                row_classes.append(f"justify-content-{self.horizontal_align}")
            else:
                row_classes.append(f"justify-content-{self.horizontal_align}")

        if self.row_class:
            row_classes.append(self.row_class)

        self.row_css_classes = " ".join(row_classes)

        # Build container CSS classes
        container_classes = []
        if self.container_class:
            container_classes.append(self.container_class)

        self.container_css_classes = " ".join(container_classes) if container_classes else None

    def add_item(
            self,
            component: AbstractComponentView,
            col_md: int = 6,
            **grid_kwargs
    ) -> 'GridView':
        """
        Fluent interface method to add items to the grid.

        Args:
            component: Component to add
            col_md: Default medium breakpoint column size
            **grid_kwargs: Additional GridItem arguments

        Returns:
            Self for method chaining
        """
        grid_item = GridItem(component=component, col_md=col_md, **grid_kwargs)
        self.items.append(grid_item)
        return self

    @classmethod
    def create_responsive_grid(
            cls,
            components: List[AbstractComponentView],
            cols_sm: int = 1,
            cols_md: int = 2,
            cols_lg: int = 3,
            cols_xl: int = 4,
            **kwargs
    ) -> 'GridView':
        """
        Create a responsive grid with automatic column sizing.

        Args:
            components: List of components to display
            cols_sm/md/lg/xl: Number of columns at each breakpoint

        Returns:
            GridView instance
        """
        # Calculate column sizes for each breakpoint
        col_size_sm = 12 // cols_sm
        col_size_md = 12 // cols_md
        col_size_lg = 12 // cols_lg
        col_size_xl = 12 // cols_xl

        items = []
        for component in components:
            grid_item = GridItem(
                component=component,
                col_sm=col_size_sm,
                col_md=col_size_md,
                col_lg=col_size_lg,
                col_xl=col_size_xl
            )
            items.append(grid_item)

        return cls(items=items, **kwargs)

    @classmethod
    def create_dashboard_grid(cls, stats_cards: List, **kwargs) -> 'GridView':
        """
        Create a dashboard-style grid optimized for stats cards.

        Args:
            stats_cards: List of card components

        Returns:
            GridView instance optimized for dashboard layout
        """
        return cls.create_responsive_grid(
            components=stats_cards,
            cols_sm=1,
            cols_md=2,
            cols_lg=4,
            cols_xl=4,
            gutter="g-3",
            equal_height=True,
            **kwargs
        )