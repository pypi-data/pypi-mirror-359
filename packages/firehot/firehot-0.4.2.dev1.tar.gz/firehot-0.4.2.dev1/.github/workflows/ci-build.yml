name: CI Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, labeled ]

jobs:
  # Only run this workflow when:
  # - PR has "Full Build" label
  # - Push to main branch
  # - Release tag is pushed
  check_run_condition:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) || contains(github.event.pull_request.labels.*.name, 'Full Build') }}
    steps:
      - name: Check if workflow should run
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" =~ ^refs/tags/v) ]]; then
            echo "Running because push to main or tag"
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ contains(github.event.pull_request.labels.*.name, 'Full Build') }}" == "true" ]]; then
            echo "Running because PR has Full Build label"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "Skipping build workflow"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  # Run cargo tests on each target OS. We perform this logic regardless of whether
  # we are building wheels, because it's valuable as a CI check for each commit.
  cargo_test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # Even cargo tests need python/the lib built and installed, so our
      # embedded scripts can reference rust functions.
      - name: Install library
        run: uv run maturin develop --uv

      - name: Run Cargo tests
        env:
          FIREHOT_LOG_LEVEL: trace
        run: cargo test --lib --all
        timeout-minutes: 5

  # Build maturin packages for each target OS
  build_wheels:
    needs: [check_run_condition, cargo_test]
    if: ${{ needs.check_run_condition.outputs.should_run == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        target: [aarch64, x86_64]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Update version
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          pip install packaging toml
          python .github/scripts/update_version.py ${{ github.ref_name }}

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: -vv --release --out dist --interpreter ${{ matrix.python-version }}
          rust-toolchain: stable
          docker-options: -e CI -e CI_TARGET=${{ matrix.target }}
          # Already defaults to build, but we make explicit here. Any arguments should
          # be added to args above and not here - otherwise we will affect the switch()
          # condition handling of maturin-action.
          command: build
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.target }}
          path: dist/*.whl

  # Collate all wheels for PyPI upload
  publish_wheels:
    needs: build_wheels
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3
      
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
      
      - name: Merge wheel directories
        run: |
          mkdir -p wheels
          find dist -name "*.whl" -exec cp {} wheels/ \;
          mkdir -p dist_clean
          cp wheels/*.whl dist_clean/
      
      - name: Update version
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          pip install packaging toml
          python .github/scripts/update_version.py ${{ github.ref_name }}

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist_clean
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install twine
        run: pip install twine
      
      - name: Check wheel validity
        run: twine check dist_clean/*.whl dist_clean/*.tar.gz
      
      - uses: actions/upload-artifact@v4
        with:
          name: final_dist
          path: dist_clean/

      # Only upload to PyPI on tags
      - name: Upload to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist_clean/ 