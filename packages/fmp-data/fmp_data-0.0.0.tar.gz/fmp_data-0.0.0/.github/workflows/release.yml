name: Release

on:
  push:
    branches: [main]          # real release to PyPI
  pull_request:
    branches: [main]          # dry-run → Test PyPI
  workflow_dispatch:

permissions:
  contents: write             # tag / create release
  pages: write                # deploy GitHub Pages
  id-token: write             # OIDC (future trusted PyPI)

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

###############################################################################
# 1) VERIFY LABEL & CHOOSE BUMP  –- runs only on push→main
###############################################################################
jobs:
  guard-label:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.bump.outputs.bump }}

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Derive bump from PR label
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          pr_json="$(gh api "repos/${{ github.repository }}/commits/${GITHUB_SHA}/pulls" || true)"
          pr="$(jq -r '.[0].number // empty' <<<"$pr_json")"
          if [[ -z "$pr" ]]; then
            echo "::error::Commit ${GITHUB_SHA} is not part of a merged PR."
            exit 1
          fi
          labels="$(gh pr view "$pr" --json labels --jq '.labels[].name')"

          bump=""
          [[ "$labels" == *"release:patch"* ]] && bump="patch"
          [[ "$labels" == *"release:minor"* ]] && bump="minor"
          [[ "$labels" == *"release:major"* ]] && bump="major"
          echo "bump=$bump" >>"$GITHUB_OUTPUT"

          if [[ -z "$bump" || "$(grep -c 'release:' <<<"$labels")" -ne 1 ]]; then
            echo "::error::Exactly one release:* label required."
            exit 1
          fi

###############################################################################
# 2) TAG NEW VERSION  (push only)
###############################################################################
  tag-version:
    if: github.event_name == 'push'
    needs: guard-label
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}

    steps:
      - uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Create and push tag
        id: tag
        env:
          BUMP: ${{ needs.guard-label.outputs.bump }}
        shell: bash
        run: |
          set -euo pipefail
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo v0.0.0)
          IFS='.' read -r major minor patch <<<"${latest#v}"
          case "$BUMP" in
            patch) patch=$((patch+1));;
            minor) minor=$((minor+1)); patch=0;;
            major) major=$((major+1)); minor=0; patch=0;;
          esac
          new_tag="v${major}.${minor}.${patch}"
          echo "new_tag=$new_tag" >>"$GITHUB_OUTPUT"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$new_tag"
          git push origin "$new_tag"

###############################################################################
# 3) COMMON BUILD (wheel + sdist + smoke test)
###############################################################################
  build:
    runs-on: ubuntu-latest
    outputs:
      dist_dir: dist
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0
          ref: "${{ github.event_name == 'push' && needs.tag-version.outputs.new_tag || '' }}"

      - uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - name: Base toolchain
        run: python -m pip install --upgrade pip poetry nox build

      - name: Enable dynamic versioning
        run: poetry self add poetry-dynamic-versioning

      - name: Smoke tests
        run: nox -s smoke

      - name: Build wheel & sdist
        run: poetry build

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist
          path: dist/*

###############################################################################
# 4a) DRY-RUN → Test PyPI  (pull-request path)
###############################################################################
  test-publish:
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.3.0
        with:
          name: dist
          path: dist

      - uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - run: python -m pip install --upgrade twine

      - name: Upload to **Test PyPI**
        env:
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          python -m twine upload --non-interactive --skip-existing \
            --repository-url https://test.pypi.org/legacy/ \
            -u __token__ -p "$TWINE_PASSWORD" dist/*

###############################################################################
# 4b) REAL RELEASE → PyPI + docs + GH release  (push path)
###############################################################################
  publish:
    if: github.event_name == 'push'
    needs: [tag-version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - run: python -m pip install --upgrade twine

      - name: Upload to **PyPI**
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload --non-interactive --skip-existing \
            -u __token__ -p "$TWINE_PASSWORD" dist/*

      # ─── Build & deploy docs ──────────────────────────────────────────
      - uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0
          ref: ${{ needs.tag-version.outputs.new_tag }}

      - run: |
          python -m pip install --upgrade nox
          nox -s docs

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa
        with:
          path: site

      - uses: actions/deploy-pages@v4.0.5

      # ─── Draft GitHub release page ───────────────────────────────────
      - uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8
        with:
          tag_name: ${{ needs.tag-version.outputs.new_tag }}
          name: Release ${{ needs.tag-version.outputs.new_tag }}
