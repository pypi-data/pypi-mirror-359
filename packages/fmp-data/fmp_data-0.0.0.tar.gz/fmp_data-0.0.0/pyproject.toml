# pyproject.toml — Poetry ≥ 2.1 + Hatch 1.24  (July 2025)

###############################################################################
#  Core project metadata  (PEP 621)                                           #
###############################################################################
[project]
name            = "fmp-data"
version         = "0.0.0"                    # ← placeholder; hatch-vcs rewrites
description     = "Python client for the Financial Modeling Prep API"
readme          = "README.md"
requires-python = ">=3.10,<4.0"
license         = "MIT"
license-files   = ["LICENSE*"]

authors = [
  { name = "Mehdi Zare", email = "mehdizare@users.noreply.github.com" },
]
maintainers = [
  { name = "Mehdi Zare", email = "mehdizare@users.noreply.github.com" },
]

keywords = [
  "fmp", "financial", "api", "stocks", "market-data",
  "stock market", "financial data",
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Financial and Insurance Industry",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Framework :: AsyncIO",
]

###############################################################################
#  Runtime dependencies                                                       #
###############################################################################
dependencies = [
  "httpx>=0.28.1",
  "pydantic>=2.11.7,<3.0.0",
  "pydantic-settings>=2.6.0",
  "python-dotenv>=1.1.1,<2.0.0",
  "tenacity>=9.0.0",
  "tqdm>=4.66.5",
  "cachetools>=6.1.0",
  "structlog>=25.4.0",
  "pandas>=2.3.0,<3.0.0",
]

###############################################################################
#  Optional runtime features (extras)                                         #
###############################################################################
[project.optional-dependencies]

# ——— LangChain integration ———
langchain = [
  "faiss-cpu>=1.11.0",
  "langchain-core>=0.3.66",
  "langchain-community>=0.3.26",
  "langchain-openai>=0.3.25",
  "langgraph>=0.4.10",
  "openai>=1.92.0",
  "tiktoken>=0.9.0",
]

# ——— Run an MCP server alongside the client ———
mcp-server = [
  "mcp[cli]>=1.0.0",
  "pyyaml>=6.0.1",
]

###############################################################################
#  Command-line entry points                                                  #
###############################################################################
[project.scripts]
format            = "scripts:format_code"
lint              = "scripts:lint"
typecheck         = "scripts:typecheck"
test              = "scripts:test"
security          = "scripts:security_check"
fmp               = "fmp_data.scripts.dev:main"
fmp-mcp           = "fmp_data.mcp.server:main"
fmp-mcp-dev       = "fmp_data.scripts.dev_server:main"
mkdocstrings-python = "mkdocstrings.cli:main"

###############################################################################
#  Project links                                                              #
###############################################################################
[project.urls]
Homepage      = "https://github.com/MehdiZare/fmp-data"
Documentation = "https://github.com/MehdiZare/fmp-data#readme"
Source        = "https://github.com/MehdiZare/fmp-data"
Issues        = "https://github.com/MehdiZare/fmp-data/issues"

###############################################################################
#  Build-system                                                               #
###############################################################################
[build-system]
requires      = ["hatchling>=1.24", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source       = "vcs"
pattern      = "v(?P<base>\\d+\\.\\d+\\.\\d+)(?:-(?P<stage>beta|alpha))?(?:\\.(?P<rev>\\d+))?"
format-jinja = """
{% if distance == 0 -%}
  {{ base }}
{% else -%}
  {{ base }}.post{{ distance }}
{% endif -%}
"""

[tool.hatch.build.targets.wheel]
packages = ["fmp_data"]
include  = ["fmp_data/py.typed"]

###############################################################################
#  Developer dependency groups                                                #
###############################################################################
[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Linting / formatting
ruff        = "^0.7.1"
black       = "^24.10.0"
isort       = "^5.13.2"

# Static typing
mypy            = "^1.13.0"
types-cachetools = "^6.0.0.20250525"

# Security
bandit       = { version = "^1.7.10", extras = ["toml"] }

# Testing
pytest          = "^8.3.3"
pytest-asyncio  = "^0.24.0"
pytest-cov      = "^6.0.0"
pytest-mock     = "^3.14.0"
freezegun       = "^1.5.1"
responses       = "^0.25.3"
vcrpy           = "^6.0.2"
coverage        = "^7.6.4"

# Dev utilities
pre-commit  = "^4.0.1"
rich        = "^13.9.3"
twine       = "^5.1.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs              = "^1.6.1"
mkdocs-material     = "^9.6.14"
mkdocstrings-python = "^1.16.12"

###############################################################################
#  Black / isort / Ruff / Mypy                                                #
###############################################################################
[tool.black]
line-length     = 88
target-version  = ["py310", "py311", "py312", "py313"]
include         = "\\.pyi?$"

[tool.isort]
profile                       = "black"
multi_line_output             = 3
include_trailing_comma        = true
force_grid_wrap               = 0
use_parentheses               = true
ensure_newline_before_comments = true
line_length                   = 88

[tool.ruff]
target-version = "py310"
line-length    = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C", "B", "S", "UP"]
ignore = ["S101"]                    # allow assert in tests

[tool.ruff.lint.per-file-ignores]
"tests/*"        = ["S101"]
"scripts/*"      = ["S603", "S607"]
"**/conftest.py" = ["S101"]
"__init__.py"    = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["fmp_data"]

[tool.mypy]
python_version            = "3.10"
warn_return_any           = true
warn_unused_configs       = true
disallow_untyped_defs     = true
disallow_incomplete_defs  = true
check_untyped_defs        = true
no_implicit_optional      = true
warn_redundant_casts      = true
warn_unused_ignores       = true
warn_no_return            = true
warn_unreachable          = true
strict_optional           = true
exclude                   = ["tests/", "examples/"]
plugins                   = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
  "vcr.*",
  "langchain.*",
  "langchain_core.*",
  "langchain_community.*",
  "langchain_openai.*",
  "faiss",
  "faiss.*",
  "mcp",
  "mcp.*",
]
ignore_missing_imports = true

###############################################################################
#  PyDocstyle                                                                 #
###############################################################################
[tool.pydocstyle]
convention          = "google"
add-select          = ["D100", "D101", "D102", "D103", "D104"]
add-ignore          = ["D105", "D107", "D200", "D203", "D213", "D406", "D407"]
ignore-decorators   = "overrides"

###############################################################################
#  Pytest defaults                                                            #
###############################################################################
[tool.pytest.ini_options]
minversion  = "6.0"
addopts     = "--quiet --no-header --tb=short -v --disable-warnings"
testpaths   = ["tests"]
python_files      = "test_*.py"
python_functions  = "test_*"
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]

###############################################################################
#  Coverage                                                                   #
###############################################################################
[tool.coverage.run]
source = ["fmp_data"]
branch = true
omit = [
  "fmp_data/endpoints/definitions.py",
  "fmp_data/example.py",
  "*/__init__.py",
  "tests/*",
  "*/tests/*",
  "setup.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "if __name__ == '__main__':",
  "pass",
  "raise ImportError",
  "except ImportError",
  "def main()",
  "if TYPE_CHECKING:",
]
show_missing = true
fail_under   = 80

[tool.coverage.html]
directory = "coverage_html"

[tool.coverage.xml]
output = "coverage.xml"

###############################################################################
#  Bandit (security)                                                          #
###############################################################################
[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips        = ["B101", "B404", "B603", "B607"]
