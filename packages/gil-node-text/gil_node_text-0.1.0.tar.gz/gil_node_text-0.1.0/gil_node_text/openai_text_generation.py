from gil_py.core.node import Node
from gil_py.core.port import Port
from gil_py.core.data_types import DataType

class OpenAIGenerateTextNode(Node):
    """
    Generates text using the OpenAI Chat Completions API.
    This node requires a connection to an OpenAI-Connector.
    """

    def __init__(self, node_id: str, node_config: dict):
        super().__init__(node_id, node_config)
        
        # Define ports
        self.add_input_port(Port(
            name="client",
            data_type=DataType.OBJECT,
            description="The OpenAI client instance from an OpenAI-Connector.",
            required=True
        ))
        self.add_input_port(Port(
            name="prompt",
            data_type=DataType.TEXT,
            description="The text prompt for generation.",
            required=True
        ))
        self.add_input_port(Port(
            name="model",
            data_type=DataType.TEXT,
            description="The OpenAI model to use (e.g., gpt-4, gpt-3.5-turbo).",
            required=False,
            default_value="gpt-3.5-turbo"
        ))
        self.add_output_port(Port(
            name="generated_text",
            data_type=DataType.TEXT,
            description="The text generated by the OpenAI model."
        ))

    def execute(self, data: dict) -> dict:
        """
        Receives a client and a prompt, then calls the OpenAI Chat Completions API to generate text.
        """
        client = data.get("client")
        prompt = data.get("prompt")
        model = data.get("model")

        if not client:
            raise ValueError("OpenAI client is not provided. Connect an OpenAI-Connector.")
        if not prompt:
            raise ValueError("Prompt is not provided.")

        try:
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            
            generated_text = response.choices[0].message.content
            return {"generated_text": generated_text}
        
        except Exception as e:
            raise RuntimeError(f"Failed to generate text: {e}") from e
