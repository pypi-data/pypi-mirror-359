Metadata-Version: 2.4
Name: gpt_batch_api
Version: 1.0.4
Summary: Efficiently and robustly use the OpenAI Batch API in Python
Author: Philipp Allgeuer
Maintainer: Philipp Allgeuer
License: # GNU GENERAL PUBLIC LICENSE
        
        Version 3, 29 June 2007
        
        Copyright (C) 2007 Free Software Foundation, Inc.
        <https://fsf.org/>
        
        Everyone is permitted to copy and distribute verbatim copies of this
        license document, but changing it is not allowed.
        
        ## Preamble
        
        The GNU General Public License is a free, copyleft license for
        software and other kinds of works.
        
        The licenses for most software and other practical works are designed
        to take away your freedom to share and change the works. By contrast,
        the GNU General Public License is intended to guarantee your freedom
        to share and change all versions of a program--to make sure it remains
        free software for all its users. We, the Free Software Foundation, use
        the GNU General Public License for most of our software; it applies
        also to any other work released this way by its authors. You can apply
        it to your programs, too.
        
        When we speak of free software, we are referring to freedom, not
        price. Our General Public Licenses are designed to make sure that you
        have the freedom to distribute copies of free software (and charge for
        them if you wish), that you receive source code or can get it if you
        want it, that you can change the software or use pieces of it in new
        free programs, and that you know you can do these things.
        
        To protect your rights, we need to prevent others from denying you
        these rights or asking you to surrender the rights. Therefore, you
        have certain responsibilities if you distribute copies of the
        software, or if you modify it: responsibilities to respect the freedom
        of others.
        
        For example, if you distribute copies of such a program, whether
        gratis or for a fee, you must pass on to the recipients the same
        freedoms that you received. You must make sure that they, too, receive
        or can get the source code. And you must show them these terms so they
        know their rights.
        
        Developers that use the GNU GPL protect your rights with two steps:
        (1) assert copyright on the software, and (2) offer you this License
        giving you legal permission to copy, distribute and/or modify it.
        
        For the developers' and authors' protection, the GPL clearly explains
        that there is no warranty for this free software. For both users' and
        authors' sake, the GPL requires that modified versions be marked as
        changed, so that their problems will not be attributed erroneously to
        authors of previous versions.
        
        Some devices are designed to deny users access to install or run
        modified versions of the software inside them, although the
        manufacturer can do so. This is fundamentally incompatible with the
        aim of protecting users' freedom to change the software. The
        systematic pattern of such abuse occurs in the area of products for
        individuals to use, which is precisely where it is most unacceptable.
        Therefore, we have designed this version of the GPL to prohibit the
        practice for those products. If such problems arise substantially in
        other domains, we stand ready to extend this provision to those
        domains in future versions of the GPL, as needed to protect the
        freedom of users.
        
        Finally, every program is threatened constantly by software patents.
        States should not allow patents to restrict development and use of
        software on general-purpose computers, but in those that do, we wish
        to avoid the special danger that patents applied to a free program
        could make it effectively proprietary. To prevent this, the GPL
        assures that patents cannot be used to render the program non-free.
        
        The precise terms and conditions for copying, distribution and
        modification follow.
        
        ## TERMS AND CONDITIONS
        
        ### 0. Definitions.
        
        "This License" refers to version 3 of the GNU General Public License.
        
        "Copyright" also means copyright-like laws that apply to other kinds
        of works, such as semiconductor masks.
        
        "The Program" refers to any copyrightable work licensed under this
        License. Each licensee is addressed as "you". "Licensees" and
        "recipients" may be individuals or organizations.
        
        To "modify" a work means to copy from or adapt all or part of the work
        in a fashion requiring copyright permission, other than the making of
        an exact copy. The resulting work is called a "modified version" of
        the earlier work or a work "based on" the earlier work.
        
        A "covered work" means either the unmodified Program or a work based
        on the Program.
        
        To "propagate" a work means to do anything with it that, without
        permission, would make you directly or secondarily liable for
        infringement under applicable copyright law, except executing it on a
        computer or modifying a private copy. Propagation includes copying,
        distribution (with or without modification), making available to the
        public, and in some countries other activities as well.
        
        To "convey" a work means any kind of propagation that enables other
        parties to make or receive copies. Mere interaction with a user
        through a computer network, with no transfer of a copy, is not
        conveying.
        
        An interactive user interface displays "Appropriate Legal Notices" to
        the extent that it includes a convenient and prominently visible
        feature that (1) displays an appropriate copyright notice, and (2)
        tells the user that there is no warranty for the work (except to the
        extent that warranties are provided), that licensees may convey the
        work under this License, and how to view a copy of this License. If
        the interface presents a list of user commands or options, such as a
        menu, a prominent item in the list meets this criterion.
        
        ### 1. Source Code.
        
        The "source code" for a work means the preferred form of the work for
        making modifications to it. "Object code" means any non-source form of
        a work.
        
        A "Standard Interface" means an interface that either is an official
        standard defined by a recognized standards body, or, in the case of
        interfaces specified for a particular programming language, one that
        is widely used among developers working in that language.
        
        The "System Libraries" of an executable work include anything, other
        than the work as a whole, that (a) is included in the normal form of
        packaging a Major Component, but which is not part of that Major
        Component, and (b) serves only to enable use of the work with that
        Major Component, or to implement a Standard Interface for which an
        implementation is available to the public in source code form. A
        "Major Component", in this context, means a major essential component
        (kernel, window system, and so on) of the specific operating system
        (if any) on which the executable work runs, or a compiler used to
        produce the work, or an object code interpreter used to run it.
        
        The "Corresponding Source" for a work in object code form means all
        the source code needed to generate, install, and (for an executable
        work) run the object code and to modify the work, including scripts to
        control those activities. However, it does not include the work's
        System Libraries, or general-purpose tools or generally available free
        programs which are used unmodified in performing those activities but
        which are not part of the work. For example, Corresponding Source
        includes interface definition files associated with source files for
        the work, and the source code for shared libraries and dynamically
        linked subprograms that the work is specifically designed to require,
        such as by intimate data communication or control flow between those
        subprograms and other parts of the work.
        
        The Corresponding Source need not include anything that users can
        regenerate automatically from other parts of the Corresponding Source.
        
        The Corresponding Source for a work in source code form is that same
        work.
        
        ### 2. Basic Permissions.
        
        All rights granted under this License are granted for the term of
        copyright on the Program, and are irrevocable provided the stated
        conditions are met. This License explicitly affirms your unlimited
        permission to run the unmodified Program. The output from running a
        covered work is covered by this License only if the output, given its
        content, constitutes a covered work. This License acknowledges your
        rights of fair use or other equivalent, as provided by copyright law.
        
        You may make, run and propagate covered works that you do not convey,
        without conditions so long as your license otherwise remains in force.
        You may convey covered works to others for the sole purpose of having
        them make modifications exclusively for you, or provide you with
        facilities for running those works, provided that you comply with the
        terms of this License in conveying all material for which you do not
        control copyright. Those thus making or running the covered works for
        you must do so exclusively on your behalf, under your direction and
        control, on terms that prohibit them from making any copies of your
        copyrighted material outside their relationship with you.
        
        Conveying under any other circumstances is permitted solely under the
        conditions stated below. Sublicensing is not allowed; section 10 makes
        it unnecessary.
        
        ### 3. Protecting Users' Legal Rights From Anti-Circumvention Law.
        
        No covered work shall be deemed part of an effective technological
        measure under any applicable law fulfilling obligations under article
        11 of the WIPO copyright treaty adopted on 20 December 1996, or
        similar laws prohibiting or restricting circumvention of such
        measures.
        
        When you convey a covered work, you waive any legal power to forbid
        circumvention of technological measures to the extent such
        circumvention is effected by exercising rights under this License with
        respect to the covered work, and you disclaim any intention to limit
        operation or modification of the work as a means of enforcing, against
        the work's users, your or third parties' legal rights to forbid
        circumvention of technological measures.
        
        ### 4. Conveying Verbatim Copies.
        
        You may convey verbatim copies of the Program's source code as you
        receive it, in any medium, provided that you conspicuously and
        appropriately publish on each copy an appropriate copyright notice;
        keep intact all notices stating that this License and any
        non-permissive terms added in accord with section 7 apply to the code;
        keep intact all notices of the absence of any warranty; and give all
        recipients a copy of this License along with the Program.
        
        You may charge any price or no price for each copy that you convey,
        and you may offer support or warranty protection for a fee.
        
        ### 5. Conveying Modified Source Versions.
        
        You may convey a work based on the Program, or the modifications to
        produce it from the Program, in the form of source code under the
        terms of section 4, provided that you also meet all of these
        conditions:
        
        -   a) The work must carry prominent notices stating that you modified
            it, and giving a relevant date.
        -   b) The work must carry prominent notices stating that it is
            released under this License and any conditions added under
            section 7. This requirement modifies the requirement in section 4
            to "keep intact all notices".
        -   c) You must license the entire work, as a whole, under this
            License to anyone who comes into possession of a copy. This
            License will therefore apply, along with any applicable section 7
            additional terms, to the whole of the work, and all its parts,
            regardless of how they are packaged. This License gives no
            permission to license the work in any other way, but it does not
            invalidate such permission if you have separately received it.
        -   d) If the work has interactive user interfaces, each must display
            Appropriate Legal Notices; however, if the Program has interactive
            interfaces that do not display Appropriate Legal Notices, your
            work need not make them do so.
        
        A compilation of a covered work with other separate and independent
        works, which are not by their nature extensions of the covered work,
        and which are not combined with it such as to form a larger program,
        in or on a volume of a storage or distribution medium, is called an
        "aggregate" if the compilation and its resulting copyright are not
        used to limit the access or legal rights of the compilation's users
        beyond what the individual works permit. Inclusion of a covered work
        in an aggregate does not cause this License to apply to the other
        parts of the aggregate.
        
        ### 6. Conveying Non-Source Forms.
        
        You may convey a covered work in object code form under the terms of
        sections 4 and 5, provided that you also convey the machine-readable
        Corresponding Source under the terms of this License, in one of these
        ways:
        
        -   a) Convey the object code in, or embodied in, a physical product
            (including a physical distribution medium), accompanied by the
            Corresponding Source fixed on a durable physical medium
            customarily used for software interchange.
        -   b) Convey the object code in, or embodied in, a physical product
            (including a physical distribution medium), accompanied by a
            written offer, valid for at least three years and valid for as
            long as you offer spare parts or customer support for that product
            model, to give anyone who possesses the object code either (1) a
            copy of the Corresponding Source for all the software in the
            product that is covered by this License, on a durable physical
            medium customarily used for software interchange, for a price no
            more than your reasonable cost of physically performing this
            conveying of source, or (2) access to copy the Corresponding
            Source from a network server at no charge.
        -   c) Convey individual copies of the object code with a copy of the
            written offer to provide the Corresponding Source. This
            alternative is allowed only occasionally and noncommercially, and
            only if you received the object code with such an offer, in accord
            with subsection 6b.
        -   d) Convey the object code by offering access from a designated
            place (gratis or for a charge), and offer equivalent access to the
            Corresponding Source in the same way through the same place at no
            further charge. You need not require recipients to copy the
            Corresponding Source along with the object code. If the place to
            copy the object code is a network server, the Corresponding Source
            may be on a different server (operated by you or a third party)
            that supports equivalent copying facilities, provided you maintain
            clear directions next to the object code saying where to find the
            Corresponding Source. Regardless of what server hosts the
            Corresponding Source, you remain obligated to ensure that it is
            available for as long as needed to satisfy these requirements.
        -   e) Convey the object code using peer-to-peer transmission,
            provided you inform other peers where the object code and
            Corresponding Source of the work are being offered to the general
            public at no charge under subsection 6d.
        
        A separable portion of the object code, whose source code is excluded
        from the Corresponding Source as a System Library, need not be
        included in conveying the object code work.
        
        A "User Product" is either (1) a "consumer product", which means any
        tangible personal property which is normally used for personal,
        family, or household purposes, or (2) anything designed or sold for
        incorporation into a dwelling. In determining whether a product is a
        consumer product, doubtful cases shall be resolved in favor of
        coverage. For a particular product received by a particular user,
        "normally used" refers to a typical or common use of that class of
        product, regardless of the status of the particular user or of the way
        in which the particular user actually uses, or expects or is expected
        to use, the product. A product is a consumer product regardless of
        whether the product has substantial commercial, industrial or
        non-consumer uses, unless such uses represent the only significant
        mode of use of the product.
        
        "Installation Information" for a User Product means any methods,
        procedures, authorization keys, or other information required to
        install and execute modified versions of a covered work in that User
        Product from a modified version of its Corresponding Source. The
        information must suffice to ensure that the continued functioning of
        the modified object code is in no case prevented or interfered with
        solely because modification has been made.
        
        If you convey an object code work under this section in, or with, or
        specifically for use in, a User Product, and the conveying occurs as
        part of a transaction in which the right of possession and use of the
        User Product is transferred to the recipient in perpetuity or for a
        fixed term (regardless of how the transaction is characterized), the
        Corresponding Source conveyed under this section must be accompanied
        by the Installation Information. But this requirement does not apply
        if neither you nor any third party retains the ability to install
        modified object code on the User Product (for example, the work has
        been installed in ROM).
        
        The requirement to provide Installation Information does not include a
        requirement to continue to provide support service, warranty, or
        updates for a work that has been modified or installed by the
        recipient, or for the User Product in which it has been modified or
        installed. Access to a network may be denied when the modification
        itself materially and adversely affects the operation of the network
        or violates the rules and protocols for communication across the
        network.
        
        Corresponding Source conveyed, and Installation Information provided,
        in accord with this section must be in a format that is publicly
        documented (and with an implementation available to the public in
        source code form), and must require no special password or key for
        unpacking, reading or copying.
        
        ### 7. Additional Terms.
        
        "Additional permissions" are terms that supplement the terms of this
        License by making exceptions from one or more of its conditions.
        Additional permissions that are applicable to the entire Program shall
        be treated as though they were included in this License, to the extent
        that they are valid under applicable law. If additional permissions
        apply only to part of the Program, that part may be used separately
        under those permissions, but the entire Program remains governed by
        this License without regard to the additional permissions.
        
        When you convey a copy of a covered work, you may at your option
        remove any additional permissions from that copy, or from any part of
        it. (Additional permissions may be written to require their own
        removal in certain cases when you modify the work.) You may place
        additional permissions on material, added by you to a covered work,
        for which you have or can give appropriate copyright permission.
        
        Notwithstanding any other provision of this License, for material you
        add to a covered work, you may (if authorized by the copyright holders
        of that material) supplement the terms of this License with terms:
        
        -   a) Disclaiming warranty or limiting liability differently from the
            terms of sections 15 and 16 of this License; or
        -   b) Requiring preservation of specified reasonable legal notices or
            author attributions in that material or in the Appropriate Legal
            Notices displayed by works containing it; or
        -   c) Prohibiting misrepresentation of the origin of that material,
            or requiring that modified versions of such material be marked in
            reasonable ways as different from the original version; or
        -   d) Limiting the use for publicity purposes of names of licensors
            or authors of the material; or
        -   e) Declining to grant rights under trademark law for use of some
            trade names, trademarks, or service marks; or
        -   f) Requiring indemnification of licensors and authors of that
            material by anyone who conveys the material (or modified versions
            of it) with contractual assumptions of liability to the recipient,
            for any liability that these contractual assumptions directly
            impose on those licensors and authors.
        
        All other non-permissive additional terms are considered "further
        restrictions" within the meaning of section 10. If the Program as you
        received it, or any part of it, contains a notice stating that it is
        governed by this License along with a term that is a further
        restriction, you may remove that term. If a license document contains
        a further restriction but permits relicensing or conveying under this
        License, you may add to a covered work material governed by the terms
        of that license document, provided that the further restriction does
        not survive such relicensing or conveying.
        
        If you add terms to a covered work in accord with this section, you
        must place, in the relevant source files, a statement of the
        additional terms that apply to those files, or a notice indicating
        where to find the applicable terms.
        
        Additional terms, permissive or non-permissive, may be stated in the
        form of a separately written license, or stated as exceptions; the
        above requirements apply either way.
        
        ### 8. Termination.
        
        You may not propagate or modify a covered work except as expressly
        provided under this License. Any attempt otherwise to propagate or
        modify it is void, and will automatically terminate your rights under
        this License (including any patent licenses granted under the third
        paragraph of section 11).
        
        However, if you cease all violation of this License, then your license
        from a particular copyright holder is reinstated (a) provisionally,
        unless and until the copyright holder explicitly and finally
        terminates your license, and (b) permanently, if the copyright holder
        fails to notify you of the violation by some reasonable means prior to
        60 days after the cessation.
        
        Moreover, your license from a particular copyright holder is
        reinstated permanently if the copyright holder notifies you of the
        violation by some reasonable means, this is the first time you have
        received notice of violation of this License (for any work) from that
        copyright holder, and you cure the violation prior to 30 days after
        your receipt of the notice.
        
        Termination of your rights under this section does not terminate the
        licenses of parties who have received copies or rights from you under
        this License. If your rights have been terminated and not permanently
        reinstated, you do not qualify to receive new licenses for the same
        material under section 10.
        
        ### 9. Acceptance Not Required for Having Copies.
        
        You are not required to accept this License in order to receive or run
        a copy of the Program. Ancillary propagation of a covered work
        occurring solely as a consequence of using peer-to-peer transmission
        to receive a copy likewise does not require acceptance. However,
        nothing other than this License grants you permission to propagate or
        modify any covered work. These actions infringe copyright if you do
        not accept this License. Therefore, by modifying or propagating a
        covered work, you indicate your acceptance of this License to do so.
        
        ### 10. Automatic Licensing of Downstream Recipients.
        
        Each time you convey a covered work, the recipient automatically
        receives a license from the original licensors, to run, modify and
        propagate that work, subject to this License. You are not responsible
        for enforcing compliance by third parties with this License.
        
        An "entity transaction" is a transaction transferring control of an
        organization, or substantially all assets of one, or subdividing an
        organization, or merging organizations. If propagation of a covered
        work results from an entity transaction, each party to that
        transaction who receives a copy of the work also receives whatever
        licenses to the work the party's predecessor in interest had or could
        give under the previous paragraph, plus a right to possession of the
        Corresponding Source of the work from the predecessor in interest, if
        the predecessor has it or can get it with reasonable efforts.
        
        You may not impose any further restrictions on the exercise of the
        rights granted or affirmed under this License. For example, you may
        not impose a license fee, royalty, or other charge for exercise of
        rights granted under this License, and you may not initiate litigation
        (including a cross-claim or counterclaim in a lawsuit) alleging that
        any patent claim is infringed by making, using, selling, offering for
        sale, or importing the Program or any portion of it.
        
        ### 11. Patents.
        
        A "contributor" is a copyright holder who authorizes use under this
        License of the Program or a work on which the Program is based. The
        work thus licensed is called the contributor's "contributor version".
        
        A contributor's "essential patent claims" are all patent claims owned
        or controlled by the contributor, whether already acquired or
        hereafter acquired, that would be infringed by some manner, permitted
        by this License, of making, using, or selling its contributor version,
        but do not include claims that would be infringed only as a
        consequence of further modification of the contributor version. For
        purposes of this definition, "control" includes the right to grant
        patent sublicenses in a manner consistent with the requirements of
        this License.
        
        Each contributor grants you a non-exclusive, worldwide, royalty-free
        patent license under the contributor's essential patent claims, to
        make, use, sell, offer for sale, import and otherwise run, modify and
        propagate the contents of its contributor version.
        
        In the following three paragraphs, a "patent license" is any express
        agreement or commitment, however denominated, not to enforce a patent
        (such as an express permission to practice a patent or covenant not to
        sue for patent infringement). To "grant" such a patent license to a
        party means to make such an agreement or commitment not to enforce a
        patent against the party.
        
        If you convey a covered work, knowingly relying on a patent license,
        and the Corresponding Source of the work is not available for anyone
        to copy, free of charge and under the terms of this License, through a
        publicly available network server or other readily accessible means,
        then you must either (1) cause the Corresponding Source to be so
        available, or (2) arrange to deprive yourself of the benefit of the
        patent license for this particular work, or (3) arrange, in a manner
        consistent with the requirements of this License, to extend the patent
        license to downstream recipients. "Knowingly relying" means you have
        actual knowledge that, but for the patent license, your conveying the
        covered work in a country, or your recipient's use of the covered work
        in a country, would infringe one or more identifiable patents in that
        country that you have reason to believe are valid.
        
        If, pursuant to or in connection with a single transaction or
        arrangement, you convey, or propagate by procuring conveyance of, a
        covered work, and grant a patent license to some of the parties
        receiving the covered work authorizing them to use, propagate, modify
        or convey a specific copy of the covered work, then the patent license
        you grant is automatically extended to all recipients of the covered
        work and works based on it.
        
        A patent license is "discriminatory" if it does not include within the
        scope of its coverage, prohibits the exercise of, or is conditioned on
        the non-exercise of one or more of the rights that are specifically
        granted under this License. You may not convey a covered work if you
        are a party to an arrangement with a third party that is in the
        business of distributing software, under which you make payment to the
        third party based on the extent of your activity of conveying the
        work, and under which the third party grants, to any of the parties
        who would receive the covered work from you, a discriminatory patent
        license (a) in connection with copies of the covered work conveyed by
        you (or copies made from those copies), or (b) primarily for and in
        connection with specific products or compilations that contain the
        covered work, unless you entered into that arrangement, or that patent
        license was granted, prior to 28 March 2007.
        
        Nothing in this License shall be construed as excluding or limiting
        any implied license or other defenses to infringement that may
        otherwise be available to you under applicable patent law.
        
        ### 12. No Surrender of Others' Freedom.
        
        If conditions are imposed on you (whether by court order, agreement or
        otherwise) that contradict the conditions of this License, they do not
        excuse you from the conditions of this License. If you cannot convey a
        covered work so as to satisfy simultaneously your obligations under
        this License and any other pertinent obligations, then as a
        consequence you may not convey it at all. For example, if you agree to
        terms that obligate you to collect a royalty for further conveying
        from those to whom you convey the Program, the only way you could
        satisfy both those terms and this License would be to refrain entirely
        from conveying the Program.
        
        ### 13. Use with the GNU Affero General Public License.
        
        Notwithstanding any other provision of this License, you have
        permission to link or combine any covered work with a work licensed
        under version 3 of the GNU Affero General Public License into a single
        combined work, and to convey the resulting work. The terms of this
        License will continue to apply to the part which is the covered work,
        but the special requirements of the GNU Affero General Public License,
        section 13, concerning interaction through a network will apply to the
        combination as such.
        
        ### 14. Revised Versions of this License.
        
        The Free Software Foundation may publish revised and/or new versions
        of the GNU General Public License from time to time. Such new versions
        will be similar in spirit to the present version, but may differ in
        detail to address new problems or concerns.
        
        Each version is given a distinguishing version number. If the Program
        specifies that a certain numbered version of the GNU General Public
        License "or any later version" applies to it, you have the option of
        following the terms and conditions either of that numbered version or
        of any later version published by the Free Software Foundation. If the
        Program does not specify a version number of the GNU General Public
        License, you may choose any version ever published by the Free
        Software Foundation.
        
        If the Program specifies that a proxy can decide which future versions
        of the GNU General Public License can be used, that proxy's public
        statement of acceptance of a version permanently authorizes you to
        choose that version for the Program.
        
        Later license versions may give you additional or different
        permissions. However, no additional obligations are imposed on any
        author or copyright holder as a result of your choosing to follow a
        later version.
        
        ### 15. Disclaimer of Warranty.
        
        THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
        APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
        HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
        WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
        LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
        PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE
        DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
        CORRECTION.
        
        ### 16. Limitation of Liability.
        
        IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
        WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
        CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
        INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
        ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
        NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
        LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
        TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
        PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
        
        ### 17. Interpretation of Sections 15 and 16.
        
        If the disclaimer of warranty and limitation of liability provided
        above cannot be given local legal effect according to their terms,
        reviewing courts shall apply local law that most closely approximates
        an absolute waiver of all civil liability in connection with the
        Program, unless a warranty or assumption of liability accompanies a
        copy of the Program in return for a fee.
        
        END OF TERMS AND CONDITIONS
        
        ## How to Apply These Terms to Your New Programs
        
        If you develop a new program, and you want it to be of the greatest
        possible use to the public, the best way to achieve this is to make it
        free software which everyone can redistribute and change under these
        terms.
        
        To do so, attach the following notices to the program. It is safest to
        attach them to the start of each source file to most effectively state
        the exclusion of warranty; and each file should have at least the
        "copyright" line and a pointer to where the full notice is found.
        
                <one line to give the program's name and a brief idea of what it does.>
                Copyright (C) <year>  <name of author>
        
                This program is free software: you can redistribute it and/or modify
                it under the terms of the GNU General Public License as published by
                the Free Software Foundation, either version 3 of the License, or
                (at your option) any later version.
        
                This program is distributed in the hope that it will be useful,
                but WITHOUT ANY WARRANTY; without even the implied warranty of
                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                GNU General Public License for more details.
        
                You should have received a copy of the GNU General Public License
                along with this program.  If not, see <https://www.gnu.org/licenses/>.
        
        Also add information on how to contact you by electronic and paper
        mail.
        
        If the program does terminal interaction, make it output a short
        notice like this when it starts in an interactive mode:
        
                <program>  Copyright (C) <year>  <name of author>
                This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
                This is free software, and you are welcome to redistribute it
                under certain conditions; type `show c' for details.
        
        The hypothetical commands \`show w' and \`show c' should show the
        appropriate parts of the General Public License. Of course, your
        program's commands might be different; for a GUI interface, you would
        use an "about box".
        
        You should also get your employer (if you work as a programmer) or
        school, if any, to sign a "copyright disclaimer" for the program, if
        necessary. For more information on this, and how to apply and follow
        the GNU GPL, see <https://www.gnu.org/licenses/>.
        
        The GNU General Public License does not permit incorporating your
        program into proprietary programs. If your program is a subroutine
        library, you may consider it more useful to permit linking proprietary
        applications with the library. If this is what you want to do, use the
        GNU Lesser General Public License instead of this License. But first,
        please read <https://www.gnu.org/licenses/why-not-lgpl.html>.
        
Project-URL: Homepage, https://github.com/pallgeuer/gpt_batch_api
Project-URL: Source Code, https://github.com/pallgeuer/gpt_batch_api
Project-URL: Issue Tracker, https://github.com/pallgeuer/gpt_batch_api/issues
Keywords: OpenAI,ChatGPT,Batch API,LLM,NLP,Python
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: filelock
Requires-Dist: openai
Requires-Dist: pillow
Requires-Dist: pydantic>=2
Requires-Dist: requests
Requires-Dist: tiktoken
Requires-Dist: wandb
Requires-Dist: wandb-workspaces
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Dynamic: license-file

# GPT Batch API Python Library

**Author:** Philipp Allgeuer

**Version:** 1.0.4

A Python library for efficiently interacting with OpenAI's [Batch API](https://platform.openai.com/docs/guides/batch). This library helps handle multiple requests in a single batch to streamline and optimize API usage, making it ideal for high-volume non-real-time text and image processing applications. The Batch API provides a significantly faster and more cost-effective solution than performing multiple single API requests individually using the [direct API](https://platform.openai.com/docs/api-reference/chat).

This library deals with all the complexities involved with having a safe, robust, cost-controlled, and restartable Large Language Model (LLM) batch processing application. This includes error handling, strict atomic control of state, and robustness to SIGINTs (keyboard interrupts, i.e. `Ctrl+C`) and crashes. Isolated calls to the standard direct (i.e. non-batch) API are also supported to allow efficient individual low-volume runs, or to more efficiently finish off the last few pending requests of an otherwise batched run. Locally hosted LLMs (e.g. via [Ollama](https://ollama.com)) can also be used instead of OpenAI's models, if inference is restricted to the direct API (see [Local Inference](#local-inference)).

The library supports `wandb` integration to allow for the graphical/remote monitoring of progress of long-running processing applications.

## Getting Started

Refer to [Installation](#installation) below for instructions to conveniently install `gpt_batch_api` via pip, and [Task Manager Demo](#task-manager-demo) for instructions to run a demo of the library.

Applications that wish to use this library need to implement code that defines the task at hand, i.e. code that generates the required LLM requests, as well as code that processes the corresponding responses of the LLM. This is done by subclassing the `TaskManager` class to implement the desired batch LLM task (refer to the demos in [task_manager_demo.py](task_manager_demo.py), as well as the extensive documentation in the `TaskManager` [source code](task_manager.py)). Refer to [Implementing a Custom Task](#implementing-a-custom-task) for more information. Note that _very_ complex tasks could benefit from directly interacting with the underlying `GPTRequester` class (refer to how this class is used in `TaskManager`), but this should rarely be required in practice.

## Installation

The `gpt_batch_api` library is [available on PyPi](https://pypi.org/project/gpt-batch-api), allowing you to quickly get started. Start by creating a virtual Python environment (e.g. via `conda` or `venv`):
```bash
conda create -n gpt_batch_api python=3.12
conda activate gpt_batch_api
# OR...
python -m venv gpt_batch_api  # <-- Must be Python 3.12+
source gpt_batch_api/bin/activate
```
Then install `gpt_batch_api` ([PyPi Python package](https://pypi.org/project/gpt-batch-api) built using [gpt_batch_api_build](https://github.com/pallgeuer/gpt_batch_api_build)):
```bash
pip install gpt_batch_api
```
Alternatively, you can clone this source repository and just install the requirements:
```bash
pip install -r requirements.txt  # OR: requirements-dev.txt
```
In this case, to make sure Python finds the cloned source repository you can either `cd /path/to/gpt_batch_api/..` (i.e. change to the parent directory), or use `PYTHONPATH`.

If you plan to use the `wandb` support (recommended - it is enabled by default unless you specify `--no_wandb`), then ensure `wandb` is logged in (only required once ever):
```bash
wandb login
```
We can verify in an interactive `python` that the `gpt_batch_api` library has successfully been installed:
```python
import gpt_batch_api
print(gpt_batch_api.__version__)                              # Version
print(gpt_batch_api.TaskManager, gpt_batch_api.GPTRequester)  # Two main library classes
```
Verify that the `gpt_batch_api` scripts can be run:
```bash
python -m gpt_batch_api.task_manager_demo --help
python -m gpt_batch_api.wandb_configure_view --help
```
Test running a script that actually makes API calls, requiring less than 0.01 USD (refer to [Useful Hints](#useful-hints) for the exported environment variables):
```bash
export OPENAI_API_KEY=sk-...  # <-- Set the OpenAI API key
export WANDB_API_KEY=...      # <-- Set the wandb API key (a project called gpt_batch_api is created/used and can be used to monitor the following run in real-time)
python -m gpt_batch_api.task_manager_demo --task_dir /tmp/gpt_batch_api_tasks --task utterance_emotion --model gpt-4o-mini-2024-07-18 --cost_input_direct_mtoken 0.150 --cost_input_cached_mtoken 0.075 --cost_input_batch_mtoken 0.075 --cost_output_direct_mtoken 0.600 --cost_output_batch_mtoken 0.300 --force_direct  # <-- The last argument actually avoids use of the Batch API and forces use of the direct API instead (as the batch API can take a while to complete and this command should just be a quick test)
xdg-open /tmp/gpt_batch_api_tasks/utterance_emotion_output.jsonl  # <-- Opens the task-specific output file generated by the previous command
python -m gpt_batch_api.wandb_configure_view --dst_entity ENTITY  # <-- [Substitute correct ENTITY! / Only need to execute this once ever per project!] Then go to https://wandb.ai/ENTITY/gpt_batch_api and select the saved view called 'GPT Batch API', and then click 'Copy to my workspace'
```
The `task_manager_demo.py` script places its output files in the `--task_dir` directory, in this case `/tmp/gpt_batch_api_tasks`. Note that if `--task_dir` is not specified then a tasks directory will be auto-created inside the installed site-packages location, which is probably not desired in general.

Now you are ready to implement your own [custom tasks](#implementing-a-custom-task), and make full robust use of the power of the Batch API!

## Run Commands

Here is a general model configuration that is used for the commands in this section (you can update it to suit):
```bash
MODELARGS=(--model gpt-4o-mini-2024-07-18 --cost_input_direct_mtoken 0.150 --cost_input_cached_mtoken 0.075 --cost_input_batch_mtoken 0.075 --cost_output_direct_mtoken 0.600 --cost_output_batch_mtoken 0.300)
```

### Task Manager Demo

- **Command:**
  ```bash
  export OPENAI_API_KEY=sk-...  # <-- Set the OpenAI API key
  export WANDB_API_KEY=...      # <-- Set the wandb API key (a project called gpt_batch_api is created/used and can be used to monitor the following run in real-time)
  python -m gpt_batch_api.task_manager_demo --help
  python -m gpt_batch_api.task_manager_demo --task char_codes "${MODELARGS[@]}"
  python -m gpt_batch_api.task_manager_demo --task utterance_emotion "${MODELARGS[@]}"
  ```
  Refer to [Useful Hints](#useful-hints) for the exported environment variables.
- **Arguments:**
  - Refer to `--help`.
  - If you wish to change the directory in which files are created to store the ongoing and final state, and output data of the command (recommended if installed via pip), use:
    ```bash
    --task_dir /path/to/dir
    ```
  - If you wish not to use wandb for logging and monitoring, use:
    ```bash
    --no_wandb
    ```
- **Outputs:**
  - `gpt_batch_api/tasks/char_codes_*`
  - `gpt_batch_api/tasks/utterance_emotion_*`
  - Associated wandb run in web browser (useful for monitoring progress)
- **Verify:**
  - Verify that the final data output file(s) contain reasonable and complete data (e.g. `gpt_batch_api/tasks/char_codes_output*`, `gpt_batch_api/tasks/utterance_emotion_output*`)

### Useful Hints

**Useful environment variables:**
- `WANDB_API_KEY`: [**Required if wandb support is enabled**] The API key for authenticating with Weights & Biases (e.g. `ff63...`, obtained from https://wandb.ai/authorize)
- `OPENAI_API_KEY`: [**Required**] The API key for authenticating requests to the OpenAI API (e.g. `sk-...`, see also `--openai_api_key`)
- `OPENAI_ORG_ID`: The organization ID associated with the OpenAI account, if required (e.g. `org-...`, see also `--openai_organization`)
- `OPENAI_PROJECT_ID`: An identifier for the specific OpenAI project, used for tracking usage and billing (e.g. `proj_...`, see also `--openai_project`)
- `OPENAI_BASE_URL`: The base URL of where to direct API requests (e.g. `https://api.openai.com/v1` or `http://IP:PORT/v1`, see also `--client_base_url`)
- `OPENAI_ENDPOINT`: The default endpoint to use for `GPTRequester` instances, if not explicitly otherwise specified on a per-`GPTRequester` basis (e.g. `/v1/chat/completions`, see also `--chat_endpoint`)

**Useful links:**
- Manage the defined OpenAI projects: https://platform.openai.com/settings/organization/projects
- View the OpenAI API rate and usage limits (and usage tier): https://platform.openai.com/settings/organization/limits
- Monitor the OpenAI API usage (costs, credits and bills): https://platform.openai.com/settings/organization/usage
- Manually monitor / manage the stored files on the OpenAI server: https://platform.openai.com/storage
- Manually monitor / manage the started batches on the OpenAI server: https://platform.openai.com/batches

### Tests

- Run the available pytests:
  ```bash
  pytest -v gpt_batch_api/utils_test.py
  ```
  Verify that all tests passed.

- Test the token counting class `TokenEstimator`:
  ```bash
  python -m gpt_batch_api.tokens_test
  ```
  Verify that all predicted token totals are equal or close to the actual required number of tokens. OpenAI changes things from time to time, so `TokenEstimator` may occasionally require updates in order to be accurate, especially for new models.

## Implementing a Custom Task

In order to define and run your own task, **refer to the example task implementations in [task_manager_demo.py](task_manager_demo.py)**, including the `main()` function and how the tasks are run.

The general steps to creating your own tasks are:

1) Read the documentation comments at the beginning of the `TaskManager` class, which outline which methods should be overridden, what sources of command line arguments are possible, and what simple properties the design of the task state, task output, and request metadata format need to satisfy.
2) Design/plan (e.g. on paper) the task-specific data format of the task state, task output, and request metadata format, so that all properties are satisfied.
3) If structured outputs are to be used in the requests, define a `pydantic.BaseModel` for the JSON schema that the LLM responses should strictly adhere to.
4) Decide on a task output file class (e.g. `DataclassOutputFile`, `DataclassListOutputFile`, or a custom `TaskOutputFile` implementation) and possibly define an appropriate subclass (e.g. to specify `Dataclass`), and define any associated dataclasses, pydantic models, and such.
5) Implement a custom task-specific subclass of `TaskManager`, given all the information from the previous steps. The subclass often needs to load data from file as input for generating the required requests and completing the task. This can be implemented inside the subclass, or can be implemented in separate code that e.g. then just passes pre-loaded data or a data loader class to the __init__ method of the `TaskManager` subclass. Refer to the documentation within each of the methods to override in the `TaskManager` class source code.
6) Ensure Python logging is configured appropriately (e.g. see `utils.configure_logging()`, or otherwise use `utils.ColorFormatter` manually to help ensure that warnings and errors stand out in terms of color).
7) Use `argparse` or `hydra` to configure command line arguments and pass them to the custom `TaskManager` subclass on init (refer to `main()` in `task_manager_demo.py`, and `config/gpt_batch_api.yaml`).
8) Run the custom task manager by constructing an instance of the class and calling `run()`.

### Running a Custom Task

When a custom task has been implemented and it is time to test it out, it is usually not such a good idea to just immediately attempt a full costly run and see what happens. Usually finetuning the implementation of a task to perfection, e.g. due to prompt engineering or coding aspects, is an iterative process. Below is an enumerated list of recommended safe steps to try out for each new implemented task, in order to ensure that everything is working perfectly correctly before committing more resources to larger or full runs. We assume:
- The custom task manager has, as intended, been wrapped into a script that uses `argparse` (including also `--model`) to configure the task manager and GPT requester, just like `task_manager_demo.py` does. If `hydra` (supported) or a direct programmatic interface is being used instead for the configuration parameters, then the commands below can easily be adjusted to the appropriate form.
- Your generic command to run the custom script is denoted `python ARGS` below, which in the case of `task_manager_demo.py`  would for example be `python -m gpt_batch_api.task_manager_demo --task char_codes`.
- Refer to `MODELARGS` in [Run Commands](#run-commands), and `OPENAI_API_KEY` and `WANDB_API_KEY` in [Task Manager Demo](#task-manager-demo) and [Useful Hints](#useful-hints).

Here are the recommended safe steps:
1) List all available command line arguments:
   ```bash
   python ARGS --help
   ```
2) Assuming the task does not exist yet (no task run files exist), initialize a new task but do not run it (task metadata is taken and fixed beyond here unless using `--reinit_meta`):
   ```bash
   python ARGS "${MODELARGS[@]}" --no_wandb --no_run [--max_completion_tokens NUM] [--completion_ratio RATIO] [--temperature TEMP] [--top_p MASS] [--opinions_min NUM] [--opinions_max NUM] [--confidence RATIO] ...
   ```
3) Generate a batch of 100 requests without actually executing the batch:
   ```bash
   python ARGS "${MODELARGS[@]}" --no_wandb --max_session_requests 0 --max_batch_requests 100 --max_unpushed_batches 1
   ```
4) Show 10 verbose examples of generated requests without actually executing them (requires that some batches have already been generated and saved to disk):
   ```bash
   python ARGS "${MODELARGS[@]}" --no_wandb --max_session_requests 10 --max_batch_requests 100 --max_unpushed_batches 1 --force_direct --direct_verbose always --dryrun
   ```
5) Show 10 verbose examples of generated requests and responses using the direct API:
   ```bash
   python ARGS "${MODELARGS[@]}" --no_wandb --max_session_requests 10 --max_batch_requests 100 --max_unpushed_batches 1 --force_direct --direct_verbose always
   ```
6) Execute 100 requests using the direct API, and show those examples verbosely that had a warning or error:
   ```bash
   python ARGS "${MODELARGS[@]}" --no_wandb --max_session_requests 100 --max_batch_requests 100 --max_unpushed_batches 1 --force_direct --direct_verbose warn
   ```
7) Execute 250 requests using the batch API:
   ```bash
   python ARGS "${MODELARGS[@]}" --no_wandb --max_session_requests 400 --max_batch_requests 250 --max_unpushed_batches 1
   ```
   At this point we can decide on suitable initial values for `--max_completion_tokens` and `--completion_ratio`. To do this, search the output of the command above for `max # completion tokens` (overall metrics) and `max # tokens` (per batch), where `#` are some numbers, and decide on a suitable value of `--max_completion_tokens` that has a significant safety margin to the values seen. Also search the command outputs for `completion ratio` (overall metrics and per batch), and decide on a suitable value for `--completion_ratio`, factoring in whatever change you just made to `--max_completion_tokens` of course, as the completion ratio is a ratio of that. We can then update the (otherwise usually fixed) metadata of the task run using:
   ```bash
   python ARGS "${MODELARGS[@]}" --no_wandb --no_run --reinit_meta --max_completion_tokens NUM --completion_ratio RATIO [--temperature TEMP] [--top_p MASS] [--opinions_min NUM] [--opinions_max NUM] [--confidence RATIO] ...  # <-- CAUTION: Other than updating --max_completion_tokens and --completion_ratio, make sure to be consistent with point 2 as --reinit_meta always updates ALL task meta variables
   ```
8) Execute 1 USD worth of fresh (thus wipe ongoing) requests using the batch API (or 1 of whatever currency or unit `MODELARGS` used for `--cost_*`):
   ```bash
   python ARGS "${MODELARGS[@]}" --no_wandb --only_process  # <-- If there are any unfinished batches busy on the remote let them finish and be processed (we do not want to unnecessarily wipe them if they are already costing money)
   python ARGS "${MODELARGS[@]}" --no_wandb --wipe_requests --max_session_cost 1.00 --max_batch_cost 1.00 --max_unpushed_batches 1
   ```
   At this point you can refine the estimated value of the completion ratio, if required. Search the command outputs for the `completion ratio` of any newly executed batches, and reinitialize the task metadata as in point 7.
9) Reset the entire task to scratch (throwing away any results obtained so far, but ensuring a clean slate for a future full run):
   ```bash
   python ARGS "${MODELARGS[@]}" --no_wandb --wipe_task --no_run
   ```

We can now run the custom task normally to completion, making use of the wandb integration for logging and monitoring. Assuming we wish to respect a batch queue limit of 60,000,000 tokens (= 60000 ktokens) at a time (refer to the [OpenAI tier rate limits](https://platform.openai.com/settings/organization/limits)), we can do:
```bash
python ARGS "${MODELARGS[@]}" --wandb_name MY_BATCH_TASK --max_remote_ktokens 60000  # <-- CAUTION: Change MY_BATCH_TASK to a reasonable task name a sit should appear in wandb
```
The above command can be interrupted with `Ctrl+C` and restarted at any time, and it will safely and robustly just pick up wherever it left off without losing anything (assuming the custom task has been correctly and revertibly implemented like described in the documentation, and as demonstrated in `task_manager_demo.py`). Any already uploaded and started remote batches will continue to process even when the script is not running.

If some samples fail permanently (the maximum number of internal retries was reached, see `--max_retries`), they can be reset ('wiped') and retried a further `--max_retries` number of times using:
```bash
python ARGS "${MODELARGS[@]}" --wandb_name MY_BATCH_TASK --wandb_run_id RUN_ID --max_remote_ktokens 60000 --wipe_failed --max_retries 4  # <-- CAUTION: Appropriately set MY_BATCH_TASK and RUN_ID
```
Note that a further 4 allowed retries means that each failed sample gets a further 5 attempts. Note also that the command above additionally demonstrates how a wandb run can be resumed across invocations of the Python script, by setting the wandb run ID argument to that of the original wandb run that resulted from the first script invocation.

At any time if a task script instance is not running, you can check the task's overall status using something like:
```bash
python ARGS "${MODELARGS[@]}" --max_remote_ktokens 60000 --no_run
```

The following table shows a variety of commonly useful script arguments for debugging, applying code changes, recovering from errors/batch failures, and such:

| **Argument(s)**                                                    | **Description|
|--------------------------------------------------------------------||
| `--task_dir /PATH/TO/DIR`                                          | Change the directory in which files are created to store the ongoing and final state, and output data of the command (recommended if installed via pip)                                                                                                                                                                                                                                                                                                                                                                                              |
| `--no_wandb`                                                       | Disable wandb logging|
| `--wandb_project NAME`                                             | Set the desired target wandb project for logging                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| `--wandb_name NAME`                                                | Set a custom fixed name for the target wandb logging run                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| `--wandb_run_id RUN_ID`                                            | Resume/append to a wandb run (specified by the desired run ID), or create it if it does not exist (auto-generated run IDs are typically lowercase alphanumeric strings of length 8)                                                                                                                                                                                                                                                                                                                                                                  |
| `--dryrun`                                                         | Prevent any API calls or changes to saved disk state, and just show what would be done based on the current task state                                                                                                                                                                                                                                                                                                                                                                                                                               |
| `--force_direct --direct_verbose always --max_session_requests 20` | Force only 20 requests to be made with the direct API, and print the requests and responses verbosely for debugging purposes (when combined with `--dryrun` only prints the requests that *would* have been made)                                                                                                                                                                                                                                                                                                                                    |
| `--max_remote_ktokens 90 --max_batch_ktokens 90`                   | Configure how many kilo-tokens can be pending in the batch queue at any one time in order to respect the OpenAI usage tier limitations (Note: `--max_batch_ktokens` must always be less than or equal to `--max_remote_ktokens`, otherwise no batch would fit on the remote)                                                                                                                                                                                                                                                                         |
| `--max_batch_requests 50`                                          | Limit the batch size in terms of number of requests per batch (also, num batches/num requests/num tokens/cost/MB size can be limited as appropriate for each batch, the remote server, each session, and/or the entire task)                                                                                                                                                                                                                                                                                                                         |
| `--max_remote_batches 0 --max_unpushed_batches 3`                  | Generate up to 3 local batches without letting any of them be pushed (e.g. allowing them to be manually inspected on disk without pushing)                                                                                                                                                                                                                                                                                                                                                                                                           |
| `--max_retries 5`                                                  | Adjust how often a request is automatically retried (if a retryable error occurs) before it is declared as failed                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| `--min_pass_ratio 0.8`                                             | At minimum what ratio of the requests in a batch need to be successful in order for the batch to be declared as 'passed' (too many consecutive non-passed batches for safety lead to an error and aborting the run, see `--max_pass_failures`)                                                                                                                                                                                                                                                                                                       |
| `--process_failed_batches 2 [--retry_fatal_requests]`              | If there are failed batches then the task aborts for safety (as manual intervention/code changes/sanity checking is probably required). This parameter allows up to a certain number of failed batches to be force-processed anyway, thereby allowing the task to proceed and potentially recover. If `--retry_fatal_requests` is also supplied, then requests that received fatal errors will be allowed to be retried (normally they are not, as fatal errors are ones where it is not expected that a retry has a chance of resolving the issue). |
| `--only_process`                                                   | Wait for and allow all pushed batches to complete and be processed without generating, commiting or pushing any new requests (i.e. no new work is generated or scheduled)                                                                                                                                                                                                                                                                                                                                                                            |
| `--reinit_meta`                                                    | Force the task metadata to be updated (usually task metadata is only captured once when the task is created/initialized), for example to change the request model, temperature, hyperparameters for parsing, or such (you must ensure that your task implementation can deal with whatever of these parameters you are changing)                                                                                                                                                                                                                     |
| `--wipe_requests`                                                  | Wipe all ongoing requests (e.g. useful if you changed the request generation and want to reconstruct all the requests in the queue, local batches, and remote). It is recommended to execute a separate run first with `--only_process` to avoid unnecessarily losing already-pushed requests and responses.                                                                                                                                                                                                                                         |
| `--wipe_failed`                                                    | Wipe all ongoing requests and failed samples, allowing them to be attempted again (with the full number of retries available again). It is recommended to execute a separate run first with `--only_process` to avoid unnecessarily losing already-pushed requests and responses.                                                                                                                                                                                                                                                                    |
| `--wipe_task`                                                      | Wipe entire task and start completely from scratch (can be combined with `--no_run` in order to not actually run the task after wiping)                                                                                                                                                                                                                                                                                                                                                                                                              |

## Wandb Logging

Wandb is used by default by the `TaskManager` and `GPTRequester` classes for logging and monitoring, unless explicitly disabled using `wandb=False` (`--no_wandb`). You can control the wandb project name using `wand_project='NAME'` (`--wandb_project NAME`, otherwise the default is `gpt_batch_api`), and if need be control the wandb entity using `wandb_entity='NAME'` (`--wandb_entity NAME`). If you wish to resume and continue a previous wandb run (essentially append to it), then find out its run ID (e.g. `a1dr4wwa`) and use something like `wandb_run_id='a1dr4wwa'` (`--wandb_run_id a1dr4wwa`).

In order to get the most out of the wandb logging, it is recommended to use the preconfigured `gpt_batch_api` saved view for the project being logged to (to show and organize the most useful stuff to see/monitor). Refer to [this example](https://wandb.ai/pallgeuer/gpt_batch_api_demo?nw=u38mn3ltgfn) to see how the saved view looks like. Here are the steps for configuring its use for your own wandb project that visualizes output generated by this library:
- Ensure your target wandb project exists and has at least one run in it. Easiest is just to start your first desired run.
- Copy the preconfigured `gpt_batch_api` saved view to the project workspace (assuming the project is `ENTITY/PROJECT`):
  ```bash
  python -m gpt_batch_api.wandb_configure_view --dst_entity ENTITY --dst_project PROJECT
  ```
  In most cases the default `PROJECT` name of `gpt_batch_api` is being used. If this is the case, you can just do:
  ```bash
  python -m gpt_batch_api.wandb_configure_view --dst_entity ENTITY
  ```
  Refer to the help for a more general understanding of what the script can do:
  ```bash
  python -m gpt_batch_api.wandb_configure_view --help
  ```
- Open your target wandb project in the web browser, i.e. `https://wandb.ai/ENTITY/PROJECT`
- Click on the icon with the three horizontal lines at the top-left of the workspace and switch to the saved view called *GPT Batch API* (should exist if the `wandb_configure_view script` worked correctly).
- Click the *Copy to my workspace* button at the top-right of the workspace. This updates your personal workspace in the project to look like the desired preconfigured view

You can search the code for the name of logged variables (possibly including the prefix like `Batch/` for example) to get an idea of what the variable represents (e.g. search for `num_final_none` in the code).

## Local Inference

For purposes of reproducibility, it may be of interest to run a task with a locally hosted LLM instead of one of OpenAI's models. While locally hosted LLMs generally do not support OpenAI's [Batch API](https://platform.openai.com/docs/guides/batch), they often support OpenAI's [direct API](https://platform.openai.com/docs/api-reference/chat). As such, when forced to exclusively use the direct API (`--force_direct`), this library is completely compatible with locally hosted LLMs!

Suppose we would normally run a task using:
```bash
python -m gpt_batch_api.task_manager_demo --task_dir /tmp/gpt_batch_api_tasks --task utterance_emotion --model gpt-4o-mini-2024-07-18 --cost_input_direct_mtoken 0.150 --cost_input_cached_mtoken 0.075 --cost_input_batch_mtoken 0.075 --cost_output_direct_mtoken 0.600 --cost_output_batch_mtoken 0.300
```
Then if we are using, for example, [Ollama](https://ollama.com) to host an LLM at `http://IP:PORT`, we can run the task locally and directly using:
```bash
python -m gpt_batch_api.task_manager_demo --task_dir /tmp/gpt_batch_api_tasks --task utterance_emotion --client_base_url http://IP:PORT/v1 --model llama3.1:70b --force_direct --cost_input_direct_mtoken 0 --cost_input_cached_mtoken 0 --cost_input_batch_mtoken 0 --cost_output_direct_mtoken 0 --cost_output_batch_mtoken 0  # <-- CAUTION: Set IP and PORT to appropriate values
```
Instead of specifying `--client_base_url`, you can alternatively just set the `OPENAI_BASE_URL` environment variable (see [Useful hints](#useful-hints)):
```bash
export OPENAI_BASE_URL="http://IP:PORT/v1"  # <-- CAUTION: Set IP and PORT to appropriate values
```
Local LLMs hosted by means other than Ollama should work similarly out of the box, provided the appropriate direct API is exposed.

## Citation
This repository is licensed under the [GNU GPL v3 license](LICENSE.md). Please give appropriate attribution to Philipp Allgeuer and this repository if you use it for your own purposes, publications, theses, reports, or derivative works. Thanks!
