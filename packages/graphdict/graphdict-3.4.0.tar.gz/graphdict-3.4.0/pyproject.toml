[build-system]
build-backend = 'setuptools.build_meta'
requires = ['setuptools>=77.0.3']

[project]
name = 'graphdict'
description = 'Python package for creating and manipulating graphs and networks'
readme = 'README.rst'
requires-python = '>=3.7'
dynamic = ['version']
keywords = [
    'Networks',
    'Graph Theory',
    'Mathematics',
    'network',
    'graph',
    'discrete mathematics',
    'math',
]
license = "BSD-3-Clause"
license-files = ["LICENSE.txt"]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Python :: 3 :: Only',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Scientific/Engineering :: Bio-Informatics',
    'Topic :: Scientific/Engineering :: Information Analysis',
    'Topic :: Scientific/Engineering :: Mathematics',
    'Topic :: Scientific/Engineering :: Physics',
]
dependencies = []

[[project.authors]]
name = 'Aric Hagberg'
email = 'hagberg@lanl.gov'

[[project.maintainers]]
name = 'Graphdict Developers'
email = 'networkx-discuss@googlegroups.com'

[project.urls]
"Bug Tracker" = 'https://github.com/taylortech75/graphdict/issues'
"Source Code" = 'https://github.com/taylortech75/graphdict'
Documentation = 'https://networkx.org/documentation/stable/'

[project.entry-points."graphdict.backends"]
nx_loopback = 'graphdict.classes.tests.dispatch_interface:backend_interface'

[project.optional-dependencies]
default = [
    'numpy>=1.25',
    'scipy>=1.11.2',
    'matplotlib>=3.8',
    'pandas>=2.0',
]
developer = [
    'pre-commit>=4.1',
    'mypy>=1.15',
]
doc = [
    'sphinx>=8.0',
    'pydata-sphinx-theme>=0.16',
    'sphinx-gallery>=0.18',
    'numpydoc>=1.8.0',
    'pillow>=10',
    'texext>=0.6.7',
    'myst-nb>=1.1',
    'intersphinx-registry',
]
example = [
    'osmnx>=2.0.0',
    'momepy>=0.7.2',
    'contextily>=1.6',
    'seaborn>=0.13',
    'cairocffi>=1.7',
    'igraph>=0.11',
    'scikit-learn>=1.5',
]
extra = [
    'lxml>=4.6',
    'pygraphviz>=1.14',
    'pydot>=3.0.1',
    'sympy>=1.10',
]
test = [
    'pytest>=7.2',
    'pytest-cov>=4.0',
    'pytest-xdist>=3.0',
]
test-extras = [
    'pytest-mpl',
    'pytest-randomly',
]

[tool.setuptools]
zip-safe = false
include-package-data = false
packages = [
    'graphdict',
    'graphdict.algorithms',
    'graphdict.algorithms.assortativity',
    'graphdict.algorithms.bipartite',
    'graphdict.algorithms.centrality',
    'graphdict.algorithms.community',
    'graphdict.algorithms.components',
    'graphdict.algorithms.connectivity',
    'graphdict.algorithms.coloring',
    'graphdict.algorithms.flow',
    'graphdict.algorithms.minors',
    'graphdict.algorithms.traversal',
    'graphdict.algorithms.isomorphism',
    'graphdict.algorithms.shortest_paths',
    'graphdict.algorithms.link_analysis',
    'graphdict.algorithms.operators',
    'graphdict.algorithms.approximation',
    'graphdict.algorithms.tree',
    'graphdict.classes',
    'graphdict.generators',
    'graphdict.drawing',
    'graphdict.linalg',
    'graphdict.readwrite',
    'graphdict.readwrite.json_graph',
    'graphdict.tests',
    'graphdict.utils',
]
platforms = [
    'Linux',
    'Mac OSX',
    'Windows',
    'Unix',
]

[tool.setuptools.dynamic.version]
attr = 'graphdict.__version__'

[tool.setuptools.package-data]
graphdict = ['tests/*.py']
"graphdict.algorithms" = ['tests/*.py']
"graphdict.algorithms.assortativity" = ['tests/*.py']
"graphdict.algorithms.bipartite" = ['tests/*.py']
"graphdict.algorithms.centrality" = ['tests/*.py']
"graphdict.algorithms.community" = ['tests/*.py']
"graphdict.algorithms.components" = ['tests/*.py']
"graphdict.algorithms.connectivity" = ['tests/*.py']
"graphdict.algorithms.coloring" = ['tests/*.py']
"graphdict.algorithms.minors" = ['tests/*.py']
"graphdict.algorithms.flow" = [
    'tests/*.py',
    'tests/*.bz2',
]
"graphdict.algorithms.isomorphism" = [
    'tests/*.py',
    'tests/*.*99',
]
"graphdict.algorithms.link_analysis" = ['tests/*.py']
"graphdict.algorithms.approximation" = ['tests/*.py']
"graphdict.algorithms.operators" = ['tests/*.py']
"graphdict.algorithms.shortest_paths" = ['tests/*.py']
"graphdict.algorithms.traversal" = ['tests/*.py']
"graphdict.algorithms.tree" = ['tests/*.py']
"graphdict.classes" = ['tests/*.py']
"graphdict.generators" = [
    'tests/*.py',
    'atlas.dat.gz',
]
"graphdict.drawing" = [
    'tests/*.py',
    'tests/baseline/*png',
]
"graphdict.linalg" = ['tests/*.py']
"graphdict.readwrite" = ['tests/*.py']
"graphdict.readwrite.json_graph" = ['tests/*.py']
"graphdict.utils" = ['tests/*.py', 'cacert.pem']

[tool.changelist]
ignored_user_logins = ["dependabot[bot]", "pre-commit-ci[bot]", "web-flow"]

[tool.ruff.lint]
extend-select = [
#  "B",        # flake8-bugbear
  "I",        # isort
#  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
#  "D",        # pydocstyle (see tool.ruff.lint.pydocstyle below)
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
#  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
#  "PL",       # pylint
  "PLR0402",
#  "PT",       # flake8-pytest-style
#  "PTH",      # flake8-use-pathlib
#  "RET",      # flake8-return
#  "RUF",      # Ruff-specific
#  "SIM",      # flake8-simplify
  "SIM101",
  "SIM109",
  "SIM110",
  "SIM118",
  "SIM2",
#  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
#  "FURB",     # refurb
  "PYI",      # flake8-pyi
  "W505",     # pycodestyle docstring/comment line length (see config below)
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "E741",     # Ambiguous variable name
  "E722",     # Do not use bare `except`
  "F",        # pyflakes
  "EM101",    # Exception must not use a string literal
  "EM102",    # Exception must not use an f-string literal
  "PD",       # pandas-vet
  "ICN",      # flake8-import-conventions
  "PYI",      # flake8-pyi
  "NPY002",   # Replace legacy `np.random.random` call with `np.random.Generator`
  "W291",     # Trailing white space
]
exclude=['doc/conf.py', '__init__.py']

# Need to select D above
#[tool.ruff.lint.pydocstyle]
#convention = "numpy"

[tool.ruff.lint.pycodestyle]
max-doc-length = 110

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ['I']
"examples/*.py" = ['I']
"doc/*.py" = ['I']
"tools/*.py" = ['I']
"graphdict/classes/filters.py" = ['C416']
"graphdict/classes/reportviews.py" = ['W505']  # Ignore long docstring examples

[tool.ruff.format]
docstring-code-format = true

[tool.mypy]
ignore_missing_imports = true
exclude = 'subgraphviews|reportviews'

[[tool.mypy.overrides]]
module = 'graphdict.classes.reportviews'
ignore_errors = true
