# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.6.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "grote"
version = "0.1.11"
description = "Groningen Translation Environment"
readme = "README.md"
authors = ["Gabriele Sarti"]
maintainers = ["Gabriele Sarti <gabriele.sarti996@gmail.com>"]
license = "Apache Software License 2.0"
repository = "https://github.com/gsarti/grote"
homepage = "https://github.com/gsarti/grote"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = ["translation environment", "gradio"]

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering :: Visualization",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11"
]

[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"grote" = "grote.app:main"


[tool.poetry.dependencies]
python = ">=3.10,<3.12"

gradio = ">=4.0,<5.0"
gradio_highlightedtextbox = "^0.0.13"
toml = "^0.10.2"

ipykernel = { version = "^6.19.2", optional = true }
ipywidgets = { version = "^8.0.0rc2", optional = true }
jupyterlab = { version = "^4.0.7", optional = true }

[tool.poetry.group.lint.dependencies]
bandit = "^1.7.4"
safety = "^2.2.0"
darglint = "^1.8.1"
pre-commit = "^2.19.0"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
ruff  = "^0.2.1"

[tool.poetry.extras]
notebook = ["ipykernel", "ipywidgets", "jupyterlab"]

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
testpaths = "tests"
python_files = "test_*.py"
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

[tool.bandit]
targets = ["grote"]
skips = ["B301"]

[tool.ruff]
target-version = "py39"
exclude = [
    ".git",
    ".vscode",
    ".github",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "htmlcov",
    "dev_examples",
    "dist",
    ".tox",
    "temp",
    "*.egg",
    "venv",
    ".venv",
]
fix = true
ignore = [
    "B006", # mutable default argument
    "C901", # function too complex
    "E501", # line too long (handled by format)
    "E731", # do not assign a lambda expression, use a def
    "E741", # ambiguous variable name
    "F722", # syntax error in forward annotation (as used by jaxtyping)
    "F821", # undefined name
    "PLR2004", # unnamed numerical constants used
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "W191", # indentation contains tabs (handled by format)
]
line-length = 119
select = [
    "E", # pycodestyle errors
    "F", # pyflakes
    "W", # pycodestyle warnings
    "C", # flake8-comprehensions
    #"D", # flake8-docstrings
    "B", # flake8-bugbear
    "I", # isort
    "UP", # flake8-pyupgrade
    "PLC", # flake8-pylint
    "PLE", # flake8-pylint
    "PLR", # flake8-pylint
    "PLW", # flake8-pylint
]
src = ["grote", "tests"]

[tool.ruff.isort]
known-first-party = ["grote"]
order-by-type = true

[tool.ruff.pylint]
max-branches = 20

[tool.ruff.pyupgrade]
keep-runtime-typing = true

[tool.ruff.pydocstyle]
convention = "google"
