# coding: utf-8

"""
    Conversations Inbox & Messages

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from hubspot.conversations.conversations.models.public_client import PublicClient
from hubspot.conversations.conversations.models.public_comment_all_of_attachments import PublicCommentAllOfAttachments
from hubspot.conversations.conversations.models.public_recipient import PublicRecipient
from hubspot.conversations.conversations.models.public_sender import PublicSender
from typing import Optional, Set
from typing_extensions import Self

class PublicComment(BaseModel):
    """
    PublicComment
    """ # noqa: E501
    id: StrictStr
    conversations_thread_id: StrictStr = Field(alias="conversationsThreadId")
    created_at: datetime = Field(alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    created_by: StrictStr = Field(alias="createdBy")
    client: PublicClient
    senders: List[PublicSender]
    recipients: List[PublicRecipient]
    archived: StrictBool
    type: StrictStr
    text: StrictStr
    rich_text: StrictStr = Field(alias="richText")
    attachments: List[PublicCommentAllOfAttachments]
    __properties: ClassVar[List[str]] = ["id", "conversationsThreadId", "createdAt", "updatedAt", "createdBy", "client", "senders", "recipients", "archived", "type", "text", "richText", "attachments"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['COMMENT']):
            raise ValueError("must be one of enum values ('COMMENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in senders (list)
        _items = []
        if self.senders:
            for _item_senders in self.senders:
                if _item_senders:
                    _items.append(_item_senders.to_dict())
            _dict['senders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item_recipients in self.recipients:
                if _item_recipients:
                    _items.append(_item_recipients.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "conversationsThreadId": obj.get("conversationsThreadId"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "createdBy": obj.get("createdBy"),
            "client": PublicClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "senders": [PublicSender.from_dict(_item) for _item in obj["senders"]] if obj.get("senders") is not None else None,
            "recipients": [PublicRecipient.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "archived": obj.get("archived"),
            "type": obj.get("type") if obj.get("type") is not None else 'COMMENT',
            "text": obj.get("text"),
            "richText": obj.get("richText"),
            "attachments": [PublicCommentAllOfAttachments.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None
        })
        return _obj


