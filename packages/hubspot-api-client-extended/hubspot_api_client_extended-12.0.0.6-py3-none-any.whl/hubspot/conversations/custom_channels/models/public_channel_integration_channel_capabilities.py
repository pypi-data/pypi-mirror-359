# coding: utf-8

"""
    Conversations Custom Channels

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PublicChannelIntegrationChannelCapabilities(BaseModel):
    """
    PublicChannelIntegrationChannelCapabilities
    """ # noqa: E501
    delivery_identifier_types: Optional[List[StrictStr]] = Field(default=None, alias="deliveryIdentifierTypes")
    threading_model: Optional[StrictStr] = Field(default=None, alias="threadingModel")
    allow_inline_images: Optional[StrictBool] = Field(default=None, alias="allowInlineImages")
    allow_outgoing_messages: Optional[StrictBool] = Field(default=None, alias="allowOutgoingMessages")
    allow_conversation_start: Optional[StrictBool] = Field(default=None, alias="allowConversationStart")
    max_file_attachment_count: Optional[StrictInt] = Field(default=None, alias="maxFileAttachmentCount")
    allow_multiple_recipients: Optional[StrictBool] = Field(default=None, alias="allowMultipleRecipients")
    outgoing_attachment_types: Optional[List[StrictStr]] = Field(default=None, alias="outgoingAttachmentTypes")
    max_file_attachment_size_bytes: Optional[StrictInt] = Field(default=None, alias="maxFileAttachmentSizeBytes")
    allowed_file_attachment_mime_types: Optional[List[StrictStr]] = Field(default=None, alias="allowedFileAttachmentMimeTypes")
    rich_text: Optional[List[StrictStr]] = Field(default=None, alias="richText")
    __properties: ClassVar[List[str]] = ["deliveryIdentifierTypes", "threadingModel", "allowInlineImages", "allowOutgoingMessages", "allowConversationStart", "maxFileAttachmentCount", "allowMultipleRecipients", "outgoingAttachmentTypes", "maxFileAttachmentSizeBytes", "allowedFileAttachmentMimeTypes", "richText"]

    @field_validator('delivery_identifier_types')
    def delivery_identifier_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['HS_PHONE_NUMBER', 'CHANNEL_SPECIFIC_OPAQUE_ID']):
                raise ValueError("each list item must be one of ('HS_PHONE_NUMBER', 'CHANNEL_SPECIFIC_OPAQUE_ID')")
        return value

    @field_validator('threading_model')
    def threading_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DELIVERY_IDENTIFIER', 'INTEGRATION_THREAD_ID']):
            raise ValueError("must be one of enum values ('DELIVERY_IDENTIFIER', 'INTEGRATION_THREAD_ID')")
        return value

    @field_validator('outgoing_attachment_types')
    def outgoing_attachment_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FILE', 'QUICK_REPLIES']):
                raise ValueError("each list item must be one of ('FILE', 'QUICK_REPLIES')")
        return value

    @field_validator('rich_text')
    def rich_text_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['BLOCKQUOTE', 'BOLD', 'FONT_SIZE', 'FONT_STYLE', 'HYPERLINK', 'ITALIC', 'LISTS', 'TEXT_ALIGNMENT', 'TEXT_HIGHLIGHT_COLOR', 'TEXT_COLOR', 'UNDERLINE']):
                raise ValueError("each list item must be one of ('BLOCKQUOTE', 'BOLD', 'FONT_SIZE', 'FONT_STYLE', 'HYPERLINK', 'ITALIC', 'LISTS', 'TEXT_ALIGNMENT', 'TEXT_HIGHLIGHT_COLOR', 'TEXT_COLOR', 'UNDERLINE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicChannelIntegrationChannelCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicChannelIntegrationChannelCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deliveryIdentifierTypes": obj.get("deliveryIdentifierTypes"),
            "threadingModel": obj.get("threadingModel"),
            "allowInlineImages": obj.get("allowInlineImages"),
            "allowOutgoingMessages": obj.get("allowOutgoingMessages"),
            "allowConversationStart": obj.get("allowConversationStart"),
            "maxFileAttachmentCount": obj.get("maxFileAttachmentCount"),
            "allowMultipleRecipients": obj.get("allowMultipleRecipients"),
            "outgoingAttachmentTypes": obj.get("outgoingAttachmentTypes"),
            "maxFileAttachmentSizeBytes": obj.get("maxFileAttachmentSizeBytes"),
            "allowedFileAttachmentMimeTypes": obj.get("allowedFileAttachmentMimeTypes"),
            "richText": obj.get("richText")
        })
        return _obj


