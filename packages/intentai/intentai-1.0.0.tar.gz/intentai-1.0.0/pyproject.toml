[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "intentai"
dynamic = ["version"]
description = "Dynamic tool detection and parameter extraction system that converts natural language into structured tool calls"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "IntentAI Team", email = "team@intentai.com"},
]
maintainers = [
    {name = "IntentAI Team", email = "team@intentai.com"},
]
keywords = [
    "nlp",
    "intent-detection",
    "tool-calling",
    "parameter-extraction",
    "natural-language-processing",
    "ai",
    "machine-learning",
    "automation",
    "cli",
    "api"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=1.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=2.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/your-username/intentai"
Documentation = "https://intentai.readthedocs.io/"
Repository = "https://github.com/your-username/intentai"
"Bug Tracker" = "https://github.com/your-username/intentai/issues"
"Source Code" = "https://github.com/your-username/intentai"
"Download" = "https://pypi.org/project/intentai/#files"
"Changelog" = "https://github.com/your-username/intentai/blob/main/CHANGELOG.md"

[project.scripts]
intentai = "intentai.cli:main"

[project.gui-scripts]
intentai-gui = "intentai.gui:main"

[tool.hatch.version]
path = "intentai/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["intentai"]

[tool.hatch.build.targets.sdist]
include = [
    "/intentai",
    "/examples",
    "/docs",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
    "/CONTRIBUTING.md",
    "/MANIFEST.in",
    "/pyproject.toml",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["intentai"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pydantic.*",
    "pydantic_core.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "examples",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

[tool.coverage.run]
source = ["intentai"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 