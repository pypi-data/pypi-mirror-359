{"version":3,"file":"509.6ed692b6959efb0b1eb8.js?v=6ed692b6959efb0b1eb8","mappings":"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","sources":["webpack://jupytercheckpoints/./lib/index.js"],"sourcesContent":["import { INotebookTracker } from '@jupyterlab/notebook';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { ToolbarButton, Dialog, showDialog } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The plugin registration information.\n */\nconst plugin = {\n    id: 'jupytercheckpoints:revert-button',\n    description: 'A JupyterLab extension adding a revert button to the toolbar.',\n    autoStart: true,\n    requires: [INotebookTracker, IEditorTracker, IDocumentManager],\n    activate: activateRevertButton\n};\n/**\n * Format the checkpoint date for display\n */\nfunction formatCheckpointDate(date) {\n    const d = new Date(date);\n    return d.toLocaleString();\n}\n/**\n * Format checkpoint ID to be more user-friendly\n */\nfunction formatCheckpointId(id) {\n    // If the ID is a UUID-like string, shorten it\n    if (id.length > 8) {\n        return id.substring(0, 8);\n    }\n    return id;\n}\n/**\n * Create a more descriptive label for a checkpoint\n */\nfunction createCheckpointLabel(checkpoint) {\n    const id = formatCheckpointId(checkpoint.id);\n    const date = formatCheckpointDate(checkpoint.last_modified);\n    // Calculate time difference\n    const now = new Date();\n    const checkpointDate = new Date(checkpoint.last_modified);\n    const diffMs = now.getTime() - checkpointDate.getTime();\n    const diffMins = Math.round(diffMs / 60000);\n    const diffHours = Math.round(diffMs / 3600000);\n    const diffDays = Math.round(diffMs / 86400000);\n    let timeAgo;\n    if (diffMins < 60) {\n        timeAgo = `${diffMins} 分钟前`;\n    }\n    else if (diffHours < 24) {\n        timeAgo = `${diffHours} 小时前`;\n    }\n    else {\n        timeAgo = `${diffDays} 天前`;\n    }\n    return `[id: ${id}] ${date} (${timeAgo})`;\n}\n/**\n * A simple widget to display HTML content in a dialog\n */\nclass HTMLDialogContent extends Widget {\n    constructor(content) {\n        super();\n        this.addClass('jp-RevertCheckpoint-dialog');\n        this.node.appendChild(content);\n    }\n}\n/**\n * Activate the revert button extension.\n */\nfunction activateRevertButton(app, notebookTracker, editorTracker, docManager) {\n    console.log('JupyterLab extension jupytercheckpoints:revert-button is activated!');\n    // Track the toolbar items we create for each widget\n    const toolbarItems = {};\n    // Add the toolbar button to each notebook and file editor\n    function addToolbarButton(widget) {\n        const context = docManager.contextForWidget(widget);\n        if (!context) {\n            return;\n        }\n        // Check if we already added a button for this widget\n        if (toolbarItems[context.path]) {\n            return;\n        }\n        // Create the toolbar button\n        const button = new ToolbarButton({\n            className: 'jp-RevertCheckpoint-button jp-mod-styled',\n            icon: 'fa fa-undo',\n            label: 'Revert Checkpoint',\n            tooltip: 'Revert file to previous checkpoint state',\n            onClick: async () => {\n                try {\n                    // Get the list of checkpoints\n                    const checkpoints = await context.listCheckpoints();\n                    if (checkpoints.length === 0) {\n                        void showDialog({\n                            title: '没有检查点',\n                            body: '当前文件没有可用的检查点。',\n                            buttons: [Dialog.okButton()]\n                        });\n                        return;\n                    }\n                    // Create a dialog with a dropdown to select a checkpoint\n                    const body = document.createElement('div');\n                    const label = document.createElement('label');\n                    label.textContent = '选择要恢复的检查点：';\n                    body.appendChild(label);\n                    const select = document.createElement('select');\n                    select.style.width = '100%';\n                    select.style.marginTop = '10px';\n                    // Add options for each checkpoint\n                    checkpoints.forEach((checkpoint) => {\n                        const option = document.createElement('option');\n                        option.value = checkpoint.id;\n                        option.text = createCheckpointLabel(checkpoint);\n                        select.appendChild(option);\n                    });\n                    body.appendChild(select);\n                    // Show the dialog\n                    const result = await showDialog({\n                        title: '选择一个检查点',\n                        body: new HTMLDialogContent(body),\n                        buttons: [Dialog.cancelButton(), Dialog.okButton()]\n                    });\n                    if (result.button.accept) {\n                        const selectedId = select.value;\n                        const selectedCheckpoint = checkpoints.find(cp => cp.id === selectedId);\n                        if (!selectedCheckpoint) {\n                            return;\n                        }\n                        // get file name (remove path)\n                        const fileName = context.path.split('/').pop() || context.path;\n                        // create confirmation dialog content\n                        const confirmBody = document.createElement('div');\n                        // add warning text\n                        const warningText = document.createElement('p');\n                        const fileType = fileName.endsWith('.ipynb') ? 'Notebook' : '文件';\n                        warningText.innerHTML = `您确定要将${fileType} <strong>${fileName}</strong> 恢复到检查点状态吗？<strong>此操作无法撤消。</strong>`;\n                        confirmBody.appendChild(warningText);\n                        // add checkpoint time information\n                        const timeInfo = document.createElement('p');\n                        const checkpointDate = new Date(selectedCheckpoint.last_modified);\n                        const now = new Date();\n                        const diffMs = now.getTime() - checkpointDate.getTime();\n                        // show different time format based on time difference\n                        let timeAgo;\n                        const diffMins = Math.round(diffMs / 60000);\n                        const diffHours = Math.round(diffMs / 3600000);\n                        const diffDays = Math.round(diffMs / 86400000);\n                        if (diffMins < 60) {\n                            timeAgo = `${diffMins} 分钟前`;\n                        }\n                        else if (diffHours < 24) {\n                            timeAgo = `${diffHours} 小时前`;\n                        }\n                        else {\n                            timeAgo = `${diffDays} 天前`;\n                        }\n                        timeInfo.innerHTML = `检查点最后更新时间：`;\n                        const timeDetail = document.createElement('p');\n                        timeDetail.style.textAlign = 'center';\n                        timeDetail.textContent = `${formatCheckpointDate(selectedCheckpoint.last_modified)} (${timeAgo})`;\n                        timeInfo.appendChild(timeDetail);\n                        confirmBody.appendChild(timeInfo);\n                        // show confirmation dialog\n                        const confirmResult = await showDialog({\n                            title: `恢复${fileType}到检查点`,\n                            body: new HTMLDialogContent(confirmBody),\n                            buttons: [\n                                Dialog.cancelButton({ label: '取消' }),\n                                Dialog.warnButton({ label: '恢复' })\n                            ]\n                        });\n                        if (confirmResult.button.accept) {\n                            try {\n                                // show loading state\n                                const busySignal = document.createElement('div');\n                                busySignal.className = 'jp-Dialog-busy';\n                                document.body.appendChild(busySignal);\n                                try {\n                                    // first restore checkpoint (server-side operation)\n                                    await context.restoreCheckpoint(selectedId);\n                                    // mark model as non-dirty to ensure correct refresh\n                                    context.model.dirty = false;\n                                    // get updated content from server and refresh frontend display\n                                    await context.revert();\n                                }\n                                finally {\n                                    // remove loading state regardless of success or failure\n                                    if (busySignal && busySignal.parentNode) {\n                                        busySignal.parentNode.removeChild(busySignal);\n                                    }\n                                }\n                            }\n                            catch (error) {\n                                console.error('Error restoring checkpoint:', error);\n                                void showDialog({\n                                    title: '恢复检查点失败',\n                                    body: `恢复检查点时出错: ${error}`,\n                                    buttons: [Dialog.okButton()]\n                                });\n                            }\n                        }\n                    }\n                }\n                catch (error) {\n                    console.error('Error listing or restoring checkpoints:', error);\n                    void showDialog({\n                        title: '错误',\n                        body: `获取或恢复检查点时出错: ${error}`,\n                        buttons: [Dialog.okButton()]\n                    });\n                }\n            }\n        });\n        // Add the button to the toolbar\n        widget.toolbar.insertItem(10, 'revertCheckpoint', button);\n        // Keep track of the button for disposal\n        toolbarItems[context.path] = button;\n    }\n    // Add the button to existing notebooks and editors\n    notebookTracker.forEach(addToolbarButton);\n    editorTracker.forEach(addToolbarButton);\n    // Add the button to new notebooks and editors\n    notebookTracker.widgetAdded.connect((sender, widget) => {\n        addToolbarButton(widget);\n    });\n    editorTracker.widgetAdded.connect((sender, widget) => {\n        addToolbarButton(widget);\n    });\n    // Clean up when widgets are disposed\n    // Set up a periodic cleanup to check for disposed widgets\n    setInterval(() => {\n        Object.keys(toolbarItems).forEach(path => {\n            const widget = notebookTracker.find(w => docManager.contextForWidget(w)?.path === path) ||\n                editorTracker.find(w => docManager.contextForWidget(w)?.path === path);\n            if (!widget) {\n                // Widget is no longer in the tracker, dispose the button\n                if (toolbarItems[path]) {\n                    toolbarItems[path].dispose();\n                    delete toolbarItems[path];\n                }\n            }\n        });\n    }, 5000); // Check every 5 seconds\n    // Clean up the interval when the app is disposed\n}\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n"],"names":["plugin","id","description","autoStart","requires","INotebookTracker","IEditorTracker","IDocumentManager","activate","app","notebookTracker","editorTracker","docManager","console","log","toolbarItems","addToolbarButton","widget","context","contextForWidget","path","button","ToolbarButton","className","icon","label","tooltip","onClick","async","checkpoints","listCheckpoints","length","showDialog","title","body","buttons","Dialog","okButton","document","createElement","textContent","appendChild","select","style","width","marginTop","forEach","checkpoint","option","value","text","substring","formatCheckpointId","date","formatCheckpointDate","last_modified","now","Date","checkpointDate","diffMs","getTime","diffMins","Math","round","diffHours","diffDays","timeAgo","createCheckpointLabel","HTMLDialogContent","cancelButton","accept","selectedId","selectedCheckpoint","find","cp","fileName","split","pop","confirmBody","warningText","fileType","endsWith","innerHTML","timeInfo","timeDetail","textAlign","warnButton","busySignal","restoreCheckpoint","model","dirty","revert","parentNode","removeChild","error","toolbar","insertItem","widgetAdded","connect","sender","setInterval","Object","keys","w","dispose","toLocaleString","Widget","constructor","content","super","this","addClass","node"],"sourceRoot":""}