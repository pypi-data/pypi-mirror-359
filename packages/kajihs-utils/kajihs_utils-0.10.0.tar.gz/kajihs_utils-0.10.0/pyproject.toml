# See specifications: https://packaging.python.org/en/latest/specifications/pyproject-toml/
[project]
dynamic = ["version", "authors", "urls"]
name = "kajihs-utils"
description = "Totally typed, plausibly practical, and remarkably random utilitiesâ€”for me, and maybe for you too."
requires-python = ">=3.12"
keywords = [
    "python",
    "utils",
    "tools",
    "jax",
    "loguru",
    "matplotlib",
    "numpy",
    "pyplot",
    "whenever",
]
readme = "README.md"
license = "MIT"
license-files = ["LICENSE*"]

# List of classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Typing :: Typed",
]

dependencies = []

    [project.optional-dependencies]
    jax = ["jax>=0.4.36"]
    loguru = ["loguru>=0.7.3", "rich>=13.9.4"]
    pyplot = ["matplotlib>=3.10.0"]
    numpy = ["numpy>=2.2.0"]
    whenever = ["whenever>=0.7.3"]


[dependency-groups]
dev = [
    "hatchling",
    "pre-commit",
    "commitizen",
    "basedpyright",
    "pytest",
    "pytest-cov",
    "pytest-md-report",
    "covdefaults",
]

docs = [
    "mkdocs-material",
    "mkdocstrings[python]",
    "mkdocs-git-revision-date-localized-plugin",
    "griffe-fieldz",
    "griffe-warnings-deprecated",
    "griffe-generics",
    "griffe-inherited-method-crossrefs",
]


    # https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#creating-executable-scripts
    [project.scripts]
    kajihs-utils = "kajihs_utils:main_cli"


# === Build ===
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["tools/commitizen_version_provider"]
[tool.hatch.version]
path = "src/kajihs_utils/__about__.py"
[tool.hatch.metadata.hooks.custom]
path = "tools/hatch_build.py"

# === Tools ===
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md or https://docs.basedpyright.com/dev/configuration/config-files/
[tool.basedpyright] # TODO: Migrate to `ty` when stable enough
typeCheckingMode = "recommended" # standard recommended

venvPath = "."
venv = ".venv"
pythonVersion = "3.12"

pythonPlatform = "All"

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
deprecateTypingAliases = true

reportImplicitStringConcatenation = false # Ruff handles this

# TODO: Comment out for production
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportAny = "none"
reportExplicitAny = "none"

[tool.ruff] # https://docs.astral.sh/ruff/settings
fix = true
preview = true
line-length = 100
extend-include = ["*.ipynb"]
    [tool.ruff.format]
    preview = true
    docstring-code-format = true

    [tool.ruff.lint]
    preview = true
    pydocstyle.convention = "google"
    flake8-annotations.mypy-init-return = true
    logger-objects = ["loguru.logger"]
    select = ["ALL"]

    ignore = [
        # === Rules incompatible with Ruff formatter  ===
        "W191",   # tab-indentation
        "E111",   # indentation-with-invalid-multiple
        "E114",   # indentation-with-invalid-multiple-comment
        "E117",   # over-indented
        "E501",
        "D206",   # docstring-tab-indentation
        "D300",   # triple-single-quotes
        "Q000",   # bad-quotes-inline-string
        "Q001",   # bad-quotes-multiline-string
        "Q002",   # bad-quotes-docstring
        "Q003",   # avoidable-escaped-quote
        "COM812", # missing-trailing-comma
        "COM819", # prohibited-trailing-comma
        "ISC002", # multi-line-implicit-string-concatenation
        "W291",   # trailing whitespace
        "W292",
        "W293",
        "W391",
        "E271",

        # === Convenience ===
        "CPY001", # Copyright notice at top of file
        "ISC001", # Checks for implicitly concatenated strings on a single line. -- Should not be used with formatter
        "D212",   # Multi-line docstring summary should start at the first line
        "TD002",  # Missing author in TODO; try: `TODO(<author_name>): ...` or `TODO @<author_name>: ...`
        "TD003",  # Missing issue link on the line following this TODO
        "TD004",  # Missing colon after TODO
        "FIX002",
        # --- Trying out ---
        "D105", # Missing docstring in magic method
        # "D107",   # Missing docstring in `__init__`
        # "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in
        # "RET504", # Unnecessary assignment to `...` before `return` statement

        # TODO: Comment out for production release
        "ERA001", # Found commented-out code
        "S101",   # Use of `assert` detected
        "G004",   # Logging statement uses f-string

        # TODO: Uncomment to check docs
        "DOC201", # No return in docs
    ]
        [tool.ruff.lint.per-file-ignores]
        "tests/*" = [
            "INP001",
            "SLF001",  # Private member accessed: `self._foo`
            "D100",    # Missing docstring in public module
            "D101",    # Missing docstring in public class
            "D102",    # Missing docstring in public method
            "D103",    # Missing docstring in public function
            "PLR6301", # Method `` could be a function, class method, or static method
            "PLR2004", # Magic value used in comparison, consider replacing `` with a constant variable
            "ANN",
        ]
        "*.ipynb" = [
            "D101", # Missing docstring in public class
            "D103", # Missing docstring in public function
        ]
        "dev/_*" = [
            "D103", # Missing docstring in public function
        ]
        "tools/*" = ["INP001"]

        [tool.ruff.lint.flake8-import-conventions.extend-aliases]
        "typed_settings" = "ts"


[tool.pytest.ini_options] # https://docs.pytest.org/en/stable/customize.html
# You might want to add some more dependencies, like those of `hatch test`:
# https://hatch.pypa.io/1.13/config/internal/testing/#dependencies
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
addopts = [
    "-m=not slow",
    "--doctest-modules",
    "--cov=.",
    "--strict-config",
    "--strict-markers",
]
pythonpath = ["src"]

# https://github.com/thombashi/pytest-md-report#ini-options
md_report = false                                             # Mainly used in CI
md_report_verbose = 2
md_report_exclude_outcomes = ["passed", "xfailed", "skipped"]


[tool.coverage.run]
plugins = [
    "covdefaults", # https://github.com/asottile/covdefaults
]
omit = ["tools/*", "src/kajihs_utils/experimental/*"]

[tool.coverage.report]
fail_under = 80


[tool.codespell]
write-changes = true
check-filenames = true
ignore-words-list = "fro"

[tool.markdownlint]
first-line-h1 = false
no-inline-html = false
line-length = false


[tool.commitizen]
version_provider = "custom"
    [project.entry-points."commitizen.provider"]
    "custom" = "commitizen_version_provider:AboutPyProvider"
