metadata:
  name: "Kreuzberg"
  version: "3.2.0"
  description: "A text extraction library supporting PDFs, images, office documents and more"

outputs:
  - file: "CLAUDE.md"
    template: |
      # CLAUDE.md

      This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

      ## Project Overview

      {{ .Description }}

      {{ range .Rules }}
      ## {{ .Name }}
      {{ .Content }}
      {{ end }}

      {{ range .Sections }}
      ## {{ .Title }}
      {{ .Content }}
      {{ end }}
  - file: "GEMINI.md"
    template: |
      # GEMINI.md

      This file provides guidance to Gemini when working with code in this repository.

      ## Project Overview

      {{ .Description }}

      {{ range .Rules }}
      ## {{ .Name }}
      {{ .Content }}
      {{ end }}

      {{ range .Sections }}
      ## {{ .Title }}
      {{ .Content }}
      {{ end }}
  - file: ".cursorrules"
    template: |
      # Kreuzberg
      A text extraction library supporting PDFs, images, office documents and more

      {{ range .Rules }}
      ## {{ .Name }}
      {{ .Content }}
      {{ end }}

      {{ range .Sections }}
      ## {{ .Title }}
      {{ .Content }}
      {{ end }}
  - file: ".windsurfrules"
    template: |
      # Kreuzberg
      A text extraction library supporting PDFs, images, office documents and more

      {{ range .Rules }}
      ## {{ .Name }}
      {{ .Content }}
      {{ end }}

      {{ range .Sections }}
      ## {{ .Title }}
      {{ .Content }}
      {{ end }}

rules:
  - name: "Development Commands"
    priority: 10
    content: |
      ### Dependencies
      - Install dependencies: `uv sync`
      - Install with all optional dependencies: `uv sync --all-extras`

      ### Testing
      - Run all tests: `pytest`
      - Run specific test file: `pytest tests/extraction_test.py`
      - Run with coverage: `pytest --cov`
      - Coverage must be at least 95%

      ### Code Quality
      - Format code: `ruff format`
      - Lint code: `ruff check`
      - Fix linting issues: `ruff check --fix`
      - Type check: `mypy`

      ### Pre-commit
      - Install hooks: `pre-commit install && pre-commit install --hook-type commit-msg`
      - Run manually: `pre-commit run --all-files`

      ### Documentation
      - Build docs: `mkdocs build`
      - Serve docs locally: `mkdocs serve`

  - name: "Architecture"
    priority: 9
    content: |
      ### Core Extraction Flow
      1. **Entry Point**: `extraction.py` provides main functions (`extract_file`, `extract_bytes`, etc.)
      2. **Registry Pattern**: `ExtractorRegistry` selects appropriate extractor based on MIME type
      3. **Extractor Interface**: All extractors inherit from `BaseExtractor` in `_extractors/_base.py`
      4. **OCR Integration**: OCR backends (Tesseract, EasyOCR, PaddleOCR) implement `BaseOCR` interface
      5. **Configuration**: `ExtractionConfig` dataclass controls all extraction behavior

      ### Key Components
      - **Extractors**: Specialized classes for each file type (PDF, image, HTML, etc.)
      - **OCR Backends**: Pluggable OCR engines with separate configuration classes
      - **GMFT Integration**: Table extraction using GMFT library for PDFs
      - **Chunking**: Text splitting functionality in `_chunker.py`
      - **Async/Sync**: Primary async implementation with sync wrappers in `_utils/_sync.py`

      ### Adding New Features
      - New extractors: Inherit from `BaseExtractor` and register with `ExtractorRegistry`
      - New OCR backends: Implement `BaseOCR` interface
      - Configuration options: Extend `ExtractionConfig` or create backend-specific configs
      - Hooks: Use `pre_validate_hook` and `post_extraction_hook` for custom processing

  - name: "Error Handling"
    priority: 8
    content: |
      - **Exception-based**: All errors are raised as exceptions, no tuple returns
      - **Base class**: All exceptions inherit from `KreuzbergError`
      - **Context**: Exceptions include a `context` parameter with debugging information
      - **Common exceptions**:
        - `ValidationError`: Configuration or input validation failures
        - `ParsingError`: Document parsing failures
        - `OCRError`: OCR processing failures
        - `MissingDependencyError`: Missing optional dependencies

  - name: "Testing Patterns"
    priority: 7
    content: |
      - Test files in `tests/test_source_files/` for various formats
      - Mock OCR responses for predictable testing
      - Both sync and async test variants
      - Comprehensive error case coverage

  - name: "Important Instructions"
    priority: 10
    content: |
      - Do what has been asked; nothing more, nothing less
      - NEVER create files unless they're absolutely necessary for achieving your goal
      - ALWAYS prefer editing an existing file to creating a new one
      - NEVER proactively create documentation files (*.md) or README files
      - Only create documentation files if explicitly requested by the User
      - All builtin imports should be at the top level (except for cyclical or optional dependencies)
      - When committing, always use the format specified in the CLAUDE.md

sections:
  - title: "Planned Features"
    content: |
      ### Structured Extraction (Issue #55)
      - **Goal**: Enable extraction of structured data from documents using vision models
      - **Implementation**:
        - Extend `ExtractionConfig` with structured extraction fields
        - Support `msgspec.Struct` and Pydantic `BaseModel` as output types
        - Use LiteLLM for vision model integration
        - Implement retry logic with error feedback
      - **Configuration**: Currently programmatic only (no `kreuzberg.toml`)
