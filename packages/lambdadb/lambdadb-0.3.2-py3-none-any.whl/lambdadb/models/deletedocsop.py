"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .filter_ import Filter, FilterTypedDict
from .ids import IDs, IDsTypedDict
from lambdadb.types import BaseModel
from lambdadb.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


DeleteDocsRequestBodyTypedDict = TypeAliasType(
    "DeleteDocsRequestBodyTypedDict", Union[IDsTypedDict, FilterTypedDict]
)


DeleteDocsRequestBody = TypeAliasType("DeleteDocsRequestBody", Union[IDs, Filter])


class DeleteDocsRequestTypedDict(TypedDict):
    project_name: str
    r"""Project name."""
    collection_name: str
    r"""Collection name."""
    request_body: DeleteDocsRequestBodyTypedDict


class DeleteDocsRequest(BaseModel):
    project_name: Annotated[
        str,
        pydantic.Field(alias="projectName"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Project name."""

    collection_name: Annotated[
        str,
        pydantic.Field(alias="collectionName"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Collection name."""

    request_body: Annotated[
        DeleteDocsRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]


class DeleteDocsResponseTypedDict(TypedDict):
    r"""Delete request accepted."""

    message: NotRequired[str]


class DeleteDocsResponse(BaseModel):
    r"""Delete request accepted."""

    message: Optional[str] = None
