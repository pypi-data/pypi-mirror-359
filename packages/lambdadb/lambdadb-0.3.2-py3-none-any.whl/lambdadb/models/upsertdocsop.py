"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from lambdadb.types import BaseModel
from lambdadb.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpsertDocsDocTypedDict(TypedDict):
    pass


class UpsertDocsDoc(BaseModel):
    pass


class UpsertDocsRequestBodyTypedDict(TypedDict):
    docs: List[UpsertDocsDocTypedDict]
    r"""A list of documents to upsert."""


class UpsertDocsRequestBody(BaseModel):
    docs: List[UpsertDocsDoc]
    r"""A list of documents to upsert."""


class UpsertDocsRequestTypedDict(TypedDict):
    project_name: str
    r"""Project name."""
    collection_name: str
    r"""Collection name."""
    request_body: UpsertDocsRequestBodyTypedDict


class UpsertDocsRequest(BaseModel):
    project_name: Annotated[
        str,
        pydantic.Field(alias="projectName"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Project name."""

    collection_name: Annotated[
        str,
        pydantic.Field(alias="collectionName"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Collection name."""

    request_body: Annotated[
        UpsertDocsRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]


class UpsertDocsResponseTypedDict(TypedDict):
    r"""Upsert request accepted."""

    message: NotRequired[str]


class UpsertDocsResponse(BaseModel):
    r"""Upsert request accepted."""

    message: Optional[str] = None
