# Generated from PS.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00c1")
        buf.write("\u03ec\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\3\2\3\2\3\2\5\2\u00a8")
        buf.write("\n\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\5")
        buf.write("\5\u00b6\n\5\3\6\3\6\3\6\3\6\5\6\u00bc\n\6\3\6\3\6\3\7")
        buf.write("\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\5\t\u00ca\n\t\3\n")
        buf.write("\3\n\3\n\7\n\u00cf\n\n\f\n\16\n\u00d2\13\n\3\13\3\13\3")
        buf.write("\13\3\13\7\13\u00d8\n\13\f\13\16\13\u00db\13\13\3\13\5")
        buf.write("\13\u00de\n\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u00e6")
        buf.write("\n\13\f\13\16\13\u00e9\13\13\3\13\5\13\u00ec\n\13\3\13")
        buf.write("\3\13\5\13\u00f0\n\13\3\13\3\13\3\13\3\13\3\13\5\13\u00f7")
        buf.write("\n\13\3\13\3\13\3\13\3\13\5\13\u00fd\n\13\3\f\3\f\3\f")
        buf.write("\3\f\7\f\u0103\n\f\f\f\16\f\u0106\13\f\3\f\5\f\u0109\n")
        buf.write("\f\3\f\3\f\3\r\3\r\3\r\7\r\u0110\n\r\f\r\16\r\u0113\13")
        buf.write("\r\3\16\3\16\3\16\3\16\3\16\3\16\7\16\u011b\n\16\f\16")
        buf.write("\16\16\u011e\13\16\3\17\3\17\3\17\3\17\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\7\21\u012c\n\21\f\21\16\21\u012f")
        buf.write("\13\21\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u0137\n\22\f")
        buf.write("\22\16\22\u013a\13\22\3\23\3\23\3\23\3\23\3\23\3\23\7")
        buf.write("\23\u0142\n\23\f\23\16\23\u0145\13\23\3\24\3\24\3\24\6")
        buf.write("\24\u014a\n\24\r\24\16\24\u014b\5\24\u014e\n\24\3\25\3")
        buf.write("\25\3\25\3\25\7\25\u0154\n\25\f\25\16\25\u0157\13\25\5")
        buf.write("\25\u0159\n\25\3\26\3\26\7\26\u015d\n\26\f\26\16\26\u0160")
        buf.write("\13\26\3\27\3\27\7\27\u0164\n\27\f\27\16\27\u0167\13\27")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u016d\n\30\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\5\31\u0175\n\31\3\32\3\32\3\32\3\32\5\32")
        buf.write("\u017b\n\32\3\32\3\32\3\33\3\33\3\33\3\33\5\33\u0183\n")
        buf.write("\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\5\34\u0191\n\34\3\34\5\34\u0194\n\34\7\34\u0196")
        buf.write("\n\34\f\34\16\34\u0199\13\34\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\5\35\u01a5\n\35\3\35\5\35\u01a8")
        buf.write("\n\35\7\35\u01aa\n\35\f\35\16\35\u01ad\13\35\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\5\36\u01bc\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\5\37\u01ca\n\37\3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \5 \u01e8\n \3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\5!\u01f4\n!\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#")
        buf.write("\3#\3#\3#\3#\3#\5#\u0206\n#\3$\3$\3$\3$\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\5%\u0214\n%\3&\3&\3&\3&\3&\3&\3&\3&\5&\u021e")
        buf.write("\n&\3\'\3\'\5\'\u0222\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\5")
        buf.write("(\u022d\n(\3)\3)\3)\3)\7)\u0233\n)\f)\16)\u0236\13)\3")
        buf.write(")\3)\3)\5)\u023b\n)\3*\3*\5*\u023f\n*\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\5+\u0249\n+\3,\3,\3,\3,\3,\3,\3,\3,\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0261\n-\3.\3.\3/\3")
        buf.write("/\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\5")
        buf.write("\62\u0271\n\62\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0279")
        buf.write("\n\63\3\64\3\64\5\64\u027d\n\64\3\64\5\64\u0280\n\64\3")
        buf.write("\64\5\64\u0283\n\64\3\64\5\64\u0286\n\64\5\64\u0288\n")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\5\64\u028f\n\64\3\64\3\64")
        buf.write("\5\64\u0293\n\64\3\64\5\64\u0296\n\64\3\64\5\64\u0299")
        buf.write("\n\64\3\64\5\64\u029c\n\64\5\64\u029e\n\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u02a5\n\64\3\64\3\64\5\64\u02a9\n\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u02bf")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\5\64\u02d6\n\64\3\64\5\64\u02d9\n\64\3\64\3\64\3\64\5")
        buf.write("\64\u02de\n\64\3\64\3\64\3\64\3\64\3\64\5\64\u02e5\n\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\5\64\u02f2\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\5\64\u02fc\n\64\5\64\u02fe\n\64\3\65\3\65\3\65\3\65")
        buf.write("\3\65\5\65\u0305\n\65\3\66\3\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\3\66\5\66\u030f\n\66\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\5\67\u031a\n\67\3\67\3\67\38\38\39\39")
        buf.write("\3:\3:\3:\3:\3:\5:\u0327\n:\3;\3;\3<\3<\3<\3<\3<\5<\u0330")
        buf.write("\n<\3<\3<\5<\u0334\n<\3=\3=\3=\3=\3=\3=\5=\u033c\n=\3")
        buf.write(">\3>\3>\3>\3>\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\5@\u034e")
        buf.write("\n@\3@\3@\3@\7@\u0353\n@\f@\16@\u0356\13@\3A\3A\3A\3A")
        buf.write("\3A\3A\7A\u035e\nA\fA\16A\u0361\13A\3B\3B\3B\3B\3B\3B")
        buf.write("\7B\u0369\nB\fB\16B\u036c\13B\3C\3C\3C\3C\3C\3C\7C\u0374")
        buf.write("\nC\fC\16C\u0377\13C\3D\3D\3D\3D\3D\5D\u037e\nD\3E\3E")
        buf.write("\3E\3E\5E\u0384\nE\3F\3F\3F\3F\3F\3F\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\5G\u0398\nG\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\5H\u03a7\nH\3I\3I\3I\3I\3J\3J\3K\3K\3")
        buf.write("K\7K\u03b2\nK\fK\16K\u03b5\13K\3L\3L\3L\7L\u03ba\nL\f")
        buf.write("L\16L\u03bd\13L\3M\3M\3M\7M\u03c2\nM\fM\16M\u03c5\13M")
        buf.write("\3N\3N\3N\7N\u03ca\nN\fN\16N\u03cd\13N\3O\3O\3O\5O\u03d2")
        buf.write("\nO\3P\3P\3P\5P\u03d7\nP\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u03df\n")
        buf.write("Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u03ea\nR\3R\2\f\32 \"")
        buf.write("$\668~\u0080\u0082\u0084S\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\2\24\3\2\3\6\3\2\7\16\3\2\u00a4\u00ac\3\2")
        buf.write("\u00a5\u00a6\3\2\32\33\6\2\34\35\u0080\u0082\u0086\u0086")
        buf.write("\u0098\u0098\5\2\u009f\u009f\u00af\u00b0\u00b9\u00b9\5")
        buf.write("\2D[ijmm\4\2ghkl\b\2\\adennqrtw{\177\6\2bcopssxz\3\2B")
        buf.write("C\4\2\u009f\u009f\u00af\u00b0\4\2\u00a4\u00a5\u00c1\u00c1")
        buf.write("\3\2\u00bf\u00c0\7\2\36\36  \"\"**,,\7\2\37\37!!##++-")
        buf.write("-\3\2\u00a4\u00a5\2\u043e\2\u00a7\3\2\2\2\4\u00ab\3\2")
        buf.write("\2\2\6\u00ad\3\2\2\2\b\u00af\3\2\2\2\n\u00bb\3\2\2\2\f")
        buf.write("\u00bf\3\2\2\2\16\u00c3\3\2\2\2\20\u00c9\3\2\2\2\22\u00cb")
        buf.write("\3\2\2\2\24\u00ef\3\2\2\2\26\u00fe\3\2\2\2\30\u010c\3")
        buf.write("\2\2\2\32\u0114\3\2\2\2\34\u011f\3\2\2\2\36\u0123\3\2")
        buf.write("\2\2 \u0125\3\2\2\2\"\u0130\3\2\2\2$\u013b\3\2\2\2&\u014d")
        buf.write("\3\2\2\2(\u0158\3\2\2\2*\u015a\3\2\2\2,\u0161\3\2\2\2")
        buf.write(".\u016c\3\2\2\2\60\u016e\3\2\2\2\62\u0176\3\2\2\2\64\u017e")
        buf.write("\3\2\2\2\66\u0186\3\2\2\28\u019a\3\2\2\2:\u01bb\3\2\2")
        buf.write("\2<\u01c9\3\2\2\2>\u01e7\3\2\2\2@\u01f3\3\2\2\2B\u01f5")
        buf.write("\3\2\2\2D\u0205\3\2\2\2F\u0207\3\2\2\2H\u0213\3\2\2\2")
        buf.write("J\u021d\3\2\2\2L\u021f\3\2\2\2N\u0223\3\2\2\2P\u023a\3")
        buf.write("\2\2\2R\u023c\3\2\2\2T\u0248\3\2\2\2V\u024a\3\2\2\2X\u0260")
        buf.write("\3\2\2\2Z\u0262\3\2\2\2\\\u0264\3\2\2\2^\u0266\3\2\2\2")
        buf.write("`\u0268\3\2\2\2b\u0270\3\2\2\2d\u0278\3\2\2\2f\u02fd\3")
        buf.write("\2\2\2h\u0304\3\2\2\2j\u030e\3\2\2\2l\u0310\3\2\2\2n\u031d")
        buf.write("\3\2\2\2p\u031f\3\2\2\2r\u0326\3\2\2\2t\u0328\3\2\2\2")
        buf.write("v\u032a\3\2\2\2x\u0335\3\2\2\2z\u033d\3\2\2\2|\u0342\3")
        buf.write("\2\2\2~\u034d\3\2\2\2\u0080\u0357\3\2\2\2\u0082\u0362")
        buf.write("\3\2\2\2\u0084\u036d\3\2\2\2\u0086\u037d\3\2\2\2\u0088")
        buf.write("\u0383\3\2\2\2\u008a\u0385\3\2\2\2\u008c\u0397\3\2\2\2")
        buf.write("\u008e\u03a6\3\2\2\2\u0090\u03a8\3\2\2\2\u0092\u03ac\3")
        buf.write("\2\2\2\u0094\u03ae\3\2\2\2\u0096\u03b6\3\2\2\2\u0098\u03be")
        buf.write("\3\2\2\2\u009a\u03c6\3\2\2\2\u009c\u03d1\3\2\2\2\u009e")
        buf.write("\u03d6\3\2\2\2\u00a0\u03de\3\2\2\2\u00a2\u03e9\3\2\2\2")
        buf.write("\u00a4\u00a8\5\u0090I\2\u00a5\u00a8\5\u0092J\2\u00a6\u00a8")
        buf.write("\5~@\2\u00a7\u00a4\3\2\2\2\u00a7\u00a5\3\2\2\2\u00a7\u00a6")
        buf.write("\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00aa\7\2\2\3\u00aa")
        buf.write("\3\3\2\2\2\u00ab\u00ac\t\2\2\2\u00ac\5\3\2\2\2\u00ad\u00ae")
        buf.write("\t\3\2\2\u00ae\7\3\2\2\2\u00af\u00b0\7\u009f\2\2\u00b0")
        buf.write("\u00b5\7\u0096\2\2\u00b1\u00b6\7\u00a2\2\2\u00b2\u00b3")
        buf.write("\7$\2\2\u00b3\u00b4\7\u00a2\2\2\u00b4\u00b6\7%\2\2\u00b5")
        buf.write("\u00b1\3\2\2\2\u00b5\u00b2\3\2\2\2\u00b6\t\3\2\2\2\u00b7")
        buf.write("\u00bc\5\36\20\2\u00b8\u00bc\5> \2\u00b9\u00bc\7\32\2")
        buf.write("\2\u00ba\u00bc\7\33\2\2\u00bb\u00b7\3\2\2\2\u00bb\u00b8")
        buf.write("\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb\u00ba\3\2\2\2\u00bc")
        buf.write("\u00bd\3\2\2\2\u00bd\u00be\5\b\5\2\u00be\13\3\2\2\2\u00bf")
        buf.write("\u00c0\5\b\5\2\u00c0\u00c1\7\u00a1\2\2\u00c1\u00c2\5\b")
        buf.write("\5\2\u00c2\r\3\2\2\2\u00c3\u00c4\5\b\5\2\u00c4\u00c5\5")
        buf.write("\n\6\2\u00c5\17\3\2\2\2\u00c6\u00ca\5\16\b\2\u00c7\u00ca")
        buf.write("\5\n\6\2\u00c8\u00ca\5\f\7\2\u00c9\u00c6\3\2\2\2\u00c9")
        buf.write("\u00c7\3\2\2\2\u00c9\u00c8\3\2\2\2\u00ca\21\3\2\2\2\u00cb")
        buf.write("\u00d0\5\20\t\2\u00cc\u00cd\7\u009a\2\2\u00cd\u00cf\5")
        buf.write("\20\t\2\u00ce\u00cc\3\2\2\2\u00cf\u00d2\3\2\2\2\u00d0")
        buf.write("\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\23\3\2\2\2\u00d2")
        buf.write("\u00d0\3\2\2\2\u00d3\u00d4\7\u008e\2\2\u00d4\u00d9\5\30")
        buf.write("\r\2\u00d5\u00d6\7\u0095\2\2\u00d6\u00d8\5\30\r\2\u00d7")
        buf.write("\u00d5\3\2\2\2\u00d8\u00db\3\2\2\2\u00d9\u00d7\3\2\2\2")
        buf.write("\u00d9\u00da\3\2\2\2\u00da\u00dd\3\2\2\2\u00db\u00d9\3")
        buf.write("\2\2\2\u00dc\u00de\7\u0095\2\2\u00dd\u00dc\3\2\2\2\u00dd")
        buf.write("\u00de\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00e0\7\u008f")
        buf.write("\2\2\u00e0\u00f0\3\2\2\2\u00e1\u00e2\7\u0090\2\2\u00e2")
        buf.write("\u00e7\5\30\r\2\u00e3\u00e4\7\u0095\2\2\u00e4\u00e6\5")
        buf.write("\30\r\2\u00e5\u00e3\3\2\2\2\u00e6\u00e9\3\2\2\2\u00e7")
        buf.write("\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00eb\3\2\2\2")
        buf.write("\u00e9\u00e7\3\2\2\2\u00ea\u00ec\7\u0095\2\2\u00eb\u00ea")
        buf.write("\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed")
        buf.write("\u00ee\7\u0091\2\2\u00ee\u00f0\3\2\2\2\u00ef\u00d3\3\2")
        buf.write("\2\2\u00ef\u00e1\3\2\2\2\u00f0\u00fc\3\2\2\2\u00f1\u00f6")
        buf.write("\7\u00a0\2\2\u00f2\u00f3\7*\2\2\u00f3\u00f4\5\22\n\2\u00f4")
        buf.write("\u00f5\7+\2\2\u00f5\u00f7\3\2\2\2\u00f6\u00f2\3\2\2\2")
        buf.write("\u00f6\u00f7\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f9\7")
        buf.write("$\2\2\u00f9\u00fa\5\22\n\2\u00fa\u00fb\7%\2\2\u00fb\u00fd")
        buf.write("\3\2\2\2\u00fc\u00f1\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd")
        buf.write("\25\3\2\2\2\u00fe\u00ff\7\u0092\2\2\u00ff\u0104\5\30\r")
        buf.write("\2\u0100\u0101\7\u0095\2\2\u0101\u0103\5\30\r\2\u0102")
        buf.write("\u0100\3\2\2\2\u0103\u0106\3\2\2\2\u0104\u0102\3\2\2\2")
        buf.write("\u0104\u0105\3\2\2\2\u0105\u0108\3\2\2\2\u0106\u0104\3")
        buf.write("\2\2\2\u0107\u0109\7\u0095\2\2\u0108\u0107\3\2\2\2\u0108")
        buf.write("\u0109\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010b\7\u0093")
        buf.write("\2\2\u010b\27\3\2\2\2\u010c\u0111\5\36\20\2\u010d\u010e")
        buf.write("\7\u0094\2\2\u010e\u0110\5\36\20\2\u010f\u010d\3\2\2\2")
        buf.write("\u0110\u0113\3\2\2\2\u0111\u010f\3\2\2\2\u0111\u0112\3")
        buf.write("\2\2\2\u0112\31\3\2\2\2\u0113\u0111\3\2\2\2\u0114\u0115")
        buf.write("\b\16\1\2\u0115\u0116\5\36\20\2\u0116\u011c\3\2\2\2\u0117")
        buf.write("\u0118\f\4\2\2\u0118\u0119\t\4\2\2\u0119\u011b\5\32\16")
        buf.write("\5\u011a\u0117\3\2\2\2\u011b\u011e\3\2\2\2\u011c\u011a")
        buf.write("\3\2\2\2\u011c\u011d\3\2\2\2\u011d\33\3\2\2\2\u011e\u011c")
        buf.write("\3\2\2\2\u011f\u0120\5\36\20\2\u0120\u0121\t\5\2\2\u0121")
        buf.write("\u0122\5\36\20\2\u0122\35\3\2\2\2\u0123\u0124\5 \21\2")
        buf.write("\u0124\37\3\2\2\2\u0125\u0126\b\21\1\2\u0126\u0127\5\"")
        buf.write("\22\2\u0127\u012d\3\2\2\2\u0128\u0129\f\4\2\2\u0129\u012a")
        buf.write("\t\6\2\2\u012a\u012c\5 \21\5\u012b\u0128\3\2\2\2\u012c")
        buf.write("\u012f\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2")
        buf.write("\u012e!\3\2\2\2\u012f\u012d\3\2\2\2\u0130\u0131\b\22\1")
        buf.write("\2\u0131\u0132\5&\24\2\u0132\u0138\3\2\2\2\u0133\u0134")
        buf.write("\f\4\2\2\u0134\u0135\t\7\2\2\u0135\u0137\5\"\22\5\u0136")
        buf.write("\u0133\3\2\2\2\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2")
        buf.write("\u0138\u0139\3\2\2\2\u0139#\3\2\2\2\u013a\u0138\3\2\2")
        buf.write("\2\u013b\u013c\b\23\1\2\u013c\u013d\5(\25\2\u013d\u0143")
        buf.write("\3\2\2\2\u013e\u013f\f\4\2\2\u013f\u0140\t\7\2\2\u0140")
        buf.write("\u0142\5$\23\5\u0141\u013e\3\2\2\2\u0142\u0145\3\2\2\2")
        buf.write("\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144%\3\2\2")
        buf.write("\2\u0145\u0143\3\2\2\2\u0146\u0147\t\6\2\2\u0147\u014e")
        buf.write("\5&\24\2\u0148\u014a\5*\26\2\u0149\u0148\3\2\2\2\u014a")
        buf.write("\u014b\3\2\2\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2")
        buf.write("\u014c\u014e\3\2\2\2\u014d\u0146\3\2\2\2\u014d\u0149\3")
        buf.write("\2\2\2\u014e\'\3\2\2\2\u014f\u0150\t\6\2\2\u0150\u0159")
        buf.write("\5(\25\2\u0151\u0155\5*\26\2\u0152\u0154\5,\27\2\u0153")
        buf.write("\u0152\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2")
        buf.write("\u0155\u0156\3\2\2\2\u0156\u0159\3\2\2\2\u0157\u0155\3")
        buf.write("\2\2\2\u0158\u014f\3\2\2\2\u0158\u0151\3\2\2\2\u0159)")
        buf.write("\3\2\2\2\u015a\u015e\5\66\34\2\u015b\u015d\5.\30\2\u015c")
        buf.write("\u015b\3\2\2\2\u015d\u0160\3\2\2\2\u015e\u015c\3\2\2\2")
        buf.write("\u015e\u015f\3\2\2\2\u015f+\3\2\2\2\u0160\u015e\3\2\2")
        buf.write("\2\u0161\u0165\58\35\2\u0162\u0164\5.\30\2\u0163\u0162")
        buf.write("\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2\u0165")
        buf.write("\u0166\3\2\2\2\u0166-\3\2\2\2\u0167\u0165\3\2\2\2\u0168")
        buf.write("\u016d\7\u00ad\2\2\u0169\u016d\5\60\31\2\u016a\u016d\5")
        buf.write("\4\3\2\u016b\u016d\5\6\4\2\u016c\u0168\3\2\2\2\u016c\u0169")
        buf.write("\3\2\2\2\u016c\u016a\3\2\2\2\u016c\u016b\3\2\2\2\u016d")
        buf.write("/\3\2\2\2\u016e\u0174\7\60\2\2\u016f\u0175\5\64\33\2\u0170")
        buf.write("\u0175\5\62\32\2\u0171\u0172\5\64\33\2\u0172\u0173\5\62")
        buf.write("\32\2\u0173\u0175\3\2\2\2\u0174\u016f\3\2\2\2\u0174\u0170")
        buf.write("\3\2\2\2\u0174\u0171\3\2\2\2\u0175\61\3\2\2\2\u0176\u0177")
        buf.write("\7\u0096\2\2\u0177\u017a\7$\2\2\u0178\u017b\5\36\20\2")
        buf.write("\u0179\u017b\5\34\17\2\u017a\u0178\3\2\2\2\u017a\u0179")
        buf.write("\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017d\7%\2\2\u017d")
        buf.write("\63\3\2\2\2\u017e\u017f\7\u0097\2\2\u017f\u0182\7$\2\2")
        buf.write("\u0180\u0183\5\36\20\2\u0181\u0183\5\34\17\2\u0182\u0180")
        buf.write("\3\2\2\2\u0182\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184")
        buf.write("\u0185\7%\2\2\u0185\65\3\2\2\2\u0186\u0187\b\34\1\2\u0187")
        buf.write("\u0188\5:\36\2\u0188\u0197\3\2\2\2\u0189\u018a\f\4\2\2")
        buf.write("\u018a\u0190\7\u0097\2\2\u018b\u0191\5T+\2\u018c\u018d")
        buf.write("\7$\2\2\u018d\u018e\5\36\20\2\u018e\u018f\7%\2\2\u018f")
        buf.write("\u0191\3\2\2\2\u0190\u018b\3\2\2\2\u0190\u018c\3\2\2\2")
        buf.write("\u0191\u0193\3\2\2\2\u0192\u0194\5v<\2\u0193\u0192\3\2")
        buf.write("\2\2\u0193\u0194\3\2\2\2\u0194\u0196\3\2\2\2\u0195\u0189")
        buf.write("\3\2\2\2\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0197")
        buf.write("\u0198\3\2\2\2\u0198\67\3\2\2\2\u0199\u0197\3\2\2\2\u019a")
        buf.write("\u019b\b\35\1\2\u019b\u019c\5<\37\2\u019c\u01ab\3\2\2")
        buf.write("\2\u019d\u019e\f\4\2\2\u019e\u01a4\7\u0097\2\2\u019f\u01a5")
        buf.write("\5T+\2\u01a0\u01a1\7$\2\2\u01a1\u01a2\5\36\20\2\u01a2")
        buf.write("\u01a3\7%\2\2\u01a3\u01a5\3\2\2\2\u01a4\u019f\3\2\2\2")
        buf.write("\u01a4\u01a0\3\2\2\2\u01a5\u01a7\3\2\2\2\u01a6\u01a8\5")
        buf.write("v<\2\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01aa")
        buf.write("\3\2\2\2\u01a9\u019d\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab")
        buf.write("\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac9\3\2\2\2\u01ad")
        buf.write("\u01ab\3\2\2\2\u01ae\u01bc\5> \2\u01af\u01bc\5@!\2\u01b0")
        buf.write("\u01bc\5B\"\2\u01b1\u01bc\5D#\2\u01b2\u01bc\5F$\2\u01b3")
        buf.write("\u01bc\5H%\2\u01b4\u01bc\5J&\2\u01b5\u01bc\5f\64\2\u01b6")
        buf.write("\u01bc\5T+\2\u01b7\u01bc\5V,\2\u01b8\u01bc\5X-\2\u01b9")
        buf.write("\u01bc\5\24\13\2\u01ba\u01bc\5\26\f\2\u01bb\u01ae\3\2")
        buf.write("\2\2\u01bb\u01af\3\2\2\2\u01bb\u01b0\3\2\2\2\u01bb\u01b1")
        buf.write("\3\2\2\2\u01bb\u01b2\3\2\2\2\u01bb\u01b3\3\2\2\2\u01bb")
        buf.write("\u01b4\3\2\2\2\u01bb\u01b5\3\2\2\2\u01bb\u01b6\3\2\2\2")
        buf.write("\u01bb\u01b7\3\2\2\2\u01bb\u01b8\3\2\2\2\u01bb\u01b9\3")
        buf.write("\2\2\2\u01bb\u01ba\3\2\2\2\u01bc;\3\2\2\2\u01bd\u01ca")
        buf.write("\5> \2\u01be\u01ca\5@!\2\u01bf\u01ca\5B\"\2\u01c0\u01ca")
        buf.write("\5D#\2\u01c1\u01ca\5F$\2\u01c2\u01ca\5H%\2\u01c3\u01ca")
        buf.write("\5J&\2\u01c4\u01ca\5T+\2\u01c5\u01ca\5V,\2\u01c6\u01ca")
        buf.write("\5X-\2\u01c7\u01ca\5\24\13\2\u01c8\u01ca\5\26\f\2\u01c9")
        buf.write("\u01bd\3\2\2\2\u01c9\u01be\3\2\2\2\u01c9\u01bf\3\2\2\2")
        buf.write("\u01c9\u01c0\3\2\2\2\u01c9\u01c1\3\2\2\2\u01c9\u01c2\3")
        buf.write("\2\2\2\u01c9\u01c3\3\2\2\2\u01c9\u01c4\3\2\2\2\u01c9\u01c5")
        buf.write("\3\2\2\2\u01c9\u01c6\3\2\2\2\u01c9\u01c7\3\2\2\2\u01c9")
        buf.write("\u01c8\3\2\2\2\u01ca=\3\2\2\2\u01cb\u01cc\7\36\2\2\u01cc")
        buf.write("\u01cd\5\36\20\2\u01cd\u01ce\7\37\2\2\u01ce\u01e8\3\2")
        buf.write("\2\2\u01cf\u01d0\7\"\2\2\u01d0\u01d1\5\36\20\2\u01d1\u01d2")
        buf.write("\7#\2\2\u01d2\u01e8\3\2\2\2\u01d3\u01d4\7$\2\2\u01d4\u01d5")
        buf.write("\5\36\20\2\u01d5\u01d6\7%\2\2\u01d6\u01e8\3\2\2\2\u01d7")
        buf.write("\u01d8\7*\2\2\u01d8\u01d9\5\36\20\2\u01d9\u01da\7+\2\2")
        buf.write("\u01da\u01e8\3\2\2\2\u01db\u01dc\7&\2\2\u01dc\u01dd\5")
        buf.write("\36\20\2\u01dd\u01de\7\'\2\2\u01de\u01e8\3\2\2\2\u01df")
        buf.write("\u01e0\7(\2\2\u01e0\u01e1\5\36\20\2\u01e1\u01e2\7)\2\2")
        buf.write("\u01e2\u01e8\3\2\2\2\u01e3\u01e4\7,\2\2\u01e4\u01e5\5")
        buf.write("\36\20\2\u01e5\u01e6\7-\2\2\u01e6\u01e8\3\2\2\2\u01e7")
        buf.write("\u01cb\3\2\2\2\u01e7\u01cf\3\2\2\2\u01e7\u01d3\3\2\2\2")
        buf.write("\u01e7\u01d7\3\2\2\2\u01e7\u01db\3\2\2\2\u01e7\u01df\3")
        buf.write("\2\2\2\u01e7\u01e3\3\2\2\2\u01e8?\3\2\2\2\u01e9\u01ea")
        buf.write("\7.\2\2\u01ea\u01eb\7$\2\2\u01eb\u01ec\5\36\20\2\u01ec")
        buf.write("\u01ed\7%\2\2\u01ed\u01f4\3\2\2\2\u01ee\u01ef\7/\2\2\u01ef")
        buf.write("\u01f0\7$\2\2\u01f0\u01f1\5\36\20\2\u01f1\u01f2\7%\2\2")
        buf.write("\u01f2\u01f4\3\2\2\2\u01f3\u01e9\3\2\2\2\u01f3\u01ee\3")
        buf.write("\2\2\2\u01f4A\3\2\2\2\u01f5\u01f6\7\64\2\2\u01f6\u01f7")
        buf.write("\5\36\20\2\u01f7\u01f8\7\64\2\2\u01f8C\3\2\2\2\u01f9\u01fa")
        buf.write("\7\60\2\2\u01fa\u01fb\5\36\20\2\u01fb\u01fc\7\60\2\2\u01fc")
        buf.write("\u0206\3\2\2\2\u01fd\u01fe\7\61\2\2\u01fe\u01ff\5\36\20")
        buf.write("\2\u01ff\u0200\7\62\2\2\u0200\u0206\3\2\2\2\u0201\u0202")
        buf.write("\7\63\2\2\u0202\u0203\5\36\20\2\u0203\u0204\7\63\2\2\u0204")
        buf.write("\u0206\3\2\2\2\u0205\u01f9\3\2\2\2\u0205\u01fd\3\2\2\2")
        buf.write("\u0205\u0201\3\2\2\2\u0206E\3\2\2\2\u0207\u0208\7\65\2")
        buf.write("\2\u0208\u0209\5\36\20\2\u0209\u020a\7\66\2\2\u020aG\3")
        buf.write("\2\2\2\u020b\u020c\7\67\2\2\u020c\u020d\5\36\20\2\u020d")
        buf.write("\u020e\78\2\2\u020e\u0214\3\2\2\2\u020f\u0210\79\2\2\u0210")
        buf.write("\u0211\5\36\20\2\u0211\u0212\7:\2\2\u0212\u0214\3\2\2")
        buf.write("\2\u0213\u020b\3\2\2\2\u0213\u020f\3\2\2\2\u0214I\3\2")
        buf.write("\2\2\u0215\u0216\7;\2\2\u0216\u0217\5\36\20\2\u0217\u0218")
        buf.write("\7<\2\2\u0218\u021e\3\2\2\2\u0219\u021a\7=\2\2\u021a\u021b")
        buf.write("\5\36\20\2\u021b\u021c\7>\2\2\u021c\u021e\3\2\2\2\u021d")
        buf.write("\u0215\3\2\2\2\u021d\u0219\3\2\2\2\u021eK\3\2\2\2\u021f")
        buf.write("\u0221\t\b\2\2\u0220\u0222\5v<\2\u0221\u0220\3\2\2\2\u0221")
        buf.write("\u0222\3\2\2\2\u0222M\3\2\2\2\u0223\u022c\t\b\2\2\u0224")
        buf.write("\u0225\5x=\2\u0225\u0226\5v<\2\u0226\u022d\3\2\2\2\u0227")
        buf.write("\u0228\5v<\2\u0228\u0229\5x=\2\u0229\u022d\3\2\2\2\u022a")
        buf.write("\u022d\5v<\2\u022b\u022d\5x=\2\u022c\u0224\3\2\2\2\u022c")
        buf.write("\u0227\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022b\3\2\2\2")
        buf.write("\u022c\u022d\3\2\2\2\u022dO\3\2\2\2\u022e\u022f\7\36\2")
        buf.write("\2\u022f\u0234\5N(\2\u0230\u0231\7\u009a\2\2\u0231\u0233")
        buf.write("\5N(\2\u0232\u0230\3\2\2\2\u0233\u0236\3\2\2\2\u0234\u0232")
        buf.write("\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0237\3\2\2\2\u0236")
        buf.write("\u0234\3\2\2\2\u0237\u0238\7\37\2\2\u0238\u023b\3\2\2")
        buf.write("\2\u0239\u023b\5N(\2\u023a\u022e\3\2\2\2\u023a\u0239\3")
        buf.write("\2\2\2\u023bQ\3\2\2\2\u023c\u023e\7\u00a2\2\2\u023d\u023f")
        buf.write("\5v<\2\u023e\u023d\3\2\2\2\u023e\u023f\3\2\2\2\u023fS")
        buf.write("\3\2\2\2\u0240\u0249\5N(\2\u0241\u0249\7\u00b1\2\2\u0242")
        buf.write("\u0249\5R*\2\u0243\u0249\7\u00ae\2\2\u0244\u0249\7\u00a3")
        buf.write("\2\2\u0245\u0249\7\u009e\2\2\u0246\u0249\7\u009c\2\2\u0247")
        buf.write("\u0249\7\u00b2\2\2\u0248\u0240\3\2\2\2\u0248\u0241\3\2")
        buf.write("\2\2\u0248\u0242\3\2\2\2\u0248\u0243\3\2\2\2\u0248\u0244")
        buf.write("\3\2\2\2\u0248\u0245\3\2\2\2\u0248\u0246\3\2\2\2\u0248")
        buf.write("\u0247\3\2\2\2\u0249U\3\2\2\2\u024a\u024b\7\u0083\2\2")
        buf.write("\u024b\u024c\7$\2\2\u024c\u024d\5\36\20\2\u024d\u024e")
        buf.write("\7%\2\2\u024e\u024f\7$\2\2\u024f\u0250\5\36\20\2\u0250")
        buf.write("\u0251\7%\2\2\u0251W\3\2\2\2\u0252\u0253\7$\2\2\u0253")
        buf.write("\u0254\5\36\20\2\u0254\u0255\7\u0085\2\2\u0255\u0256\5")
        buf.write("\36\20\2\u0256\u0257\7%\2\2\u0257\u0261\3\2\2\2\u0258")
        buf.write("\u0259\7\u0084\2\2\u0259\u025a\7$\2\2\u025a\u025b\5\36")
        buf.write("\20\2\u025b\u025c\7%\2\2\u025c\u025d\7$\2\2\u025d\u025e")
        buf.write("\5\36\20\2\u025e\u025f\7%\2\2\u025f\u0261\3\2\2\2\u0260")
        buf.write("\u0252\3\2\2\2\u0260\u0258\3\2\2\2\u0261Y\3\2\2\2\u0262")
        buf.write("\u0263\t\t\2\2\u0263[\3\2\2\2\u0264\u0265\t\n\2\2\u0265")
        buf.write("]\3\2\2\2\u0266\u0267\t\13\2\2\u0267_\3\2\2\2\u0268\u0269")
        buf.write("\t\f\2\2\u0269a\3\2\2\2\u026a\u0271\5Z.\2\u026b\u026c")
        buf.write("\7\u0088\2\2\u026c\u026d\7$\2\2\u026d\u026e\5^\60\2\u026e")
        buf.write("\u026f\7%\2\2\u026f\u0271\3\2\2\2\u0270\u026a\3\2\2\2")
        buf.write("\u0270\u026b\3\2\2\2\u0271c\3\2\2\2\u0272\u0279\5\\/\2")
        buf.write("\u0273\u0274\7\u0088\2\2\u0274\u0275\7$\2\2\u0275\u0276")
        buf.write("\5`\61\2\u0276\u0277\7%\2\2\u0277\u0279\3\2\2\2\u0278")
        buf.write("\u0272\3\2\2\2\u0278\u0273\3\2\2\2\u0279e\3\2\2\2\u027a")
        buf.write("\u0287\5b\62\2\u027b\u027d\5v<\2\u027c\u027b\3\2\2\2\u027c")
        buf.write("\u027d\3\2\2\2\u027d\u027f\3\2\2\2\u027e\u0280\5x=\2\u027f")
        buf.write("\u027e\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0288\3\2\2\2")
        buf.write("\u0281\u0283\5x=\2\u0282\u0281\3\2\2\2\u0282\u0283\3\2")
        buf.write("\2\2\u0283\u0285\3\2\2\2\u0284\u0286\5v<\2\u0285\u0284")
        buf.write("\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0288\3\2\2\2\u0287")
        buf.write("\u027c\3\2\2\2\u0287\u0282\3\2\2\2\u0288\u028e\3\2\2\2")
        buf.write("\u0289\u028a\7\36\2\2\u028a\u028b\5n8\2\u028b\u028c\7")
        buf.write("\37\2\2\u028c\u028f\3\2\2\2\u028d\u028f\5p9\2\u028e\u0289")
        buf.write("\3\2\2\2\u028e\u028d\3\2\2\2\u028f\u02fe\3\2\2\2\u0290")
        buf.write("\u029d\5d\63\2\u0291\u0293\5v<\2\u0292\u0291\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293\u0295\3\2\2\2\u0294\u0296\5x=\2\u0295")
        buf.write("\u0294\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u029e\3\2\2\2")
        buf.write("\u0297\u0299\5x=\2\u0298\u0297\3\2\2\2\u0298\u0299\3\2")
        buf.write("\2\2\u0299\u029b\3\2\2\2\u029a\u029c\5v<\2\u029b\u029a")
        buf.write("\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029e\3\2\2\2\u029d")
        buf.write("\u0292\3\2\2\2\u029d\u0298\3\2\2\2\u029e\u02a4\3\2\2\2")
        buf.write("\u029f\u02a0\7\36\2\2\u02a0\u02a1\5r:\2\u02a1\u02a2\7")
        buf.write("\37\2\2\u02a2\u02a5\3\2\2\2\u02a3\u02a5\5t;\2\u02a4\u029f")
        buf.write("\3\2\2\2\u02a4\u02a3\3\2\2\2\u02a5\u02fe\3\2\2\2\u02a6")
        buf.write("\u02a8\5L\'\2\u02a7\u02a9\5x=\2\u02a8\u02a7\3\2\2\2\u02a8")
        buf.write("\u02a9\3\2\2\2\u02a9\u02be\3\2\2\2\u02aa\u02ab\7\36\2")
        buf.write("\2\u02ab\u02ac\5j\66\2\u02ac\u02ad\7\37\2\2\u02ad\u02bf")
        buf.write("\3\2\2\2\u02ae\u02af\7*\2\2\u02af\u02b0\5j\66\2\u02b0")
        buf.write("\u02b1\7+\2\2\u02b1\u02bf\3\2\2\2\u02b2\u02b3\7$\2\2\u02b3")
        buf.write("\u02b4\7\36\2\2\u02b4\u02b5\5j\66\2\u02b5\u02b6\7\37\2")
        buf.write("\2\u02b6\u02b7\7%\2\2\u02b7\u02bf\3\2\2\2\u02b8\u02b9")
        buf.write("\7$\2\2\u02b9\u02ba\7*\2\2\u02ba\u02bb\5j\66\2\u02bb\u02bc")
        buf.write("\7+\2\2\u02bc\u02bd\7%\2\2\u02bd\u02bf\3\2\2\2\u02be\u02aa")
        buf.write("\3\2\2\2\u02be\u02ae\3\2\2\2\u02be\u02b2\3\2\2\2\u02be")
        buf.write("\u02b8\3\2\2\2\u02bf\u02fe\3\2\2\2\u02c0\u02d5\7A\2\2")
        buf.write("\u02c1\u02c2\5v<\2\u02c2\u02c3\5x=\2\u02c3\u02d6\3\2\2")
        buf.write("\2\u02c4\u02c5\5x=\2\u02c5\u02c6\5v<\2\u02c6\u02d6\3\2")
        buf.write("\2\2\u02c7\u02c8\7\u0096\2\2\u02c8\u02c9\7$\2\2\u02c9")
        buf.write("\u02ca\7%\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\7\u0097")
        buf.write("\2\2\u02cc\u02cd\7$\2\2\u02cd\u02d6\7%\2\2\u02ce\u02cf")
        buf.write("\7\u0097\2\2\u02cf\u02d0\7$\2\2\u02d0\u02d1\7%\2\2\u02d1")
        buf.write("\u02d2\3\2\2\2\u02d2\u02d3\7\u0096\2\2\u02d3\u02d4\7$")
        buf.write("\2\2\u02d4\u02d6\7%\2\2\u02d5\u02c1\3\2\2\2\u02d5\u02c4")
        buf.write("\3\2\2\2\u02d5\u02c7\3\2\2\2\u02d5\u02ce\3\2\2\2\u02d5")
        buf.write("\u02d6\3\2\2\2\u02d6\u02dd\3\2\2\2\u02d7\u02d9\5 \21\2")
        buf.write("\u02d8\u02d7\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02da\3")
        buf.write("\2\2\2\u02da\u02de\7\u009c\2\2\u02db\u02de\5V,\2\u02dc")
        buf.write("\u02de\5 \21\2\u02dd\u02d8\3\2\2\2\u02dd\u02db\3\2\2\2")
        buf.write("\u02dd\u02dc\3\2\2\2\u02de\u02fe\3\2\2\2\u02df\u02e4\7")
        buf.write("f\2\2\u02e0\u02e1\7*\2\2\u02e1\u02e2\5\36\20\2\u02e2\u02e3")
        buf.write("\7+\2\2\u02e3\u02e5\3\2\2\2\u02e4\u02e0\3\2\2\2\u02e4")
        buf.write("\u02e5\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\7$\2\2")
        buf.write("\u02e7\u02e8\5\36\20\2\u02e8\u02e9\7%\2\2\u02e9\u02fe")
        buf.write("\3\2\2\2\u02ea\u02f1\t\r\2\2\u02eb\u02ec\5z>\2\u02ec\u02ed")
        buf.write("\5x=\2\u02ed\u02f2\3\2\2\2\u02ee\u02ef\5x=\2\u02ef\u02f0")
        buf.write("\5z>\2\u02f0\u02f2\3\2\2\2\u02f1\u02eb\3\2\2\2\u02f1\u02ee")
        buf.write("\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f4\5\"\22\2\u02f4")
        buf.write("\u02fe\3\2\2\2\u02f5\u02f6\7?\2\2\u02f6\u02f7\5l\67\2")
        buf.write("\u02f7\u02f8\5\"\22\2\u02f8\u02fe\3\2\2\2\u02f9\u02fb")
        buf.write("\7\u009d\2\2\u02fa\u02fc\5x=\2\u02fb\u02fa\3\2\2\2\u02fb")
        buf.write("\u02fc\3\2\2\2\u02fc\u02fe\3\2\2\2\u02fd\u027a\3\2\2\2")
        buf.write("\u02fd\u0290\3\2\2\2\u02fd\u02a6\3\2\2\2\u02fd\u02c0\3")
        buf.write("\2\2\2\u02fd\u02df\3\2\2\2\u02fd\u02ea\3\2\2\2\u02fd\u02f5")
        buf.write("\3\2\2\2\u02fd\u02f9\3\2\2\2\u02feg\3\2\2\2\u02ff\u0300")
        buf.write("\5\36\20\2\u0300\u0301\7\u009a\2\2\u0301\u0302\5h\65\2")
        buf.write("\u0302\u0305\3\2\2\2\u0303\u0305\5\36\20\2\u0304\u02ff")
        buf.write("\3\2\2\2\u0304\u0303\3\2\2\2\u0305i\3\2\2\2\u0306\u030f")
        buf.write("\5T+\2\u0307\u0308\5\36\20\2\u0308\u0309\7\u009a\2\2\u0309")
        buf.write("\u030f\3\2\2\2\u030a\u030b\5\36\20\2\u030b\u030c\7\u009a")
        buf.write("\2\2\u030c\u030d\5h\65\2\u030d\u030f\3\2\2\2\u030e\u0306")
        buf.write("\3\2\2\2\u030e\u0307\3\2\2\2\u030e\u030a\3\2\2\2\u030f")
        buf.write("k\3\2\2\2\u0310\u0311\7\u0096\2\2\u0311\u0312\7$\2\2\u0312")
        buf.write("\u0313\t\16\2\2\u0313\u0314\7@\2\2\u0314\u0319\5\36\20")
        buf.write("\2\u0315\u0316\7\u0097\2\2\u0316\u0317\7$\2\2\u0317\u0318")
        buf.write("\t\6\2\2\u0318\u031a\7%\2\2\u0319\u0315\3\2\2\2\u0319")
        buf.write("\u031a\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031c\7%\2\2")
        buf.write("\u031cm\3\2\2\2\u031d\u031e\5\36\20\2\u031eo\3\2\2\2\u031f")
        buf.write("\u0320\5$\23\2\u0320q\3\2\2\2\u0321\u0327\5\36\20\2\u0322")
        buf.write("\u0323\5\36\20\2\u0323\u0324\7\u009a\2\2\u0324\u0325\5")
        buf.write("r:\2\u0325\u0327\3\2\2\2\u0326\u0321\3\2\2\2\u0326\u0322")
        buf.write("\3\2\2\2\u0327s\3\2\2\2\u0328\u0329\5$\23\2\u0329u\3\2")
        buf.write("\2\2\u032a\u0333\7\u0096\2\2\u032b\u0334\5T+\2\u032c\u032f")
        buf.write("\7$\2\2\u032d\u0330\5\36\20\2\u032e\u0330\5h\65\2\u032f")
        buf.write("\u032d\3\2\2\2\u032f\u032e\3\2\2\2\u0330\u0331\3\2\2\2")
        buf.write("\u0331\u0332\7%\2\2\u0332\u0334\3\2\2\2\u0333\u032b\3")
        buf.write("\2\2\2\u0333\u032c\3\2\2\2\u0334w\3\2\2\2\u0335\u033b")
        buf.write("\7\u0097\2\2\u0336\u033c\5T+\2\u0337\u0338\7$\2\2\u0338")
        buf.write("\u0339\5\36\20\2\u0339\u033a\7%\2\2\u033a\u033c\3\2\2")
        buf.write("\2\u033b\u0336\3\2\2\2\u033b\u0337\3\2\2\2\u033cy\3\2")
        buf.write("\2\2\u033d\u033e\7\u0096\2\2\u033e\u033f\7$\2\2\u033f")
        buf.write("\u0340\5\34\17\2\u0340\u0341\7%\2\2\u0341{\3\2\2\2\u0342")
        buf.write("\u0343\7\u0096\2\2\u0343\u0344\7$\2\2\u0344\u0345\5\34")
        buf.write("\17\2\u0345\u0346\7%\2\2\u0346}\3\2\2\2\u0347\u0348\b")
        buf.write("@\1\2\u0348\u0349\5P)\2\u0349\u034a\t\17\2\2\u034a\u034b")
        buf.write("\5~@\4\u034b\u034e\3\2\2\2\u034c\u034e\5\u0080A\2\u034d")
        buf.write("\u0347\3\2\2\2\u034d\u034c\3\2\2\2\u034e\u0354\3\2\2\2")
        buf.write("\u034f\u0350\f\5\2\2\u0350\u0351\t\20\2\2\u0351\u0353")
        buf.write("\5~@\6\u0352\u034f\3\2\2\2\u0353\u0356\3\2\2\2\u0354\u0352")
        buf.write("\3\2\2\2\u0354\u0355\3\2\2\2\u0355\177\3\2\2\2\u0356\u0354")
        buf.write("\3\2\2\2\u0357\u0358\bA\1\2\u0358\u0359\5\u0082B\2\u0359")
        buf.write("\u035f\3\2\2\2\u035a\u035b\f\4\2\2\u035b\u035c\7\u00bc")
        buf.write("\2\2\u035c\u035e\5\u0080A\5\u035d\u035a\3\2\2\2\u035e")
        buf.write("\u0361\3\2\2\2\u035f\u035d\3\2\2\2\u035f\u0360\3\2\2\2")
        buf.write("\u0360\u0081\3\2\2\2\u0361\u035f\3\2\2\2\u0362\u0363\b")
        buf.write("B\1\2\u0363\u0364\5\u0084C\2\u0364\u036a\3\2\2\2\u0365")
        buf.write("\u0366\f\4\2\2\u0366\u0367\7\u00ba\2\2\u0367\u0369\5\u0082")
        buf.write("B\5\u0368\u0365\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u0083\3\2\2\2\u036c")
        buf.write("\u036a\3\2\2\2\u036d\u036e\bC\1\2\u036e\u036f\5\u0086")
        buf.write("D\2\u036f\u0375\3\2\2\2\u0370\u0371\f\4\2\2\u0371\u0372")
        buf.write("\7\u00bb\2\2\u0372\u0374\5\u0084C\5\u0373\u0370\3\2\2")
        buf.write("\2\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0376")
        buf.write("\3\2\2\2\u0376\u0085\3\2\2\2\u0377\u0375\3\2\2\2\u0378")
        buf.write("\u0379\7\36\2\2\u0379\u037a\5\u0080A\2\u037a\u037b\7\37")
        buf.write("\2\2\u037b\u037e\3\2\2\2\u037c\u037e\5\u0088E\2\u037d")
        buf.write("\u0378\3\2\2\2\u037d\u037c\3\2\2\2\u037e\u0087\3\2\2\2")
        buf.write("\u037f\u0384\5\u008aF\2\u0380\u0384\5\u00a2R\2\u0381\u0384")
        buf.write("\5\u008cG\2\u0382\u0384\5\u008eH\2\u0383\u037f\3\2\2\2")
        buf.write("\u0383\u0380\3\2\2\2\u0383\u0381\3\2\2\2\u0383\u0382\3")
        buf.write("\2\2\2\u0384\u0089\3\2\2\2\u0385\u0386\t\21\2\2\u0386")
        buf.write("\u0387\5\36\20\2\u0387\u0388\7\u009a\2\2\u0388\u0389\5")
        buf.write("\36\20\2\u0389\u038a\t\22\2\2\u038a\u008b\3\2\2\2\u038b")
        buf.write("\u038c\7\36\2\2\u038c\u038d\5\u0094K\2\u038d\u038e\7\37")
        buf.write("\2\2\u038e\u0398\3\2\2\2\u038f\u0390\7 \2\2\u0390\u0391")
        buf.write("\5\u0094K\2\u0391\u0392\7!\2\2\u0392\u0398\3\2\2\2\u0393")
        buf.write("\u0394\7*\2\2\u0394\u0395\5\u0094K\2\u0395\u0396\7+\2")
        buf.write("\2\u0396\u0398\3\2\2\2\u0397\u038b\3\2\2\2\u0397\u038f")
        buf.write("\3\2\2\2\u0397\u0393\3\2\2\2\u0398\u008d\3\2\2\2\u0399")
        buf.write("\u039a\7$\2\2\u039a\u039b\5\u0094K\2\u039b\u039c\7%\2")
        buf.write("\2\u039c\u03a7\3\2\2\2\u039d\u039e\7&\2\2\u039e\u039f")
        buf.write("\5\u0094K\2\u039f\u03a0\7\'\2\2\u03a0\u03a7\3\2\2\2\u03a1")
        buf.write("\u03a2\7/\2\2\u03a2\u03a3\7$\2\2\u03a3\u03a4\5\u0094K")
        buf.write("\2\u03a4\u03a5\7%\2\2\u03a5\u03a7\3\2\2\2\u03a6\u0399")
        buf.write("\3\2\2\2\u03a6\u039d\3\2\2\2\u03a6\u03a1\3\2\2\2\u03a7")
        buf.write("\u008f\3\2\2\2\u03a8\u03a9\5P)\2\u03a9\u03aa\t\23\2\2")
        buf.write("\u03aa\u03ab\5\u0096L\2\u03ab\u0091\3\2\2\2\u03ac\u03ad")
        buf.write("\5\u0094K\2\u03ad\u0093\3\2\2\2\u03ae\u03b3\5\u0098M\2")
        buf.write("\u03af\u03b0\7\u0099\2\2\u03b0\u03b2\5\u0098M\2\u03b1")
        buf.write("\u03af\3\2\2\2\u03b2\u03b5\3\2\2\2\u03b3\u03b1\3\2\2\2")
        buf.write("\u03b3\u03b4\3\2\2\2\u03b4\u0095\3\2\2\2\u03b5\u03b3\3")
        buf.write("\2\2\2\u03b6\u03bb\5\u009aN\2\u03b7\u03b8\7\u0099\2\2")
        buf.write("\u03b8\u03ba\5\u009aN\2\u03b9\u03b7\3\2\2\2\u03ba\u03bd")
        buf.write("\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc")
        buf.write("\u0097\3\2\2\2\u03bd\u03bb\3\2\2\2\u03be\u03c3\5\u009e")
        buf.write("P\2\u03bf\u03c0\7\u009a\2\2\u03c0\u03c2\5\u009eP\2\u03c1")
        buf.write("\u03bf\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2")
        buf.write("\u03c3\u03c4\3\2\2\2\u03c4\u0099\3\2\2\2\u03c5\u03c3\3")
        buf.write("\2\2\2\u03c6\u03cb\5\u009cO\2\u03c7\u03c8\7\u009a\2\2")
        buf.write("\u03c8\u03ca\5\u009cO\2\u03c9\u03c7\3\2\2\2\u03ca\u03cd")
        buf.write("\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc")
        buf.write("\u009b\3\2\2\2\u03cd\u03cb\3\2\2\2\u03ce\u03d2\5\u00a0")
        buf.write("Q\2\u03cf\u03d2\5\u0088E\2\u03d0\u03d2\5\36\20\2\u03d1")
        buf.write("\u03ce\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1\u03d0\3\2\2\2")
        buf.write("\u03d2\u009d\3\2\2\2\u03d3\u03d7\5\u00a0Q\2\u03d4\u03d7")
        buf.write("\5\u0088E\2\u03d5\u03d7\5\32\16\2\u03d6\u03d3\3\2\2\2")
        buf.write("\u03d6\u03d4\3\2\2\2\u03d6\u03d5\3\2\2\2\u03d7\u009f\3")
        buf.write("\2\2\2\u03d8\u03d9\5\36\20\2\u03d9\u03da\7\u00bd\2\2\u03da")
        buf.write("\u03db\5\36\20\2\u03db\u03df\3\2\2\2\u03dc\u03dd\7\u00bd")
        buf.write("\2\2\u03dd\u03df\5\36\20\2\u03de\u03d8\3\2\2\2\u03de\u03dc")
        buf.write("\3\2\2\2\u03df\u00a1\3\2\2\2\u03e0\u03ea\7\u00b3\2\2\u03e1")
        buf.write("\u03ea\7\u00b4\2\2\u03e2\u03ea\7\u00b5\2\2\u03e3\u03ea")
        buf.write("\7\u00b6\2\2\u03e4\u03ea\7\u00b7\2\2\u03e5\u03ea\7\u00b8")
        buf.write("\2\2\u03e6\u03ea\7\u00be\2\2\u03e7\u03e8\7$\2\2\u03e8")
        buf.write("\u03ea\7%\2\2\u03e9\u03e0\3\2\2\2\u03e9\u03e1\3\2\2\2")
        buf.write("\u03e9\u03e2\3\2\2\2\u03e9\u03e3\3\2\2\2\u03e9\u03e4\3")
        buf.write("\2\2\2\u03e9\u03e5\3\2\2\2\u03e9\u03e6\3\2\2\2\u03e9\u03e7")
        buf.write("\3\2\2\2\u03ea\u00a3\3\2\2\2b\u00a7\u00b5\u00bb\u00c9")
        buf.write("\u00d0\u00d9\u00dd\u00e7\u00eb\u00ef\u00f6\u00fc\u0104")
        buf.write("\u0108\u0111\u011c\u012d\u0138\u0143\u014b\u014d\u0155")
        buf.write("\u0158\u015e\u0165\u016c\u0174\u017a\u0182\u0190\u0193")
        buf.write("\u0197\u01a4\u01a7\u01ab\u01bb\u01c9\u01e7\u01f3\u0205")
        buf.write("\u0213\u021d\u0221\u022c\u0234\u023a\u023e\u0248\u0260")
        buf.write("\u0270\u0278\u027c\u027f\u0282\u0285\u0287\u028e\u0292")
        buf.write("\u0295\u0298\u029b\u029d\u02a4\u02a8\u02be\u02d5\u02d8")
        buf.write("\u02dd\u02e4\u02f1\u02fb\u02fd\u0304\u030e\u0319\u0326")
        buf.write("\u032f\u0333\u033b\u034d\u0354\u035f\u036a\u0375\u037d")
        buf.write("\u0383\u0397\u03a6\u03b3\u03bb\u03c3\u03cb\u03d1\u03d6")
        buf.write("\u03de\u03e9")
        return buf.getvalue()


class PSParser ( Parser ):

    grammarFileName = "PS.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'^T'", "'^{T}'", "'^{\\\top}'", "'''", 
                     "'^\\circ'", "'^\\degree'", "'^\\circle'", "'^\u00B0'", 
                     "'^{\\circ}'", "'^{\\degree}'", "'^{\\circle}'", "'^{\u00B0}'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\quad'", "'\\qquad'", "<INVALID>", "'\\negmedspace'", 
                     "'\\negthickspace'", "'\\$'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'('", "')'", 
                     "'\\('", "'\\)'", "'\\lgroup'", "'\\rgroup'", "'{'", 
                     "'}'", "'\\{'", "'\\}'", "'\\lbrace'", "'\\rbrace'", 
                     "'['", "']'", "'\\lbrack'", "'\\rbrack'", "'\\phantom'", 
                     "'\\boxed'", "'|'", "'\\lvert'", "'\\rvert'", "'\\vert'", 
                     "'\\|'", "'\\langle'", "'\\rangle'", "'\\lfloor'", 
                     "'\\rfloor'", "'\\llcorner'", "'\\lrcorner'", "'\\lceil'", 
                     "'\\rceil'", "'\\ulcorner'", "'\\urcorner'", "'\\lim'", 
                     "<INVALID>", "'\\int'", "'\\sum'", "'\\prod'", "'\\log'", 
                     "'\\ln'", "'\\exp'", "'\\sin'", "'\\cos'", "'\\tan'", 
                     "'\\csc'", "'\\sec'", "'\\cot'", "'\\arcsin'", "'\\arccos'", 
                     "'\\arctan'", "'\\arccsc'", "'\\arcsec'", "'\\arccot'", 
                     "'\\sinh'", "'\\cosh'", "'\\tanh'", "'\\arsinh'", "'\\arcosh'", 
                     "'\\artanh'", "'\\arcsinh'", "'\\arccosh'", "'\\arctanh'", 
                     "'arsinh'", "'arcsinh'", "'arcosh'", "'arccosh'", "'artanh'", 
                     "'arctanh'", "'gcd'", "'lcm'", "'floor'", "'ceil'", 
                     "'\\sqrt'", "'\\gcd'", "'\\lcm'", "'\\floor'", "'\\ceil'", 
                     "'\\max'", "'\\min'", "'\\det'", "'eye'", "'zeros'", 
                     "'ones'", "'cols'", "'rows'", "'diag'", "'norm'", "'rank'", 
                     "<INVALID>", "'rref'", "'hstack'", "'vstack'", "<INVALID>", 
                     "'nullspace'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\\times'", "'\\cdot'", "'\\div'", "<INVALID>", 
                     "<INVALID>", "'\\choose'", "'\\mod'", "'\\mathit'", 
                     "'\\operatorname'", "'matrix'", "'pmatrix'", "'bmatrix'", 
                     "'vmatrix'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'&'", "'\\\\'", "'_'", "'^'", "':'", "';'", "','", 
                     "'.'", "<INVALID>", "<INVALID>", "'E'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\in'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "WS", "THINSPACE", "MEDSPACE", "THICKSPACE", 
                      "QUAD", "QQUAD", "NEGTHINSPACE", "NEGMEDSPACE", "NEGTHICKSPACE", 
                      "DOLLAR_SIGN", "IGNORE", "ADD", "SUB", "MUL", "DIV", 
                      "L_PAREN", "R_PAREN", "L_PAREN_VISUAL", "R_PAREN_VISUAL", 
                      "L_GROUP", "R_GROUP", "L_BRACE", "R_BRACE", "L_BRACE_VISUAL", 
                      "R_BRACE_VISUAL", "L_BRACE_CMD", "R_BRACE_CMD", "L_BRACKET", 
                      "R_BRACKET", "L_BRACK", "R_BRACK", "PHANTOM_CMD", 
                      "BOXED_CMD", "BAR", "L_VERT", "R_VERT", "VERT", "NORM", 
                      "L_ANGLE", "R_ANGLE", "L_FLOOR", "R_FLOOR", "LL_CORNER", 
                      "LR_CORNER", "L_CEIL", "R_CEIL", "UL_CORNER", "UR_CORNER", 
                      "FUNC_LIM", "LIM_APPROACH_SYM", "FUNC_INT", "FUNC_SUM", 
                      "FUNC_PROD", "FUNC_LOG", "FUNC_LN", "FUNC_EXP", "FUNC_SIN", 
                      "FUNC_COS", "FUNC_TAN", "FUNC_CSC", "FUNC_SEC", "FUNC_COT", 
                      "FUNC_ARCSIN", "FUNC_ARCCOS", "FUNC_ARCTAN", "FUNC_ARCCSC", 
                      "FUNC_ARCSEC", "FUNC_ARCCOT", "FUNC_SINH", "FUNC_COSH", 
                      "FUNC_TANH", "FUNC_ARSINH", "FUNC_ARCOSH", "FUNC_ARTANH", 
                      "FUNC_ARCSINH", "FUNC_ARCCOSH", "FUNC_ARCTANH", "FUNC_ARSINH_NAME", 
                      "FUNC_ARCSINH_NAME", "FUNC_ARCOSH_NAME", "FUNC_ARCCOSH_NAME", 
                      "FUNC_ARTANH_NAME", "FUNC_ARCTANH_NAME", "FUNC_GCD_NAME", 
                      "FUNC_LCM_NAME", "FUNC_FLOOR_NAME", "FUNC_CEIL_NAME", 
                      "FUNC_SQRT", "FUNC_GCD", "FUNC_LCM", "FUNC_FLOOR", 
                      "FUNC_CEIL", "FUNC_MAX", "FUNC_MIN", "FUNC_DET", "FUNC_EYE_NAME", 
                      "FUNC_ZEROS_NAME", "FUNC_ONES_NAME", "FUNC_COLS_NAME", 
                      "FUNC_ROWS_NAME", "FUNC_DIAG_NAME", "FUNC_NORM_NAME", 
                      "FUNC_RANK_NAME", "FUNC_TRACE_NAME", "FUNC_RREF_NAME", 
                      "FUNC_HSTACK_NAME", "FUNC_VSTACK_NAME", "FUNC_ORTHOGONALIZE_NAME", 
                      "FUNC_NULLSPACE_NAME", "FUNC_DIAGONALIZE_NAME", "FUNC_EIGENVALS_NAME", 
                      "FUNC_EIGENVECTORS_NAME", "FUNC_SVD_NAME", "CMD_TIMES", 
                      "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_CHOOSE", 
                      "CMD_MOD", "CMD_MATHIT", "CMD_OPERATORNAME", "MATRIX_TYPE_MATRIX", 
                      "MATRIX_TYPE_PMATRIX", "MATRIX_TYPE_BMATRIX", "MATRIX_TYPE_DET", 
                      "MATRIX_TYPES", "CMD_MATRIX_START", "CMD_MATRIX_END", 
                      "CMD_ARRAY_START", "CMD_ARRAY_END", "CMD_DET_START", 
                      "CMD_DET_END", "MATRIX_DEL_COL", "MATRIX_DEL_ROW", 
                      "UNDERSCORE", "CARET", "COLON", "SEMICOLON", "COMMA", 
                      "PERIOD", "DIFFERENTIAL", "EXP_E", "E_NOTATION_E", 
                      "LETTER_NO_E", "MATRIX_XRIGHTARROW", "TRANSFORM_EXCHANGE", 
                      "NUMBER", "E_NOTATION", "IN", "ASSIGNMENT", "EQUAL", 
                      "APPROX", "LT", "LTE", "GT", "GTE", "UNEQUAL", "BANG", 
                      "PERCENT_NUMBER", "GREEK_CMD", "OTHER_SYMBOL_CMD", 
                      "SYMBOL", "VARIABLE", "SET_NATURALS", "SET_INTEGERS", 
                      "SET_RATIONALS", "SET_REALS", "SET_COMPLEX", "SET_PRIMES", 
                      "ACCENT", "UNION", "INTERSECTION", "SET_MINUS", "PLUS_MINUS", 
                      "SET_EMPTY", "SUPSET", "SUBSET", "NOTIN" ]

    RULE_math = 0
    RULE_transpose = 1
    RULE_degree = 2
    RULE_transform_atom = 3
    RULE_transform_scale = 4
    RULE_transform_swap = 5
    RULE_transform_assignment = 6
    RULE_elementary_transform = 7
    RULE_elementary_transforms = 8
    RULE_matrix = 9
    RULE_det = 10
    RULE_matrix_row = 11
    RULE_relation = 12
    RULE_equality = 13
    RULE_expr = 14
    RULE_additive = 15
    RULE_mp = 16
    RULE_mp_nofunc = 17
    RULE_unary = 18
    RULE_unary_nofunc = 19
    RULE_postfix = 20
    RULE_postfix_nofunc = 21
    RULE_postfix_op = 22
    RULE_eval_at = 23
    RULE_eval_at_sub = 24
    RULE_eval_at_sup = 25
    RULE_exp = 26
    RULE_exp_nofunc = 27
    RULE_comp = 28
    RULE_comp_nofunc = 29
    RULE_group = 30
    RULE_formatting_group = 31
    RULE_norm_group = 32
    RULE_abs_group = 33
    RULE_dot_product = 34
    RULE_floor_group = 35
    RULE_ceil_group = 36
    RULE_atom_expr_no_supexpr = 37
    RULE_atom_expr = 38
    RULE_atom_expr_list = 39
    RULE_number_subexpr = 40
    RULE_atom = 41
    RULE_frac = 42
    RULE_binom = 43
    RULE_func_normal_functions_single_arg = 44
    RULE_func_normal_functions_multi_arg = 45
    RULE_func_operator_names_single_arg = 46
    RULE_func_operator_names_multi_arg = 47
    RULE_func_normal_single_arg = 48
    RULE_func_normal_multi_arg = 49
    RULE_func = 50
    RULE_args = 51
    RULE_func_common_args = 52
    RULE_limit_sub = 53
    RULE_func_single_arg = 54
    RULE_func_single_arg_noparens = 55
    RULE_func_multi_arg = 56
    RULE_func_multi_arg_noparens = 57
    RULE_subexpr = 58
    RULE_supexpr = 59
    RULE_subeq = 60
    RULE_supeq = 61
    RULE_set_relation = 62
    RULE_minus_expr = 63
    RULE_union_expr = 64
    RULE_intersection_expr = 65
    RULE_set_group = 66
    RULE_set_atom = 67
    RULE_interval = 68
    RULE_ordered_tuple = 69
    RULE_finite_set = 70
    RULE_set_elements_relation = 71
    RULE_set_elements = 72
    RULE_semicolon_elements = 73
    RULE_semicolon_elements_no_relation = 74
    RULE_comma_elements = 75
    RULE_comma_elements_no_relation = 76
    RULE_element_no_relation = 77
    RULE_element = 78
    RULE_plus_minus_expr = 79
    RULE_literal_set = 80

    ruleNames =  [ "math", "transpose", "degree", "transform_atom", "transform_scale", 
                   "transform_swap", "transform_assignment", "elementary_transform", 
                   "elementary_transforms", "matrix", "det", "matrix_row", 
                   "relation", "equality", "expr", "additive", "mp", "mp_nofunc", 
                   "unary", "unary_nofunc", "postfix", "postfix_nofunc", 
                   "postfix_op", "eval_at", "eval_at_sub", "eval_at_sup", 
                   "exp", "exp_nofunc", "comp", "comp_nofunc", "group", 
                   "formatting_group", "norm_group", "abs_group", "dot_product", 
                   "floor_group", "ceil_group", "atom_expr_no_supexpr", 
                   "atom_expr", "atom_expr_list", "number_subexpr", "atom", 
                   "frac", "binom", "func_normal_functions_single_arg", 
                   "func_normal_functions_multi_arg", "func_operator_names_single_arg", 
                   "func_operator_names_multi_arg", "func_normal_single_arg", 
                   "func_normal_multi_arg", "func", "args", "func_common_args", 
                   "limit_sub", "func_single_arg", "func_single_arg_noparens", 
                   "func_multi_arg", "func_multi_arg_noparens", "subexpr", 
                   "supexpr", "subeq", "supeq", "set_relation", "minus_expr", 
                   "union_expr", "intersection_expr", "set_group", "set_atom", 
                   "interval", "ordered_tuple", "finite_set", "set_elements_relation", 
                   "set_elements", "semicolon_elements", "semicolon_elements_no_relation", 
                   "comma_elements", "comma_elements_no_relation", "element_no_relation", 
                   "element", "plus_minus_expr", "literal_set" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    WS=13
    THINSPACE=14
    MEDSPACE=15
    THICKSPACE=16
    QUAD=17
    QQUAD=18
    NEGTHINSPACE=19
    NEGMEDSPACE=20
    NEGTHICKSPACE=21
    DOLLAR_SIGN=22
    IGNORE=23
    ADD=24
    SUB=25
    MUL=26
    DIV=27
    L_PAREN=28
    R_PAREN=29
    L_PAREN_VISUAL=30
    R_PAREN_VISUAL=31
    L_GROUP=32
    R_GROUP=33
    L_BRACE=34
    R_BRACE=35
    L_BRACE_VISUAL=36
    R_BRACE_VISUAL=37
    L_BRACE_CMD=38
    R_BRACE_CMD=39
    L_BRACKET=40
    R_BRACKET=41
    L_BRACK=42
    R_BRACK=43
    PHANTOM_CMD=44
    BOXED_CMD=45
    BAR=46
    L_VERT=47
    R_VERT=48
    VERT=49
    NORM=50
    L_ANGLE=51
    R_ANGLE=52
    L_FLOOR=53
    R_FLOOR=54
    LL_CORNER=55
    LR_CORNER=56
    L_CEIL=57
    R_CEIL=58
    UL_CORNER=59
    UR_CORNER=60
    FUNC_LIM=61
    LIM_APPROACH_SYM=62
    FUNC_INT=63
    FUNC_SUM=64
    FUNC_PROD=65
    FUNC_LOG=66
    FUNC_LN=67
    FUNC_EXP=68
    FUNC_SIN=69
    FUNC_COS=70
    FUNC_TAN=71
    FUNC_CSC=72
    FUNC_SEC=73
    FUNC_COT=74
    FUNC_ARCSIN=75
    FUNC_ARCCOS=76
    FUNC_ARCTAN=77
    FUNC_ARCCSC=78
    FUNC_ARCSEC=79
    FUNC_ARCCOT=80
    FUNC_SINH=81
    FUNC_COSH=82
    FUNC_TANH=83
    FUNC_ARSINH=84
    FUNC_ARCOSH=85
    FUNC_ARTANH=86
    FUNC_ARCSINH=87
    FUNC_ARCCOSH=88
    FUNC_ARCTANH=89
    FUNC_ARSINH_NAME=90
    FUNC_ARCSINH_NAME=91
    FUNC_ARCOSH_NAME=92
    FUNC_ARCCOSH_NAME=93
    FUNC_ARTANH_NAME=94
    FUNC_ARCTANH_NAME=95
    FUNC_GCD_NAME=96
    FUNC_LCM_NAME=97
    FUNC_FLOOR_NAME=98
    FUNC_CEIL_NAME=99
    FUNC_SQRT=100
    FUNC_GCD=101
    FUNC_LCM=102
    FUNC_FLOOR=103
    FUNC_CEIL=104
    FUNC_MAX=105
    FUNC_MIN=106
    FUNC_DET=107
    FUNC_EYE_NAME=108
    FUNC_ZEROS_NAME=109
    FUNC_ONES_NAME=110
    FUNC_COLS_NAME=111
    FUNC_ROWS_NAME=112
    FUNC_DIAG_NAME=113
    FUNC_NORM_NAME=114
    FUNC_RANK_NAME=115
    FUNC_TRACE_NAME=116
    FUNC_RREF_NAME=117
    FUNC_HSTACK_NAME=118
    FUNC_VSTACK_NAME=119
    FUNC_ORTHOGONALIZE_NAME=120
    FUNC_NULLSPACE_NAME=121
    FUNC_DIAGONALIZE_NAME=122
    FUNC_EIGENVALS_NAME=123
    FUNC_EIGENVECTORS_NAME=124
    FUNC_SVD_NAME=125
    CMD_TIMES=126
    CMD_CDOT=127
    CMD_DIV=128
    CMD_FRAC=129
    CMD_BINOM=130
    CMD_CHOOSE=131
    CMD_MOD=132
    CMD_MATHIT=133
    CMD_OPERATORNAME=134
    MATRIX_TYPE_MATRIX=135
    MATRIX_TYPE_PMATRIX=136
    MATRIX_TYPE_BMATRIX=137
    MATRIX_TYPE_DET=138
    MATRIX_TYPES=139
    CMD_MATRIX_START=140
    CMD_MATRIX_END=141
    CMD_ARRAY_START=142
    CMD_ARRAY_END=143
    CMD_DET_START=144
    CMD_DET_END=145
    MATRIX_DEL_COL=146
    MATRIX_DEL_ROW=147
    UNDERSCORE=148
    CARET=149
    COLON=150
    SEMICOLON=151
    COMMA=152
    PERIOD=153
    DIFFERENTIAL=154
    EXP_E=155
    E_NOTATION_E=156
    LETTER_NO_E=157
    MATRIX_XRIGHTARROW=158
    TRANSFORM_EXCHANGE=159
    NUMBER=160
    E_NOTATION=161
    IN=162
    ASSIGNMENT=163
    EQUAL=164
    APPROX=165
    LT=166
    LTE=167
    GT=168
    GTE=169
    UNEQUAL=170
    BANG=171
    PERCENT_NUMBER=172
    GREEK_CMD=173
    OTHER_SYMBOL_CMD=174
    SYMBOL=175
    VARIABLE=176
    SET_NATURALS=177
    SET_INTEGERS=178
    SET_RATIONALS=179
    SET_REALS=180
    SET_COMPLEX=181
    SET_PRIMES=182
    ACCENT=183
    UNION=184
    INTERSECTION=185
    SET_MINUS=186
    PLUS_MINUS=187
    SET_EMPTY=188
    SUPSET=189
    SUBSET=190
    NOTIN=191

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PSParser.EOF, 0)

        def set_elements_relation(self):
            return self.getTypedRuleContext(PSParser.Set_elements_relationContext,0)


        def set_elements(self):
            return self.getTypedRuleContext(PSParser.Set_elementsContext,0)


        def set_relation(self):
            return self.getTypedRuleContext(PSParser.Set_relationContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath" ):
                listener.enterMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath" ):
                listener.exitMath(self)




    def math(self):

        localctx = PSParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 162
                self.set_elements_relation()
                pass

            elif la_ == 2:
                self.state = 163
                self.set_elements()
                pass

            elif la_ == 3:
                self.state = 164
                self.set_relation(0)
                pass


            self.state = 167
            self.match(PSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PSParser.RULE_transpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranspose" ):
                listener.enterTranspose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranspose" ):
                listener.exitTranspose(self)




    def transpose(self):

        localctx = PSParser.TransposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_transpose)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PSParser.T__0) | (1 << PSParser.T__1) | (1 << PSParser.T__2) | (1 << PSParser.T__3))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DegreeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PSParser.RULE_degree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDegree" ):
                listener.enterDegree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDegree" ):
                listener.exitDegree(self)




    def degree(self):

        localctx = PSParser.DegreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_degree)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PSParser.T__4) | (1 << PSParser.T__5) | (1 << PSParser.T__6) | (1 << PSParser.T__7) | (1 << PSParser.T__8) | (1 << PSParser.T__9) | (1 << PSParser.T__10) | (1 << PSParser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def NUMBER(self):
            return self.getToken(PSParser.NUMBER, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_transform_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_atom" ):
                listener.enterTransform_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_atom" ):
                listener.exitTransform_atom(self)




    def transform_atom(self):

        localctx = PSParser.Transform_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_transform_atom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(PSParser.LETTER_NO_E)
            self.state = 174
            self.match(PSParser.UNDERSCORE)
            self.state = 179
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.NUMBER]:
                self.state = 175
                self.match(PSParser.NUMBER)
                pass
            elif token in [PSParser.L_BRACE]:
                self.state = 176
                self.match(PSParser.L_BRACE)
                self.state = 177
                self.match(PSParser.NUMBER)
                self.state = 178
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_scaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self):
            return self.getTypedRuleContext(PSParser.Transform_atomContext,0)


        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def group(self):
            return self.getTypedRuleContext(PSParser.GroupContext,0)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def getRuleIndex(self):
            return PSParser.RULE_transform_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_scale" ):
                listener.enterTransform_scale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_scale" ):
                listener.exitTransform_scale(self)




    def transform_scale(self):

        localctx = PSParser.Transform_scaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_transform_scale)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 181
                self.expr()
                pass

            elif la_ == 2:
                self.state = 182
                self.group()
                pass

            elif la_ == 3:
                self.state = 183
                self.match(PSParser.ADD)
                pass

            elif la_ == 4:
                self.state = 184
                self.match(PSParser.SUB)
                pass


            self.state = 187
            self.transform_atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_swapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Transform_atomContext)
            else:
                return self.getTypedRuleContext(PSParser.Transform_atomContext,i)


        def TRANSFORM_EXCHANGE(self):
            return self.getToken(PSParser.TRANSFORM_EXCHANGE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_transform_swap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_swap" ):
                listener.enterTransform_swap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_swap" ):
                listener.exitTransform_swap(self)




    def transform_swap(self):

        localctx = PSParser.Transform_swapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_transform_swap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.transform_atom()
            self.state = 190
            self.match(PSParser.TRANSFORM_EXCHANGE)
            self.state = 191
            self.transform_atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self):
            return self.getTypedRuleContext(PSParser.Transform_atomContext,0)


        def transform_scale(self):
            return self.getTypedRuleContext(PSParser.Transform_scaleContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_transform_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_assignment" ):
                listener.enterTransform_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_assignment" ):
                listener.exitTransform_assignment(self)




    def transform_assignment(self):

        localctx = PSParser.Transform_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transform_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.transform_atom()
            self.state = 194
            self.transform_scale()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elementary_transformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_assignment(self):
            return self.getTypedRuleContext(PSParser.Transform_assignmentContext,0)


        def transform_scale(self):
            return self.getTypedRuleContext(PSParser.Transform_scaleContext,0)


        def transform_swap(self):
            return self.getTypedRuleContext(PSParser.Transform_swapContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_elementary_transform

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementary_transform" ):
                listener.enterElementary_transform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementary_transform" ):
                listener.exitElementary_transform(self)




    def elementary_transform(self):

        localctx = PSParser.Elementary_transformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_elementary_transform)
        try:
            self.state = 199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 196
                self.transform_assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 197
                self.transform_scale()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 198
                self.transform_swap()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elementary_transformsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementary_transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Elementary_transformContext)
            else:
                return self.getTypedRuleContext(PSParser.Elementary_transformContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_elementary_transforms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementary_transforms" ):
                listener.enterElementary_transforms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementary_transforms" ):
                listener.exitElementary_transforms(self)




    def elementary_transforms(self):

        localctx = PSParser.Elementary_transformsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_elementary_transforms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.elementary_transform()
            self.state = 206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PSParser.COMMA:
                self.state = 202
                self.match(PSParser.COMMA)
                self.state = 203
                self.elementary_transform()
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATRIX_START(self):
            return self.getToken(PSParser.CMD_MATRIX_START, 0)

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(PSParser.Matrix_rowContext,i)


        def CMD_MATRIX_END(self):
            return self.getToken(PSParser.CMD_MATRIX_END, 0)

        def CMD_ARRAY_START(self):
            return self.getToken(PSParser.CMD_ARRAY_START, 0)

        def CMD_ARRAY_END(self):
            return self.getToken(PSParser.CMD_ARRAY_END, 0)

        def MATRIX_XRIGHTARROW(self):
            return self.getToken(PSParser.MATRIX_XRIGHTARROW, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def elementary_transforms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Elementary_transformsContext)
            else:
                return self.getTypedRuleContext(PSParser.Elementary_transformsContext,i)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def MATRIX_DEL_ROW(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(PSParser.MATRIX_DEL_ROW, i)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_matrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix" ):
                listener.enterMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix" ):
                listener.exitMatrix(self)




    def matrix(self):

        localctx = PSParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_matrix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.CMD_MATRIX_START]:
                self.state = 209
                self.match(PSParser.CMD_MATRIX_START)
                self.state = 210
                self.matrix_row()
                self.state = 215
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 211
                        self.match(PSParser.MATRIX_DEL_ROW)
                        self.state = 212
                        self.matrix_row() 
                    self.state = 217
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PSParser.MATRIX_DEL_ROW:
                    self.state = 218
                    self.match(PSParser.MATRIX_DEL_ROW)


                self.state = 221
                self.match(PSParser.CMD_MATRIX_END)
                pass
            elif token in [PSParser.CMD_ARRAY_START]:
                self.state = 223
                self.match(PSParser.CMD_ARRAY_START)
                self.state = 224
                self.matrix_row()
                self.state = 229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 225
                        self.match(PSParser.MATRIX_DEL_ROW)
                        self.state = 226
                        self.matrix_row() 
                    self.state = 231
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PSParser.MATRIX_DEL_ROW:
                    self.state = 232
                    self.match(PSParser.MATRIX_DEL_ROW)


                self.state = 235
                self.match(PSParser.CMD_ARRAY_END)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 239
                self.match(PSParser.MATRIX_XRIGHTARROW)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PSParser.L_BRACKET:
                    self.state = 240
                    self.match(PSParser.L_BRACKET)
                    self.state = 241
                    self.elementary_transforms()
                    self.state = 242
                    self.match(PSParser.R_BRACKET)


                self.state = 246
                self.match(PSParser.L_BRACE)
                self.state = 247
                self.elementary_transforms()
                self.state = 248
                self.match(PSParser.R_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DET_START(self):
            return self.getToken(PSParser.CMD_DET_START, 0)

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(PSParser.Matrix_rowContext,i)


        def CMD_DET_END(self):
            return self.getToken(PSParser.CMD_DET_END, 0)

        def MATRIX_DEL_ROW(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(PSParser.MATRIX_DEL_ROW, i)

        def getRuleIndex(self):
            return PSParser.RULE_det

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDet" ):
                listener.enterDet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDet" ):
                listener.exitDet(self)




    def det(self):

        localctx = PSParser.DetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_det)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(PSParser.CMD_DET_START)
            self.state = 253
            self.matrix_row()
            self.state = 258
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 254
                    self.match(PSParser.MATRIX_DEL_ROW)
                    self.state = 255
                    self.matrix_row() 
                self.state = 260
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PSParser.MATRIX_DEL_ROW:
                self.state = 261
                self.match(PSParser.MATRIX_DEL_ROW)


            self.state = 264
            self.match(PSParser.CMD_DET_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def MATRIX_DEL_COL(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.MATRIX_DEL_COL)
            else:
                return self.getToken(PSParser.MATRIX_DEL_COL, i)

        def getRuleIndex(self):
            return PSParser.RULE_matrix_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix_row" ):
                listener.enterMatrix_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix_row" ):
                listener.exitMatrix_row(self)




    def matrix_row(self):

        localctx = PSParser.Matrix_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_matrix_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.expr()
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PSParser.MATRIX_DEL_COL:
                self.state = 267
                self.match(PSParser.MATRIX_DEL_COL)
                self.state = 268
                self.expr()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.RelationContext)
            else:
                return self.getTypedRuleContext(PSParser.RelationContext,i)


        def IN(self):
            return self.getToken(PSParser.IN, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def EQUAL(self):
            return self.getToken(PSParser.EQUAL, 0)

        def APPROX(self):
            return self.getToken(PSParser.APPROX, 0)

        def LT(self):
            return self.getToken(PSParser.LT, 0)

        def LTE(self):
            return self.getToken(PSParser.LTE, 0)

        def GT(self):
            return self.getToken(PSParser.GT, 0)

        def GTE(self):
            return self.getToken(PSParser.GTE, 0)

        def UNEQUAL(self):
            return self.getToken(PSParser.UNEQUAL, 0)

        def getRuleIndex(self):
            return PSParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 282
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 277
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 278
                    _la = self._input.LA(1)
                    if not(((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PSParser.IN - 162)) | (1 << (PSParser.ASSIGNMENT - 162)) | (1 << (PSParser.EQUAL - 162)) | (1 << (PSParser.APPROX - 162)) | (1 << (PSParser.LT - 162)) | (1 << (PSParser.LTE - 162)) | (1 << (PSParser.GT - 162)) | (1 << (PSParser.GTE - 162)) | (1 << (PSParser.UNEQUAL - 162)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 279
                    self.relation(3) 
                self.state = 284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def EQUAL(self):
            return self.getToken(PSParser.EQUAL, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return PSParser.RULE_equality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality" ):
                listener.enterEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality" ):
                listener.exitEquality(self)




    def equality(self):

        localctx = PSParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_equality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.expr()
            self.state = 286
            _la = self._input.LA(1)
            if not(_la==PSParser.ASSIGNMENT or _la==PSParser.EQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 287
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive(self):
            return self.getTypedRuleContext(PSParser.AdditiveContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = PSParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.additive(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp(self):
            return self.getTypedRuleContext(PSParser.MpContext,0)


        def additive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.AdditiveContext)
            else:
                return self.getTypedRuleContext(PSParser.AdditiveContext,i)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def getRuleIndex(self):
            return PSParser.RULE_additive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive" ):
                listener.enterAdditive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive" ):
                listener.exitAdditive(self)



    def additive(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.AdditiveContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_additive, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.mp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.AdditiveContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
                    self.state = 294
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 295
                    _la = self._input.LA(1)
                    if not(_la==PSParser.ADD or _la==PSParser.SUB):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 296
                    self.additive(3) 
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(PSParser.UnaryContext,0)


        def mp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.MpContext)
            else:
                return self.getTypedRuleContext(PSParser.MpContext,i)


        def MUL(self):
            return self.getToken(PSParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(PSParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(PSParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(PSParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(PSParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(PSParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(PSParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_mp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMp" ):
                listener.enterMp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMp" ):
                listener.exitMp(self)



    def mp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.MpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_mp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 310
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.MpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
                    self.state = 305
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 306
                    _la = self._input.LA(1)
                    if not(_la==PSParser.MUL or _la==PSParser.DIV or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (PSParser.CMD_TIMES - 126)) | (1 << (PSParser.CMD_CDOT - 126)) | (1 << (PSParser.CMD_DIV - 126)) | (1 << (PSParser.CMD_MOD - 126)) | (1 << (PSParser.COLON - 126)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 307
                    self.mp(3) 
                self.state = 312
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(PSParser.Unary_nofuncContext,0)


        def mp_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Mp_nofuncContext)
            else:
                return self.getTypedRuleContext(PSParser.Mp_nofuncContext,i)


        def MUL(self):
            return self.getToken(PSParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(PSParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(PSParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(PSParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(PSParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(PSParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(PSParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_mp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMp_nofunc" ):
                listener.enterMp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMp_nofunc" ):
                listener.exitMp_nofunc(self)



    def mp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Mp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_mp_nofunc, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.unary_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Mp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
                    self.state = 316
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 317
                    _la = self._input.LA(1)
                    if not(_la==PSParser.MUL or _la==PSParser.DIV or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (PSParser.CMD_TIMES - 126)) | (1 << (PSParser.CMD_CDOT - 126)) | (1 << (PSParser.CMD_DIV - 126)) | (1 << (PSParser.CMD_MOD - 126)) | (1 << (PSParser.COLON - 126)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 318
                    self.mp_nofunc(3) 
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(PSParser.UnaryContext,0)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.PostfixContext)
            else:
                return self.getTypedRuleContext(PSParser.PostfixContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)




    def unary(self):

        localctx = PSParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_unary)
        self._la = 0 # Token type
        try:
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.ADD, PSParser.SUB]:
                self.enterOuterAlt(localctx, 1)
                self.state = 324
                _la = self._input.LA(1)
                if not(_la==PSParser.ADD or _la==PSParser.SUB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 325
                self.unary()
                pass
            elif token in [PSParser.L_PAREN, PSParser.L_GROUP, PSParser.L_BRACE, PSParser.L_BRACE_VISUAL, PSParser.L_BRACE_CMD, PSParser.L_BRACKET, PSParser.L_BRACK, PSParser.PHANTOM_CMD, PSParser.BOXED_CMD, PSParser.BAR, PSParser.L_VERT, PSParser.VERT, PSParser.NORM, PSParser.L_ANGLE, PSParser.L_FLOOR, PSParser.LL_CORNER, PSParser.L_CEIL, PSParser.UL_CORNER, PSParser.FUNC_LIM, PSParser.FUNC_INT, PSParser.FUNC_SUM, PSParser.FUNC_PROD, PSParser.FUNC_LOG, PSParser.FUNC_LN, PSParser.FUNC_EXP, PSParser.FUNC_SIN, PSParser.FUNC_COS, PSParser.FUNC_TAN, PSParser.FUNC_CSC, PSParser.FUNC_SEC, PSParser.FUNC_COT, PSParser.FUNC_ARCSIN, PSParser.FUNC_ARCCOS, PSParser.FUNC_ARCTAN, PSParser.FUNC_ARCCSC, PSParser.FUNC_ARCSEC, PSParser.FUNC_ARCCOT, PSParser.FUNC_SINH, PSParser.FUNC_COSH, PSParser.FUNC_TANH, PSParser.FUNC_ARSINH, PSParser.FUNC_ARCOSH, PSParser.FUNC_ARTANH, PSParser.FUNC_ARCSINH, PSParser.FUNC_ARCCOSH, PSParser.FUNC_ARCTANH, PSParser.FUNC_SQRT, PSParser.FUNC_GCD, PSParser.FUNC_LCM, PSParser.FUNC_FLOOR, PSParser.FUNC_CEIL, PSParser.FUNC_MAX, PSParser.FUNC_MIN, PSParser.FUNC_DET, PSParser.CMD_FRAC, PSParser.CMD_BINOM, PSParser.CMD_OPERATORNAME, PSParser.CMD_MATRIX_START, PSParser.CMD_ARRAY_START, PSParser.CMD_DET_START, PSParser.DIFFERENTIAL, PSParser.EXP_E, PSParser.E_NOTATION_E, PSParser.LETTER_NO_E, PSParser.NUMBER, PSParser.E_NOTATION, PSParser.PERCENT_NUMBER, PSParser.GREEK_CMD, PSParser.OTHER_SYMBOL_CMD, PSParser.SYMBOL, PSParser.VARIABLE, PSParser.ACCENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 327 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 326
                        self.postfix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 329 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(PSParser.Unary_nofuncContext,0)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def postfix(self):
            return self.getTypedRuleContext(PSParser.PostfixContext,0)


        def postfix_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Postfix_nofuncContext)
            else:
                return self.getTypedRuleContext(PSParser.Postfix_nofuncContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_unary_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_nofunc" ):
                listener.enterUnary_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_nofunc" ):
                listener.exitUnary_nofunc(self)




    def unary_nofunc(self):

        localctx = PSParser.Unary_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unary_nofunc)
        self._la = 0 # Token type
        try:
            self.state = 342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.ADD, PSParser.SUB]:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                _la = self._input.LA(1)
                if not(_la==PSParser.ADD or _la==PSParser.SUB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 334
                self.unary_nofunc()
                pass
            elif token in [PSParser.L_PAREN, PSParser.L_GROUP, PSParser.L_BRACE, PSParser.L_BRACE_VISUAL, PSParser.L_BRACE_CMD, PSParser.L_BRACKET, PSParser.L_BRACK, PSParser.PHANTOM_CMD, PSParser.BOXED_CMD, PSParser.BAR, PSParser.L_VERT, PSParser.VERT, PSParser.NORM, PSParser.L_ANGLE, PSParser.L_FLOOR, PSParser.LL_CORNER, PSParser.L_CEIL, PSParser.UL_CORNER, PSParser.FUNC_LIM, PSParser.FUNC_INT, PSParser.FUNC_SUM, PSParser.FUNC_PROD, PSParser.FUNC_LOG, PSParser.FUNC_LN, PSParser.FUNC_EXP, PSParser.FUNC_SIN, PSParser.FUNC_COS, PSParser.FUNC_TAN, PSParser.FUNC_CSC, PSParser.FUNC_SEC, PSParser.FUNC_COT, PSParser.FUNC_ARCSIN, PSParser.FUNC_ARCCOS, PSParser.FUNC_ARCTAN, PSParser.FUNC_ARCCSC, PSParser.FUNC_ARCSEC, PSParser.FUNC_ARCCOT, PSParser.FUNC_SINH, PSParser.FUNC_COSH, PSParser.FUNC_TANH, PSParser.FUNC_ARSINH, PSParser.FUNC_ARCOSH, PSParser.FUNC_ARTANH, PSParser.FUNC_ARCSINH, PSParser.FUNC_ARCCOSH, PSParser.FUNC_ARCTANH, PSParser.FUNC_SQRT, PSParser.FUNC_GCD, PSParser.FUNC_LCM, PSParser.FUNC_FLOOR, PSParser.FUNC_CEIL, PSParser.FUNC_MAX, PSParser.FUNC_MIN, PSParser.FUNC_DET, PSParser.CMD_FRAC, PSParser.CMD_BINOM, PSParser.CMD_OPERATORNAME, PSParser.CMD_MATRIX_START, PSParser.CMD_ARRAY_START, PSParser.CMD_DET_START, PSParser.DIFFERENTIAL, PSParser.EXP_E, PSParser.E_NOTATION_E, PSParser.LETTER_NO_E, PSParser.NUMBER, PSParser.E_NOTATION, PSParser.PERCENT_NUMBER, PSParser.GREEK_CMD, PSParser.OTHER_SYMBOL_CMD, PSParser.SYMBOL, PSParser.VARIABLE, PSParser.ACCENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 335
                self.postfix()
                self.state = 339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 336
                        self.postfix_nofunc() 
                    self.state = 341
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp(self):
            return self.getTypedRuleContext(PSParser.ExpContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(PSParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_postfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix" ):
                listener.enterPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix" ):
                listener.exitPostfix(self)




    def postfix(self):

        localctx = PSParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_postfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.exp(0)
            self.state = 348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 345
                    self.postfix_op() 
                self.state = 350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Exp_nofuncContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(PSParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_postfix_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_nofunc" ):
                listener.enterPostfix_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_nofunc" ):
                listener.exitPostfix_nofunc(self)




    def postfix_nofunc(self):

        localctx = PSParser.Postfix_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_postfix_nofunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.exp_nofunc(0)
            self.state = 355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 352
                    self.postfix_op() 
                self.state = 357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(PSParser.BANG, 0)

        def eval_at(self):
            return self.getTypedRuleContext(PSParser.Eval_atContext,0)


        def transpose(self):
            return self.getTypedRuleContext(PSParser.TransposeContext,0)


        def degree(self):
            return self.getTypedRuleContext(PSParser.DegreeContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_postfix_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_op" ):
                listener.enterPostfix_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_op" ):
                listener.exitPostfix_op(self)




    def postfix_op(self):

        localctx = PSParser.Postfix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_postfix_op)
        try:
            self.state = 362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.BANG]:
                self.enterOuterAlt(localctx, 1)
                self.state = 358
                self.match(PSParser.BANG)
                pass
            elif token in [PSParser.BAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                self.eval_at()
                pass
            elif token in [PSParser.T__0, PSParser.T__1, PSParser.T__2, PSParser.T__3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 360
                self.transpose()
                pass
            elif token in [PSParser.T__4, PSParser.T__5, PSParser.T__6, PSParser.T__7, PSParser.T__8, PSParser.T__9, PSParser.T__10, PSParser.T__11]:
                self.enterOuterAlt(localctx, 4)
                self.state = 361
                self.degree()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(PSParser.BAR, 0)

        def eval_at_sup(self):
            return self.getTypedRuleContext(PSParser.Eval_at_supContext,0)


        def eval_at_sub(self):
            return self.getTypedRuleContext(PSParser.Eval_at_subContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_eval_at

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at" ):
                listener.enterEval_at(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at" ):
                listener.exitEval_at(self)




    def eval_at(self):

        localctx = PSParser.Eval_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_eval_at)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(PSParser.BAR)
            self.state = 370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 365
                self.eval_at_sup()
                pass

            elif la_ == 2:
                self.state = 366
                self.eval_at_sub()
                pass

            elif la_ == 3:
                self.state = 367
                self.eval_at_sup()
                self.state = 368
                self.eval_at_sub()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_eval_at_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at_sub" ):
                listener.enterEval_at_sub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at_sub" ):
                listener.exitEval_at_sub(self)




    def eval_at_sub(self):

        localctx = PSParser.Eval_at_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eval_at_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(PSParser.UNDERSCORE)
            self.state = 373
            self.match(PSParser.L_BRACE)
            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 374
                self.expr()
                pass

            elif la_ == 2:
                self.state = 375
                self.equality()
                pass


            self.state = 378
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_supContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_eval_at_sup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at_sup" ):
                listener.enterEval_at_sup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at_sup" ):
                listener.exitEval_at_sup(self)




    def eval_at_sup(self):

        localctx = PSParser.Eval_at_supContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_eval_at_sup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(PSParser.CARET)
            self.state = 381
            self.match(PSParser.L_BRACE)
            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 382
                self.expr()
                pass

            elif la_ == 2:
                self.state = 383
                self.equality()
                pass


            self.state = 386
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(PSParser.CompContext,0)


        def exp(self):
            return self.getTypedRuleContext(PSParser.ExpContext,0)


        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp" ):
                listener.enterExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp" ):
                listener.exitExp(self)



    def exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.ExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.comp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.ExpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
                    self.state = 391
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 392
                    self.match(PSParser.CARET)
                    self.state = 398
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PSParser.DIFFERENTIAL, PSParser.E_NOTATION_E, PSParser.LETTER_NO_E, PSParser.NUMBER, PSParser.E_NOTATION, PSParser.PERCENT_NUMBER, PSParser.GREEK_CMD, PSParser.OTHER_SYMBOL_CMD, PSParser.SYMBOL, PSParser.VARIABLE, PSParser.ACCENT]:
                        self.state = 393
                        self.atom()
                        pass
                    elif token in [PSParser.L_BRACE]:
                        self.state = 394
                        self.match(PSParser.L_BRACE)
                        self.state = 395
                        self.expr()
                        self.state = 396
                        self.match(PSParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 401
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                    if la_ == 1:
                        self.state = 400
                        self.subexpr()

             
                self.state = 407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Exp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Comp_nofuncContext,0)


        def exp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Exp_nofuncContext,0)


        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_exp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_nofunc" ):
                listener.enterExp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_nofunc" ):
                listener.exitExp_nofunc(self)



    def exp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Exp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_exp_nofunc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.comp_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 425
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Exp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
                    self.state = 411
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 412
                    self.match(PSParser.CARET)
                    self.state = 418
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PSParser.DIFFERENTIAL, PSParser.E_NOTATION_E, PSParser.LETTER_NO_E, PSParser.NUMBER, PSParser.E_NOTATION, PSParser.PERCENT_NUMBER, PSParser.GREEK_CMD, PSParser.OTHER_SYMBOL_CMD, PSParser.SYMBOL, PSParser.VARIABLE, PSParser.ACCENT]:
                        self.state = 413
                        self.atom()
                        pass
                    elif token in [PSParser.L_BRACE]:
                        self.state = 414
                        self.match(PSParser.L_BRACE)
                        self.state = 415
                        self.expr()
                        self.state = 416
                        self.match(PSParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 421
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        self.state = 420
                        self.subexpr()

             
                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(PSParser.GroupContext,0)


        def formatting_group(self):
            return self.getTypedRuleContext(PSParser.Formatting_groupContext,0)


        def norm_group(self):
            return self.getTypedRuleContext(PSParser.Norm_groupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(PSParser.Abs_groupContext,0)


        def dot_product(self):
            return self.getTypedRuleContext(PSParser.Dot_productContext,0)


        def floor_group(self):
            return self.getTypedRuleContext(PSParser.Floor_groupContext,0)


        def ceil_group(self):
            return self.getTypedRuleContext(PSParser.Ceil_groupContext,0)


        def func(self):
            return self.getTypedRuleContext(PSParser.FuncContext,0)


        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def frac(self):
            return self.getTypedRuleContext(PSParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(PSParser.BinomContext,0)


        def matrix(self):
            return self.getTypedRuleContext(PSParser.MatrixContext,0)


        def det(self):
            return self.getTypedRuleContext(PSParser.DetContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp" ):
                listener.enterComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp" ):
                listener.exitComp(self)




    def comp(self):

        localctx = PSParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_comp)
        try:
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 428
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.formatting_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 430
                self.norm_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 431
                self.abs_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 432
                self.dot_product()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 433
                self.floor_group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 434
                self.ceil_group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 435
                self.func()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 436
                self.atom()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 437
                self.frac()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 438
                self.binom()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 439
                self.matrix()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 440
                self.det()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(PSParser.GroupContext,0)


        def formatting_group(self):
            return self.getTypedRuleContext(PSParser.Formatting_groupContext,0)


        def norm_group(self):
            return self.getTypedRuleContext(PSParser.Norm_groupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(PSParser.Abs_groupContext,0)


        def dot_product(self):
            return self.getTypedRuleContext(PSParser.Dot_productContext,0)


        def floor_group(self):
            return self.getTypedRuleContext(PSParser.Floor_groupContext,0)


        def ceil_group(self):
            return self.getTypedRuleContext(PSParser.Ceil_groupContext,0)


        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def frac(self):
            return self.getTypedRuleContext(PSParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(PSParser.BinomContext,0)


        def matrix(self):
            return self.getTypedRuleContext(PSParser.MatrixContext,0)


        def det(self):
            return self.getTypedRuleContext(PSParser.DetContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_comp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_nofunc" ):
                listener.enterComp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_nofunc" ):
                listener.exitComp_nofunc(self)




    def comp_nofunc(self):

        localctx = PSParser.Comp_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_comp_nofunc)
        try:
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 444
                self.formatting_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 445
                self.norm_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 446
                self.abs_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 447
                self.dot_product()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 448
                self.floor_group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 449
                self.ceil_group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 450
                self.atom()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 451
                self.frac()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 452
                self.binom()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 453
                self.matrix()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 454
                self.det()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def L_GROUP(self):
            return self.getToken(PSParser.L_GROUP, 0)

        def R_GROUP(self):
            return self.getToken(PSParser.R_GROUP, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(PSParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(PSParser.R_BRACE_VISUAL, 0)

        def L_BRACE_CMD(self):
            return self.getToken(PSParser.L_BRACE_CMD, 0)

        def R_BRACE_CMD(self):
            return self.getToken(PSParser.R_BRACE_CMD, 0)

        def L_BRACK(self):
            return self.getToken(PSParser.L_BRACK, 0)

        def R_BRACK(self):
            return self.getToken(PSParser.R_BRACK, 0)

        def getRuleIndex(self):
            return PSParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)




    def group(self):

        localctx = PSParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_group)
        try:
            self.state = 485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.L_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                self.match(PSParser.L_PAREN)
                self.state = 458
                self.expr()
                self.state = 459
                self.match(PSParser.R_PAREN)
                pass
            elif token in [PSParser.L_GROUP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.match(PSParser.L_GROUP)
                self.state = 462
                self.expr()
                self.state = 463
                self.match(PSParser.R_GROUP)
                pass
            elif token in [PSParser.L_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 465
                self.match(PSParser.L_BRACE)
                self.state = 466
                self.expr()
                self.state = 467
                self.match(PSParser.R_BRACE)
                pass
            elif token in [PSParser.L_BRACKET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 469
                self.match(PSParser.L_BRACKET)
                self.state = 470
                self.expr()
                self.state = 471
                self.match(PSParser.R_BRACKET)
                pass
            elif token in [PSParser.L_BRACE_VISUAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 473
                self.match(PSParser.L_BRACE_VISUAL)
                self.state = 474
                self.expr()
                self.state = 475
                self.match(PSParser.R_BRACE_VISUAL)
                pass
            elif token in [PSParser.L_BRACE_CMD]:
                self.enterOuterAlt(localctx, 6)
                self.state = 477
                self.match(PSParser.L_BRACE_CMD)
                self.state = 478
                self.expr()
                self.state = 479
                self.match(PSParser.R_BRACE_CMD)
                pass
            elif token in [PSParser.L_BRACK]:
                self.enterOuterAlt(localctx, 7)
                self.state = 481
                self.match(PSParser.L_BRACK)
                self.state = 482
                self.expr()
                self.state = 483
                self.match(PSParser.R_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formatting_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PHANTOM_CMD(self):
            return self.getToken(PSParser.PHANTOM_CMD, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def BOXED_CMD(self):
            return self.getToken(PSParser.BOXED_CMD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_formatting_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatting_group" ):
                listener.enterFormatting_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatting_group" ):
                listener.exitFormatting_group(self)




    def formatting_group(self):

        localctx = PSParser.Formatting_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_formatting_group)
        try:
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.PHANTOM_CMD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.match(PSParser.PHANTOM_CMD)
                self.state = 488
                self.match(PSParser.L_BRACE)
                self.state = 489
                self.expr()
                self.state = 490
                self.match(PSParser.R_BRACE)
                pass
            elif token in [PSParser.BOXED_CMD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.match(PSParser.BOXED_CMD)
                self.state = 493
                self.match(PSParser.L_BRACE)
                self.state = 494
                self.expr()
                self.state = 495
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Norm_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORM(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.NORM)
            else:
                return self.getToken(PSParser.NORM, i)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_norm_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNorm_group" ):
                listener.enterNorm_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNorm_group" ):
                listener.exitNorm_group(self)




    def norm_group(self):

        localctx = PSParser.Norm_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_norm_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(PSParser.NORM)
            self.state = 500
            self.expr()
            self.state = 501
            self.match(PSParser.NORM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abs_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.BAR)
            else:
                return self.getToken(PSParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def L_VERT(self):
            return self.getToken(PSParser.L_VERT, 0)

        def R_VERT(self):
            return self.getToken(PSParser.R_VERT, 0)

        def VERT(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.VERT)
            else:
                return self.getToken(PSParser.VERT, i)

        def getRuleIndex(self):
            return PSParser.RULE_abs_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbs_group" ):
                listener.enterAbs_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbs_group" ):
                listener.exitAbs_group(self)




    def abs_group(self):

        localctx = PSParser.Abs_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_abs_group)
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.BAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.match(PSParser.BAR)
                self.state = 504
                self.expr()
                self.state = 505
                self.match(PSParser.BAR)
                pass
            elif token in [PSParser.L_VERT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.match(PSParser.L_VERT)
                self.state = 508
                self.expr()
                self.state = 509
                self.match(PSParser.R_VERT)
                pass
            elif token in [PSParser.VERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 511
                self.match(PSParser.VERT)
                self.state = 512
                self.expr()
                self.state = 513
                self.match(PSParser.VERT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_productContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_ANGLE(self):
            return self.getToken(PSParser.L_ANGLE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_ANGLE(self):
            return self.getToken(PSParser.R_ANGLE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_dot_product

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_product" ):
                listener.enterDot_product(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_product" ):
                listener.exitDot_product(self)




    def dot_product(self):

        localctx = PSParser.Dot_productContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dot_product)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(PSParser.L_ANGLE)
            self.state = 518
            self.expr()
            self.state = 519
            self.match(PSParser.R_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floor_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_FLOOR(self):
            return self.getToken(PSParser.L_FLOOR, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_FLOOR(self):
            return self.getToken(PSParser.R_FLOOR, 0)

        def LL_CORNER(self):
            return self.getToken(PSParser.LL_CORNER, 0)

        def LR_CORNER(self):
            return self.getToken(PSParser.LR_CORNER, 0)

        def getRuleIndex(self):
            return PSParser.RULE_floor_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloor_group" ):
                listener.enterFloor_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloor_group" ):
                listener.exitFloor_group(self)




    def floor_group(self):

        localctx = PSParser.Floor_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_floor_group)
        try:
            self.state = 529
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.L_FLOOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.match(PSParser.L_FLOOR)
                self.state = 522
                self.expr()
                self.state = 523
                self.match(PSParser.R_FLOOR)
                pass
            elif token in [PSParser.LL_CORNER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.match(PSParser.LL_CORNER)
                self.state = 526
                self.expr()
                self.state = 527
                self.match(PSParser.LR_CORNER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ceil_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CEIL(self):
            return self.getToken(PSParser.L_CEIL, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_CEIL(self):
            return self.getToken(PSParser.R_CEIL, 0)

        def UL_CORNER(self):
            return self.getToken(PSParser.UL_CORNER, 0)

        def UR_CORNER(self):
            return self.getToken(PSParser.UR_CORNER, 0)

        def getRuleIndex(self):
            return PSParser.RULE_ceil_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCeil_group" ):
                listener.enterCeil_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCeil_group" ):
                listener.exitCeil_group(self)




    def ceil_group(self):

        localctx = PSParser.Ceil_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ceil_group)
        try:
            self.state = 539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.L_CEIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.match(PSParser.L_CEIL)
                self.state = 532
                self.expr()
                self.state = 533
                self.match(PSParser.R_CEIL)
                pass
            elif token in [PSParser.UL_CORNER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.match(PSParser.UL_CORNER)
                self.state = 536
                self.expr()
                self.state = 537
                self.match(PSParser.UR_CORNER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_expr_no_supexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(PSParser.GREEK_CMD, 0)

        def OTHER_SYMBOL_CMD(self):
            return self.getToken(PSParser.OTHER_SYMBOL_CMD, 0)

        def ACCENT(self):
            return self.getToken(PSParser.ACCENT, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_atom_expr_no_supexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr_no_supexpr" ):
                listener.enterAtom_expr_no_supexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr_no_supexpr" ):
                listener.exitAtom_expr_no_supexpr(self)




    def atom_expr_no_supexpr(self):

        localctx = PSParser.Atom_expr_no_supexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_atom_expr_no_supexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & ((1 << (PSParser.LETTER_NO_E - 157)) | (1 << (PSParser.GREEK_CMD - 157)) | (1 << (PSParser.OTHER_SYMBOL_CMD - 157)) | (1 << (PSParser.ACCENT - 157)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PSParser.UNDERSCORE:
                self.state = 542
                self.subexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(PSParser.GREEK_CMD, 0)

        def OTHER_SYMBOL_CMD(self):
            return self.getToken(PSParser.OTHER_SYMBOL_CMD, 0)

        def ACCENT(self):
            return self.getToken(PSParser.ACCENT, 0)

        def supexpr(self):
            return self.getTypedRuleContext(PSParser.SupexprContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)




    def atom_expr(self):

        localctx = PSParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & ((1 << (PSParser.LETTER_NO_E - 157)) | (1 << (PSParser.GREEK_CMD - 157)) | (1 << (PSParser.OTHER_SYMBOL_CMD - 157)) | (1 << (PSParser.ACCENT - 157)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 546
                self.supexpr()
                self.state = 547
                self.subexpr()

            elif la_ == 2:
                self.state = 549
                self.subexpr()
                self.state = 550
                self.supexpr()

            elif la_ == 3:
                self.state = 552
                self.subexpr()

            elif la_ == 4:
                self.state = 553
                self.supexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def atom_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Atom_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Atom_exprContext,i)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_atom_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr_list" ):
                listener.enterAtom_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr_list" ):
                listener.exitAtom_expr_list(self)




    def atom_expr_list(self):

        localctx = PSParser.Atom_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_atom_expr_list)
        self._la = 0 # Token type
        try:
            self.state = 568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.L_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 556
                self.match(PSParser.L_PAREN)
                self.state = 557
                self.atom_expr()
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PSParser.COMMA:
                    self.state = 558
                    self.match(PSParser.COMMA)
                    self.state = 559
                    self.atom_expr()
                    self.state = 564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 565
                self.match(PSParser.R_PAREN)
                pass
            elif token in [PSParser.LETTER_NO_E, PSParser.GREEK_CMD, PSParser.OTHER_SYMBOL_CMD, PSParser.ACCENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.atom_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PSParser.NUMBER, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_number_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_subexpr" ):
                listener.enterNumber_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_subexpr" ):
                listener.exitNumber_subexpr(self)




    def number_subexpr(self):

        localctx = PSParser.Number_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_number_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(PSParser.NUMBER)
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 571
                self.subexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(PSParser.Atom_exprContext,0)


        def SYMBOL(self):
            return self.getToken(PSParser.SYMBOL, 0)

        def number_subexpr(self):
            return self.getTypedRuleContext(PSParser.Number_subexprContext,0)


        def PERCENT_NUMBER(self):
            return self.getToken(PSParser.PERCENT_NUMBER, 0)

        def E_NOTATION(self):
            return self.getToken(PSParser.E_NOTATION, 0)

        def E_NOTATION_E(self):
            return self.getToken(PSParser.E_NOTATION_E, 0)

        def DIFFERENTIAL(self):
            return self.getToken(PSParser.DIFFERENTIAL, 0)

        def VARIABLE(self):
            return self.getToken(PSParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = PSParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_atom)
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.LETTER_NO_E, PSParser.GREEK_CMD, PSParser.OTHER_SYMBOL_CMD, PSParser.ACCENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.atom_expr()
                pass
            elif token in [PSParser.SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.match(PSParser.SYMBOL)
                pass
            elif token in [PSParser.NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.number_subexpr()
                pass
            elif token in [PSParser.PERCENT_NUMBER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 577
                self.match(PSParser.PERCENT_NUMBER)
                pass
            elif token in [PSParser.E_NOTATION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 578
                self.match(PSParser.E_NOTATION)
                pass
            elif token in [PSParser.E_NOTATION_E]:
                self.enterOuterAlt(localctx, 6)
                self.state = 579
                self.match(PSParser.E_NOTATION_E)
                pass
            elif token in [PSParser.DIFFERENTIAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 580
                self.match(PSParser.DIFFERENTIAL)
                pass
            elif token in [PSParser.VARIABLE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 581
                self.match(PSParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FracContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None # ExprContext
            self.lower = None # ExprContext

        def CMD_FRAC(self):
            return self.getToken(PSParser.CMD_FRAC, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_frac

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrac" ):
                listener.enterFrac(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrac" ):
                listener.exitFrac(self)




    def frac(self):

        localctx = PSParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(PSParser.CMD_FRAC)
            self.state = 585
            self.match(PSParser.L_BRACE)
            self.state = 586
            localctx.upper = self.expr()
            self.state = 587
            self.match(PSParser.R_BRACE)
            self.state = 588
            self.match(PSParser.L_BRACE)
            self.state = 589
            localctx.lower = self.expr()
            self.state = 590
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None # ExprContext
            self.lower = None # ExprContext

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def CMD_CHOOSE(self):
            return self.getToken(PSParser.CMD_CHOOSE, 0)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def CMD_BINOM(self):
            return self.getToken(PSParser.CMD_BINOM, 0)

        def getRuleIndex(self):
            return PSParser.RULE_binom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinom" ):
                listener.enterBinom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinom" ):
                listener.exitBinom(self)




    def binom(self):

        localctx = PSParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_binom)
        try:
            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.L_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.match(PSParser.L_BRACE)
                self.state = 593
                localctx.upper = self.expr()
                self.state = 594
                self.match(PSParser.CMD_CHOOSE)
                self.state = 595
                localctx.lower = self.expr()
                self.state = 596
                self.match(PSParser.R_BRACE)
                pass
            elif token in [PSParser.CMD_BINOM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 598
                self.match(PSParser.CMD_BINOM)
                self.state = 599
                self.match(PSParser.L_BRACE)
                self.state = 600
                localctx.upper = self.expr()
                self.state = 601
                self.match(PSParser.R_BRACE)
                self.state = 602
                self.match(PSParser.L_BRACE)
                self.state = 603
                localctx.lower = self.expr()
                self.state = 604
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_functions_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_LOG(self):
            return self.getToken(PSParser.FUNC_LOG, 0)

        def FUNC_LN(self):
            return self.getToken(PSParser.FUNC_LN, 0)

        def FUNC_EXP(self):
            return self.getToken(PSParser.FUNC_EXP, 0)

        def FUNC_SIN(self):
            return self.getToken(PSParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(PSParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(PSParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(PSParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(PSParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(PSParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(PSParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(PSParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(PSParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(PSParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(PSParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(PSParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(PSParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(PSParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(PSParser.FUNC_TANH, 0)

        def FUNC_ARSINH(self):
            return self.getToken(PSParser.FUNC_ARSINH, 0)

        def FUNC_ARCOSH(self):
            return self.getToken(PSParser.FUNC_ARCOSH, 0)

        def FUNC_ARTANH(self):
            return self.getToken(PSParser.FUNC_ARTANH, 0)

        def FUNC_ARCSINH(self):
            return self.getToken(PSParser.FUNC_ARCSINH, 0)

        def FUNC_ARCCOSH(self):
            return self.getToken(PSParser.FUNC_ARCCOSH, 0)

        def FUNC_ARCTANH(self):
            return self.getToken(PSParser.FUNC_ARCTANH, 0)

        def FUNC_FLOOR(self):
            return self.getToken(PSParser.FUNC_FLOOR, 0)

        def FUNC_CEIL(self):
            return self.getToken(PSParser.FUNC_CEIL, 0)

        def FUNC_DET(self):
            return self.getToken(PSParser.FUNC_DET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_normal_functions_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_functions_single_arg" ):
                listener.enterFunc_normal_functions_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_functions_single_arg" ):
                listener.exitFunc_normal_functions_single_arg(self)




    def func_normal_functions_single_arg(self):

        localctx = PSParser.Func_normal_functions_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_func_normal_functions_single_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (PSParser.FUNC_LOG - 66)) | (1 << (PSParser.FUNC_LN - 66)) | (1 << (PSParser.FUNC_EXP - 66)) | (1 << (PSParser.FUNC_SIN - 66)) | (1 << (PSParser.FUNC_COS - 66)) | (1 << (PSParser.FUNC_TAN - 66)) | (1 << (PSParser.FUNC_CSC - 66)) | (1 << (PSParser.FUNC_SEC - 66)) | (1 << (PSParser.FUNC_COT - 66)) | (1 << (PSParser.FUNC_ARCSIN - 66)) | (1 << (PSParser.FUNC_ARCCOS - 66)) | (1 << (PSParser.FUNC_ARCTAN - 66)) | (1 << (PSParser.FUNC_ARCCSC - 66)) | (1 << (PSParser.FUNC_ARCSEC - 66)) | (1 << (PSParser.FUNC_ARCCOT - 66)) | (1 << (PSParser.FUNC_SINH - 66)) | (1 << (PSParser.FUNC_COSH - 66)) | (1 << (PSParser.FUNC_TANH - 66)) | (1 << (PSParser.FUNC_ARSINH - 66)) | (1 << (PSParser.FUNC_ARCOSH - 66)) | (1 << (PSParser.FUNC_ARTANH - 66)) | (1 << (PSParser.FUNC_ARCSINH - 66)) | (1 << (PSParser.FUNC_ARCCOSH - 66)) | (1 << (PSParser.FUNC_ARCTANH - 66)) | (1 << (PSParser.FUNC_FLOOR - 66)) | (1 << (PSParser.FUNC_CEIL - 66)) | (1 << (PSParser.FUNC_DET - 66)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_functions_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD(self):
            return self.getToken(PSParser.FUNC_GCD, 0)

        def FUNC_LCM(self):
            return self.getToken(PSParser.FUNC_LCM, 0)

        def FUNC_MAX(self):
            return self.getToken(PSParser.FUNC_MAX, 0)

        def FUNC_MIN(self):
            return self.getToken(PSParser.FUNC_MIN, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_normal_functions_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_functions_multi_arg" ):
                listener.enterFunc_normal_functions_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_functions_multi_arg" ):
                listener.exitFunc_normal_functions_multi_arg(self)




    def func_normal_functions_multi_arg(self):

        localctx = PSParser.Func_normal_functions_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_func_normal_functions_multi_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (PSParser.FUNC_GCD - 101)) | (1 << (PSParser.FUNC_LCM - 101)) | (1 << (PSParser.FUNC_MAX - 101)) | (1 << (PSParser.FUNC_MIN - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_operator_names_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_ARSINH_NAME(self):
            return self.getToken(PSParser.FUNC_ARSINH_NAME, 0)

        def FUNC_ARCOSH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCOSH_NAME, 0)

        def FUNC_ARTANH_NAME(self):
            return self.getToken(PSParser.FUNC_ARTANH_NAME, 0)

        def FUNC_ARCSINH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCSINH_NAME, 0)

        def FUNC_ARCCOSH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCCOSH_NAME, 0)

        def FUNC_ARCTANH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCTANH_NAME, 0)

        def FUNC_FLOOR_NAME(self):
            return self.getToken(PSParser.FUNC_FLOOR_NAME, 0)

        def FUNC_CEIL_NAME(self):
            return self.getToken(PSParser.FUNC_CEIL_NAME, 0)

        def FUNC_EYE_NAME(self):
            return self.getToken(PSParser.FUNC_EYE_NAME, 0)

        def FUNC_RANK_NAME(self):
            return self.getToken(PSParser.FUNC_RANK_NAME, 0)

        def FUNC_TRACE_NAME(self):
            return self.getToken(PSParser.FUNC_TRACE_NAME, 0)

        def FUNC_RREF_NAME(self):
            return self.getToken(PSParser.FUNC_RREF_NAME, 0)

        def FUNC_NULLSPACE_NAME(self):
            return self.getToken(PSParser.FUNC_NULLSPACE_NAME, 0)

        def FUNC_DIAGONALIZE_NAME(self):
            return self.getToken(PSParser.FUNC_DIAGONALIZE_NAME, 0)

        def FUNC_NORM_NAME(self):
            return self.getToken(PSParser.FUNC_NORM_NAME, 0)

        def FUNC_EIGENVALS_NAME(self):
            return self.getToken(PSParser.FUNC_EIGENVALS_NAME, 0)

        def FUNC_EIGENVECTORS_NAME(self):
            return self.getToken(PSParser.FUNC_EIGENVECTORS_NAME, 0)

        def FUNC_SVD_NAME(self):
            return self.getToken(PSParser.FUNC_SVD_NAME, 0)

        def FUNC_COLS_NAME(self):
            return self.getToken(PSParser.FUNC_COLS_NAME, 0)

        def FUNC_ROWS_NAME(self):
            return self.getToken(PSParser.FUNC_ROWS_NAME, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_operator_names_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_operator_names_single_arg" ):
                listener.enterFunc_operator_names_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_operator_names_single_arg" ):
                listener.exitFunc_operator_names_single_arg(self)




    def func_operator_names_single_arg(self):

        localctx = PSParser.Func_operator_names_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_func_operator_names_single_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            _la = self._input.LA(1)
            if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (PSParser.FUNC_ARSINH_NAME - 90)) | (1 << (PSParser.FUNC_ARCSINH_NAME - 90)) | (1 << (PSParser.FUNC_ARCOSH_NAME - 90)) | (1 << (PSParser.FUNC_ARCCOSH_NAME - 90)) | (1 << (PSParser.FUNC_ARTANH_NAME - 90)) | (1 << (PSParser.FUNC_ARCTANH_NAME - 90)) | (1 << (PSParser.FUNC_FLOOR_NAME - 90)) | (1 << (PSParser.FUNC_CEIL_NAME - 90)) | (1 << (PSParser.FUNC_EYE_NAME - 90)) | (1 << (PSParser.FUNC_COLS_NAME - 90)) | (1 << (PSParser.FUNC_ROWS_NAME - 90)) | (1 << (PSParser.FUNC_NORM_NAME - 90)) | (1 << (PSParser.FUNC_RANK_NAME - 90)) | (1 << (PSParser.FUNC_TRACE_NAME - 90)) | (1 << (PSParser.FUNC_RREF_NAME - 90)) | (1 << (PSParser.FUNC_NULLSPACE_NAME - 90)) | (1 << (PSParser.FUNC_DIAGONALIZE_NAME - 90)) | (1 << (PSParser.FUNC_EIGENVALS_NAME - 90)) | (1 << (PSParser.FUNC_EIGENVECTORS_NAME - 90)) | (1 << (PSParser.FUNC_SVD_NAME - 90)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_operator_names_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD_NAME(self):
            return self.getToken(PSParser.FUNC_GCD_NAME, 0)

        def FUNC_LCM_NAME(self):
            return self.getToken(PSParser.FUNC_LCM_NAME, 0)

        def FUNC_ZEROS_NAME(self):
            return self.getToken(PSParser.FUNC_ZEROS_NAME, 0)

        def FUNC_ORTHOGONALIZE_NAME(self):
            return self.getToken(PSParser.FUNC_ORTHOGONALIZE_NAME, 0)

        def FUNC_ONES_NAME(self):
            return self.getToken(PSParser.FUNC_ONES_NAME, 0)

        def FUNC_DIAG_NAME(self):
            return self.getToken(PSParser.FUNC_DIAG_NAME, 0)

        def FUNC_HSTACK_NAME(self):
            return self.getToken(PSParser.FUNC_HSTACK_NAME, 0)

        def FUNC_VSTACK_NAME(self):
            return self.getToken(PSParser.FUNC_VSTACK_NAME, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_operator_names_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_operator_names_multi_arg" ):
                listener.enterFunc_operator_names_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_operator_names_multi_arg" ):
                listener.exitFunc_operator_names_multi_arg(self)




    def func_operator_names_multi_arg(self):

        localctx = PSParser.Func_operator_names_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_func_operator_names_multi_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (PSParser.FUNC_GCD_NAME - 96)) | (1 << (PSParser.FUNC_LCM_NAME - 96)) | (1 << (PSParser.FUNC_ZEROS_NAME - 96)) | (1 << (PSParser.FUNC_ONES_NAME - 96)) | (1 << (PSParser.FUNC_DIAG_NAME - 96)) | (1 << (PSParser.FUNC_HSTACK_NAME - 96)) | (1 << (PSParser.FUNC_VSTACK_NAME - 96)) | (1 << (PSParser.FUNC_ORTHOGONALIZE_NAME - 96)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None # Func_operator_names_single_argContext

        def func_normal_functions_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_functions_single_argContext,0)


        def CMD_OPERATORNAME(self):
            return self.getToken(PSParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def func_operator_names_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_operator_names_single_argContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_normal_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_single_arg" ):
                listener.enterFunc_normal_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_single_arg" ):
                listener.exitFunc_normal_single_arg(self)




    def func_normal_single_arg(self):

        localctx = PSParser.Func_normal_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_func_normal_single_arg)
        try:
            self.state = 622
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.FUNC_LOG, PSParser.FUNC_LN, PSParser.FUNC_EXP, PSParser.FUNC_SIN, PSParser.FUNC_COS, PSParser.FUNC_TAN, PSParser.FUNC_CSC, PSParser.FUNC_SEC, PSParser.FUNC_COT, PSParser.FUNC_ARCSIN, PSParser.FUNC_ARCCOS, PSParser.FUNC_ARCTAN, PSParser.FUNC_ARCCSC, PSParser.FUNC_ARCSEC, PSParser.FUNC_ARCCOT, PSParser.FUNC_SINH, PSParser.FUNC_COSH, PSParser.FUNC_TANH, PSParser.FUNC_ARSINH, PSParser.FUNC_ARCOSH, PSParser.FUNC_ARTANH, PSParser.FUNC_ARCSINH, PSParser.FUNC_ARCCOSH, PSParser.FUNC_ARCTANH, PSParser.FUNC_FLOOR, PSParser.FUNC_CEIL, PSParser.FUNC_DET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.func_normal_functions_single_arg()
                pass
            elif token in [PSParser.CMD_OPERATORNAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 617
                self.match(PSParser.CMD_OPERATORNAME)
                self.state = 618
                self.match(PSParser.L_BRACE)
                self.state = 619
                localctx.func_operator_name = self.func_operator_names_single_arg()
                self.state = 620
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None # Func_operator_names_multi_argContext

        def func_normal_functions_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_functions_multi_argContext,0)


        def CMD_OPERATORNAME(self):
            return self.getToken(PSParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def func_operator_names_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_operator_names_multi_argContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_normal_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_multi_arg" ):
                listener.enterFunc_normal_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_multi_arg" ):
                listener.exitFunc_normal_multi_arg(self)




    def func_normal_multi_arg(self):

        localctx = PSParser.Func_normal_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_func_normal_multi_arg)
        try:
            self.state = 630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.FUNC_GCD, PSParser.FUNC_LCM, PSParser.FUNC_MAX, PSParser.FUNC_MIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.func_normal_functions_multi_arg()
                pass
            elif token in [PSParser.CMD_OPERATORNAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.match(PSParser.CMD_OPERATORNAME)
                self.state = 626
                self.match(PSParser.L_BRACE)
                self.state = 627
                localctx.func_operator_name = self.func_operator_names_multi_arg()
                self.state = 628
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.root = None # ExprContext
            self.base = None # ExprContext

        def func_normal_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_single_argContext,0)


        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def func_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_single_argContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def func_single_arg_noparens(self):
            return self.getTypedRuleContext(PSParser.Func_single_arg_noparensContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(PSParser.SupexprContext,0)


        def func_normal_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_multi_argContext,0)


        def func_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_multi_argContext,0)


        def func_multi_arg_noparens(self):
            return self.getTypedRuleContext(PSParser.Func_multi_arg_noparensContext,0)


        def atom_expr_no_supexpr(self):
            return self.getTypedRuleContext(PSParser.Atom_expr_no_supexprContext,0)


        def func_common_args(self):
            return self.getTypedRuleContext(PSParser.Func_common_argsContext,0)


        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def FUNC_INT(self):
            return self.getToken(PSParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(PSParser.DIFFERENTIAL, 0)

        def frac(self):
            return self.getTypedRuleContext(PSParser.FracContext,0)


        def additive(self):
            return self.getTypedRuleContext(PSParser.AdditiveContext,0)


        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def FUNC_SQRT(self):
            return self.getToken(PSParser.FUNC_SQRT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def mp(self):
            return self.getTypedRuleContext(PSParser.MpContext,0)


        def FUNC_SUM(self):
            return self.getToken(PSParser.FUNC_SUM, 0)

        def FUNC_PROD(self):
            return self.getToken(PSParser.FUNC_PROD, 0)

        def subeq(self):
            return self.getTypedRuleContext(PSParser.SubeqContext,0)


        def FUNC_LIM(self):
            return self.getToken(PSParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(PSParser.Limit_subContext,0)


        def EXP_E(self):
            return self.getToken(PSParser.EXP_E, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc" ):
                listener.enterFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc" ):
                listener.exitFunc(self)




    def func(self):

        localctx = PSParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_func)
        self._la = 0 # Token type
        try:
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 632
                self.func_normal_single_arg()
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PSParser.UNDERSCORE:
                        self.state = 633
                        self.subexpr()


                    self.state = 637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PSParser.CARET:
                        self.state = 636
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 640
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PSParser.CARET:
                        self.state = 639
                        self.supexpr()


                    self.state = 643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PSParser.UNDERSCORE:
                        self.state = 642
                        self.subexpr()


                    pass


                self.state = 652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 647
                    self.match(PSParser.L_PAREN)
                    self.state = 648
                    self.func_single_arg()
                    self.state = 649
                    self.match(PSParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 651
                    self.func_single_arg_noparens()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.func_normal_multi_arg()
                self.state = 667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PSParser.UNDERSCORE:
                        self.state = 655
                        self.subexpr()


                    self.state = 659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PSParser.CARET:
                        self.state = 658
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PSParser.CARET:
                        self.state = 661
                        self.supexpr()


                    self.state = 665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PSParser.UNDERSCORE:
                        self.state = 664
                        self.subexpr()


                    pass


                self.state = 674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 669
                    self.match(PSParser.L_PAREN)
                    self.state = 670
                    self.func_multi_arg()
                    self.state = 671
                    self.match(PSParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 673
                    self.func_multi_arg_noparens()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 676
                self.atom_expr_no_supexpr()
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PSParser.CARET:
                    self.state = 677
                    self.supexpr()


                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 680
                    self.match(PSParser.L_PAREN)
                    self.state = 681
                    self.func_common_args()
                    self.state = 682
                    self.match(PSParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 684
                    self.match(PSParser.L_BRACKET)
                    self.state = 685
                    self.func_common_args()
                    self.state = 686
                    self.match(PSParser.R_BRACKET)
                    pass

                elif la_ == 3:
                    self.state = 688
                    self.match(PSParser.L_BRACE)
                    self.state = 689
                    self.match(PSParser.L_PAREN)
                    self.state = 690
                    self.func_common_args()
                    self.state = 691
                    self.match(PSParser.R_PAREN)
                    self.state = 692
                    self.match(PSParser.R_BRACE)
                    pass

                elif la_ == 4:
                    self.state = 694
                    self.match(PSParser.L_BRACE)
                    self.state = 695
                    self.match(PSParser.L_BRACKET)
                    self.state = 696
                    self.func_common_args()
                    self.state = 697
                    self.match(PSParser.R_BRACKET)
                    self.state = 698
                    self.match(PSParser.R_BRACE)
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 702
                self.match(PSParser.FUNC_INT)
                self.state = 723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 703
                    self.subexpr()
                    self.state = 704
                    self.supexpr()

                elif la_ == 2:
                    self.state = 706
                    self.supexpr()
                    self.state = 707
                    self.subexpr()

                elif la_ == 3:
                    self.state = 709
                    self.match(PSParser.UNDERSCORE)
                    self.state = 710
                    self.match(PSParser.L_BRACE)
                    self.state = 711
                    self.match(PSParser.R_BRACE)

                    self.state = 713
                    self.match(PSParser.CARET)
                    self.state = 714
                    self.match(PSParser.L_BRACE)
                    self.state = 715
                    self.match(PSParser.R_BRACE)

                elif la_ == 4:
                    self.state = 716
                    self.match(PSParser.CARET)
                    self.state = 717
                    self.match(PSParser.L_BRACE)
                    self.state = 718
                    self.match(PSParser.R_BRACE)

                    self.state = 720
                    self.match(PSParser.UNDERSCORE)
                    self.state = 721
                    self.match(PSParser.L_BRACE)
                    self.state = 722
                    self.match(PSParser.R_BRACE)


                self.state = 731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 726
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                    if la_ == 1:
                        self.state = 725
                        self.additive(0)


                    self.state = 728
                    self.match(PSParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 729
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 730
                    self.additive(0)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 733
                self.match(PSParser.FUNC_SQRT)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PSParser.L_BRACKET:
                    self.state = 734
                    self.match(PSParser.L_BRACKET)
                    self.state = 735
                    localctx.root = self.expr()
                    self.state = 736
                    self.match(PSParser.R_BRACKET)


                self.state = 740
                self.match(PSParser.L_BRACE)
                self.state = 741
                localctx.base = self.expr()
                self.state = 742
                self.match(PSParser.R_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 744
                _la = self._input.LA(1)
                if not(_la==PSParser.FUNC_SUM or _la==PSParser.FUNC_PROD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 751
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PSParser.UNDERSCORE]:
                    self.state = 745
                    self.subeq()
                    self.state = 746
                    self.supexpr()
                    pass
                elif token in [PSParser.CARET]:
                    self.state = 748
                    self.supexpr()
                    self.state = 749
                    self.subeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 753
                self.mp(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 755
                self.match(PSParser.FUNC_LIM)
                self.state = 756
                self.limit_sub()
                self.state = 757
                self.mp(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 759
                self.match(PSParser.EXP_E)
                self.state = 761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 760
                    self.supexpr()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(PSParser.ArgsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = PSParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_args)
        try:
            self.state = 770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.expr()
                self.state = 766
                self.match(PSParser.COMMA)
                self.state = 767
                self.args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_common_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(PSParser.ArgsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_common_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_common_args" ):
                listener.enterFunc_common_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_common_args" ):
                listener.exitFunc_common_args(self)




    def func_common_args(self):

        localctx = PSParser.Func_common_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_func_common_args)
        try:
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.atom()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 773
                self.expr()
                self.state = 774
                self.match(PSParser.COMMA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 776
                self.expr()
                self.state = 777
                self.match(PSParser.COMMA)
                self.state = 778
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(PSParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(PSParser.GREEK_CMD, 0)

        def OTHER_SYMBOL_CMD(self):
            return self.getToken(PSParser.OTHER_SYMBOL_CMD, 0)

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def getRuleIndex(self):
            return PSParser.RULE_limit_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_sub" ):
                listener.enterLimit_sub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_sub" ):
                listener.exitLimit_sub(self)




    def limit_sub(self):

        localctx = PSParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_limit_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.match(PSParser.UNDERSCORE)
            self.state = 783
            self.match(PSParser.L_BRACE)
            self.state = 784
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & ((1 << (PSParser.LETTER_NO_E - 157)) | (1 << (PSParser.GREEK_CMD - 157)) | (1 << (PSParser.OTHER_SYMBOL_CMD - 157)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 785
            self.match(PSParser.LIM_APPROACH_SYM)
            self.state = 786
            self.expr()
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PSParser.CARET:
                self.state = 787
                self.match(PSParser.CARET)
                self.state = 788
                self.match(PSParser.L_BRACE)
                self.state = 789
                _la = self._input.LA(1)
                if not(_la==PSParser.ADD or _la==PSParser.SUB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 790
                self.match(PSParser.R_BRACE)


            self.state = 793
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_single_arg" ):
                listener.enterFunc_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_single_arg" ):
                listener.exitFunc_single_arg(self)




    def func_single_arg(self):

        localctx = PSParser.Func_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_func_single_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_single_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_single_arg_noparens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_single_arg_noparens" ):
                listener.enterFunc_single_arg_noparens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_single_arg_noparens" ):
                listener.exitFunc_single_arg_noparens(self)




    def func_single_arg_noparens(self):

        localctx = PSParser.Func_single_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_func_single_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def func_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_multi_argContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_multi_arg" ):
                listener.enterFunc_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_multi_arg" ):
                listener.exitFunc_multi_arg(self)




    def func_multi_arg(self):

        localctx = PSParser.Func_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_func_multi_arg)
        try:
            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 800
                self.expr()
                self.state = 801
                self.match(PSParser.COMMA)
                self.state = 802
                self.func_multi_arg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_multi_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_multi_arg_noparens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_multi_arg_noparens" ):
                listener.enterFunc_multi_arg_noparens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_multi_arg_noparens" ):
                listener.exitFunc_multi_arg_noparens(self)




    def func_multi_arg_noparens(self):

        localctx = PSParser.Func_multi_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_func_multi_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def args(self):
            return self.getTypedRuleContext(PSParser.ArgsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubexpr" ):
                listener.enterSubexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubexpr" ):
                listener.exitSubexpr(self)




    def subexpr(self):

        localctx = PSParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(PSParser.UNDERSCORE)
            self.state = 817
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.DIFFERENTIAL, PSParser.E_NOTATION_E, PSParser.LETTER_NO_E, PSParser.NUMBER, PSParser.E_NOTATION, PSParser.PERCENT_NUMBER, PSParser.GREEK_CMD, PSParser.OTHER_SYMBOL_CMD, PSParser.SYMBOL, PSParser.VARIABLE, PSParser.ACCENT]:
                self.state = 809
                self.atom()
                pass
            elif token in [PSParser.L_BRACE]:
                self.state = 810
                self.match(PSParser.L_BRACE)
                self.state = 813
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 811
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 812
                    self.args()
                    pass


                self.state = 815
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_supexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupexpr" ):
                listener.enterSupexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupexpr" ):
                listener.exitSupexpr(self)




    def supexpr(self):

        localctx = PSParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(PSParser.CARET)
            self.state = 825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.DIFFERENTIAL, PSParser.E_NOTATION_E, PSParser.LETTER_NO_E, PSParser.NUMBER, PSParser.E_NOTATION, PSParser.PERCENT_NUMBER, PSParser.GREEK_CMD, PSParser.OTHER_SYMBOL_CMD, PSParser.SYMBOL, PSParser.VARIABLE, PSParser.ACCENT]:
                self.state = 820
                self.atom()
                pass
            elif token in [PSParser.L_BRACE]:
                self.state = 821
                self.match(PSParser.L_BRACE)
                self.state = 822
                self.expr()
                self.state = 823
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_subeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubeq" ):
                listener.enterSubeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubeq" ):
                listener.exitSubeq(self)




    def subeq(self):

        localctx = PSParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(PSParser.UNDERSCORE)
            self.state = 828
            self.match(PSParser.L_BRACE)
            self.state = 829
            self.equality()
            self.state = 830
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_supeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupeq" ):
                listener.enterSupeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupeq" ):
                listener.exitSupeq(self)




    def supeq(self):

        localctx = PSParser.SupeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_supeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(PSParser.UNDERSCORE)
            self.state = 833
            self.match(PSParser.L_BRACE)
            self.state = 834
            self.equality()
            self.state = 835
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr_list(self):
            return self.getTypedRuleContext(PSParser.Atom_expr_listContext,0)


        def set_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Set_relationContext)
            else:
                return self.getTypedRuleContext(PSParser.Set_relationContext,i)


        def IN(self):
            return self.getToken(PSParser.IN, 0)

        def NOTIN(self):
            return self.getToken(PSParser.NOTIN, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def minus_expr(self):
            return self.getTypedRuleContext(PSParser.Minus_exprContext,0)


        def SUBSET(self):
            return self.getToken(PSParser.SUBSET, 0)

        def SUPSET(self):
            return self.getToken(PSParser.SUPSET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_set_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_relation" ):
                listener.enterSet_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_relation" ):
                listener.exitSet_relation(self)



    def set_relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Set_relationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_set_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 838
                self.atom_expr_list()
                self.state = 839
                _la = self._input.LA(1)
                if not(((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (PSParser.IN - 162)) | (1 << (PSParser.ASSIGNMENT - 162)) | (1 << (PSParser.NOTIN - 162)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 840
                self.set_relation(2)
                pass

            elif la_ == 2:
                self.state = 842
                self.minus_expr(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Set_relationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_relation)
                    self.state = 845
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 846
                    _la = self._input.LA(1)
                    if not(_la==PSParser.SUPSET or _la==PSParser.SUBSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 847
                    self.set_relation(4) 
                self.state = 852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Minus_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_expr(self):
            return self.getTypedRuleContext(PSParser.Union_exprContext,0)


        def minus_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Minus_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Minus_exprContext,i)


        def SET_MINUS(self):
            return self.getToken(PSParser.SET_MINUS, 0)

        def getRuleIndex(self):
            return PSParser.RULE_minus_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinus_expr" ):
                listener.enterMinus_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinus_expr" ):
                listener.exitMinus_expr(self)



    def minus_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Minus_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_minus_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.union_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Minus_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_minus_expr)
                    self.state = 856
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 857
                    self.match(PSParser.SET_MINUS)
                    self.state = 858
                    self.minus_expr(3) 
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Union_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intersection_expr(self):
            return self.getTypedRuleContext(PSParser.Intersection_exprContext,0)


        def union_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Union_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Union_exprContext,i)


        def UNION(self):
            return self.getToken(PSParser.UNION, 0)

        def getRuleIndex(self):
            return PSParser.RULE_union_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_expr" ):
                listener.enterUnion_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_expr" ):
                listener.exitUnion_expr(self)



    def union_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Union_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_union_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.intersection_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 872
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Union_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_union_expr)
                    self.state = 867
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 868
                    self.match(PSParser.UNION)
                    self.state = 869
                    self.union_expr(3) 
                self.state = 874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Intersection_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_group(self):
            return self.getTypedRuleContext(PSParser.Set_groupContext,0)


        def intersection_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Intersection_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Intersection_exprContext,i)


        def INTERSECTION(self):
            return self.getToken(PSParser.INTERSECTION, 0)

        def getRuleIndex(self):
            return PSParser.RULE_intersection_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersection_expr" ):
                listener.enterIntersection_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersection_expr" ):
                listener.exitIntersection_expr(self)



    def intersection_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Intersection_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_intersection_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.set_group()
            self._ctx.stop = self._input.LT(-1)
            self.state = 883
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Intersection_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_intersection_expr)
                    self.state = 878
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 879
                    self.match(PSParser.INTERSECTION)
                    self.state = 880
                    self.intersection_expr(3) 
                self.state = 885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Set_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def minus_expr(self):
            return self.getTypedRuleContext(PSParser.Minus_exprContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def set_atom(self):
            return self.getTypedRuleContext(PSParser.Set_atomContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_set_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_group" ):
                listener.enterSet_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_group" ):
                listener.exitSet_group(self)




    def set_group(self):

        localctx = PSParser.Set_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_set_group)
        try:
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self.match(PSParser.L_PAREN)
                self.state = 887
                self.minus_expr(0)
                self.state = 888
                self.match(PSParser.R_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.set_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interval(self):
            return self.getTypedRuleContext(PSParser.IntervalContext,0)


        def literal_set(self):
            return self.getTypedRuleContext(PSParser.Literal_setContext,0)


        def ordered_tuple(self):
            return self.getTypedRuleContext(PSParser.Ordered_tupleContext,0)


        def finite_set(self):
            return self.getTypedRuleContext(PSParser.Finite_setContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_set_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_atom" ):
                listener.enterSet_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_atom" ):
                listener.exitSet_atom(self)




    def set_atom(self):

        localctx = PSParser.Set_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_set_atom)
        try:
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.interval()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.literal_set()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 895
                self.ordered_tuple()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 896
                self.finite_set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def L_PAREN_VISUAL(self):
            return self.getToken(PSParser.L_PAREN_VISUAL, 0)

        def L_BRACK(self):
            return self.getToken(PSParser.L_BRACK, 0)

        def L_GROUP(self):
            return self.getToken(PSParser.L_GROUP, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def R_PAREN_VISUAL(self):
            return self.getToken(PSParser.R_PAREN_VISUAL, 0)

        def R_BRACK(self):
            return self.getToken(PSParser.R_BRACK, 0)

        def R_GROUP(self):
            return self.getToken(PSParser.R_GROUP, 0)

        def getRuleIndex(self):
            return PSParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = PSParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PSParser.L_PAREN) | (1 << PSParser.L_PAREN_VISUAL) | (1 << PSParser.L_GROUP) | (1 << PSParser.L_BRACKET) | (1 << PSParser.L_BRACK))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 900
            self.expr()
            self.state = 901
            self.match(PSParser.COMMA)
            self.state = 902
            self.expr()
            self.state = 903
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PSParser.R_PAREN) | (1 << PSParser.R_PAREN_VISUAL) | (1 << PSParser.R_GROUP) | (1 << PSParser.R_BRACKET) | (1 << PSParser.R_BRACK))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordered_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def semicolon_elements(self):
            return self.getTypedRuleContext(PSParser.Semicolon_elementsContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def L_PAREN_VISUAL(self):
            return self.getToken(PSParser.L_PAREN_VISUAL, 0)

        def R_PAREN_VISUAL(self):
            return self.getToken(PSParser.R_PAREN_VISUAL, 0)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_ordered_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdered_tuple" ):
                listener.enterOrdered_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdered_tuple" ):
                listener.exitOrdered_tuple(self)




    def ordered_tuple(self):

        localctx = PSParser.Ordered_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_ordered_tuple)
        try:
            self.state = 917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.L_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self.match(PSParser.L_PAREN)
                self.state = 906
                self.semicolon_elements()
                self.state = 907
                self.match(PSParser.R_PAREN)
                pass
            elif token in [PSParser.L_PAREN_VISUAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 909
                self.match(PSParser.L_PAREN_VISUAL)
                self.state = 910
                self.semicolon_elements()
                self.state = 911
                self.match(PSParser.R_PAREN_VISUAL)
                pass
            elif token in [PSParser.L_BRACKET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 913
                self.match(PSParser.L_BRACKET)
                self.state = 914
                self.semicolon_elements()
                self.state = 915
                self.match(PSParser.R_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finite_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def semicolon_elements(self):
            return self.getTypedRuleContext(PSParser.Semicolon_elementsContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(PSParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(PSParser.R_BRACE_VISUAL, 0)

        def BOXED_CMD(self):
            return self.getToken(PSParser.BOXED_CMD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_finite_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinite_set" ):
                listener.enterFinite_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinite_set" ):
                listener.exitFinite_set(self)




    def finite_set(self):

        localctx = PSParser.Finite_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_finite_set)
        try:
            self.state = 932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.L_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.match(PSParser.L_BRACE)
                self.state = 920
                self.semicolon_elements()
                self.state = 921
                self.match(PSParser.R_BRACE)
                pass
            elif token in [PSParser.L_BRACE_VISUAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self.match(PSParser.L_BRACE_VISUAL)
                self.state = 924
                self.semicolon_elements()
                self.state = 925
                self.match(PSParser.R_BRACE_VISUAL)
                pass
            elif token in [PSParser.BOXED_CMD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 927
                self.match(PSParser.BOXED_CMD)
                self.state = 928
                self.match(PSParser.L_BRACE)
                self.state = 929
                self.semicolon_elements()
                self.state = 930
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_elements_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr_list(self):
            return self.getTypedRuleContext(PSParser.Atom_expr_listContext,0)


        def semicolon_elements_no_relation(self):
            return self.getTypedRuleContext(PSParser.Semicolon_elements_no_relationContext,0)


        def IN(self):
            return self.getToken(PSParser.IN, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return PSParser.RULE_set_elements_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_elements_relation" ):
                listener.enterSet_elements_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_elements_relation" ):
                listener.exitSet_elements_relation(self)




    def set_elements_relation(self):

        localctx = PSParser.Set_elements_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_set_elements_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.atom_expr_list()
            self.state = 935
            _la = self._input.LA(1)
            if not(_la==PSParser.IN or _la==PSParser.ASSIGNMENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 936
            self.semicolon_elements_no_relation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def semicolon_elements(self):
            return self.getTypedRuleContext(PSParser.Semicolon_elementsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_set_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_elements" ):
                listener.enterSet_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_elements" ):
                listener.exitSet_elements(self)




    def set_elements(self):

        localctx = PSParser.Set_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_set_elements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.semicolon_elements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Semicolon_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Comma_elementsContext)
            else:
                return self.getTypedRuleContext(PSParser.Comma_elementsContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.SEMICOLON)
            else:
                return self.getToken(PSParser.SEMICOLON, i)

        def getRuleIndex(self):
            return PSParser.RULE_semicolon_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemicolon_elements" ):
                listener.enterSemicolon_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemicolon_elements" ):
                listener.exitSemicolon_elements(self)




    def semicolon_elements(self):

        localctx = PSParser.Semicolon_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_semicolon_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.comma_elements()
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PSParser.SEMICOLON:
                self.state = 941
                self.match(PSParser.SEMICOLON)
                self.state = 942
                self.comma_elements()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Semicolon_elements_no_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma_elements_no_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Comma_elements_no_relationContext)
            else:
                return self.getTypedRuleContext(PSParser.Comma_elements_no_relationContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.SEMICOLON)
            else:
                return self.getToken(PSParser.SEMICOLON, i)

        def getRuleIndex(self):
            return PSParser.RULE_semicolon_elements_no_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemicolon_elements_no_relation" ):
                listener.enterSemicolon_elements_no_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemicolon_elements_no_relation" ):
                listener.exitSemicolon_elements_no_relation(self)




    def semicolon_elements_no_relation(self):

        localctx = PSParser.Semicolon_elements_no_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_semicolon_elements_no_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.comma_elements_no_relation()
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PSParser.SEMICOLON:
                self.state = 949
                self.match(PSParser.SEMICOLON)
                self.state = 950
                self.comma_elements_no_relation()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ElementContext)
            else:
                return self.getTypedRuleContext(PSParser.ElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_comma_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_elements" ):
                listener.enterComma_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_elements" ):
                listener.exitComma_elements(self)




    def comma_elements(self):

        localctx = PSParser.Comma_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_comma_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.element()
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PSParser.COMMA:
                self.state = 957
                self.match(PSParser.COMMA)
                self.state = 958
                self.element()
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_elements_no_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_no_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Element_no_relationContext)
            else:
                return self.getTypedRuleContext(PSParser.Element_no_relationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_comma_elements_no_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_elements_no_relation" ):
                listener.enterComma_elements_no_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_elements_no_relation" ):
                listener.exitComma_elements_no_relation(self)




    def comma_elements_no_relation(self):

        localctx = PSParser.Comma_elements_no_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_comma_elements_no_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.element_no_relation()
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PSParser.COMMA:
                self.state = 965
                self.match(PSParser.COMMA)
                self.state = 966
                self.element_no_relation()
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_no_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plus_minus_expr(self):
            return self.getTypedRuleContext(PSParser.Plus_minus_exprContext,0)


        def set_atom(self):
            return self.getTypedRuleContext(PSParser.Set_atomContext,0)


        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_element_no_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_no_relation" ):
                listener.enterElement_no_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_no_relation" ):
                listener.exitElement_no_relation(self)




    def element_no_relation(self):

        localctx = PSParser.Element_no_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_element_no_relation)
        try:
            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.plus_minus_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.set_atom()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plus_minus_expr(self):
            return self.getTypedRuleContext(PSParser.Plus_minus_exprContext,0)


        def set_atom(self):
            return self.getTypedRuleContext(PSParser.Set_atomContext,0)


        def relation(self):
            return self.getTypedRuleContext(PSParser.RelationContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = PSParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_element)
        try:
            self.state = 980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.plus_minus_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.set_atom()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.relation(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plus_minus_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def PLUS_MINUS(self):
            return self.getToken(PSParser.PLUS_MINUS, 0)

        def getRuleIndex(self):
            return PSParser.RULE_plus_minus_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlus_minus_expr" ):
                listener.enterPlus_minus_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlus_minus_expr" ):
                listener.exitPlus_minus_expr(self)




    def plus_minus_expr(self):

        localctx = PSParser.Plus_minus_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_plus_minus_expr)
        try:
            self.state = 988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.ADD, PSParser.SUB, PSParser.L_PAREN, PSParser.L_GROUP, PSParser.L_BRACE, PSParser.L_BRACE_VISUAL, PSParser.L_BRACE_CMD, PSParser.L_BRACKET, PSParser.L_BRACK, PSParser.PHANTOM_CMD, PSParser.BOXED_CMD, PSParser.BAR, PSParser.L_VERT, PSParser.VERT, PSParser.NORM, PSParser.L_ANGLE, PSParser.L_FLOOR, PSParser.LL_CORNER, PSParser.L_CEIL, PSParser.UL_CORNER, PSParser.FUNC_LIM, PSParser.FUNC_INT, PSParser.FUNC_SUM, PSParser.FUNC_PROD, PSParser.FUNC_LOG, PSParser.FUNC_LN, PSParser.FUNC_EXP, PSParser.FUNC_SIN, PSParser.FUNC_COS, PSParser.FUNC_TAN, PSParser.FUNC_CSC, PSParser.FUNC_SEC, PSParser.FUNC_COT, PSParser.FUNC_ARCSIN, PSParser.FUNC_ARCCOS, PSParser.FUNC_ARCTAN, PSParser.FUNC_ARCCSC, PSParser.FUNC_ARCSEC, PSParser.FUNC_ARCCOT, PSParser.FUNC_SINH, PSParser.FUNC_COSH, PSParser.FUNC_TANH, PSParser.FUNC_ARSINH, PSParser.FUNC_ARCOSH, PSParser.FUNC_ARTANH, PSParser.FUNC_ARCSINH, PSParser.FUNC_ARCCOSH, PSParser.FUNC_ARCTANH, PSParser.FUNC_SQRT, PSParser.FUNC_GCD, PSParser.FUNC_LCM, PSParser.FUNC_FLOOR, PSParser.FUNC_CEIL, PSParser.FUNC_MAX, PSParser.FUNC_MIN, PSParser.FUNC_DET, PSParser.CMD_FRAC, PSParser.CMD_BINOM, PSParser.CMD_OPERATORNAME, PSParser.CMD_MATRIX_START, PSParser.CMD_ARRAY_START, PSParser.CMD_DET_START, PSParser.DIFFERENTIAL, PSParser.EXP_E, PSParser.E_NOTATION_E, PSParser.LETTER_NO_E, PSParser.NUMBER, PSParser.E_NOTATION, PSParser.PERCENT_NUMBER, PSParser.GREEK_CMD, PSParser.OTHER_SYMBOL_CMD, PSParser.SYMBOL, PSParser.VARIABLE, PSParser.ACCENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 982
                self.expr()
                self.state = 983
                self.match(PSParser.PLUS_MINUS)
                self.state = 984
                self.expr()
                pass
            elif token in [PSParser.PLUS_MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.match(PSParser.PLUS_MINUS)
                self.state = 987
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_NATURALS(self):
            return self.getToken(PSParser.SET_NATURALS, 0)

        def SET_INTEGERS(self):
            return self.getToken(PSParser.SET_INTEGERS, 0)

        def SET_RATIONALS(self):
            return self.getToken(PSParser.SET_RATIONALS, 0)

        def SET_REALS(self):
            return self.getToken(PSParser.SET_REALS, 0)

        def SET_COMPLEX(self):
            return self.getToken(PSParser.SET_COMPLEX, 0)

        def SET_PRIMES(self):
            return self.getToken(PSParser.SET_PRIMES, 0)

        def SET_EMPTY(self):
            return self.getToken(PSParser.SET_EMPTY, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_literal_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_set" ):
                listener.enterLiteral_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_set" ):
                listener.exitLiteral_set(self)




    def literal_set(self):

        localctx = PSParser.Literal_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_literal_set)
        try:
            self.state = 999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PSParser.SET_NATURALS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.match(PSParser.SET_NATURALS)
                pass
            elif token in [PSParser.SET_INTEGERS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.match(PSParser.SET_INTEGERS)
                pass
            elif token in [PSParser.SET_RATIONALS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self.match(PSParser.SET_RATIONALS)
                pass
            elif token in [PSParser.SET_REALS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 993
                self.match(PSParser.SET_REALS)
                pass
            elif token in [PSParser.SET_COMPLEX]:
                self.enterOuterAlt(localctx, 5)
                self.state = 994
                self.match(PSParser.SET_COMPLEX)
                pass
            elif token in [PSParser.SET_PRIMES]:
                self.enterOuterAlt(localctx, 6)
                self.state = 995
                self.match(PSParser.SET_PRIMES)
                pass
            elif token in [PSParser.SET_EMPTY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 996
                self.match(PSParser.SET_EMPTY)
                pass
            elif token in [PSParser.L_BRACE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 997
                self.match(PSParser.L_BRACE)
                self.state = 998
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.relation_sempred
        self._predicates[15] = self.additive_sempred
        self._predicates[16] = self.mp_sempred
        self._predicates[17] = self.mp_nofunc_sempred
        self._predicates[26] = self.exp_sempred
        self._predicates[27] = self.exp_nofunc_sempred
        self._predicates[62] = self.set_relation_sempred
        self._predicates[63] = self.minus_expr_sempred
        self._predicates[64] = self.union_expr_sempred
        self._predicates[65] = self.intersection_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def mp_sempred(self, localctx:MpContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def exp_sempred(self, localctx:ExpContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def set_relation_sempred(self, localctx:Set_relationContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

    def minus_expr_sempred(self, localctx:Minus_exprContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def union_expr_sempred(self, localctx:Union_exprContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def intersection_expr_sempred(self, localctx:Intersection_exprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         




