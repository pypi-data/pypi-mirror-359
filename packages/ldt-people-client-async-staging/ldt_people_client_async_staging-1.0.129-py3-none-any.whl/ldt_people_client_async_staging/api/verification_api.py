# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from ldt_people_client_async_staging.models.verify200_response_inner import Verify200ResponseInner
from ldt_people_client_async_staging.models.verify_request_inner import VerifyRequestInner

from ldt_people_client_async_staging.api_client import ApiClient, RequestSerialized
from ldt_people_client_async_staging.api_response import ApiResponse
from ldt_people_client_async_staging.rest import RESTResponseType


class VerificationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def verify(
        self,
        org_id: Annotated[StrictStr, Field(description="Your Org ID")],
        verify_request_inner: Optional[List[VerifyRequestInner]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> List[Verify200ResponseInner]:
        """Verify current job for people

        Given a unique person ID (in the form of a LinkedIn URL) and a Company (either name or linkedin URL), validates whether this person still works at the given company.   Takes an array of queries and responds with a corresponding array of results. The response array will always be the same size as the request array and the elements will be in the same order as the request. For each item in the input array:  Since only a company name string is provided and there can be variations of company names, this endpoint implements unique logic to determine if the company is the same and does not guarantee the provided name matches exactly.  The `ldt_status` return field is an enumerated field with the values: * `same_co` - the person is at the same company as the provided input company * `new_co` - the person is at a different company than the one provided * `no_current_company` - the person is currently not associated with a company * `not_found` - the person was not found in the Live Data system  In all cases, the `current_position` object provides the latest information from the Live Data system.  Role required: `viewer` Rate limit: 200 requests/m

        :param org_id: Your Org ID (required)
        :type org_id: str
        :param verify_request_inner:
        :type verify_request_inner: List[VerifyRequestInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_serialize(
            org_id=org_id,
            verify_request_inner=verify_request_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Verify200ResponseInner]",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def verify_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Your Org ID")],
        verify_request_inner: Optional[List[VerifyRequestInner]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> ApiResponse[List[Verify200ResponseInner]]:
        """Verify current job for people

        Given a unique person ID (in the form of a LinkedIn URL) and a Company (either name or linkedin URL), validates whether this person still works at the given company.   Takes an array of queries and responds with a corresponding array of results. The response array will always be the same size as the request array and the elements will be in the same order as the request. For each item in the input array:  Since only a company name string is provided and there can be variations of company names, this endpoint implements unique logic to determine if the company is the same and does not guarantee the provided name matches exactly.  The `ldt_status` return field is an enumerated field with the values: * `same_co` - the person is at the same company as the provided input company * `new_co` - the person is at a different company than the one provided * `no_current_company` - the person is currently not associated with a company * `not_found` - the person was not found in the Live Data system  In all cases, the `current_position` object provides the latest information from the Live Data system.  Role required: `viewer` Rate limit: 200 requests/m

        :param org_id: Your Org ID (required)
        :type org_id: str
        :param verify_request_inner:
        :type verify_request_inner: List[VerifyRequestInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_serialize(
            org_id=org_id,
            verify_request_inner=verify_request_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Verify200ResponseInner]",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def verify_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Your Org ID")],
        verify_request_inner: Optional[List[VerifyRequestInner]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> RESTResponseType:
        """Verify current job for people

        Given a unique person ID (in the form of a LinkedIn URL) and a Company (either name or linkedin URL), validates whether this person still works at the given company.   Takes an array of queries and responds with a corresponding array of results. The response array will always be the same size as the request array and the elements will be in the same order as the request. For each item in the input array:  Since only a company name string is provided and there can be variations of company names, this endpoint implements unique logic to determine if the company is the same and does not guarantee the provided name matches exactly.  The `ldt_status` return field is an enumerated field with the values: * `same_co` - the person is at the same company as the provided input company * `new_co` - the person is at a different company than the one provided * `no_current_company` - the person is currently not associated with a company * `not_found` - the person was not found in the Live Data system  In all cases, the `current_position` object provides the latest information from the Live Data system.  Role required: `viewer` Rate limit: 200 requests/m

        :param org_id: Your Org ID (required)
        :type org_id: str
        :param verify_request_inner:
        :type verify_request_inner: List[VerifyRequestInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_serialize(
            org_id=org_id,
            verify_request_inner=verify_request_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Verify200ResponseInner]",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_serialize(
        self,
        org_id,
        verify_request_inner,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'http://localhost:3000'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            'VerifyRequestInner': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if verify_request_inner is not None:
            _body_params = verify_request_inner


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AccessToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{org_id}/verify',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


