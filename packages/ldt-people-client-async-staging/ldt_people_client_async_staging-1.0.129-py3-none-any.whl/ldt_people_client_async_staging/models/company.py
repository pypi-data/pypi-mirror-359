# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from ldt_people_client_async_staging.models.ultimate_parent_company import UltimateParentCompany
from typing import Optional, Set
from typing_extensions import Self

class Company(BaseModel):
    """
    Dict of company-specific information related to the job
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique Live Data ID for this company")
    name: Optional[StrictStr] = Field(default=None, description="Name of the company")
    location: Optional[StrictStr] = Field(default=None, description="Primary general locality of the business")
    linkedin: Optional[StrictStr] = Field(default=None, description="LinkedIn slug for the company")
    ticker: Optional[StrictStr] = Field(default=None, description="Public stock ticker for the company, if applicable")
    type: Optional[StrictStr] = Field(default=None, description="Company type (public, private, govt, non-profit, etc)")
    address: Optional[StrictStr] = Field(default=None, description="Primary street address")
    country: Optional[StrictStr] = Field(default=None, description="Primary country for this company")
    domain: Optional[StrictStr] = Field(default=None, description="Primary domain for the company")
    employee_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total employee count")
    industry: Optional[StrictStr] = Field(default=None, description="Primary industry")
    sic_codes: Optional[List[StrictStr]] = Field(default=None, description="SIC codes")
    ultimate_parent: Optional[UltimateParentCompany] = None
    linkedin_numeric_id: Optional[StrictInt] = Field(default=None, description="The LinkedIn numeric identifier for this company")
    __properties: ClassVar[List[str]] = ["id", "name", "location", "linkedin", "ticker", "type", "address", "country", "domain", "employee_count", "industry", "sic_codes", "ultimate_parent", "linkedin_numeric_id"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Privately Held', 'Self Owned', 'Non Profit', 'Public Company', 'Partnership', 'Self Employed', 'Educational', 'Government Agency']):
            raise ValueError("must be one of enum values ('Privately Held', 'Self Owned', 'Non Profit', 'Public Company', 'Partnership', 'Self Employed', 'Educational', 'Government Agency')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Company from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ultimate_parent
        if self.ultimate_parent:
            _dict['ultimate_parent'] = self.ultimate_parent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Company from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "location": obj.get("location"),
            "linkedin": obj.get("linkedin"),
            "ticker": obj.get("ticker"),
            "type": obj.get("type"),
            "address": obj.get("address"),
            "country": obj.get("country"),
            "domain": obj.get("domain"),
            "employee_count": obj.get("employee_count"),
            "industry": obj.get("industry"),
            "sic_codes": obj.get("sic_codes"),
            "ultimate_parent": UltimateParentCompany.from_dict(obj["ultimate_parent"]) if obj.get("ultimate_parent") is not None else None,
            "linkedin_numeric_id": obj.get("linkedin_numeric_id")
        })
        return _obj


