# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ldt_people_client_async_staging.models.filter_group import FilterGroup
from typing import Optional, Set
from typing_extensions import Self

class DownloadPersonsDataRequest(BaseModel):
    """
    DownloadPersonsDataRequest
    """ # noqa: E501
    filters: Optional[List[FilterGroup]] = None
    return_fields: Optional[List[StrictStr]] = Field(default=None, description="List of field names to return. For nested JSON fields, use dot notation (i.e. jobs.company.name)")
    past_jobs: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="How many previous jobs to include in the data")
    report_definition_id: Optional[StrictInt] = Field(default=None, description="ID of a predefined data deliveries report definition to use in place of the specified filters / return_fields.")
    name: Optional[StrictStr] = Field(default=None, description="The name of your report")
    max_size: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["filters", "return_fields", "past_jobs", "report_definition_id", "name", "max_size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DownloadPersonsDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DownloadPersonsDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filters": [FilterGroup.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "return_fields": obj.get("return_fields"),
            "past_jobs": obj.get("past_jobs"),
            "report_definition_id": obj.get("report_definition_id"),
            "name": obj.get("name"),
            "max_size": obj.get("max_size")
        })
        return _obj


