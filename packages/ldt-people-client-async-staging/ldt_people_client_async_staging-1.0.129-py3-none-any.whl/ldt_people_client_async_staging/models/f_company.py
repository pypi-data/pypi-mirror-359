# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FCompany(BaseModel):
    """
    Describes a Live Data Company entry
    """ # noqa: E501
    id: StrictStr = Field(description="The Live Data ID of the company")
    name: StrictStr = Field(description="The name of the company")
    ticker: Optional[StrictStr] = Field(default=None, description="The stock ticker for the company, if any")
    employee_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The count of employees, if known")
    country: Optional[StrictStr] = Field(default=None, description="The company HQ country, if known")
    industry: Optional[StrictStr] = Field(default=None, description="The primary industry, if known")
    linkedin: Optional[StrictStr] = Field(default=None, description="The LinkedIn endpoint for the company")
    grouped_company_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The count of the number of companies that claim this company as a \"group\"")
    group_id: Optional[StrictStr] = Field(default=None, description="The ID of the grouping this company belongs to, if applicable.")
    aliases: Optional[List[Any]] = Field(default=None, description="An array of company names that are aliased to this company")
    __properties: ClassVar[List[str]] = ["id", "name", "ticker", "employee_count", "country", "industry", "linkedin", "grouped_company_count", "group_id", "aliases"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FCompany from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FCompany from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "ticker": obj.get("ticker"),
            "employee_count": obj.get("employee_count"),
            "country": obj.get("country"),
            "industry": obj.get("industry"),
            "linkedin": obj.get("linkedin"),
            "grouped_company_count": obj.get("grouped_company_count"),
            "group_id": obj.get("group_id"),
            "aliases": obj.get("aliases")
        })
        return _obj


