# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ldt_people_client_async_staging.models.agg_request import AggRequest
from ldt_people_client_async_staging.models.search_report_request import SearchReportRequest
from typing import Optional, Set
from typing_extensions import Self

class FilterGroup(BaseModel):
    """
    Provides a group of filters that are either `and`ed or `or`ed together.  If a FilterGroup contains any filter on `jobs`, then all filters in that FilterGroup must be `jobs` filters. A jobs filter group may contain `aggs` to aggregate data that matches only the jobs that match those filters.   A non-jobs filter group can not contain `aggs` - use the root-level `aggs` to aggregate across all data.  Only `report` is allowed per request. It can be at the top-level to report across all data or within a \"jobs\" filter group to report only on that cohort. No matter the location of the `report` in the request, the data is always provided at the top-level `report_data`. The `report_data` is only reported on the first page of results, subsequent pages will not contain the data.
    """ # noqa: E501
    operator: Optional[StrictStr] = None
    filters: Optional[List[FilterGroupFiltersInner]] = None
    aggs: Optional[List[AggRequest]] = None
    report: Optional[SearchReportRequest] = None
    __properties: ClassVar[List[str]] = ["operator", "filters", "aggs", "report"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['and', 'or']):
            raise ValueError("must be one of enum values ('and', 'or')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in aggs (list)
        _items = []
        if self.aggs:
            for _item_aggs in self.aggs:
                if _item_aggs:
                    _items.append(_item_aggs.to_dict())
            _dict['aggs'] = _items
        # override the default output from pydantic by calling `to_dict()` of report
        if self.report:
            _dict['report'] = self.report.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operator": obj.get("operator"),
            "filters": [FilterGroupFiltersInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "aggs": [AggRequest.from_dict(_item) for _item in obj["aggs"]] if obj.get("aggs") is not None else None,
            "report": SearchReportRequest.from_dict(obj["report"]) if obj.get("report") is not None else None
        })
        return _obj

from ldt_people_client_async_staging.models.filter_group_filters_inner import FilterGroupFiltersInner
# TODO: Rewrite to not use raise_errors
FilterGroup.model_rebuild(raise_errors=False)

