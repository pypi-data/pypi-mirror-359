# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from ldt_people_client_async_staging.models.sample_job import SampleJob
from ldt_people_client_async_staging.models.sample_person_education_inner import SamplePersonEducationInner
from typing import Optional, Set
from typing_extensions import Self

class FindPreview200ResponseMatchesInnerPeopleInner(BaseModel):
    """
    FindPreview200ResponseMatchesInnerPeopleInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique Live Data ID for this person")
    created_at: Optional[StrictStr] = Field(default=None, description="Date the person was added to Live Data")
    info_change_detected_at: Optional[StrictStr] = Field(default=None, description="Most recent date that any field changed.")
    title_change_detected_at: Optional[StrictStr] = Field(default=None, description="Most recent date that Live Data detected a title change.")
    company_change_detected_at: Optional[StrictStr] = Field(default=None, description="Most recent date that Live Data detected a company change.")
    position: Optional[SampleJob] = None
    jobs: Optional[List[SampleJob]] = None
    education: Optional[List[SamplePersonEducationInner]] = Field(default=None, description="Array of the education history for this person")
    first_name: Optional[StrictStr] = Field(default=None, description="First name, if known")
    connections: Optional[StrictInt] = Field(default=None, description="Number of connections on LinkedIn")
    employment_status: Optional[StrictStr] = None
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A score of how well each person matched the input criteria.")
    __properties: ClassVar[List[str]] = ["id", "created_at", "info_change_detected_at", "title_change_detected_at", "company_change_detected_at", "position", "jobs", "education", "first_name", "connections", "employment_status", "score"]

    @field_validator('employment_status')
    def employment_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['employed', 'unemployed', 'retired']):
            raise ValueError("must be one of enum values ('employed', 'unemployed', 'retired')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindPreview200ResponseMatchesInnerPeopleInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item_jobs in self.jobs:
                if _item_jobs:
                    _items.append(_item_jobs.to_dict())
            _dict['jobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in education (list)
        _items = []
        if self.education:
            for _item_education in self.education:
                if _item_education:
                    _items.append(_item_education.to_dict())
            _dict['education'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindPreview200ResponseMatchesInnerPeopleInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "info_change_detected_at": obj.get("info_change_detected_at"),
            "title_change_detected_at": obj.get("title_change_detected_at"),
            "company_change_detected_at": obj.get("company_change_detected_at"),
            "position": SampleJob.from_dict(obj["position"]) if obj.get("position") is not None else None,
            "jobs": [SampleJob.from_dict(_item) for _item in obj["jobs"]] if obj.get("jobs") is not None else None,
            "education": [SamplePersonEducationInner.from_dict(_item) for _item in obj["education"]] if obj.get("education") is not None else None,
            "first_name": obj.get("first_name"),
            "connections": obj.get("connections"),
            "employment_status": obj.get("employment_status"),
            "score": obj.get("score")
        })
        return _obj


