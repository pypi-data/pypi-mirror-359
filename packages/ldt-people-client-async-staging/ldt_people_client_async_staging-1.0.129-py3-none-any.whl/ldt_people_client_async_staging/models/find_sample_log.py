# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ldt_people_client_async_staging.models.find_sample_log_request_body import FindSampleLogRequestBody
from ldt_people_client_async_staging.models.find_sample_log_response_summary import FindSampleLogResponseSummary
from typing import Optional, Set
from typing_extensions import Self

class FindSampleLog(BaseModel):
    """
    Represents a logged sample of a find API request and response.
    """ # noqa: E501
    timestamp: Optional[datetime] = Field(default=None, description="ISO 8601 timestamp of when the sample was recorded.")
    org_id_from_path: Optional[StrictStr] = Field(default=None, description="The organization ID associated with the sampled request.")
    ldt_app_name: Optional[StrictStr] = Field(default=None, description="Identifier for the application that made the request.")
    requesting_user_id: Optional[StrictStr] = Field(default=None, description="The ID of the user or service that made the request.")
    request_body: Optional[FindSampleLogRequestBody] = None
    response_summary: Optional[FindSampleLogResponseSummary] = None
    __properties: ClassVar[List[str]] = ["timestamp", "org_id_from_path", "ldt_app_name", "requesting_user_id", "request_body", "response_summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindSampleLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request_body
        if self.request_body:
            _dict['request_body'] = self.request_body.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response_summary
        if self.response_summary:
            _dict['response_summary'] = self.response_summary.to_dict()
        # set to None if ldt_app_name (nullable) is None
        # and model_fields_set contains the field
        if self.ldt_app_name is None and "ldt_app_name" in self.model_fields_set:
            _dict['ldt_app_name'] = None

        # set to None if requesting_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.requesting_user_id is None and "requesting_user_id" in self.model_fields_set:
            _dict['requesting_user_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindSampleLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestamp": obj.get("timestamp"),
            "org_id_from_path": obj.get("org_id_from_path"),
            "ldt_app_name": obj.get("ldt_app_name"),
            "requesting_user_id": obj.get("requesting_user_id"),
            "request_body": FindSampleLogRequestBody.from_dict(obj["request_body"]) if obj.get("request_body") is not None else None,
            "response_summary": FindSampleLogResponseSummary.from_dict(obj["response_summary"]) if obj.get("response_summary") is not None else None
        })
        return _obj


