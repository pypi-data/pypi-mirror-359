# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ldt_people_client_async_staging.models.find_request_match_input import FindRequestMatchInput
from typing import Optional, Set
from typing_extensions import Self

class FindSampleLogRequestBody(BaseModel):
    """
    The request body part of a logged find API sample.
    """ # noqa: E501
    matches: Optional[List[FindRequestMatchInput]] = Field(default=None, description="The 'matches' criteria sent in the original find request.")
    return_fields: Optional[List[StrictStr]] = Field(default=None, description="List of fields requested to be returned.")
    size: Optional[StrictInt] = Field(default=None, description="The requested number of results per match.")
    confidence: Optional[StrictStr] = Field(default=None, description="The confidence level specified in the request.")
    __properties: ClassVar[List[str]] = ["matches", "return_fields", "size", "confidence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindSampleLogRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in matches (list)
        _items = []
        if self.matches:
            for _item_matches in self.matches:
                if _item_matches:
                    _items.append(_item_matches.to_dict())
            _dict['matches'] = _items
        # set to None if return_fields (nullable) is None
        # and model_fields_set contains the field
        if self.return_fields is None and "return_fields" in self.model_fields_set:
            _dict['return_fields'] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['size'] = None

        # set to None if confidence (nullable) is None
        # and model_fields_set contains the field
        if self.confidence is None and "confidence" in self.model_fields_set:
            _dict['confidence'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindSampleLogRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "matches": [FindRequestMatchInput.from_dict(_item) for _item in obj["matches"]] if obj.get("matches") is not None else None,
            "return_fields": obj.get("return_fields"),
            "size": obj.get("size"),
            "confidence": obj.get("confidence")
        })
        return _obj


