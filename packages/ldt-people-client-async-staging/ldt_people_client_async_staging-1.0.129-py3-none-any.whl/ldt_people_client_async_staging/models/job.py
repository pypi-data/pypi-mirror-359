# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ldt_people_client_async_staging.models.company import Company
from ldt_people_client_async_staging.models.location_details import LocationDetails
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Represents a job, which is a combination of Company+Title
    """ # noqa: E501
    title: Optional[StrictStr] = Field(default=None, description="Title of the person at this job")
    level: Optional[StrictStr] = Field(default=None, description="Level derived from title using internal ML process")
    function: Optional[StrictStr] = Field(default=None, description="Function derived from title using internal ML process")
    started_at: Optional[StrictStr] = Field(default=None, description="Date the person started this job. Will always be the 1st day of a month at 00:00")
    started_at_year_only: Optional[StrictBool] = Field(default=None, description="Indicates if the started_at date should be parsed as a year only. In these cases, the date will always be Jan 1.")
    ended_at: Optional[StrictStr] = Field(default=None, description="Date this job ended. Will always be the 1st day of a month at 00:00")
    ended_at_year_only: Optional[StrictBool] = Field(default=None, description="Indicates if the ended_at date should be parsed as a year only. In these cases, the date will always be Jan 1.")
    location: Optional[StrictStr] = Field(default=None, description="Location of this job")
    email: Optional[StrictStr] = Field(default=None, description="Person’s email address at this job")
    email_status: Optional[StrictStr] = Field(default=None, description="Status of their email at this job")
    direct_dial_number: Optional[StrictStr] = Field(default=None, description="Person’s phone number at this job")
    company: Optional[Company] = None
    location_details: Optional[LocationDetails] = None
    duration: Optional[StrictInt] = Field(default=None, description="The duration of this particular job, in months")
    company_tenure: Optional[StrictInt] = Field(default=None, description="The tenure of the person at this company, across contiguous jobs, in months")
    is_first_at_company: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate whether this is the person’s first job at this company")
    is_last_at_company: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate whether this is the person’s last job at this company. Note this will be `true` for active jobs.")
    __properties: ClassVar[List[str]] = ["title", "level", "function", "started_at", "started_at_year_only", "ended_at", "ended_at_year_only", "location", "email", "email_status", "direct_dial_number", "company", "location_details", "duration", "company_tenure", "is_first_at_company", "is_last_at_company"]

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['C-Team', 'VP', 'Director', 'Manager', 'Staff', 'Senior Staff', 'Intern', 'Consultant']):
            raise ValueError("must be one of enum values ('C-Team', 'VP', 'Director', 'Manager', 'Staff', 'Senior Staff', 'Intern', 'Consultant')")
        return value

    @field_validator('function')
    def function_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Banking and Wealth Management', 'Business Management', 'Consulting', 'Education', 'Engineering', 'Finance and Administration', 'Healthcare', 'Human Resources', 'Information Technology', 'Legal', 'Marketing and Product', 'Operations', 'Program and Project Management', 'Publishing, Editorial and Reporting', 'Quality', 'Real Estate', 'Risk, Safety, Compliance', 'Sales and Support']):
            raise ValueError("must be one of enum values ('Banking and Wealth Management', 'Business Management', 'Consulting', 'Education', 'Engineering', 'Finance and Administration', 'Healthcare', 'Human Resources', 'Information Technology', 'Legal', 'Marketing and Product', 'Operations', 'Program and Project Management', 'Publishing, Editorial and Reporting', 'Quality', 'Real Estate', 'Risk, Safety, Compliance', 'Sales and Support')")
        return value

    @field_validator('email_status')
    def email_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['valid', 'catch-all', 'best-guess']):
            raise ValueError("must be one of enum values ('valid', 'catch-all', 'best-guess')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location_details
        if self.location_details:
            _dict['location_details'] = self.location_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "level": obj.get("level"),
            "function": obj.get("function"),
            "started_at": obj.get("started_at"),
            "started_at_year_only": obj.get("started_at_year_only"),
            "ended_at": obj.get("ended_at"),
            "ended_at_year_only": obj.get("ended_at_year_only"),
            "location": obj.get("location"),
            "email": obj.get("email"),
            "email_status": obj.get("email_status"),
            "direct_dial_number": obj.get("direct_dial_number"),
            "company": Company.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "location_details": LocationDetails.from_dict(obj["location_details"]) if obj.get("location_details") is not None else None,
            "duration": obj.get("duration"),
            "company_tenure": obj.get("company_tenure"),
            "is_first_at_company": obj.get("is_first_at_company"),
            "is_last_at_company": obj.get("is_last_at_company")
        })
        return _obj


