# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LocationDetails(BaseModel):
    """
    LocationDetails
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="The normalized country name for this location")
    country_code: Optional[StrictStr] = Field(default=None, description="The two-letter ISO country code for this location")
    region: Optional[StrictStr] = Field(default=None, description="The normalized region name for this location. For US locations, this is the State")
    region_abbreviation: Optional[StrictStr] = Field(default=None, description="The standard abbreviation for the normalized region ")
    locality: Optional[StrictStr] = Field(default=None, description="The normalized locality name for this location. For US locations, this is the City")
    county: Optional[StrictStr] = Field(default=None, description="For US locations, the county name for this location")
    postal_code: Optional[StrictStr] = Field(default=None, description="The central/primary postal code associated with this location. For US locations, this is the 5-digit zip code")
    msa: Optional[StrictStr] = Field(default=None, description="For US locations, the standard MSA name that this location belongs to, if any")
    lat: Optional[StrictStr] = Field(default=None, description="The latitude for this location, generalized")
    lon: Optional[StrictStr] = Field(default=None, description="The longitude for this location, generalized")
    fips_code: Optional[StrictStr] = Field(default=None, description="The FIPS code for this location")
    raw: Optional[StrictStr] = Field(default=None, description="The input location value from which the other values were derived")
    __properties: ClassVar[List[str]] = ["country", "country_code", "region", "region_abbreviation", "locality", "county", "postal_code", "msa", "lat", "lon", "fips_code", "raw"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "country_code": obj.get("country_code"),
            "region": obj.get("region"),
            "region_abbreviation": obj.get("region_abbreviation"),
            "locality": obj.get("locality"),
            "county": obj.get("county"),
            "postal_code": obj.get("postal_code"),
            "msa": obj.get("msa"),
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "fips_code": obj.get("fips_code"),
            "raw": obj.get("raw")
        })
        return _obj


