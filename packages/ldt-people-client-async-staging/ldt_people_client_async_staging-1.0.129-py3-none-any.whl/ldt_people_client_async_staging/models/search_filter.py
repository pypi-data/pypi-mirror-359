# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SearchFilter(BaseModel):
    """
    SearchFilter
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="Either 'must' or 'must_not'")
    var_field: Optional[StrictStr] = Field(default=None, description="The name of the field in OS", alias="field")
    string_values: Optional[List[StrictStr]] = Field(default=None, description="If the field is a text field, an array of values that must/must-not match")
    date_from: Optional[StrictStr] = Field(default=None, description="If the field is a date field, this is the \"from\" date to use")
    date_to: Optional[StrictStr] = Field(default=None, description="If the field is a date field, this is the \"to\" date to use")
    number_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If the field is a number field, the min number tha t must match")
    number_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If the field is a number field, the max number tha t must match")
    boolean_value: Optional[StrictBool] = Field(default=None, description="If the field is a boolean, this value will be used for the filter")
    match_type: Optional[StrictStr] = Field(default='fuzzy', description="Specifies what kind of match to do on the field:  * `fuzzy` - match the value in a fuzzy manner * `exact` - match the value exactly * `exists` - only query the existence of the field, not a value match  `fuzzy` and `exact` only apply to string fields, not dates, numbers, or bools")
    __properties: ClassVar[List[str]] = ["type", "field", "string_values", "date_from", "date_to", "number_min", "number_max", "boolean_value", "match_type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['must', 'must_not']):
            raise ValueError("must be one of enum values ('must', 'must_not')")
        return value

    @field_validator('match_type')
    def match_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fuzzy', 'exact', 'exists']):
            raise ValueError("must be one of enum values ('fuzzy', 'exact', 'exists')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "field": obj.get("field"),
            "string_values": obj.get("string_values"),
            "date_from": obj.get("date_from"),
            "date_to": obj.get("date_to"),
            "number_min": obj.get("number_min"),
            "number_max": obj.get("number_max"),
            "boolean_value": obj.get("boolean_value"),
            "match_type": obj.get("match_type") if obj.get("match_type") is not None else 'fuzzy'
        })
        return _obj


