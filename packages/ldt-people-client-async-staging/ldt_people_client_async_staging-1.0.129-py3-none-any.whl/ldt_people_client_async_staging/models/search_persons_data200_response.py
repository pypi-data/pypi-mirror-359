# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ldt_people_client_async_staging.models.agg_response import AggResponse
from ldt_people_client_async_staging.models.person import Person
from typing import Optional, Set
from typing_extensions import Self

class SearchPersonsData200Response(BaseModel):
    """
    SearchPersonsData200Response
    """ # noqa: E501
    people: Optional[List[Person]] = Field(default=None, description="An array of all the matching people based on the provided filters and size.")
    pagination_token: Optional[StrictStr] = Field(default=None, description="If provided, make the exact same call with this added parameter to get the next page of results based on your existing filters and size.     If not provided, no additional contacts match the given criteria.")
    count: Optional[StrictInt] = None
    aggs: Optional[List[AggResponse]] = None
    report_results: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["people", "pagination_token", "count", "aggs", "report_results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchPersonsData200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in people (list)
        _items = []
        if self.people:
            for _item_people in self.people:
                if _item_people:
                    _items.append(_item_people.to_dict())
            _dict['people'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in aggs (list)
        _items = []
        if self.aggs:
            for _item_aggs in self.aggs:
                if _item_aggs:
                    _items.append(_item_aggs.to_dict())
            _dict['aggs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchPersonsData200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "people": [Person.from_dict(_item) for _item in obj["people"]] if obj.get("people") is not None else None,
            "pagination_token": obj.get("pagination_token"),
            "count": obj.get("count"),
            "aggs": [AggResponse.from_dict(_item) for _item in obj["aggs"]] if obj.get("aggs") is not None else None,
            "report_results": obj.get("report_results")
        })
        return _obj


