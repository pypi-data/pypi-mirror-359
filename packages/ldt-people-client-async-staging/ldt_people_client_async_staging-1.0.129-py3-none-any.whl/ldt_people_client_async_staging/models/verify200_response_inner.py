# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ldt_people_client_async_staging.models.verify200_response_inner_current_position import Verify200ResponseInnerCurrentPosition
from typing import Optional, Set
from typing_extensions import Self

class Verify200ResponseInner(BaseModel):
    """
    Verify200ResponseInner
    """ # noqa: E501
    ldt_status: StrictStr = Field(description="If 'true', indicates the given person still works at the provided company.    If 'false', indicates the given person does not work at the provided company.")
    current_position: Optional[Verify200ResponseInnerCurrentPosition] = None
    location: Optional[StrictStr] = Field(default=None, description="The location of the person, if known.")
    __properties: ClassVar[List[str]] = ["ldt_status", "current_position", "location"]

    @field_validator('ldt_status')
    def ldt_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['new_co', 'same_co', 'no_current_company', 'not_found']):
            raise ValueError("must be one of enum values ('new_co', 'same_co', 'no_current_company', 'not_found')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Verify200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_position
        if self.current_position:
            _dict['current_position'] = self.current_position.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Verify200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ldt_status": obj.get("ldt_status"),
            "current_position": Verify200ResponseInnerCurrentPosition.from_dict(obj["current_position"]) if obj.get("current_position") is not None else None,
            "location": obj.get("location")
        })
        return _obj


