[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "linekit"
version = "2.0.2"
description = "Comprehensive LINE API integration library with enhanced FlexMessage components (FlexSpan, FlexVideo), full type safety, multicast messaging, Flex Messages, Rich Menus, LINE Login, LIFF, and Mini Apps"
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
authors = [
    {name = "Lumduan", email = "b@candythink.com"},
]
maintainers = [
    {name = "Lumduan", email = "b@candythink.com"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Chat",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Typing :: Typed",
]
keywords = ["line", "bot", "messaging", "api", "flex-message", "rich-menu", "liff", "mini-app"]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.5.0",
    "httpx>=0.26.0",
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.10.1",
    "pyperclip>=1.9.0",
    "fastapi>=0.115.14",
    "uvicorn[standard]>=0.35.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",

    # Code quality
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "types-requests>=2.31.0",

    # Development tools
    "rich>=13.7.0",
    "ipython>=8.0.0",
]

[project.urls]
Homepage = "https://github.com/lumduan/line-api"
Documentation = "https://github.com/lumduan/line-api/blob/main/README.md"
Changelog = "https://github.com/lumduan/line-api/blob/main/CHANGELOG.md"
Issues = "https://github.com/lumduan/line-api/issues"
Repository = "https://github.com/lumduan/line-api"
"Bug Tracker" = "https://github.com/lumduan/line-api/issues"
"Source Code" = "https://github.com/lumduan/line-api"

[tool.hatch.build.targets.wheel]
packages = ["line_api"]
force-include = { "line_api/py.typed" = "line_api/py.typed" }

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E", "F", "W",  # Default flake8
    "I",  # isort
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "RUF", # ruff-specific rules
]
ignore = [
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D212",  # Multi-line docstring summary should start at the first line (conflicts with D213)
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without from clauses
    "N815",  # Allow mixedCase for API compatibility with LINE
    "D401",  # Allow non-imperative mood for descriptive docstrings
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["S101"]      # Allow using assert in tests
"tests/**/*" = ["B011"]   # Allow assert False in tests
"**/models.py" = ["N815"] # Allow mixedCase in API models

[tool.ruff.lint.isort]
known-first-party = ["line_api"]

[tool.black]
target-version = ['py39']
line-length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --asyncio-mode=auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "asyncio: Asyncio tests",
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[coverage.run]
source = ["line_api"]
branch = true
omit = ["*/__init__.py", "*/_version.py"]

[coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "if 0:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest>=8.3.0",
    "mypy>=1.11.0",
    "ruff>=0.5.0",
    "pytest-asyncio>=1.0.0",
]
