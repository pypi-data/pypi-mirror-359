"""Test the public API exports."""

import pytest
from pathlib import Path


def test_api_imports():
    """Test that all API components can be imported."""
    from malwi import __version__, process_files, MalwiReport, MalwiObject
    
    # Check version
    assert isinstance(__version__, str)
    assert len(__version__) > 0  # Just check it's not empty
    
    # Check functions/classes exist
    assert callable(process_files)
    assert isinstance(MalwiReport, type)
    assert isinstance(MalwiObject, type)


def test_process_files_api(tmp_path):
    """Test the process_files function works through the API."""
    from malwi import process_files, MalwiReport, __version__
    
    # Create a simple Python file
    test_file = tmp_path / "test.py"
    test_file.write_text("print('hello world')")
    
    # Test the API
    result = process_files(
        input_path=test_file,
        accepted_extensions=["py"],
        predict=False,  # Disable ML to avoid model dependencies
        retrieve_source_code=False,
        silent=True,
    )
    
    # Check result type
    assert isinstance(result, MalwiReport)
    assert len(result.all_objects) > 0
    assert result.version == __version__


def test_malwi_report_exports():
    """Test MalwiReport export methods work through the API."""
    from malwi import MalwiReport, __version__
    
    # Create a minimal report
    report = MalwiReport(
        all_objects=[],
        malicious_objects=[],
        threshold=0.7,
        all_files=[],
        skipped_files=[],
        processed_files=0,
        malicious=False,
        confidence=1.0,
        activities=[],
    )

    # Test export methods
    assert f'"version": "{__version__}"' in report.to_report_json()
    assert f"version: {__version__}" in report.to_report_yaml()
    assert f"Generated by malwi v{__version__}" in report.to_report_markdown()
    assert "ðŸŸ¢ good" in report.to_demo_text()
