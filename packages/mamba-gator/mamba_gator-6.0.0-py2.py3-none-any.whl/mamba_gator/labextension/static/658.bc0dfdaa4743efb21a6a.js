"use strict";(self.webpackChunk_mamba_org_gator_lab=self.webpackChunk_mamba_org_gator_lab||[]).push([[658],{8658:(e,a,t)=>{t.r(a),t.d(a,{default:()=>v});var n=t(3904),o=t(8805),i=t(5828),s=t(2679),c=t(292),r=t(3345);const l={id:"jupyterlab-conda:tour",label:"Conda Packages Manager Tour",hasHelpEntry:!0,steps:[{content:r.createElement("p",null,"Thanks for installing ",r.createElement("em",null,"Gator"),".",r.createElement("br",null),"Let's have a tour of the UI."),placement:"center",target:`.${c.CONDA_WIDGET_CLASS}`,title:"Conda Packages Manager"},{content:r.createElement("p",null,"Your conda environment are listed here.",r.createElement("br",null),"Click on it to manage its packages."),placement:"right",target:`#${c.CONDA_ENVIRONMENT_PANEL_ID}`},{content:r.createElement("p",null,"This toolbar contains environment actions like creation, deletion, exportation,..."),placement:"bottom",target:`.${c.CONDA_ENVIRONMENT_TOOLBAR_CLASS}`},{content:r.createElement("p",null,"This table lists all available conda packages and their status within the selected environment (i.e. installed, updatable or available)."),target:`#${c.CONDA_PACKAGES_PANEL_ID}`},{content:r.createElement("p",null,"A package can be installed, removed or updated by selecting a status in these selectors."),placement:"bottom",target:`.${c.CONDA_PACKAGE_SELECT_CLASS}`},{content:r.createElement("p",null,"The package list can be filtered by packages status and with a search term."),placement:"bottom-start",target:`.${c.CONDA_PACKAGES_TOOLBAR_CLASS}`},{content:r.createElement("p",null,"Execute package changes with the cart button."),placement:"bottom",target:`.${c.CONDA_PACKAGES_TOOLBAR_CLASS} .fa-cart-arrow-down`}]};var d=t(8708),m=t(7262),g=t(8703),p=t.n(g);const h=new m.Token("@mamba-org/gator-lab:ICompanionValidator"),u=/[\u0300-\u036F]/g;class _{constructor(e,a,t){this._isDisposed=!1,this._companions={},this._clean=()=>{},this._envManager=a,this._updateCompanions(t),t.changed.connect(this._updateCompanions,this),e.ready.then((()=>{this._validateSpecs(e,e.specs),e.specsChanged.connect(this._validateSpecs,this)})),new Promise((e=>{this._clean=e}).bind(this)).then((()=>{t.changed.disconnect(this._updateCompanions,this),e.specsChanged.disconnect(this._validateSpecs,this)}))}get isDisposed(){return this._isDisposed}dispose(){this.isDisposed||(this._clean(),this._isDisposed=!0)}_updateCompanions(e){this._companions=e.get("companions").composite}static kernelNameToEnvironment(e){const a=e.split("-");if("conda"===a[0]){if(a.length>=4)return a[2];if(3===a.length&&"root"===a[2])return"base"}return null}static _semverToPython(e){return e?e.split("||").map((e=>e.split(" ").join(","))).join("|"):null}async _validateSpecs(e,a){if(0===Object.keys(this._companions).length)return;const t=await this._envManager.environments,n={};function i(e,a,t){o.Notification.warning(`Environment "${t}" has some inconsistencies.`,{actions:[{label:"Correct",caption:"Correct installed packages",callback:()=>{o.Notification.promise(a.getPackageManager().install(e,t).then((()=>null)),{pending:{message:"Correct the environment."},success:{message:()=>"Environment corrected"},error:{message:()=>"Fail to correct the environment."}})}}]})}t.forEach((e=>{const a=e.name.normalize("NFKD").replace(u,"").replace(/[^a-zA-Z0-9._-]/g,"_");n[a]=e.name}));for(const e of Object.keys(a.kernelspecs)){let t;const{conda_env_name:o,conda_env_path:s}=a.kernelspecs[e].metadata;if(s)t="root"===o?"base":d.PathExt.basename(s);else{const a=_.kernelNameToEnvironment(e);t=n[a]}if(t)try{const e=await this._envManager.getPackageManager().refresh(!1,t),a=Object.keys(this._companions),n=[];e.forEach((e=>{if(a.indexOf(e.name)>=0&&!p().satisfies(e.version_installed,this._companions[e.name])){let a=_._semverToPython(p().validRange(this._companions[e.name]));a&&("<>=".indexOf(a[0])<0&&(a="="+a),n.push(e.name+a))}})),n.length>0&&i(n,this._envManager,t)}catch(e){console.error(`Fail to check environment '${t}'`,e)}}}validate(e){this._validateSpecs(null,e)}}const b="@mamba-org/gator-lab:plugin",v=[{id:b,autoStart:!0,activate:async function(e,a,t,n,i){let s;const{commands:r,shell:d}=e,m="conda-env",g="jupyter_conda:open-ui",p=await(a?.load(b)),h=new c.CondaEnvironments(p);(p?.get("backgroundCaching").composite??1)&&k.loadPackages(h);const u=new o.WidgetTracker({namespace:m});let _;return r.addCommand(g,{label:"Conda Packages Manager",execute:()=>{e.restored.then((()=>{let e=0;const a=()=>{setTimeout((()=>{e+=1e3,_?.isVisible&&s?r.execute("jupyterlab-tour:launch",{id:s.id,force:!1}):e<5001&&a()}),1e3)};r.hasCommand("jupyterlab-tour:add")&&(s||r.execute("jupyterlab-tour:add",{tour:l}).then((e=>{s=e})),a())})),_&&!_.isDisposed||(_=new o.MainAreaWidget({content:new c.CondaEnvWidget(h)}),_.addClass(c.CONDA_WIDGET_CLASS),_.id=m,_.title.label="Packages",_.title.caption="Conda Packages Manager",_.title.icon=c.condaIcon),u.has(_)||u.add(_),_.isAttached||d.add(_,"main"),d.activateById(_.id)}}),t&&t.addItem({command:g,category:"Settings"}),i&&i.restore(u,{command:g,name:()=>m}),n&&n.settingsMenu.addGroup([{command:g}],999),h},optional:[s.ISettingRegistry,o.ICommandPalette,i.IMainMenu,n.ILayoutRestorer],provides:c.IEnvironmentManager},{id:"@mamba-org/gator-lab:companion",autoStart:!0,activate:async function(e,a,t,n){const{commands:o,serviceManager:i}=e,s="jupyter_conda:companions",c=await t.load(b),r=new _(i.kernelspecs,a,c);return o.addCommand(s,{label:"Validate kernels compatibility",execute:()=>{r.validate(i.kernelspecs.specs)}}),n&&n.addItem({command:s,category:"Troubleshooting"}),r},requires:[c.IEnvironmentManager,s.ISettingRegistry],optional:[o.ICommandPalette],provides:h}];var k;!function(e){e.loadPackages=function(e){let a=!1,t="";const n=["I know you want to give up, but wait a bit longer...","Why is conda so popular, still loading that gigantic packages list...","Take a break, available packages list are still loading...","Available packages list still loading..."];function i(e){setTimeout((()=>{a||(o.Notification.update({message:e,id:t}),n.length>0&&i(n.pop()))}),6e4)}e.getPackageManager().refreshAvailablePackages(!1).then((()=>{a=!0,t&&o.Notification.dismiss(t)})).catch((e=>{console.debug("Fail to cache available packages list.",e),t&&o.Notification.dismiss(t)})),setTimeout((()=>{a||(t=o.Notification.emit("Loading the available packages list in background...","in-progress"),n.length>0&&i(n.pop()))}),6e4)}}(k||(k={}))}}]);