name: MCP KQL Server CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.10'

jobs:
  basic-validation:
    name: Basic Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine toml
    
    - name: Validate project structure
      run: |
        echo "Validating project structure"
        test -f pyproject.toml && echo "Found pyproject.toml"
        test -f README.md && echo "Found README.md"
        test -d mcp_kql_server && echo "Found mcp_kql_server directory"
        test -f mcp_kql_server/__init__.py && echo "Found package __init__.py"
        echo "All required files found"
    
    - name: Validate version consistency
      run: |
        echo "Checking version consistency"
        
        # Extract version from pyproject.toml using toml library (Python 3.8 compatible)
        PYPROJECT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        
        # Extract version from __init__.py using grep (no import needed)
        INIT_VERSION=$(grep -E '^__version__\s*=' mcp_kql_server/__init__.py | sed 's/.*=\s*["\'"'"']\([^"'"'"']*\)["\'"'"'].*/\1/')
        echo "__init__.py version: $INIT_VERSION"
        
        # Extract version from constants.py using grep (no import needed)
        CONSTANTS_VERSION=$(grep -E '^__version__\s*=' mcp_kql_server/constants.py | sed 's/.*=\s*["\'"'"']\([^"'"'"']*\)["\'"'"'].*/\1/')
        echo "constants.py version: $CONSTANTS_VERSION"
        
        # Check if all versions match
        if [ "$PYPROJECT_VERSION" = "$INIT_VERSION" ] && [ "$INIT_VERSION" = "$CONSTANTS_VERSION" ]; then
          echo "All versions are consistent: $PYPROJECT_VERSION"
        else
          echo "Version mismatch detected!"
          echo "pyproject.toml: $PYPROJECT_VERSION"
          echo "__init__.py: $INIT_VERSION"
          echo "constants.py: $CONSTANTS_VERSION"
          exit 1
        fi
        
        # If this is a tag push, validate tag matches version
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Git tag version: $TAG_VERSION"
          if [ "$PYPROJECT_VERSION" = "$TAG_VERSION" ]; then
            echo "Tag version matches package version"
          else
            echo "Tag version ($TAG_VERSION) does not match package version ($PYPROJECT_VERSION)"
            exit 1
          fi
        fi
    
    - name: Test package build
      run: |
        echo "Testing package build"
        python -m build
        echo "Package built successfully"
        ls -la dist/
        
        # Validate built package
        echo "Validating built package"
        twine check dist/*
        echo "Package validation passed"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-package-distributions
        path: dist/

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
    
    - name: Check code formatting
      run: |
        echo "Checking code formatting"
        black --check mcp_kql_server/ || echo "Black formatting issues found (non-blocking)"
        isort --check-only mcp_kql_server/ || echo "Import sorting issues found (non-blocking)"
        flake8 mcp_kql_server/ --max-line-length=100 || echo "Linting issues found (non-blocking)"
        echo "Code quality checks completed"

  multi-platform-test:
    name: Platform Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.10', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Basic compatibility test
      shell: python
      run: |
        import sys
        import os
        
        print('Python', sys.version)
        print('Platform: ${{ matrix.os }}')
        
        # Basic file existence check
        files_to_check = [
            'mcp_kql_server',
            'mcp_kql_server/__init__.py',
            'pyproject.toml'
        ]
        
        for file_path in files_to_check:
            if os.path.exists(file_path):
                print('Found:', file_path)
            else:
                print('Missing:', file_path)
                sys.exit(1)
        
        print('Basic compatibility test passed')

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [basic-validation, code-quality, multi-platform-test]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    permissions:
      id-token: write
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        skip-existing: true

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [basic-validation, code-quality, multi-platform-test]
    if: always()
    
    steps:
    - name: Print summary
      run: |
        echo "CI/CD Pipeline Summary"
        echo "======================"
        echo ""
        echo "Job Results:"
        echo "  Basic Validation: ${{ needs.basic-validation.result }}"
        echo "  Code Quality: ${{ needs.code-quality.result }}"
        echo "  Multi-Platform Test: ${{ needs.multi-platform-test.result }}"
        echo ""
        
        success_count=0
        if [ "${{ needs.basic-validation.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        if [ "${{ needs.code-quality.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        if [ "${{ needs.multi-platform-test.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        
        echo "Success Rate: $success_count/3 core jobs passed"
        
        if [ $success_count -eq 3 ]; then
          echo "All core pipeline stages passed!"
          
          # Check if this is a tag push for publishing
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo ""
            echo "Tag detected: ${GITHUB_REF#refs/tags/}"
            echo "PyPI publishing job will be triggered"
          fi
        else
          echo "Some core jobs had issues but pipeline completed"
        fi

  post-release-validation:
    name: Post-Release Validation
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: always() && needs.publish-pypi.result == 'success'
    
    steps:
    - name: Wait for PyPI propagation
      run: |
        echo "Waiting for PyPI propagation..."
        sleep 60
    
    - name: Validate PyPI package
      run: |
        echo "Validating PyPI package availability"
        
        # Extract version from tag
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        PACKAGE_NAME="mcp-kql-server"
        
        echo "Checking for package: $PACKAGE_NAME version $TAG_VERSION"
        
        # Try to install from PyPI
        pip install "$PACKAGE_NAME==$TAG_VERSION" || {
          echo "Package not yet available on PyPI (propagation delay expected)"
          exit 0
        }
        
        # Verify installation
        python -c "
        import mcp_kql_server
        print(f'Successfully installed mcp-kql-server v{mcp_kql_server.__version__}')
        print(f'Package location: {mcp_kql_server.__file__}')
        "
        
        echo "PyPI package validation successful!"
