"""Configuration UI for Mission Control"""

import os
import json
from pathlib import Path
from typing import Optional, Dict, Any
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.syntax import Syntax
import typer
from loguru import logger

from ..core.config import MissionConfig


class ConfigUI:
    """Interactive configuration UI for Mission Control"""
    
    def __init__(self):
        self.console = Console()
        self.config_path = Path.home() / ".mission-control" / "config.json"
        self.env_path = Path.home() / ".mission-control" / ".env"
        self.config = self._load_config()
    
    def _load_config(self) -> Dict[str, Any]:
        """Load existing configuration"""
        if self.config_path.exists():
            with open(self.config_path) as f:
                return json.load(f)
        return {}
    
    def _save_config(self):
        """Save configuration to file"""
        self.config_path.parent.mkdir(parents=True, exist_ok=True)
        with open(self.config_path, "w") as f:
            json.dump(self.config, f, indent=2)
    
    def _load_env(self) -> Dict[str, str]:
        """Load environment variables"""
        env_vars = {}
        if self.env_path.exists():
            with open(self.env_path) as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        env_vars[key.strip()] = value.strip()
        return env_vars
    
    def _save_env(self, env_vars: Dict[str, str]):
        """Save environment variables"""
        self.env_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Preserve comments from existing file
        lines = []
        if self.env_path.exists():
            with open(self.env_path) as f:
                for line in f:
                    if line.strip().startswith("#") or not line.strip():
                        lines.append(line.rstrip())
        
        # Add header if new file
        if not lines:
            lines.extend([
                "# Mission Control Configuration",
                "# Generated by mission-control config",
                ""
            ])
        
        # Update or add environment variables
        existing_keys = set()
        new_lines = []
        
        for line in lines:
            if "=" in line and not line.strip().startswith("#"):
                key = line.split("=", 1)[0].strip()
                if key in env_vars:
                    new_lines.append(f"{key}={env_vars[key]}")
                    existing_keys.add(key)
                else:
                    new_lines.append(line)
            else:
                new_lines.append(line)
        
        # Add new variables
        for key, value in env_vars.items():
            if key not in existing_keys:
                new_lines.append(f"{key}={value}")
        
        # Write file
        with open(self.env_path, "w") as f:
            f.write("\n".join(new_lines) + "\n")
    
    def run(self):
        """Run the configuration UI"""
        self.console.print(
            Panel.fit(
                "[bold blue]Mission Control Configuration[/bold blue]\n"
                "[dim]Configure your AI development environment[/dim]",
                border_style="blue"
            )
        )
        
        while True:
            choice = self._show_main_menu()
            
            if choice == "1":
                self._configure_api_keys()
            elif choice == "2":
                self._configure_local_models()
            elif choice == "3":
                self._configure_limits()
            elif choice == "4":
                self._configure_memory()
            elif choice == "5":
                self._configure_agents()
            elif choice == "6":
                self._show_current_config()
            elif choice == "7":
                self._export_config()
            elif choice == "8":
                self._import_config()
            elif choice == "0":
                break
            else:
                self.console.print("[red]Invalid choice[/red]")
    
    def _show_main_menu(self) -> str:
        """Show main configuration menu"""
        self.console.print("\n[bold]Configuration Options:[/bold]")
        self.console.print("1. Configure API Keys")
        self.console.print("2. Configure Local Models (Ollama)")
        self.console.print("3. Configure Token Limits")
        self.console.print("4. Configure Memory Service")
        self.console.print("5. Configure Agent Profiles")
        self.console.print("6. Show Current Configuration")
        self.console.print("7. Export Configuration")
        self.console.print("8. Import Configuration")
        self.console.print("0. Exit")
        
        return Prompt.ask("\n[bold green]Select option[/bold green]", default="0")
    
    def _configure_api_keys(self):
        """Configure API keys"""
        self.console.print("\n[bold]API Key Configuration[/bold]")
        
        env_vars = self._load_env()
        
        # Anthropic API Key
        current_anthropic = env_vars.get("ANTHROPIC_API_KEY", "")
        if current_anthropic and current_anthropic != "your-api-key-here":
            self.console.print(f"Current Anthropic API key: [dim]{current_anthropic[:10]}...[/dim]")
            if not Confirm.ask("Update Anthropic API key?"):
                anthropic_key = current_anthropic
            else:
                anthropic_key = Prompt.ask("Enter Anthropic API key", password=True)
        else:
            anthropic_key = Prompt.ask("Enter Anthropic API key", password=True, default="")
        
        # OpenAI API Key
        current_openai = env_vars.get("OPENAI_API_KEY", "")
        if current_openai and current_openai != "your-api-key-here":
            self.console.print(f"Current OpenAI API key: [dim]{current_openai[:10]}...[/dim]")
            if not Confirm.ask("Update OpenAI API key?"):
                openai_key = current_openai
            else:
                openai_key = Prompt.ask("Enter OpenAI API key", password=True)
        else:
            openai_key = Prompt.ask("Enter OpenAI API key (optional)", password=True, default="")
        
        # Mem0 API Key
        current_mem0 = env_vars.get("MEM0_API_KEY", "")
        if current_mem0 and current_mem0 != "your-api-key-here":
            self.console.print(f"Current Mem0 API key: [dim]{current_mem0[:10]}...[/dim]")
            if not Confirm.ask("Update Mem0 API key?"):
                mem0_key = current_mem0
            else:
                mem0_key = Prompt.ask("Enter Mem0 API key", password=True)
        else:
            mem0_key = Prompt.ask("Enter Mem0 API key (optional, uses local storage if empty)", password=True, default="")
        
        # Update environment variables
        if anthropic_key:
            env_vars["ANTHROPIC_API_KEY"] = anthropic_key
        if openai_key:
            env_vars["OPENAI_API_KEY"] = openai_key
        if mem0_key:
            env_vars["MEM0_API_KEY"] = mem0_key
        
        self._save_env(env_vars)
        self.console.print("[green]API keys configured successfully![/green]")
    
    def _configure_local_models(self):
        """Configure local models (Ollama)"""
        self.console.print("\n[bold]Local Model Configuration (Ollama)[/bold]")
        
        # Check if Ollama is available
        try:
            import subprocess
            result = subprocess.run(["ollama", "list"], capture_output=True, text=True)
            if result.returncode == 0:
                self.console.print("[green]Ollama detected![/green]")
                self.console.print("\nAvailable models:")
                self.console.print(result.stdout)
            else:
                self.console.print("[yellow]Ollama not found. Install from: https://ollama.ai[/yellow]")
                return
        except FileNotFoundError:
            self.console.print("[yellow]Ollama not found. Install from: https://ollama.ai[/yellow]")
            return
        
        # Configure Ollama settings
        use_ollama = Confirm.ask("Use Ollama for local model inference?")
        
        if use_ollama:
            model_name = Prompt.ask("Enter Ollama model name", default="llama2")
            ollama_host = Prompt.ask("Enter Ollama host", default="http://localhost:11434")
            
            self.config["llm"] = {
                "provider": "ollama",
                "model": model_name,
                "api_base": ollama_host
            }
            
            # Update environment
            env_vars = self._load_env()
            env_vars["LLM_PROVIDER"] = "ollama"
            env_vars["OLLAMA_MODEL"] = model_name
            env_vars["OLLAMA_HOST"] = ollama_host
            self._save_env(env_vars)
            
            self._save_config()
            self.console.print(f"[green]Configured to use Ollama model: {model_name}[/green]")
    
    def _configure_limits(self):
        """Configure token limits"""
        self.console.print("\n[bold]Token Limit Configuration[/bold]")
        
        # Max tokens per request
        max_tokens = IntPrompt.ask(
            "Maximum tokens per request (0 for model default)",
            default=4096
        )
        
        # Total token budget
        use_budget = Confirm.ask("Set a total token budget?")
        if use_budget:
            token_budget = IntPrompt.ask("Total token budget", default=1000000)
            warn_at = IntPrompt.ask("Warn at percentage", default=80)
        else:
            token_budget = 0
            warn_at = 0
        
        # Context window
        context_window = IntPrompt.ask(
            "Context window size (0 for model default)",
            default=0
        )
        
        # Update configuration
        self.config["limits"] = {
            "max_tokens_per_request": max_tokens,
            "total_token_budget": token_budget,
            "warn_at_percentage": warn_at,
            "context_window": context_window
        }
        
        # Update environment
        env_vars = self._load_env()
        if max_tokens > 0:
            env_vars["MAX_TOKENS"] = str(max_tokens)
        if token_budget > 0:
            env_vars["TOKEN_BUDGET"] = str(token_budget)
            env_vars["TOKEN_WARN_PERCENTAGE"] = str(warn_at)
        if context_window > 0:
            env_vars["CONTEXT_WINDOW"] = str(context_window)
        
        self._save_env(env_vars)
        self._save_config()
        self.console.print("[green]Token limits configured successfully![/green]")
    
    def _configure_memory(self):
        """Configure memory service"""
        self.console.print("\n[bold]Memory Service Configuration[/bold]")
        
        # Memory provider
        provider = Prompt.ask(
            "Memory provider",
            choices=["mem0", "local", "chromadb", "qdrant"],
            default="local"
        )
        
        if provider == "local":
            storage_path = Prompt.ask(
                "Local storage path",
                default=str(Path.home() / ".mission-control" / "memory")
            )
            
            self.config["memory"] = {
                "provider": "local",
                "storage_path": storage_path
            }
        elif provider == "mem0":
            self.console.print("[yellow]Make sure to configure Mem0 API key in API Keys section[/yellow]")
            self.config["memory"] = {"provider": "mem0"}
        elif provider in ["chromadb", "qdrant"]:
            host = Prompt.ask(f"{provider} host", default="localhost")
            port = IntPrompt.ask(f"{provider} port", default=8000)
            
            self.config["memory"] = {
                "provider": provider,
                "host": host,
                "port": port
            }
        
        # Memory settings
        enable_collective = Confirm.ask("Enable collective memory?", default=True)
        enable_agent = Confirm.ask("Enable individual agent memory?", default=True)
        memory_ttl = IntPrompt.ask("Memory TTL in days (0 for no expiry)", default=0)
        
        self.config["memory"].update({
            "enable_collective_memory": enable_collective,
            "enable_agent_memory": enable_agent,
            "memory_ttl_days": memory_ttl
        })
        
        # Update environment
        env_vars = self._load_env()
        env_vars["MEMORY_PROVIDER"] = provider
        if provider == "local":
            env_vars["MEMORY_LOCAL_STORAGE_PATH"] = storage_path
        
        self._save_env(env_vars)
        self._save_config()
        self.console.print("[green]Memory service configured successfully![/green]")
    
    def _configure_agents(self):
        """Configure agent profiles"""
        self.console.print("\n[bold]Agent Profile Configuration[/bold]")
        
        # Show current agents
        if "agent_profiles" not in self.config:
            self.config["agent_profiles"] = {}
        
        while True:
            self.console.print("\n[bold]Current Agent Profiles:[/bold]")
            if self.config["agent_profiles"]:
                for name, profile in self.config["agent_profiles"].items():
                    self.console.print(f"  • {name}: {profile.get('model', 'default')}")
            else:
                self.console.print("  [dim]No custom profiles configured[/dim]")
            
            action = Prompt.ask(
                "\nAction",
                choices=["add", "edit", "remove", "done"],
                default="done"
            )
            
            if action == "done":
                break
            elif action == "add":
                self._add_agent_profile()
            elif action == "edit":
                self._edit_agent_profile()
            elif action == "remove":
                self._remove_agent_profile()
        
        self._save_config()
        self.console.print("[green]Agent profiles configured successfully![/green]")
    
    def _add_agent_profile(self):
        """Add a new agent profile"""
        name = Prompt.ask("Agent profile name")
        model = Prompt.ask("Model to use", default="claude-3-sonnet-20240229")
        temperature = float(Prompt.ask("Temperature (0.0-1.0)", default="0.7"))
        max_tokens = IntPrompt.ask("Max tokens", default=4096)
        
        capabilities = []
        self.console.print("Enter capabilities (empty to finish):")
        while True:
            cap = Prompt.ask("Capability", default="")
            if not cap:
                break
            capabilities.append(cap)
        
        self.config["agent_profiles"][name] = {
            "name": name.title(),
            "model": model,
            "temperature": temperature,
            "max_tokens": max_tokens,
            "capabilities": capabilities
        }
        
        self.console.print(f"[green]Added agent profile: {name}[/green]")
    
    def _edit_agent_profile(self):
        """Edit an existing agent profile"""
        if not self.config["agent_profiles"]:
            self.console.print("[yellow]No agent profiles to edit[/yellow]")
            return
        
        name = Prompt.ask(
            "Profile to edit",
            choices=list(self.config["agent_profiles"].keys())
        )
        
        profile = self.config["agent_profiles"][name]
        
        # Edit each field
        profile["model"] = Prompt.ask("Model", default=profile.get("model", ""))
        profile["temperature"] = float(Prompt.ask("Temperature", default=str(profile.get("temperature", 0.7))))
        profile["max_tokens"] = IntPrompt.ask("Max tokens", default=profile.get("max_tokens", 4096))
        
        self.console.print(f"[green]Updated agent profile: {name}[/green]")
    
    def _remove_agent_profile(self):
        """Remove an agent profile"""
        if not self.config["agent_profiles"]:
            self.console.print("[yellow]No agent profiles to remove[/yellow]")
            return
        
        name = Prompt.ask(
            "Profile to remove",
            choices=list(self.config["agent_profiles"].keys())
        )
        
        if Confirm.ask(f"Remove profile '{name}'?"):
            del self.config["agent_profiles"][name]
            self.console.print(f"[green]Removed agent profile: {name}[/green]")
    
    def _show_current_config(self):
        """Show current configuration"""
        self.console.print("\n[bold]Current Configuration:[/bold]\n")
        
        # Load environment variables
        env_vars = self._load_env()
        
        # API Keys section
        table = Table(title="API Keys", show_header=True)
        table.add_column("Key", style="cyan")
        table.add_column("Status")
        
        anthropic_key = env_vars.get("ANTHROPIC_API_KEY", "")
        openai_key = env_vars.get("OPENAI_API_KEY", "")
        mem0_key = env_vars.get("MEM0_API_KEY", "")
        
        table.add_row(
            "Anthropic",
            "[green]Configured[/green]" if anthropic_key and anthropic_key != "your-api-key-here" else "[red]Not set[/red]"
        )
        table.add_row(
            "OpenAI",
            "[green]Configured[/green]" if openai_key and openai_key != "your-api-key-here" else "[yellow]Not set[/yellow]"
        )
        table.add_row(
            "Mem0",
            "[green]Configured[/green]" if mem0_key and mem0_key != "your-api-key-here" else "[yellow]Using local[/yellow]"
        )
        
        self.console.print(table)
        
        # Show JSON config
        if self.config:
            self.console.print("\n[bold]Configuration:[/bold]")
            json_str = json.dumps(self.config, indent=2)
            syntax = Syntax(json_str, "json", theme="monokai", line_numbers=False)
            self.console.print(syntax)
        
        # Show config file locations
        self.console.print(f"\n[dim]Config file: {self.config_path}[/dim]")
        self.console.print(f"[dim]Environment file: {self.env_path}[/dim]")
    
    def _export_config(self):
        """Export configuration to file"""
        self.console.print("\n[bold]Export Configuration[/bold]")
        
        filename = Prompt.ask("Export filename", default="mission-control-config.json")
        
        export_data = {
            "config": self.config,
            "env": self._load_env()
        }
        
        # Remove sensitive data if requested
        if Confirm.ask("Remove API keys from export?"):
            export_data["env"] = {
                k: v for k, v in export_data["env"].items()
                if not k.endswith("_KEY")
            }
        
        with open(filename, "w") as f:
            json.dump(export_data, f, indent=2)
        
        self.console.print(f"[green]Configuration exported to: {filename}[/green]")
    
    def _import_config(self):
        """Import configuration from file"""
        self.console.print("\n[bold]Import Configuration[/bold]")
        
        filename = Prompt.ask("Import filename")
        
        try:
            with open(filename) as f:
                import_data = json.load(f)
            
            if Confirm.ask("This will overwrite current configuration. Continue?"):
                if "config" in import_data:
                    self.config = import_data["config"]
                    self._save_config()
                
                if "env" in import_data and Confirm.ask("Import environment variables?"):
                    env_vars = self._load_env()
                    env_vars.update(import_data["env"])
                    self._save_env(env_vars)
                
                self.console.print("[green]Configuration imported successfully![/green]")
        except Exception as e:
            self.console.print(f"[red]Error importing configuration: {e}[/red]")


def run_config_ui():
    """Entry point for configuration UI"""
    ui = ConfigUI()
    ui.run()