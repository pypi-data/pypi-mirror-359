2025-06-18 15:31:25,381 - INFO - Creating mapping between the property and the instrumentated value.
2025-06-18 15:31:25,382 - INFO - Checking the contents in /home/verve/ml_nb_testing/comp_analysis/nbtest-gen/example/op/heart-failure-classification_instrumentation.pkl
2025-06-18 15:31:25,382 - INFO - {'df': {'isNone': False, 'assert_var.shape': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13), (299, 13)], 'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']], '[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']], "np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676], "np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918], 'cell_no': 2, 'line_no': 3}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'nbtest_tmpvar_0': {'isNone': False, 'assert_var.shape': [(10, 13), (10, 13), (10, 13), (10, 13), (10, 13), (10, 13)], 'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']], '[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']], "np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20584.102, 20584.102, 20584.102, 20584.102, 20584.102, 20584.102], "np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456], 'cell_no': 3, 'line_no': 1}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'nbtest_tmpvar_2': {'isNone': False, 'assert_var.sum()': [0, 0, 0, 0, 0, 0], 'cell_no': 5, 'line_no': 1}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'df.shape': {'isNone': False, 'assert_var': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13), (299, 13)], 'cell_no': 6, 'line_no': 1}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'nbtest_tmpvar_3': {'isNone': False, 'assert_var.shape': [(8, 13), (8, 13), (8, 13), (8, 13), (8, 13), (8, 13)], 'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']], '[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64']], "np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242], "np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377], 'cell_no': 7, 'line_no': 1}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'nbtest_tmpvar_4': {'isNone': False, 'img_path': ['/tmp/assert_plot_9_6_1750240876.png', '/tmp/assert_plot_9_6_1750240798.png', '/tmp/assert_plot_9_6_1750240857.png', '/tmp/assert_plot_9_6_1750240818.png', '/tmp/assert_plot_9_6_1750240837.png'], 'cell_no': 9, 'line_no': 6}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'nbtest_tmpvar_6': {'isNone': False, 'img_path': ['/tmp/assert_plot_10_5_1750240882.png', '/tmp/assert_plot_10_5_1750240804.png', '/tmp/assert_plot_10_5_1750240862.png', '/tmp/assert_plot_10_5_1750240823.png', '/tmp/assert_plot_10_5_1750240843.png'], 'cell_no': 10, 'line_no': 5}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'nbtest_tmpvar_7': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}], 'cell_no': 16, 'line_no': 3}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'nbtest_tmpvar_8': {'isNone': False, 'img_path': ['/tmp/assert_plot_16_8_1750240883.png', '/tmp/assert_plot_16_8_1750240804.png', '/tmp/assert_plot_16_8_1750240863.png', '/tmp/assert_plot_16_8_1750240824.png', '/tmp/assert_plot_16_8_1750240843.png'], 'cell_no': 16, 'line_no': 8}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7166666666666667, 0.8333333333333334, 0.8833333333333333, 0.9, 0.8], 'cell_no': 16, 'line_no': 10}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.7499999999999999, 0.9114832535885167, 0.9090909090909092, 0.92, 0.8465608465608465], 'cell_no': 17, 'line_no': 4}}
2025-06-18 15:31:25,382 - INFO - 

2025-06-18 15:31:25,382 - INFO - {'nbtest_tmpvar_9': {'isNone': False, 'img_path': ['/tmp/assert_plot_17_14_1750240883.png', '/tmp/assert_plot_17_14_1750240804.png', '/tmp/assert_plot_17_14_1750240863.png', '/tmp/assert_plot_17_14_1750240824.png', '/tmp/assert_plot_17_14_1750240843.png'], 'cell_no': 17, 'line_no': 14}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6979166666666667, 0.8110047846889952, 0.8607954545454546, 0.8875000000000001, 0.7936507936507936], 'cell_no': 17, 'line_no': 15}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_10': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}], 'cell_no': 18, 'line_no': 3}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_11': {'isNone': False, 'img_path': ['/tmp/assert_plot_18_8_1750240883.png', '/tmp/assert_plot_18_8_1750240804.png', '/tmp/assert_plot_18_8_1750240863.png', '/tmp/assert_plot_18_8_1750240824.png', '/tmp/assert_plot_18_8_1750240844.png'], 'cell_no': 18, 'line_no': 8}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7, 0.8333333333333334, 0.85, 0.8666666666666667, 0.7333333333333333], 'cell_no': 18, 'line_no': 10}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.7621527777777778, 0.9162679425837321, 0.9083806818181818, 0.899375, 0.7572751322751323], 'cell_no': 19, 'line_no': 4}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_12': {'isNone': False, 'img_path': ['/tmp/assert_plot_19_14_1750240883.png', '/tmp/assert_plot_19_14_1750240804.png', '/tmp/assert_plot_19_14_1750240863.png', '/tmp/assert_plot_19_14_1750240824.png', '/tmp/assert_plot_19_14_1750240844.png'], 'cell_no': 19, 'line_no': 14}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6874999999999999, 0.8110047846889952, 0.8380681818181819, 0.8625, 0.7142857142857142], 'cell_no': 19, 'line_no': 15}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_13': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}], 'cell_no': 20, 'line_no': 3}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_14': {'isNone': False, 'img_path': ['/tmp/assert_plot_20_8_1750240883.png', '/tmp/assert_plot_20_8_1750240804.png', '/tmp/assert_plot_20_8_1750240863.png', '/tmp/assert_plot_20_8_1750240824.png', '/tmp/assert_plot_20_8_1750240844.png'], 'cell_no': 20, 'line_no': 8}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6666666666666666, 0.8333333333333334, 0.85, 0.8333333333333334, 0.7333333333333333], 'cell_no': 20, 'line_no': 10}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.7204861111111112, 0.9150717703349283, 0.934659090909091, 0.8837499999999999, 0.8134920634920635], 'cell_no': 21, 'line_no': 4}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_15': {'isNone': False, 'img_path': ['/tmp/assert_plot_21_14_1750240883.png', '/tmp/assert_plot_21_14_1750240804.png', '/tmp/assert_plot_21_14_1750240863.png', '/tmp/assert_plot_21_14_1750240824.png', '/tmp/assert_plot_21_14_1750240844.png'], 'cell_no': 21, 'line_no': 14}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6666666666666667, 0.8301435406698565, 0.8380681818181819, 0.8125, 0.7301587301587302], 'cell_no': 21, 'line_no': 15}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_16': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}], 'cell_no': 22, 'line_no': 3}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_17': {'isNone': False, 'img_path': ['/tmp/assert_plot_22_8_1750240883.png', '/tmp/assert_plot_22_8_1750240805.png', '/tmp/assert_plot_22_8_1750240863.png', '/tmp/assert_plot_22_8_1750240824.png', '/tmp/assert_plot_22_8_1750240844.png'], 'cell_no': 22, 'line_no': 8}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.8, 0.8, 0.85, 0.8, 0.8], 'cell_no': 22, 'line_no': 10}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.7786458333333333, 0.8767942583732058, 0.8693181818181819, 0.885, 0.7863756613756614], 'cell_no': 23, 'line_no': 4}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_18': {'isNone': False, 'img_path': ['/tmp/assert_plot_23_14_1750240883.png', '/tmp/assert_plot_23_14_1750240805.png', '/tmp/assert_plot_23_14_1750240863.png', '/tmp/assert_plot_23_14_1750240824.png', '/tmp/assert_plot_23_14_1750240844.png'], 'cell_no': 23, 'line_no': 14}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.71875, 0.7655502392344496, 0.778409090909091, 0.7500000000000001, 0.7777777777777779], 'cell_no': 23, 'line_no': 15}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_19': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}], 'cell_no': 24, 'line_no': 3}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_20': {'isNone': False, 'img_path': ['/tmp/assert_plot_24_8_1750240883.png', '/tmp/assert_plot_24_8_1750240805.png', '/tmp/assert_plot_24_8_1750240863.png', '/tmp/assert_plot_24_8_1750240824.png', '/tmp/assert_plot_24_8_1750240844.png'], 'cell_no': 24, 'line_no': 8}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.75, 0.8166666666666667, 0.7666666666666667, 0.7, 0.7666666666666667], 'cell_no': 24, 'line_no': 10}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.7187499999999999, 0.7691387559808612, 0.7613636363636364, 0.7, 0.7222222222222223], 'cell_no': 25, 'line_no': 4}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_21': {'isNone': False, 'img_path': ['/tmp/assert_plot_25_14_1750240883.png', '/tmp/assert_plot_25_14_1750240805.png', '/tmp/assert_plot_25_14_1750240864.png', '/tmp/assert_plot_25_14_1750240825.png', '/tmp/assert_plot_25_14_1750240844.png'], 'cell_no': 25, 'line_no': 14}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7187499999999999, 0.7691387559808612, 0.7613636363636364, 0.7, 0.7222222222222223], 'cell_no': 25, 'line_no': 15}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,383 - INFO - {'nbtest_tmpvar_22': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}], 'cell_no': 26, 'line_no': 3}}
2025-06-18 15:31:25,383 - INFO - 

2025-06-18 15:31:25,384 - INFO - {}
2025-06-18 15:31:25,384 - INFO - 

2025-06-18 15:31:25,384 - INFO - {'nbtest_tmpvar_23': {'isNone': False, 'img_path': ['/tmp/assert_plot_26_8_1750240884.png', '/tmp/assert_plot_26_8_1750240805.png', '/tmp/assert_plot_26_8_1750240864.png', '/tmp/assert_plot_26_8_1750240825.png', '/tmp/assert_plot_26_8_1750240844.png'], 'cell_no': 26, 'line_no': 8}}
2025-06-18 15:31:25,384 - INFO - 

2025-06-18 15:31:25,384 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7166666666666667, 0.85, 0.8166666666666667, 0.8166666666666667, 0.7166666666666667], 'cell_no': 26, 'line_no': 10}}
2025-06-18 15:31:25,384 - INFO - 

2025-06-18 15:31:25,384 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.7760416666666667, 0.9413875598086124, 0.9240056818181818, 0.8768749999999998, 0.8062169312169313], 'cell_no': 27, 'line_no': 4}}
2025-06-18 15:31:25,384 - INFO - 

2025-06-18 15:31:25,384 - INFO - {'nbtest_tmpvar_24': {'isNone': False, 'img_path': ['/tmp/assert_plot_27_14_1750240884.png', '/tmp/assert_plot_27_14_1750240805.png', '/tmp/assert_plot_27_14_1750240864.png', '/tmp/assert_plot_27_14_1750240825.png', '/tmp/assert_plot_27_14_1750240844.png'], 'cell_no': 27, 'line_no': 14}}
2025-06-18 15:31:25,384 - INFO - 

2025-06-18 15:31:25,384 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7291666666666666, 0.833732057416268, 0.7755681818181819, 0.7875, 0.7023809523809524], 'cell_no': 27, 'line_no': 15}}
2025-06-18 15:31:25,384 - INFO - 

2025-06-18 15:31:25,384 - INFO - df at Cell 2 Line 3 has found the instrumentation value
2025-06-18 15:31:25,384 - INFO - nbtest_tmpvar_0 at Cell 3 Line 1 has found the instrumentation value
2025-06-18 15:31:25,384 - INFO - nbtest_tmpvar_1 at Cell 4 Line 1 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,384 - INFO - nbtest_tmpvar_2 at Cell 5 Line 1 has found the instrumentation value
2025-06-18 15:31:25,384 - INFO - df.shape at Cell 6 Line 1 has found the instrumentation value
2025-06-18 15:31:25,384 - INFO - nbtest_tmpvar_3 at Cell 7 Line 1 has found the instrumentation value
2025-06-18 15:31:25,384 - INFO - i at Cell 8 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,384 - INFO - df[f'{i}'].value_counts() at Cell 8 Line 3 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,385 - INFO - nbtest_tmpvar_4 at Cell 9 Line 6 has found the instrumentation value
2025-06-18 15:31:25,385 - INFO - nbtest_tmpvar_5 at Cell 10 Line 3 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,385 - INFO - nbtest_tmpvar_6 at Cell 10 Line 5 has found the instrumentation value
2025-06-18 15:31:25,385 - INFO - df.corr().abs()['DEATH_EVENT'].nlargest(15) at Cell 11 Line 1 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,385 - INFO - col_reduced at Cell 12 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,385 - INFO - x_train at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,385 - INFO - x_test at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,385 - INFO - y_train at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,385 - INFO - y_test at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,385 - INFO - nbtest_tmpvar_7 at Cell 16 Line 3 has found the instrumentation value
2025-06-18 15:31:25,385 - INFO - cm at Cell 16 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,385 - INFO - nbtest_tmpvar_8 at Cell 16 Line 8 has found the instrumentation value
2025-06-18 15:31:25,385 - INFO - accuracy_score(y_test, y_pred) at Cell 16 Line 10 has found the instrumentation value
2025-06-18 15:31:25,385 - INFO - roc_auc at Cell 17 Line 4 has found the instrumentation value
2025-06-18 15:31:25,385 - INFO - nbtest_tmpvar_9 at Cell 17 Line 14 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 17 Line 15 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - nbtest_tmpvar_10 at Cell 18 Line 3 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - cm at Cell 18 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,386 - INFO - nbtest_tmpvar_11 at Cell 18 Line 8 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - accuracy_score(y_test, y_pred) at Cell 18 Line 10 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - roc_auc at Cell 19 Line 4 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - nbtest_tmpvar_12 at Cell 19 Line 14 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 19 Line 15 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - nbtest_tmpvar_13 at Cell 20 Line 3 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - cm at Cell 20 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,386 - INFO - nbtest_tmpvar_14 at Cell 20 Line 8 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - accuracy_score(y_test, y_pred) at Cell 20 Line 10 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - roc_auc at Cell 21 Line 4 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - nbtest_tmpvar_15 at Cell 21 Line 14 has found the instrumentation value
2025-06-18 15:31:25,386 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 21 Line 15 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - nbtest_tmpvar_16 at Cell 22 Line 3 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - cm at Cell 22 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,387 - INFO - nbtest_tmpvar_17 at Cell 22 Line 8 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - accuracy_score(y_test, y_pred) at Cell 22 Line 10 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - roc_auc at Cell 23 Line 4 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - nbtest_tmpvar_18 at Cell 23 Line 14 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 23 Line 15 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - nbtest_tmpvar_19 at Cell 24 Line 3 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - cm at Cell 24 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,387 - INFO - nbtest_tmpvar_20 at Cell 24 Line 8 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - accuracy_score(y_test, y_pred) at Cell 24 Line 10 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - roc_auc at Cell 25 Line 4 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - nbtest_tmpvar_21 at Cell 25 Line 14 has found the instrumentation value
2025-06-18 15:31:25,387 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 25 Line 15 has found the instrumentation value
2025-06-18 15:31:25,388 - INFO - nbtest_tmpvar_22 at Cell 26 Line 3 has found the instrumentation value
2025-06-18 15:31:25,388 - INFO - cm at Cell 26 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-06-18 15:31:25,388 - INFO - nbtest_tmpvar_23 at Cell 26 Line 8 has found the instrumentation value
2025-06-18 15:31:25,388 - INFO - accuracy_score(y_test, y_pred) at Cell 26 Line 10 has found the instrumentation value
2025-06-18 15:31:25,388 - INFO - roc_auc at Cell 27 Line 4 has found the instrumentation value
2025-06-18 15:31:25,388 - INFO - nbtest_tmpvar_24 at Cell 27 Line 14 has found the instrumentation value
2025-06-18 15:31:25,388 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 27 Line 15 has found the instrumentation value
2025-06-18 15:31:25,388 - INFO - Checking self.mapping
2025-06-18 15:31:25,388 - INFO - {2: [{'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {'assert_var.shape': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13), (299, 13)]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {'[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {"np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {"np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918]}}]}
2025-06-18 15:31:25,388 - INFO - {3: [{'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {'assert_var.shape': [(10, 13), (10, 13), (10, 13), (10, 13), (10, 13), (10, 13)]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {'[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {"np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20584.102, 20584.102, 20584.102, 20584.102, 20584.102, 20584.102]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {"np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456]}}]}
2025-06-18 15:31:25,388 - INFO - {5: [{'var': 'nbtest_tmpvar_2', 'assert_type': 'DATASET__any', 'lineno': 1, 'val': {'assert_var.sum()': [0, 0, 0, 0, 0, 0]}}]}
2025-06-18 15:31:25,388 - INFO - {6: [{'var': 'df.shape', 'assert_type': 'DATASET__ATTRIBUTE_ACCESS', 'lineno': 1, 'val': {'assert_var': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13), (299, 13)]}}]}
2025-06-18 15:31:25,388 - INFO - {7: [{'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {'assert_var.shape': [(8, 13), (8, 13), (8, 13), (8, 13), (8, 13), (8, 13)]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {'[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64']]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {"np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {"np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377]}}]}
2025-06-18 15:31:25,388 - INFO - {9: [{'var': 'nbtest_tmpvar_4', 'assert_type': 'PLOT__show', 'lineno': 6, 'val': {'img_path': ['/tmp/assert_plot_9_6_1750240876.png', '/tmp/assert_plot_9_6_1750240798.png', '/tmp/assert_plot_9_6_1750240857.png', '/tmp/assert_plot_9_6_1750240818.png', '/tmp/assert_plot_9_6_1750240837.png']}}]}
2025-06-18 15:31:25,388 - INFO - {10: [{'var': 'nbtest_tmpvar_6', 'assert_type': 'PLOT__show', 'lineno': 5, 'val': {'img_path': ['/tmp/assert_plot_10_5_1750240882.png', '/tmp/assert_plot_10_5_1750240804.png', '/tmp/assert_plot_10_5_1750240862.png', '/tmp/assert_plot_10_5_1750240823.png', '/tmp/assert_plot_10_5_1750240843.png']}}]}
2025-06-18 15:31:25,388 - INFO - {16: [{'var': 'nbtest_tmpvar_7', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}]}}, {'var': 'nbtest_tmpvar_8', 'assert_type': 'PLOT__show', 'lineno': 8, 'val': {'img_path': ['/tmp/assert_plot_16_8_1750240883.png', '/tmp/assert_plot_16_8_1750240804.png', '/tmp/assert_plot_16_8_1750240863.png', '/tmp/assert_plot_16_8_1750240824.png', '/tmp/assert_plot_16_8_1750240843.png']}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.7166666666666667, 0.8333333333333334, 0.8833333333333333, 0.9, 0.8]}}]}
2025-06-18 15:31:25,388 - INFO - {17: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.7499999999999999, 0.9114832535885167, 0.9090909090909092, 0.92, 0.8465608465608465]}}, {'var': 'nbtest_tmpvar_9', 'assert_type': 'PLOT__show', 'lineno': 14, 'val': {'img_path': ['/tmp/assert_plot_17_14_1750240883.png', '/tmp/assert_plot_17_14_1750240804.png', '/tmp/assert_plot_17_14_1750240863.png', '/tmp/assert_plot_17_14_1750240824.png', '/tmp/assert_plot_17_14_1750240843.png']}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.6979166666666667, 0.8110047846889952, 0.8607954545454546, 0.8875000000000001, 0.7936507936507936]}}]}
2025-06-18 15:31:25,388 - INFO - {18: [{'var': 'nbtest_tmpvar_10', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}]}}, {'var': 'nbtest_tmpvar_11', 'assert_type': 'PLOT__show', 'lineno': 8, 'val': {'img_path': ['/tmp/assert_plot_18_8_1750240883.png', '/tmp/assert_plot_18_8_1750240804.png', '/tmp/assert_plot_18_8_1750240863.png', '/tmp/assert_plot_18_8_1750240824.png', '/tmp/assert_plot_18_8_1750240844.png']}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.7, 0.8333333333333334, 0.85, 0.8666666666666667, 0.7333333333333333]}}]}
2025-06-18 15:31:25,388 - INFO - {19: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.7621527777777778, 0.9162679425837321, 0.9083806818181818, 0.899375, 0.7572751322751323]}}, {'var': 'nbtest_tmpvar_12', 'assert_type': 'PLOT__show', 'lineno': 14, 'val': {'img_path': ['/tmp/assert_plot_19_14_1750240883.png', '/tmp/assert_plot_19_14_1750240804.png', '/tmp/assert_plot_19_14_1750240863.png', '/tmp/assert_plot_19_14_1750240824.png', '/tmp/assert_plot_19_14_1750240844.png']}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.6874999999999999, 0.8110047846889952, 0.8380681818181819, 0.8625, 0.7142857142857142]}}]}
2025-06-18 15:31:25,388 - INFO - {20: [{'var': 'nbtest_tmpvar_13', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}]}}, {'var': 'nbtest_tmpvar_14', 'assert_type': 'PLOT__show', 'lineno': 8, 'val': {'img_path': ['/tmp/assert_plot_20_8_1750240883.png', '/tmp/assert_plot_20_8_1750240804.png', '/tmp/assert_plot_20_8_1750240863.png', '/tmp/assert_plot_20_8_1750240824.png', '/tmp/assert_plot_20_8_1750240844.png']}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.6666666666666666, 0.8333333333333334, 0.85, 0.8333333333333334, 0.7333333333333333]}}]}
2025-06-18 15:31:25,388 - INFO - {21: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.7204861111111112, 0.9150717703349283, 0.934659090909091, 0.8837499999999999, 0.8134920634920635]}}, {'var': 'nbtest_tmpvar_15', 'assert_type': 'PLOT__show', 'lineno': 14, 'val': {'img_path': ['/tmp/assert_plot_21_14_1750240883.png', '/tmp/assert_plot_21_14_1750240804.png', '/tmp/assert_plot_21_14_1750240863.png', '/tmp/assert_plot_21_14_1750240824.png', '/tmp/assert_plot_21_14_1750240844.png']}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.6666666666666667, 0.8301435406698565, 0.8380681818181819, 0.8125, 0.7301587301587302]}}]}
2025-06-18 15:31:25,388 - INFO - {22: [{'var': 'nbtest_tmpvar_16', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}]}}, {'var': 'nbtest_tmpvar_17', 'assert_type': 'PLOT__show', 'lineno': 8, 'val': {'img_path': ['/tmp/assert_plot_22_8_1750240883.png', '/tmp/assert_plot_22_8_1750240805.png', '/tmp/assert_plot_22_8_1750240863.png', '/tmp/assert_plot_22_8_1750240824.png', '/tmp/assert_plot_22_8_1750240844.png']}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.8, 0.8, 0.85, 0.8, 0.8]}}]}
2025-06-18 15:31:25,388 - INFO - {23: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.7786458333333333, 0.8767942583732058, 0.8693181818181819, 0.885, 0.7863756613756614]}}, {'var': 'nbtest_tmpvar_18', 'assert_type': 'PLOT__show', 'lineno': 14, 'val': {'img_path': ['/tmp/assert_plot_23_14_1750240883.png', '/tmp/assert_plot_23_14_1750240805.png', '/tmp/assert_plot_23_14_1750240863.png', '/tmp/assert_plot_23_14_1750240824.png', '/tmp/assert_plot_23_14_1750240844.png']}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.71875, 0.7655502392344496, 0.778409090909091, 0.7500000000000001, 0.7777777777777779]}}]}
2025-06-18 15:31:25,389 - INFO - {24: [{'var': 'nbtest_tmpvar_19', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}]}}, {'var': 'nbtest_tmpvar_20', 'assert_type': 'PLOT__show', 'lineno': 8, 'val': {'img_path': ['/tmp/assert_plot_24_8_1750240883.png', '/tmp/assert_plot_24_8_1750240805.png', '/tmp/assert_plot_24_8_1750240863.png', '/tmp/assert_plot_24_8_1750240824.png', '/tmp/assert_plot_24_8_1750240844.png']}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.75, 0.8166666666666667, 0.7666666666666667, 0.7, 0.7666666666666667]}}]}
2025-06-18 15:31:25,389 - INFO - {25: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.7187499999999999, 0.7691387559808612, 0.7613636363636364, 0.7, 0.7222222222222223]}}, {'var': 'nbtest_tmpvar_21', 'assert_type': 'PLOT__show', 'lineno': 14, 'val': {'img_path': ['/tmp/assert_plot_25_14_1750240883.png', '/tmp/assert_plot_25_14_1750240805.png', '/tmp/assert_plot_25_14_1750240864.png', '/tmp/assert_plot_25_14_1750240825.png', '/tmp/assert_plot_25_14_1750240844.png']}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.7187499999999999, 0.7691387559808612, 0.7613636363636364, 0.7, 0.7222222222222223]}}]}
2025-06-18 15:31:25,389 - INFO - {26: [{'var': 'nbtest_tmpvar_22', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}]}}, {'var': 'nbtest_tmpvar_23', 'assert_type': 'PLOT__show', 'lineno': 8, 'val': {'img_path': ['/tmp/assert_plot_26_8_1750240884.png', '/tmp/assert_plot_26_8_1750240805.png', '/tmp/assert_plot_26_8_1750240864.png', '/tmp/assert_plot_26_8_1750240825.png', '/tmp/assert_plot_26_8_1750240844.png']}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.7166666666666667, 0.85, 0.8166666666666667, 0.8166666666666667, 0.7166666666666667]}}]}
2025-06-18 15:31:25,389 - INFO - {27: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.7760416666666667, 0.9413875598086124, 0.9240056818181818, 0.8768749999999998, 0.8062169312169313]}}, {'var': 'nbtest_tmpvar_24', 'assert_type': 'PLOT__show', 'lineno': 14, 'val': {'img_path': ['/tmp/assert_plot_27_14_1750240884.png', '/tmp/assert_plot_27_14_1750240805.png', '/tmp/assert_plot_27_14_1750240864.png', '/tmp/assert_plot_27_14_1750240825.png', '/tmp/assert_plot_27_14_1750240844.png']}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.7291666666666666, 0.833732057416268, 0.7755681818181819, 0.7875, 0.7023809523809524]}}]}
