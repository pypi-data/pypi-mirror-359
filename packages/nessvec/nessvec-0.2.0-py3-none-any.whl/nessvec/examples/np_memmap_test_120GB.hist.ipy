>>> from nessvec.files import load_glove
>>> data = np.arange(12, dtype='float32')
... 
... data.resize((3,4))
...
>>> import numpy as np
>>> data = np.arange(1_000_000, dtype='float32')
... data.resize((1000,1000))
...
>>> data[0]
array([  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,
        11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,  21.,
        22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.,  30.,  31.,  32.,
        33.,  34.,  35.,  36.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,
        44.,  45.,  46.,  47.,  48.,  49.,  50.,  51.,  52.,  53.,  54.,
        55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  65.,
        66.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,
        77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,
        88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,
        99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 109.,
       110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120.,
       121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131.,
       132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142.,
       143., 144., 145., 146., 147., 148., 149., 150., 151., 152., 153.,
       154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164.,
       165., 166., 167., 168., 169., 170., 171., 172., 173., 174., 175.,
       176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186.,
       187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 197.,
       198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208.,
       209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219.,
       220., 221., 222., 223., 224., 225., 226., 227., 228., 229., 230.,
       231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 241.,
       242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
       253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263.,
       264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274.,
       275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285.,
       286., 287., 288., 289., 290., 291., 292., 293., 294., 295., 296.,
       297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307.,
       308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318.,
       319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329.,
       330., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340.,
       341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351.,
       352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362.,
       363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373.,
       374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384.,
       385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395.,
       396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406.,
       407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417.,
       418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428.,
       429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439.,
       440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450.,
       451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461.,
       462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472.,
       473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483.,
       484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494.,
       495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505.,
       506., 507., 508., 509., 510., 511., 512., 513., 514., 515., 516.,
       517., 518., 519., 520., 521., 522., 523., 524., 525., 526., 527.,
       528., 529., 530., 531., 532., 533., 534., 535., 536., 537., 538.,
       539., 540., 541., 542., 543., 544., 545., 546., 547., 548., 549.,
       550., 551., 552., 553., 554., 555., 556., 557., 558., 559., 560.,
       561., 562., 563., 564., 565., 566., 567., 568., 569., 570., 571.,
       572., 573., 574., 575., 576., 577., 578., 579., 580., 581., 582.,
       583., 584., 585., 586., 587., 588., 589., 590., 591., 592., 593.,
       594., 595., 596., 597., 598., 599., 600., 601., 602., 603., 604.,
       605., 606., 607., 608., 609., 610., 611., 612., 613., 614., 615.,
       616., 617., 618., 619., 620., 621., 622., 623., 624., 625., 626.,
       627., 628., 629., 630., 631., 632., 633., 634., 635., 636., 637.,
       638., 639., 640., 641., 642., 643., 644., 645., 646., 647., 648.,
       649., 650., 651., 652., 653., 654., 655., 656., 657., 658., 659.,
       660., 661., 662., 663., 664., 665., 666., 667., 668., 669., 670.,
       671., 672., 673., 674., 675., 676., 677., 678., 679., 680., 681.,
       682., 683., 684., 685., 686., 687., 688., 689., 690., 691., 692.,
       693., 694., 695., 696., 697., 698., 699., 700., 701., 702., 703.,
       704., 705., 706., 707., 708., 709., 710., 711., 712., 713., 714.,
       715., 716., 717., 718., 719., 720., 721., 722., 723., 724., 725.,
       726., 727., 728., 729., 730., 731., 732., 733., 734., 735., 736.,
       737., 738., 739., 740., 741., 742., 743., 744., 745., 746., 747.,
       748., 749., 750., 751., 752., 753., 754., 755., 756., 757., 758.,
       759., 760., 761., 762., 763., 764., 765., 766., 767., 768., 769.,
       770., 771., 772., 773., 774., 775., 776., 777., 778., 779., 780.,
       781., 782., 783., 784., 785., 786., 787., 788., 789., 790., 791.,
       792., 793., 794., 795., 796., 797., 798., 799., 800., 801., 802.,
       803., 804., 805., 806., 807., 808., 809., 810., 811., 812., 813.,
       814., 815., 816., 817., 818., 819., 820., 821., 822., 823., 824.,
       825., 826., 827., 828., 829., 830., 831., 832., 833., 834., 835.,
       836., 837., 838., 839., 840., 841., 842., 843., 844., 845., 846.,
       847., 848., 849., 850., 851., 852., 853., 854., 855., 856., 857.,
       858., 859., 860., 861., 862., 863., 864., 865., 866., 867., 868.,
       869., 870., 871., 872., 873., 874., 875., 876., 877., 878., 879.,
       880., 881., 882., 883., 884., 885., 886., 887., 888., 889., 890.,
       891., 892., 893., 894., 895., 896., 897., 898., 899., 900., 901.,
       902., 903., 904., 905., 906., 907., 908., 909., 910., 911., 912.,
       913., 914., 915., 916., 917., 918., 919., 920., 921., 922., 923.,
       924., 925., 926., 927., 928., 929., 930., 931., 932., 933., 934.,
       935., 936., 937., 938., 939., 940., 941., 942., 943., 944., 945.,
       946., 947., 948., 949., 950., 951., 952., 953., 954., 955., 956.,
       957., 958., 959., 960., 961., 962., 963., 964., 965., 966., 967.,
       968., 969., 970., 971., 972., 973., 974., 975., 976., 977., 978.,
       979., 980., 981., 982., 983., 984., 985., 986., 987., 988., 989.,
       990., 991., 992., 993., 994., 995., 996., 997., 998., 999.],
      dtype=float32)
>>> data[0][0]
0.0
>>> data = np.arange(30_000_000, dtype='float32')
... data.resize((100_000, 300))
...
>>> data.nbytes
120000000
>>> data.nbytes / 1_000_000
120.0
>>> data.nbytes / 1_000_000
120.0
>>> filename = 'test_vectors_100k.memmap.np'
... fp = np.memmap(filename, dtype='float32', mode='w+', data.shape)
...
>>> filename = 'test_vectors_100k.memmap.np'
... fp = np.memmap(filename, dtype='float32', mode='w+', shape=data.shape)
...
>>> fp[:] = data[:]
>>> fp.filepath
>>> fp.filename
'/home/hobs/code/tangibleai/nessvec/test_vectors_100k.memmap.np'
>>> ls -hal
>>> ls -al
>>> fp.flush()
>>> ls -al
>>> newfp = np.memmap(filename, dtype='float32', mode='r', shape=(100_000, 300))
>>> newfp = np.memmap(filename, dtype='float32', mode='r', shape=(100_000, 300))
>>> newfp[0]
memmap([  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,
         11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,  21.,
         22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.,  30.,  31.,  32.,
         33.,  34.,  35.,  36.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,
         44.,  45.,  46.,  47.,  48.,  49.,  50.,  51.,  52.,  53.,  54.,
         55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  65.,
         66.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,
         77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,
         88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,
         99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 109.,
        110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120.,
        121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131.,
        132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142.,
        143., 144., 145., 146., 147., 148., 149., 150., 151., 152., 153.,
        154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164.,
        165., 166., 167., 168., 169., 170., 171., 172., 173., 174., 175.,
        176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186.,
        187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 197.,
        198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208.,
        209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219.,
        220., 221., 222., 223., 224., 225., 226., 227., 228., 229., 230.,
        231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 241.,
        242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
        253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263.,
        264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274.,
        275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285.,
        286., 287., 288., 289., 290., 291., 292., 293., 294., 295., 296.,
        297., 298., 299.], dtype=float32)
>>> newfp[1]
memmap([300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310.,
        311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321.,
        322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332.,
        333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343.,
        344., 345., 346., 347., 348., 349., 350., 351., 352., 353., 354.,
        355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 365.,
        366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376.,
        377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387.,
        388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398.,
        399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409.,
        410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420.,
        421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431.,
        432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442.,
        443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453.,
        454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464.,
        465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475.,
        476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486.,
        487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497.,
        498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
        509., 510., 511., 512., 513., 514., 515., 516., 517., 518., 519.,
        520., 521., 522., 523., 524., 525., 526., 527., 528., 529., 530.,
        531., 532., 533., 534., 535., 536., 537., 538., 539., 540., 541.,
        542., 543., 544., 545., 546., 547., 548., 549., 550., 551., 552.,
        553., 554., 555., 556., 557., 558., 559., 560., 561., 562., 563.,
        564., 565., 566., 567., 568., 569., 570., 571., 572., 573., 574.,
        575., 576., 577., 578., 579., 580., 581., 582., 583., 584., 585.,
        586., 587., 588., 589., 590., 591., 592., 593., 594., 595., 596.,
        597., 598., 599.], dtype=float32)
>>> from pathlib import Path
>>> Path(filepath).name
>>> Path(filename).name
'test_vectors_100k.memmap.np'
>>> filepath = Path(filename).absolute()
>>> filepath
PosixPath('/home/hobs/code/tangibleai/nessvec/test_vectors_100k.memmap.np')
>>> filepath.stat()
os.stat_result(st_mode=33204, st_ino=23725050, st_dev=66306, st_nlink=1, st_uid=1000, st_gid=1000, st_size=120000000, st_atime=1648073563, st_mtime=1648073389, st_ctime=1648073389)
>>> filepath.stat().st_size
120000000
>>> del fp
>>> newfp
memmap([[0.0000000e+00, 1.0000000e+00, 2.0000000e+00, ..., 2.9700000e+02,
         2.9800000e+02, 2.9900000e+02],
        [3.0000000e+02, 3.0100000e+02, 3.0200000e+02, ..., 5.9700000e+02,
         5.9800000e+02, 5.9900000e+02],
        [6.0000000e+02, 6.0100000e+02, 6.0200000e+02, ..., 8.9700000e+02,
         8.9800000e+02, 8.9900000e+02],
        ...,
        [2.9999100e+07, 2.9999100e+07, 2.9999102e+07, ..., 2.9999396e+07,
         2.9999398e+07, 2.9999400e+07],
        [2.9999400e+07, 2.9999400e+07, 2.9999402e+07, ..., 2.9999696e+07,
         2.9999698e+07, 2.9999700e+07],
        [2.9999700e+07, 2.9999700e+07, 2.9999702e+07, ..., 2.9999996e+07,
         2.9999998e+07, 3.0000000e+07]], dtype=float32)
>>> newfp.nbytes
120000000
>>> import psutil
>>> import os
>>> os.cpu_count
<function posix.cpu_count()>
>>> os.cpu_count()
8
>>> import sys
>>> !conda install psutil
>>> import psutil
>>> psutil.virtual_memory()
svmem(total=67213549568, available=58048839680, percent=13.6, used=6782115840, free=51352068096, active=2944856064, inactive=9923919872, buffers=1102045184, cached=7977320448, shared=1637175296, slab=1621016576)
>>> psutil.virtual_memory().used
6781878272
>>> who
>>> del data
>>> psutil.virtual_memory().used
6773637120
>>> del newfp
>>> del sys
>>> del os
>>> who
>>> psutil.virtual_memory().used
6790012928
>>> newfp.flush()
>>> who
>>> newfp = np.memmap(filename, dtype='float32', mode='r', shape=(100_000, 300))
>>> psutil.virtual_memory().used
6803689472
>>> before_newfp = 6790012928
>>> newfp_nbytes = psutil.virtual_memory().used - before_newfp
>>> newfp_nbytes
31383552
>>> newfp_nbytes / 1_000_000
31.383552
>>> filepath = Path(filename).absolute()
>>> filepath.stat().st_size / 1_000_000
120.0
>>> filename = 'test_vectors_100Mx300.memmap.np'
... mm = np.memmap(filename, dtype='float32', mode='w+', shape=(100_000_000, 300))
...
>>> mm_nbytes = psutil.virtual_memory().used - before_newfp
>>> mm_nbytes
19513344
>>> mm_nbytes / 1_000_000
19.513344
>>> del newfp
>>> data = np.arange(np.product(shape), dtype='float32')
... 
... data.resize((100_000, 300))
...
>>> shape=(100_000_000, 300)
>>> filename = 'test_vectors_100Mx300.memmap.np'
... mm = np.memmap(filename, dtype='float32', mode='w+', shape=shape)
...
>>> after_mm = psutil.virtual_memory().used
>>> mm_nbytes = after_mm - before_newfp
>>> mm_nbytes / 1_000_000
-43.077632
>>> del mm
>>> who
>>> del after_mm
>>> del before_newfp
>>> who
>>> del mm_nbytes
>>> del newfp_nbytes
>>> mm0 = psutil.virtual_memory().used
>>> filename = f'test_vectors_{shape[0]}x{shape[1]}x{dtype}.memmap.np'
... mm = np.memmap(filename, dtype='float32', mode='w+', shape=shape)
...
>>> dtype = 'float32'
>>> filename = f'test_vectors_{shape[0]}x{shape[1]}x{dtype}.memmap.np'
... mm = np.memmap(filename, dtype='float32', mode='w+', shape=shape)
...
>>> mm1 = psutil.virtual_memory().used
>>> mm1
6756462592
>>> data = np.arange(np.product(shape), dtype='float32')
... data.resize(shape)
... mm[:] = data[:]
...
>>> mm[:] = np.arange(np.product(shape), dtype='float32')
>>> tot = np.product(shape)
... chunksize = tot / 120
... for chunk0 in range(tot / chunksize):
...     mm[chunk0:chunk0+chunksize] = chunk0 * chunksize + np.arange(chunksize, dtype='float32')
...
>>> chunksize
250000000.0
>>> tot = np.product(shape)
... chunksize = tot // 120
... for chunk0 in range(tot // chunksize):
...     mm[chunk0:chunk0+chunksize] = chunk0 * chunksize + np.arange(chunksize, dtype='float32')
...
>>> tot = np.product(shape)
... chunksize = tot // 120
... for chunk0 in range(tot // chunksize):
...     print(chunk0, chunk0 * chunksize)
...     mm[chunk0:chunk0+chunksize] = chunk0 * chunksize + np.arange(chunksize, dtype='float32')
...
>>> tot // chunksize
120
>>> chunksize
250000000
>>> tot = np.product(shape)
... chunksize = shape[1]
... for rownum in range(tot // chunksize):
...     print(rownum, rownum * chunksize)
...     mm[rownum] = rownum * chunksize + np.arange(chunksize, dtype='float32')
...
>>> tot = np.product(shape)
... chunksize = shape[1]
... for rownum in range(tot // chunksize):
...     if not rownum // 10000: 
...         print(rownum, rownum * chunksize)
...     mm[rownum] = rownum * chunksize + np.arange(chunksize, dtype='float32')
...
>>> import tqdm
... tot = np.product(shape)
... chunksize = shape[1]
... for rownum in tqdm(range(tot // chunksize)):
...     mm[rownum] = rownum * chunksize + np.arange(chunksize, dtype='float32')
...     if not rownum % 1000:
...         mm.flush()
...
>>> from tqdm import tqdm
... tot = np.product(shape)
... chunksize = shape[1]
... for rownum in tqdm(range(tot // chunksize)):
...     mm[rownum] = rownum * chunksize + np.arange(chunksize, dtype='float32')
...     if not rownum % 1000:
...         mm.flush()
...
>>> mm[200]
memmap([60000., 60001., 60002., 60003., 60004., 60005., 60006., 60007.,
        60008., 60009., 60010., 60011., 60012., 60013., 60014., 60015.,
        60016., 60017., 60018., 60019., 60020., 60021., 60022., 60023.,
        60024., 60025., 60026., 60027., 60028., 60029., 60030., 60031.,
        60032., 60033., 60034., 60035., 60036., 60037., 60038., 60039.,
        60040., 60041., 60042., 60043., 60044., 60045., 60046., 60047.,
        60048., 60049., 60050., 60051., 60052., 60053., 60054., 60055.,
        60056., 60057., 60058., 60059., 60060., 60061., 60062., 60063.,
        60064., 60065., 60066., 60067., 60068., 60069., 60070., 60071.,
        60072., 60073., 60074., 60075., 60076., 60077., 60078., 60079.,
        60080., 60081., 60082., 60083., 60084., 60085., 60086., 60087.,
        60088., 60089., 60090., 60091., 60092., 60093., 60094., 60095.,
        60096., 60097., 60098., 60099., 60100., 60101., 60102., 60103.,
        60104., 60105., 60106., 60107., 60108., 60109., 60110., 60111.,
        60112., 60113., 60114., 60115., 60116., 60117., 60118., 60119.,
        60120., 60121., 60122., 60123., 60124., 60125., 60126., 60127.,
        60128., 60129., 60130., 60131., 60132., 60133., 60134., 60135.,
        60136., 60137., 60138., 60139., 60140., 60141., 60142., 60143.,
        60144., 60145., 60146., 60147., 60148., 60149., 60150., 60151.,
        60152., 60153., 60154., 60155., 60156., 60157., 60158., 60159.,
        60160., 60161., 60162., 60163., 60164., 60165., 60166., 60167.,
        60168., 60169., 60170., 60171., 60172., 60173., 60174., 60175.,
        60176., 60177., 60178., 60179., 60180., 60181., 60182., 60183.,
        60184., 60185., 60186., 60187., 60188., 60189., 60190., 60191.,
        60192., 60193., 60194., 60195., 60196., 60197., 60198., 60199.,
        60200., 60201., 60202., 60203., 60204., 60205., 60206., 60207.,
        60208., 60209., 60210., 60211., 60212., 60213., 60214., 60215.,
        60216., 60217., 60218., 60219., 60220., 60221., 60222., 60223.,
        60224., 60225., 60226., 60227., 60228., 60229., 60230., 60231.,
        60232., 60233., 60234., 60235., 60236., 60237., 60238., 60239.,
        60240., 60241., 60242., 60243., 60244., 60245., 60246., 60247.,
        60248., 60249., 60250., 60251., 60252., 60253., 60254., 60255.,
        60256., 60257., 60258., 60259., 60260., 60261., 60262., 60263.,
        60264., 60265., 60266., 60267., 60268., 60269., 60270., 60271.,
        60272., 60273., 60274., 60275., 60276., 60277., 60278., 60279.,
        60280., 60281., 60282., 60283., 60284., 60285., 60286., 60287.,
        60288., 60289., 60290., 60291., 60292., 60293., 60294., 60295.,
        60296., 60297., 60298., 60299.], dtype=float32)
>>> mm[200][0]
60000.0
>>> mm[200][0] / 300
200.0
>>> mm[2000][0] / 300
2000.0
>>> mm[20000][0] / 300
20000.0
>>> mm[200000][0] / 300
200000.0
>>> mm[2000000][0] / 300
2000000.0
>>> mm[20000000][0] / 300
20000000.0
>>> mm[200000000][0] / 300
>>> mm[100000000][0] / 300
>>> mm[100000000-1][0] / 300
0.0
>>> mm[90000000][0] / 300
0.0
>>> mm[10000000][0] / 300
10000000.0
>>> mm[20000000][0] / 300
20000000.0
>>> mm[30000000][0] / 300
0.0
>>> del mm_nbytes
>>> del mm.nbytes
>>> del mm.nbytes
>>> mm.nbytes
120000000000
>>> mm2 = psutil.virtual_memory().used
>>> mm2 - mm1
89063424
>>> mm2 - mm1 / 1_000_000
6845519259.537408
>>> (mm2 - mm1) / 1_000_000
89.063424
>>> 1000 * 300 * 8
2400000
>>> 1000 * 300 * 8 / 1_000_000
2.4
>>> %history -o -p -f np_memmap_test_120GB.hist.ipy
