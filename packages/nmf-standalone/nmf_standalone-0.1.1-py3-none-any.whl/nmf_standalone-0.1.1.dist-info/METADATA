Metadata-Version: 2.4
Name: nmf-standalone
Version: 0.1.1
Summary: A comprehensive NMF (Non-negative Matrix Factorization) topic modeling system supporting both Turkish and English text processing
Author-email: Emir Karayagiz <emirkyzmain@gmail.com>
Maintainer-email: Emir Karayagiz <emirkyzmain@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/emirkarayagiz/nmf-standalone
Project-URL: Repository, https://github.com/emirkarayagiz/nmf-standalone
Project-URL: Documentation, https://nmf-standalone.readthedocs.io
Project-URL: Issues, https://github.com/emirkarayagiz/nmf-standalone/issues
Keywords: nlp,topic-modeling,nmf,non-negative-matrix-factorization,turkish,english,text-processing,machine-learning
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Text Processing :: Linguistic
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: gensim==4.3.2
Requires-Dist: levenshtein==0.20.9
Requires-Dist: matplotlib==3.10.1
Requires-Dist: nltk==3.8.1
Requires-Dist: numpy==1.26.4
Requires-Dist: openpyxl>=3.1.5
Requires-Dist: pandas==2.2.1
Requires-Dist: pillow==11.1.0
Requires-Dist: scikit-learn==1.3.2
Requires-Dist: scipy==1.10.1
Requires-Dist: seaborn>=0.13.2
Requires-Dist: sqlalchemy==2.0.27
Requires-Dist: tokenizers==0.21.1
Requires-Dist: wordcloud==1.9.4
Requires-Dist: emoji>=2.14.1
Provides-Extra: web
Requires-Dist: flask==3.0.2; extra == "web"
Requires-Dist: flask-cors==4.0.0; extra == "web"
Requires-Dist: flask-migrate==4.0.5; extra == "web"
Requires-Dist: flask-socketio==5.3.6; extra == "web"
Requires-Dist: flask-sqlalchemy==3.1.1; extra == "web"
Requires-Dist: celery==5.3.6; extra == "web"
Requires-Dist: redis==5.0.1; extra == "web"
Requires-Dist: requests==2.32.0; extra == "web"
Provides-Extra: docs
Requires-Dist: sphinx>=8.2.3; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints>=3.2.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=3.0.2; extra == "docs"
Requires-Dist: myst-parser>=4.0.1; extra == "docs"
Provides-Extra: dev
Requires-Dist: ipykernel>=6.29.5; extra == "dev"
Requires-Dist: pip>=25.1.1; extra == "dev"
Dynamic: license-file

# NMF Standalone

[![PyPI version](https://badge.fury.io/py/nmf-standalone.svg)](https://badge.fury.io/py/nmf-standalone)
[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

A comprehensive NMF (Non-negative Matrix Factorization) topic modeling system that supports both Turkish and English text processing. This package provides a complete pipeline from data preprocessing to topic extraction and visualization, with specialized support for Turkish language features like emoji processing and modern tokenization techniques.

## Features

- **Dual Language Support**: Optimized processing for both Turkish and English texts
- **Advanced Turkish Processing**: BPE/WordPiece tokenization, emoji mapping, and language-specific cleaning
- **Multiple NMF Algorithms**: Standard NMF and Projective NMF (OPNMF) implementations
- **Comprehensive Analysis**: Coherence evaluation, word clouds, topic distributions, and Excel exports
- **Easy-to-Use CLI**: Simple command-line interface for common tasks
- **Extensible Architecture**: Modular design for easy customization and extension

## Quick Start

### Installation

Install from PyPI:

```bash
pip install nmf-standalone
```

Or install with optional dependencies:

```bash
# For web interface support
pip install nmf-standalone[web]

# For documentation building
pip install nmf-standalone[docs]

# Install all optional dependencies
pip install nmf-standalone[web,docs,dev]
```

### Basic Usage

**Command Line Interface:**

```bash
# Basic topic modeling for Turkish text
nmf-standalone data.csv --column review_text --topics 5 --language TR

# English text with custom settings
nmf-standalone data.csv --column content --topics 10 --language EN --gen-wordcloud

# Coherence evaluation to find optimal topic count
nmf-coherence data.csv --column text --min-topics 2 --max-topics 15 --language TR
```

**Python API:**

```python
import nmf_standalone

# Load and process your data
results = nmf_standalone.run_standalone_nmf({
    'filepath': 'your_data.csv',
    'desired_columns': 'text_column',
    'LANGUAGE': 'TR',  # or 'EN'
    'DESIRED_TOPIC_COUNT': 5,
    'gen_cloud': True
})
```

## CLI Reference

### nmf-standalone

Main command for topic modeling:

```bash
nmf-standalone INPUT_FILE --column COLUMN_NAME [OPTIONS]

Options:
  --topics, -t INTEGER        Number of topics to extract (default: 5)
  --language, -l [TR|EN]      Language of text data (default: TR)
  --tokenizer [bpe|wordpiece] Tokenizer for Turkish text (default: bpe)
  --nmf-type [nmf|opnmf]      NMF algorithm type (default: nmf)
  --output-dir, -o PATH       Output directory (default: ./Output)
  --gen-wordcloud             Generate word cloud visualizations
  --gen-topic-dist            Generate topic distribution plots
  --n-top-words INTEGER       Top words per topic (default: 10)
  --lemmatize                 Enable lemmatization for English
```

### nmf-coherence

Coherence evaluation for optimal topic selection:

```bash
nmf-coherence INPUT_FILE --column COLUMN_NAME [OPTIONS]

Options:
  --min-topics INTEGER        Minimum topics to test (default: 2)
  --max-topics INTEGER        Maximum topics to test (default: 15)
  --step INTEGER              Step size for topic range (default: 1)
  --language, -l [TR|EN]      Language of text data (default: TR)
  --tokenizer [bpe|wordpiece] Tokenizer for Turkish text (default: bpe)
```

This project performs topic modeling on text data using Non-negative Matrix Factorization (NMF). It supports both English and Turkish languages and can process `.csv` and `.xlsx` files.

## Project Structure

```
nmf-standalone/
├── functions/
│   ├── common_language/          # Shared functionality across languages
│   │   ├── emoji_processor.py    # Emoji handling utilities
│   │   └── topic_analyzer.py     # Cross-language topic analysis
│   ├── english/                  # English text processing modules
│   │   ├── english_preprocessor.py      # Text cleaning and preprocessing
│   │   ├── english_vocabulary.py        # Vocabulary creation
│   │   ├── english_text_encoder.py      # Text-to-numerical conversion
│   │   ├── english_topic_analyzer.py    # Topic extraction utilities
│   │   ├── english_topic_output.py      # Topic visualization and output
│   │   └── english_nmf_core.py          # NMF implementation for English
│   ├── nmf/                      # NMF algorithm implementations
│   │   ├── nmf_orchestrator.py          # Main NMF interface
│   │   ├── nmf_initialization.py        # Matrix initialization strategies
│   │   ├── nmf_multiplicative_updates.py # Standard NMF algorithm
│   │   ├── nmf_projective_basic.py      # Basic projective NMF
│   │   └── nmf_projective_enhanced.py   # Enhanced projective NMF
│   ├── tfidf/                    # TF-IDF calculation modules
│   │   ├── tfidf_english_calculator.py  # English TF-IDF implementation
│   │   ├── tfidf_turkish_calculator.py  # Turkish TF-IDF implementation
│   │   ├── tfidf_tf_functions.py        # Term frequency functions
│   │   ├── tfidf_idf_functions.py       # Inverse document frequency functions
│   │   └── tfidf_bm25_turkish.py        # BM25 implementation for Turkish
│   └── turkish/                  # Turkish text processing modules
│       ├── turkish_preprocessor.py      # Turkish text cleaning
│       ├── turkish_tokenizer_factory.py # Tokenizer creation and training
│       ├── turkish_text_encoder.py      # Text-to-numerical conversion
│       └── turkish_tfidf_generator.py   # TF-IDF matrix generation
├── utils/                        # Helper utilities
│   ├── other/
├── veri_setleri/                 # Input datasets directory
├── instance/                     # Database storage
├── Output/                       # Generated outputs
├── pyproject.toml
├── README.md
├── requirements.txt
├── standalone_nmf.py
└── uv.lock
```

-   **`functions/`**: Contains the core logic for the NMF pipeline with a well-organized structure:
    -   **`common_language/`**: Shared functionality that works across both languages (emoji processing, topic analysis)
    -   **`english/`**: English-specific text processing modules with descriptive names
    -   **`turkish/`**: Turkish-specific text processing modules with descriptive names  
    -   **`nmf/`**: NMF algorithm implementations (standard, projective, initialization strategies)
    -   **`tfidf/`**: TF-IDF calculation modules for both languages with various weighting schemes
-   **`utils/`**: Includes helper functions for tasks like generating word clouds, calculating coherence scores, and exporting results.
-   **`veri_setleri/`**: Default directory for input datasets.
-   **`instance/`**: Stores databases created during the process (e.g., `topics.db`, `scopus.db`).
-   **`Output/`**: Directory where all the output files, such as topic reports, word clouds, and distribution plots, are saved.
-   **`standalone_nmf.py`**: The main executable script to run the topic modeling process.
-   **`requirements.txt`**: A list of Python packages required for the project.

## File Naming Convention

This project follows a consistent and descriptive naming convention to improve code organization and readability:

### Language-Specific Modules
- **English modules**: `english_{functionality}.py` (e.g., `english_preprocessor.py`, `english_vocabulary.py`)
- **Turkish modules**: `turkish_{functionality}.py` (e.g., `turkish_preprocessor.py`, `turkish_tokenizer_factory.py`)

### Algorithm and Utility Modules
- **NMF algorithms**: `nmf_{algorithm_type}.py` (e.g., `nmf_orchestrator.py`, `nmf_projective_basic.py`)
- **TF-IDF modules**: `tfidf_{functionality}.py` (e.g., `tfidf_english_calculator.py`, `tfidf_tf_functions.py`)

### Shared Functionality
- **Common language modules**: Located in `common_language/` for cross-language functionality (e.g., `emoji_processor.py`, `topic_analyzer.py`)

This naming convention replaces the previous mixed Turkish/English naming (e.g., `sozluk.py` → `english_vocabulary.py`, `temizle.py` → `turkish_preprocessor.py`) making the codebase more accessible and self-documenting.

## Installation

To run this project, it's recommended to use a virtual environment.

1.  **Create a virtual environment:**

    ```bash
    python -m venv .venv
    source .venv/bin/activate
    ```

2.  **Install dependencies using `uv`:**

    This project uses `uv` for fast dependency management. If you don't have `uv`, you can install it following the official instructions.

    ```bash
    uv pip install -r requirements.txt
    ```

## Usage

The main entry point for running the topic modeling is the `standalone_nmf.py` script. You can modify this script to set the parameters for your analysis.

The `run_standalone_nmf` function in the script is what you need to configure and run.

Here's an example of how you might call this function within the script:

```python
from functions.common_language.emoji_processor import EmojiMap

if __name__ == "__main__":
    # Example for a Turkish dataset
    turkish_options = {
        "LEMMATIZE": False,
        "N_TOPICS": 15,
        "DESIRED_TOPIC_COUNT": 10,
        "tokenizer_type": "bpe",
        "tokenizer": None,
        "nmf_type": "nmf",
        "LANGUAGE": "TR",
        "separator": ",",
        "gen_cloud": True,
        "save_excel": True,
        "gen_topic_distribution": True,
        "filter_app": False,
        "filter_app_name": "",
        "emoji_map": EmojiMap()
    }
    
    run_standalone_nmf(
        filepath="veri_setleri/your_turkish_data.csv",
        table_name="my_turkish_analysis",
        desired_columns="text_column",
        options=turkish_options
    )

    # Example for an English dataset
    english_options = {
        "LEMMATIZE": True,
        "N_TOPICS": 20,
        "DESIRED_TOPIC_COUNT": 8,
        "tokenizer_type": None,
        "tokenizer": None,
        "nmf_type": "opnmf",
        "LANGUAGE": "EN",
        "separator": ",",
        "gen_cloud": True,
        "save_excel": True,
        "gen_topic_distribution": True,
        "filter_app": False,
        "filter_app_name": "",
        "emoji_map": None
    }
    
    run_standalone_nmf(
        filepath="veri_setleri/your_english_data.csv",
        table_name="my_english_analysis",
        desired_columns="text_column",
        options=english_options
    )

```

To run the script, simply execute it from your terminal:

```bash
python standalone_nmf.py
```

### Parameters

The `run_standalone_nmf` function takes the following parameters:

-   `filepath`: Path to your input `.csv` or `.xlsx` file.
-   `table_name`: A unique name for your analysis run. This is used for naming output files and database tables.
-   `desired_columns`: The name of the column in your data file that contains the text to be analyzed.
-   `options`: A dictionary containing all configuration options:

#### Options Dictionary Structure

**Core Parameters:**
-   `LANGUAGE`: `"TR"` for Turkish or `"EN"` for English.
-   `DESIRED_TOPIC_COUNT`: The number of topics to extract.
-   `N_TOPICS`: The number of top words to display for each topic.
-   `nmf_type`: The NMF algorithm to use (`"nmf"` or `"opnmf"`).

**Language-Specific Parameters:**
-   `LEMMATIZE`: Set to `True` for English text to enable lemmatization (ignored for Turkish).
-   `tokenizer_type`: For Turkish, choose between `"bpe"` (Byte-Pair Encoding) or `"wordpiece"`.
-   `tokenizer`: Pre-initialized tokenizer instance (optional, set to `None` for auto-initialization).
-   `emoji_map`: EmojiMap instance for Turkish emoji processing (use `EmojiMap()` for Turkish, `None` for English).

**File Processing Parameters:**
-   `separator`: The separator used in your `.csv` file (e.g., `,`, `;`).
-   `filter_app`: Set to `True` to filter data by application name.
-   `filter_app_name`: Application name to filter by (when `filter_app` is `True`).

**Output Generation Parameters:**
-   `gen_cloud`: Set to `True` to generate word cloud images for each topic.
-   `save_excel`: Set to `True` to export results to Excel format.
-   `gen_topic_distribution`: Set to `True` to generate topic distribution plots.

## Outputs

The script generates several outputs in the `Output/` directory, organized in a subdirectory named after your `table_name`:

-   **Topic-Word Excel File**: An `.xlsx` file containing the top words for each topic and their scores.
-   **Word Clouds**: PNG images of word clouds for each topic.
-   **Topic Distribution Plot**: A plot showing the distribution of documents across topics.
-   **Coherence Scores**: A JSON file with coherence scores for the topics.
-   **Top Documents**: A JSON file listing the most representative documents for each topic.
