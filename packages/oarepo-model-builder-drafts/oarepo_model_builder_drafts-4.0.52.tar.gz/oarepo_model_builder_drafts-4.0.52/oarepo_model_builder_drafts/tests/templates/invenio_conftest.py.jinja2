from invenio_access.permissions import system_identity
from {{ vars.proxy.module }} import {{ vars.service.proxy }}
{{ vars.record.class|generate_import }}
{{ published_record.record.class|generate_import }}

@pytest.fixture(scope="function")
def {{ fixtures.sample_record }}(app, db, input_data):
    with UnitOfWork(db.session) as uow:
        record = {{ vars.record.class|base_name }}.create(input_data)
        uow.register(RecordCommitOp(record, {{ vars.service.proxy }}.indexer, True))
        uow.commit()
        return record

@pytest.fixture()
def vocab_cf(app, db, cache):
    from oarepo_runtime.services.custom_fields.mappings import prepare_cf_indices

    prepare_cf_indices()
    ThesisDraft.index.refresh()


@pytest.fixture
def published_record_factory(record_service):
    """Create a draft and publish it."""
    def create_record(input_data):
        draft = record_service.create(system_identity, input_data)
        published_record = record_service.publish(system_identity, draft.data["id"])
        record = {{ published_record.record.class|base_name }}.pid.resolve(published_record["id"])
        return record
    return create_record

@pytest.fixture
def sample_published_record(record_service, published_record_factory, input_data):
    """Create a draft and publish it."""
    return published_record_factory(input_data)

#--- quick fix
from flask_principal import Identity, Need, UserNeed

@pytest.fixture()
def client_with_login(client, user):
    """Log in a user to the client."""
    login_user(user)
    login_user_via_session(client, email=user.email)
    return client

@pytest.fixture(scope="module")
def identity_simple():
    """Simple identity fixture."""
    i = Identity(1)
    i.provides.add(UserNeed(1))
    i.provides.add(Need(method="system_role", value="any_user"))
    i.provides.add(Need(method="system_role", value="authenticated_user"))
    return i

@pytest.fixture(scope="function")
def sample_draft_with_owner(record_service, input_data, identity_simple):
    draft = record_service.create(identity_simple, input_data)
    return draft._obj
@pytest.fixture
def link_api2testclient():
    def _link_api2testclient(api_link):
        base_string = "https://127.0.0.1:5000/api/"
        return api_link[len(base_string) - 1 :]
    return _link_api2testclient
