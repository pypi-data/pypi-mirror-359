"""
Django settings for openbase project.

Generated by 'django-admin startproject' using Django 4.2.
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    if os.environ.get("DEBUG", "0") == "1":
        SECRET_KEY = "django-insecure-dev-key-only-for-local-development"
    else:
        raise ValueError("SECRET_KEY environment variable is required in production")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "0") == "1"

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# Detect if we're running on localhost/development
IS_LOCAL_DEV = any(
    host in ["localhost", "127.0.0.1", "0.0.0.0"] for host in ALLOWED_HOSTS
)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "openbase.openbase_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "openbase.config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "openbase.config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework configuration
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    # Security: Disable browsable API in production
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ]
    + (["rest_framework.renderers.BrowsableAPIRenderer"] if DEBUG else []),
    # Rate limiting (if django-ratelimit is installed)
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/hour" if not DEBUG else "1000/hour",
        "user": "1000/hour" if not DEBUG else "10000/hour",
    },
}

# CORS settings - more restrictive in production
if IS_LOCAL_DEV or DEBUG:
    # Development: Allow all origins
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True
else:
    # Production: Restrict to specific origins
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = os.environ.get("CORS_ALLOWED_ORIGINS", "").split(",")
    CORS_ALLOW_CREDENTIALS = True


# Custom settings for Django project analysis
# Parse comma-separated list of app directories
apps_dirs_str = os.environ.get("DJANGO_PROJECT_APPS_DIR", "")
if not apps_dirs_str:
    raise ValueError("DJANGO_PROJECT_APPS_DIR environment variable is required")

# Split by comma, strip whitespace, and convert to Path objects
DJANGO_PROJECT_APPS_DIRS = [
    Path(dir_path.strip()).resolve()
    for dir_path in apps_dirs_str.split(",")
    if dir_path.strip()
]

# Keep backward compatibility - first directory is the primary one
DJANGO_PROJECT_APPS_DIR = (
    DJANGO_PROJECT_APPS_DIRS[0] if DJANGO_PROJECT_APPS_DIRS else None
)

DJANGO_PROJECT_DIR = Path(os.environ["DJANGO_PROJECT_DIR"]).resolve()

# Get API prefix from environment variable, default to '/api'
API_PREFIX = os.getenv("DJANGO_API_PREFIX", "/api").strip("/")

# Security: Whitelist of allowed Django management commands
ALLOWED_DJANGO_COMMANDS = {
    # Core Django commands
    "migrate",
    "makemigrations",
    "runserver",
    "shell",
    "dbshell",
    "check",
    "showmigrations",
    "sqlmigrate",
    "inspectdb",
    "diffsettings",
    # Static files and assets
    "collectstatic",
    "findstatic",
    # Data management
    "loaddata",
    "dumpdata",
    "flush",
    # User management
    "createsuperuser",
    "changepassword",
    # Testing
    "test",
    # Development and debugging
    "help",
    "version",
    "startapp",
    "startproject",
    # Internationalization
    "compilemessages",
    "makemessages",
    # Sessions and cache
    "clearsessions",
    "createcachetable",
    # Migration utilities
    "squashmigrations",
    # Common custom commands (add project-specific ones as needed)
    "import_data",
    "export_data",
    "cleanup",
    "backup_db",
    "restore_db",
    "send_emails",
    "process_queue",
    "update_search_index",
    "rebuild_cache",
}

# Logging configuration for security monitoring
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "security.log"),
            "formatter": "verbose",
        },
        "console": {
            "level": "INFO" if DEBUG else "WARNING",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django.security": {
            "handlers": ["file", "console"],
            "level": "WARNING",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["file", "console"],
            "level": "WARNING",
            "propagate": True,
        },
    },
}
