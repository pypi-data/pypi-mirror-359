name: OpenPerturbation Professional CI/CD Pipeline
# Author: Nik Jois <nikjois@llamasearch.ai>

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  # Linting and Code Quality
  lint-and-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install black isort flake8 mypy bandit safety pyright
        pip install -r requirements.txt
        
    - name: Code formatting with Black
      run: black --check --diff src/ tests/
      
    - name: Import sorting with isort
      run: isort --check-only --diff src/ tests/
      
    - name: Linting with flake8
      run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
      
    - name: Type checking with mypy
      run: mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true
      
    - name: Type checking with Pyright
      run: pyright src/
      continue-on-error: true
      
    - name: Security check with bandit
      run: bandit -r src/ -ll
      continue-on-error: true
      
    - name: Dependency vulnerability check
      run: safety check --json
      continue-on-error: true

  # Comprehensive Testing Suite
  test-comprehensive:
    runs-on: ubuntu-latest
    name: Comprehensive Test Suite
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev libopencv-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pytest pytest-cov pytest-asyncio pytest-benchmark httpx
        pip install -r requirements.txt
        
    - name: Install package
      run: pip install -e .
      
    - name: Run comprehensive tests
      run: |
        pytest tests/test_comprehensive.py -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=test-results-${{ matrix.python-version }}.xml \
          --benchmark-json=benchmark-results-${{ matrix.python-version }}.json
      env:
        PYTHONPATH: ${{ github.workspace }}/src
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results-${{ matrix.python-version }}.xml
          htmlcov/
          benchmark-results-${{ matrix.python-version }}.json

  # API Integration Tests
  test-api:
    runs-on: ubuntu-latest
    name: API Integration Tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx pytest-asyncio
        
    - name: Install package
      run: pip install -e .
        
    - name: Start API server
      run: |
        python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 15  # Wait for server to start
        
    - name: Test API health
      run: curl -f http://localhost:8000/health
        
    - name: Run API integration tests
      run: |
        pytest tests/test_api.py -v
        pytest test_api_integration.py -v
        pytest test_complete_system.py -v
      env:
        PYTHONPATH: ${{ github.workspace }}/src

  # OpenAI Agents SDK Integration Tests
  test-openai-agents:
    runs-on: ubuntu-latest
    name: OpenAI Agents SDK Integration
    needs: [test-comprehensive]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install openai pytest pytest-asyncio
        
    - name: Install package
      run: pip install -e .
        
    - name: Test OpenAI Agents integration
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python -m pytest tests/test_openai_agents.py -v
      if: env.OPENAI_API_KEY != ''
      
    - name: Test without OpenAI key (fallback tests)
      run: |
        python -m pytest tests/test_openai_agents.py -v -k "not test_actual_api"
      if: env.OPENAI_API_KEY == ''

  # Performance and Benchmark Tests
  test-performance:
    runs-on: ubuntu-latest
    name: Performance & Benchmark Tests
    needs: [test-comprehensive]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark locust
        
    - name: Install package
      run: pip install -e .
        
    - name: Run performance tests
      run: |
        pytest tests/benchmarks/ -v --benchmark-json=performance-results.json
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  # Docker Build and Security Scan
  build-docker:
    runs-on: ubuntu-latest
    name: Docker Build & Security Scan
    needs: [lint-and-quality, test-comprehensive]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        tags: openperturbation:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: openperturbation:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Test Docker container
      run: |
        docker run -d -p 8000:8000 --name test-container openperturbation:latest
        sleep 30
        curl -f http://localhost:8000/health || echo "Health check failed, checking logs..."
        docker logs test-container
        docker stop test-container

  # Documentation Build and Deploy
  build-docs:
    runs-on: ubuntu-latest
    name: Documentation Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-autorefs mkdocstrings[python]
        pip install -r requirements.txt
        
    - name: Build documentation
      run: mkdocs build --strict
      
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # Build and Push Container Images
  deploy-containers:
    runs-on: ubuntu-latest
    name: Build & Push Container Images
    needs: [lint-and-quality, test-comprehensive, test-api, build-docker]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          VCS_REF=${{ github.sha }}

  # PyPI Package Build and Publish
  publish-pypi:
    runs-on: ubuntu-latest
    name: Build & Publish to PyPI
    needs: [lint-and-quality, test-comprehensive, test-api, test-openai-agents]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel build twine
        
    - name: Build distribution packages
      run: python -m build
      
    - name: Check distribution packages
      run: twine check dist/*
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
      if: env.TWINE_PASSWORD != ''

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Deploy to Staging Environment
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [deploy-containers]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying OpenPerturbation to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        # Add your staging deployment logic here
        # Example: kubectl apply, helm upgrade, etc.

  # Deploy to Production Environment
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [deploy-containers, publish-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying OpenPerturbation to production environment..."
        echo "Version: ${{ github.ref_name }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        # Add your production deployment logic here

  # Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    needs: [publish-pypi, deploy-containers]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        body: |
          ## OpenPerturbation Release ${{ github.ref_name }}
          
          **Author:** Nik Jois <nikjois@llamasearch.ai>
          
          ### What's Changed
          - Full OpenAI Agents SDK integration
          - Comprehensive FastAPI endpoints
          - Complete automated testing suite
          - Professional Docker containerization
          - Advanced perturbation biology analysis capabilities
          
          ### Installation
          ```bash
          pip install openperturbation==${{ github.ref_name }}
          ```
          
          ### Docker
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          See the [documentation](https://github.com/${{ github.repository }}/blob/main/README.md) for usage instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Final Notification and Status
  notify-completion:
    runs-on: ubuntu-latest
    name: Pipeline Completion Notification
    needs: [lint-and-quality, test-comprehensive, test-api, test-openai-agents, test-performance, build-docker, build-docs, security-scan]
    if: always()
    
    steps:
    - name: Pipeline Success Notification
      if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
      run: |
        echo "✅ OpenPerturbation CI/CD Pipeline completed successfully!"
        echo "All quality checks, tests, and builds have passed."
        echo "Ready for deployment and release."
      
    - name: Pipeline Failure Notification  
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "❌ OpenPerturbation CI/CD Pipeline has failures!"
        echo "Please check the failed jobs and fix the issues."
        exit 1 