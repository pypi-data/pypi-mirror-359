/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/baahl-nyu/orion */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */











#line 3 "utils.go"
#include <stdlib.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void NewBootstrapper(int* LogPs, int lenLogPs, int numSlots);
extern __declspec(dllexport) int Bootstrap(int ciphertextID, int numSlots);
extern __declspec(dllexport) void DeleteBootstrappers();
extern __declspec(dllexport) void NewEncoder();
extern __declspec(dllexport) int Encode(float* valuesPtr, int lenValues, int level, long unsigned int scale);

/* Return type for Decode */
struct Decode_return {
	float* r0;
	long unsigned int r1;
};
extern __declspec(dllexport) struct Decode_return Decode(int plaintextID);
extern __declspec(dllexport) void NewEncryptor();
extern __declspec(dllexport) void NewDecryptor();
extern __declspec(dllexport) int Encrypt(int plaintextID);
extern __declspec(dllexport) int Decrypt(int ciphertextID);
extern __declspec(dllexport) void NewEvaluator();
extern __declspec(dllexport) void AddRotationKey(int rotation);
extern __declspec(dllexport) int Negate(int ciphertextID);
extern __declspec(dllexport) int Rotate(int ciphertextID, int amount);
extern __declspec(dllexport) int RotateNew(int ciphertextID, int amount);
extern __declspec(dllexport) int Rescale(int ciphertextID);
extern __declspec(dllexport) int RescaleNew(int ciphertextID);
extern __declspec(dllexport) int AddScalar(int ciphertextID, float scalar);
extern __declspec(dllexport) int AddScalarNew(int ciphertextID, float scalar);
extern __declspec(dllexport) int SubScalar(int ciphertextID, float scalar);
extern __declspec(dllexport) int SubScalarNew(int ciphertextID, float scalar);
extern __declspec(dllexport) int MulScalarInt(int ciphertextID, int scalar);
extern __declspec(dllexport) int MulScalarIntNew(int ciphertextID, int scalar);
extern __declspec(dllexport) int MulScalarFloat(int ciphertextID, float scalar);
extern __declspec(dllexport) int MulScalarFloatNew(int ciphertextID, float scalar);
extern __declspec(dllexport) int AddPlaintext(int ciphertextID, int plaintextID);
extern __declspec(dllexport) int AddPlaintextNew(int ciphertextID, int plaintextID);
extern __declspec(dllexport) int SubPlaintext(int ciphertextID, int plaintextID);
extern __declspec(dllexport) int SubPlaintextNew(int ciphertextID, int plaintextID);
extern __declspec(dllexport) int MulPlaintext(int ciphertextID, int plaintextID);
extern __declspec(dllexport) int MulPlaintextNew(int ciphertextID, int plaintextID);
extern __declspec(dllexport) int AddCiphertext(int ctID0, int ctID1);
extern __declspec(dllexport) int AddCiphertextNew(int ctID0, int ctID1);
extern __declspec(dllexport) int SubCiphertext(int ctID0, int ctID1);
extern __declspec(dllexport) int SubCiphertextNew(int ctID0, int ctID1);
extern __declspec(dllexport) int MulRelinCiphertext(int ctID0, int ctID1);
extern __declspec(dllexport) int MulRelinCiphertextNew(int ctID0, int ctID1);
extern __declspec(dllexport) void NewKeyGenerator();
extern __declspec(dllexport) void GenerateSecretKey();
extern __declspec(dllexport) void GeneratePublicKey();
extern __declspec(dllexport) void GenerateRelinearizationKey();
extern __declspec(dllexport) void GenerateEvaluationKeys();

/* Return type for SerializeSecretKey */
struct SerializeSecretKey_return {
	char* r0;
	long unsigned int r1;
};
extern __declspec(dllexport) struct SerializeSecretKey_return SerializeSecretKey();
extern __declspec(dllexport) void LoadSecretKey(char* dataPtr, long unsigned int lenData);
extern __declspec(dllexport) void DeleteLinearTransform(int id);
extern __declspec(dllexport) void NewLinearTransformEvaluator();
extern __declspec(dllexport) int GenerateLinearTransform(int* diagIdxsC, int diagIdxsLen, float* diagDataC, int diagDataLen, int level, float bsgsRatio, char* ioModeC);
extern __declspec(dllexport) int EvaluateLinearTransform(int transformID, int ctxtID);

/* Return type for GetLinearTransformRotationKeys */
struct GetLinearTransformRotationKeys_return {
	int* r0;
	long unsigned int r1;
};
extern __declspec(dllexport) struct GetLinearTransformRotationKeys_return GetLinearTransformRotationKeys(int transformID);
extern __declspec(dllexport) void GenerateLinearTransformRotationKey(int galEl);

/* Return type for GenerateAndSerializeRotationKey */
struct GenerateAndSerializeRotationKey_return {
	char* r0;
	long unsigned int r1;
};
extern __declspec(dllexport) struct GenerateAndSerializeRotationKey_return GenerateAndSerializeRotationKey(int galEl);
extern __declspec(dllexport) void LoadRotationKey(char* dataPtr, long unsigned int lenData, long unsigned int galEl);

/* Return type for SerializeDiagonal */
struct SerializeDiagonal_return {
	char* r0;
	long unsigned int r1;
};
extern __declspec(dllexport) struct SerializeDiagonal_return SerializeDiagonal(int transformID, int diagIdx);
extern __declspec(dllexport) void LoadPlaintextDiagonal(char* dataPtr, long unsigned int lenData, int transformID, long unsigned int diagIdx);
extern __declspec(dllexport) void RemovePlaintextDiagonals(int transformID);
extern __declspec(dllexport) void RemoveRotationKeys();
extern __declspec(dllexport) void NewPolynomialEvaluator();
extern __declspec(dllexport) int GenerateMonomial(float* coeffsPtr, int lenCoeffs);
extern __declspec(dllexport) int GenerateChebyshev(float* coeffsPtr, int lenCoeffs);
extern __declspec(dllexport) int EvaluatePolynomial(int ctInID, int polyID, long unsigned int outScale);

/* Return type for GenerateMinimaxSignCoeffs */
struct GenerateMinimaxSignCoeffs_return {
	double* r0;
	long unsigned int r1;
};
extern __declspec(dllexport) struct GenerateMinimaxSignCoeffs_return GenerateMinimaxSignCoeffs(int* degreesPtr, int lenDegrees, int prec, int logalpha, int logerr, int debug);
extern __declspec(dllexport) void NewScheme(int logN, int* logQPtr, int lenQ, int* logPPtr, int lenP, int logScale, int h, char* ringType, char* keysPath, char* ioMode);
extern __declspec(dllexport) void DeleteScheme();
extern __declspec(dllexport) void DeletePlaintext(int plaintextID);
extern __declspec(dllexport) void DeleteCiphertext(int ciphertextID);
extern __declspec(dllexport) long unsigned int GetPlaintextScale(int plaintextID);
extern __declspec(dllexport) long unsigned int GetCiphertextScale(int ciphertextID);
extern __declspec(dllexport) void SetPlaintextScale(int plaintextID, long unsigned int scale);
extern __declspec(dllexport) void SetCiphertextScale(int ciphertextID, long unsigned int scale);
extern __declspec(dllexport) int GetPlaintextLevel(int plaintextID);
extern __declspec(dllexport) int GetCiphertextLevel(GoInt ciphertextID);
extern __declspec(dllexport) int GetPlaintextSlots(GoInt plaintextID);
extern __declspec(dllexport) int GetCiphertextSlots(GoInt ciphertextID);
extern __declspec(dllexport) int GetCiphertextDegree(GoInt ciphertextID);

/* Return type for GetModuliChain */
struct GetModuliChain_return {
	long unsigned int* r0;
	long unsigned int r1;
};
extern __declspec(dllexport) struct GetModuliChain_return GetModuliChain();

/* Return type for GetLivePlaintexts */
struct GetLivePlaintexts_return {
	int* r0;
	long unsigned int r1;
};
extern __declspec(dllexport) struct GetLivePlaintexts_return GetLivePlaintexts();

/* Return type for GetLiveCiphertexts */
struct GetLiveCiphertexts_return {
	int* r0;
	long unsigned int r1;
};
extern __declspec(dllexport) struct GetLiveCiphertexts_return GetLiveCiphertexts();
extern __declspec(dllexport) void FreeCArray(void* ptr);

#ifdef __cplusplus
}
#endif
