"""Class definition of the Generator Drive model."""

from paraqeet.quantity import Array
import jax.numpy as jnp

from paraqeet.model.drive import Drive
from paraqeet.quantity import Quantity
from paraqeet.signal.generator import Generator


class DriveOperator(Drive):
    r"""Create a generator drive model.

    Transversal (a^\\dagger + a or \\sigma_x type) or longitudinal (a^\\dagger a or \\sigma_z type) drive with a
    time-dependent scalar coefficient that is generated by a Generator object.

    Parameters
    ----------
    generator : Generator
        Signal generator stack.
    isLongitudinal : bool
        Generator is longitudinal or transversal depending on this boolean.

    """

    __generator: Generator
    __isLongitudinal: bool

    def __init__(self, generator: Generator, isLongitudinal: bool):
        self.__generator = generator
        self.__isLongitudinal = isLongitudinal

    @property
    def generator(self) -> Generator:
        """Get the signal generator from the system.

        Returns
        -------
        paraqeet.signal.generator.Generator
            Returns the signal generator object from the system.

        """
        return self.__generator

    def get_parameters(self) -> list[Quantity]:
        """Get a list of parameters of the system.

        Returns
        -------
        List[Quantity]
            List of optimizable parameters of the system.

        """
        return self.__generator.get_parameters()

    def _compute_matrix(self, a: Array) -> Array:
        """Return the operator for the longitudinal or transverse drive.

        Parameters
        ----------
        a : Array
            Operator for computation.

        Returns
        -------
        Array
            Returns the operator for the longitudinal or transverse drive.

        """
        return (jnp.conjugate(a.T) @ a) if self.__isLongitudinal else (jnp.conjugate(a.T) + a)

    def get_matrix_one_time(self, a: Array, t: Array) -> Array:
        """Get the one-time matrix of the system.

        Fetches the coefficient from the drive and transforms it
        into the correct shape for the Hamiltonian.

        Parameters
        ----------
        a : Array
            Operator for longitudinal or transverse drive.
        t : Array
            One-dimensional vector of timestamps.

        Returns
        -------
        Array
            Returns the shape-shifted coefficient from the drive.

        """
        signal = self.__generator.generate_signal(t)
        matrix = self._compute_matrix(a)
        return signal * matrix

    def gradient_one_time(self, a: Array, t: Array) -> Array:
        """Get the one-time gradient of the system.

        Fetches the gradient from the drive and transforms it into the
        correct shape for the Hamiltonian.

        Parameters
        ----------
        a : Array
            Operator for longitudinal or transverse drive.
        t : Array
            One-dimensional vector of timestamps.

        Returns
        -------
        Array
            Returns the shape-shifted gradient from the drive.

        """
        signalGrad = self.__generator.generate_signal_gradient_one_time(jnp.array(t, ndmin=1)).reshape((-1, 1, 1))
        matrix = self._repeat(self._compute_matrix(a), signalGrad.shape[0])
        return signalGrad * matrix
