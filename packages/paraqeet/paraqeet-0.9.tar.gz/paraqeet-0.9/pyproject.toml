# Refer to - 
# https://github.com/pypa/sampleproject/blob/main/pyproject.toml and
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/
# for examples and help.


[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["paraqeet*"]  # package names should match these glob patterns (["*"] by default)

[project]
name = "paraqeet"
version = "0.9"
description = "Toolset for control, calibration and characterization of physical systems"
readme = "README.md"
requires-python = ">=3.12"
authors = [{name="PGI-12"}]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: Apache Software License",
  "Intended Audience :: Science/Research",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows :: Windows 10",
  "Operating System :: Unix",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
  "numpy>=2.3.0",
  "scipy>=1.15.3",
  "jax>=0.6.1",
  "jaxlib>=0.6.1",
  "bayesian-optimization>=2.0.4",
  "cma>=4.2.0"
]

[tool.sphinx-pyproject]
author = "PGI-12"
project = "paraqeet"
copyright = "PGI-12"
release = "0.9"

[project.optional-dependencies]
dev = [
  "pytest>=7.2.0",
  "pre-commit>=4.2.0",
  "ruff>=0.11.13"
]
test = [
  "pytest>=7.2.0",
]
testNB = [
  "pytest>=7.2.0",
  "matplotlib>=3.10.0",
]
gpu = [
  "jax[cuda12]>=0.4.20",
]

[project.urls]
"Homepage" = "https://jugit.fz-juelich.de/pgi-12-external/qfc/paraqeet"
"Bug Reports" = "https://jugit.fz-juelich.de/pgi-12-external/qfc/paraqeet/-/issues"
"Source" = "https://jugit.fz-juelich.de/pgi-12-external/qfc/paraqeet"


# mypy configurations
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "bayes_opt.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "cma.*"
ignore_missing_imports = true


# pytest's code coverage configurations
[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
  # Exclude abstract methods
  "raise NotImplementedError",
  "@(abc\\.)?abstractmethod",
]
ignore_errors = true


# ruff's linting and formatting configurations
[tool.ruff]
# set the maximum line length to 120
line-length = 120

[tool.ruff.lint]
extend-select = [
  "E501",  # line too long rule
  "UP",  # pyupgrade (https://pypi.org/project/pyupgrade/)
  "D",  # pydocstyle
]
ignore = [
  "D100", # Missing docstring in public module
  "D205", # 1 blank line required between summary line and description
  "D40" # All D40x errors are about docstrings
]

[tool.ruff.lint.per-file-ignores]
"test/*" = ["D"] # pydocstyle is not important in the tests

[tool.ruff.lint.pydocstyle]
convention = "numpy"