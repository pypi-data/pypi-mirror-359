[build-system]
requires = ["setuptools>=64.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ppqs"
version = "2.4.0"
description = "Python project quick scripts"
authors = [
    { name = "Karl Wette", email = "karl.wette@anu.edu.au" },
]
requires-python = ">=3.9"
dependencies = [
    "tomli>=1.1.0; python_version<'3.11'"
]
readme = "README.md"
license = "MIT"
license-files = ["LICENSES/MIT.txt"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]

[project.urls]
Homepage = "https://github.com/kwwette/ppqs"
Issues = "https://github.com/kwwette/ppqs/issues"

[project.scripts]
ppqs = "py_proj_quick_scripts:cli"

[tool.ruff]
fix = true
show-fixes = true

[tool.ruff.lint]
select = [
    "D1", "D2", "D4",
    "E4", "E7", "E9",
    "EM",
    "F",
    "I",
]
ignore = [
    "D105", "D202",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=py_proj_quick_scripts --cov-report=term-missing --cov-fail-under=100"
testpaths = ["test"]

[tool.ppqs.defaults]
print-header = true

[tool.ppqs.scripts.init]
description = "Initialise project"
script = """
python -m pip install -r requirements-dev.txt
pre-commit install
python -m pip install -e .
"""

[tool.ppqs.scripts.lint]
description = "Perform linting checks"
script = """
pre-commit run -a
"""

[tool.ppqs.scripts.build]
description = "Build project"
script = """
ppqs clean
python -m build
"""

[tool.ppqs.scripts.test]
description = "Run tests"
script = """
python -m pytest ...
"""

[tool.ppqs.scripts.upload]
description = "Upload package"
script = [
    ["ppqs", "test"],
    ["ppqs", "build"],
    ["twine", "upload", ["dist", "*"]],
    ["git", "push", "origin"],
    ["git", "push", "origin", "--tags"],
]

[tool.ppqs.scripts.clean]
description = "Clean up build files"
script = "git clean -Xdf"
