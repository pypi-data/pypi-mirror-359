Metadata-Version: 2.4
Name: puantum
Version: 11.0.0.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Rust
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: The Unlicense (Unlicense)
License-File: LICENSE
Summary: Python Cryptography
Keywords: python,cryptography,quantum,security
Author-email: Anonymous <217687495+1xfakebit@users.noreply.github.com>
License: Unlicense
Description-Content-Type: text/markdown
Project-URL: source, https://github.com/1xfakebit/puantum
Project-URL: x, https://x.com/1xfakebit

# üîê Python Cryptography

A blazing-fast cryptography library for Python, built on Rust.

Pryptography supports an extensive set of **post-quantum** digital signature algorithms (DSA) and key encapsulation mechanisms (KEM).

---
## ‚ö° Features
- ‚úÖ Dozens of NIST PQC candidates 
- ü¶Ä Rust core for speed and safety
- üì¶ Easy installation via [`pip`](https://pip.pypa.io)
---

### üß¨ Supported Algorithms

### üõ°Ô∏è KEM
- #### Bike
- #### ClassicMcEliece
- #### Hqc
- #### Kyber
- #### MLKEM
- #### NtruPrime
- #### FrodoKem

### ‚úçÔ∏è DSA
- #### Cross
- #### Dilithium
- #### Falcon
- #### Mayo
- #### MLDSA
- #### Sphincs
- #### Uov

### ‚ùî Examples

#### DSA Example
```python
# IMPORT
from puantum.quantum.dsa import Algorithm, KeyPair

# MAIN
alicesk, alicepk = KeyPair(Algorithm.MLDSA.MLDSA87)
message = "Hello".encode()

signature = alicesk.sign(message=message)
valid = alicepk.verify(signature=signature, message=message)

assert valid, "Signature verification failed!"

print(f"Message:   [{message.decode()}]")
print(f"Signature: [{signature.hex()[:len(message)]}]")
```

#### KEM Example
```python
# IMPORT
from puantum.quantum.kem import Algorithm, KeyPair

# MAIN
alicesk, alicepk = KeyPair(Algorithm.MLKEM.MLKEM1024)
_bobsk, _bobpk = KeyPair(Algorithm.MLKEM.MLKEM1024)

bobss, bobct = alicepk.encapsulate()
alicess = alicesk.decapsulate(bobct)

assert alicess == bobss, "Shared secrets do not match!"

print(f"Alice's Shared Secret: [{alicess.hex()}]")
print(f"Bob's   Shared Secret: [{bobss.hex()}]")
```

### üì¶ Install
```shell
pip install puantum
```

#### or from source:
```shell
make python
```

### ü•≥ Enjoy!

