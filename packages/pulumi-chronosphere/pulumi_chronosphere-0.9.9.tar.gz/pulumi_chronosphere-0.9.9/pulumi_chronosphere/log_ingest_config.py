# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogIngestConfigArgs', 'LogIngestConfig']

@pulumi.input_type
class LogIngestConfigArgs:
    def __init__(__self__, *,
                 parsers: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigParserArgs']]]] = None):
        """
        The set of arguments for constructing a LogIngestConfig resource.
        """
        if parsers is not None:
            pulumi.set(__self__, "parsers", parsers)

    @property
    @pulumi.getter
    def parsers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigParserArgs']]]]:
        return pulumi.get(self, "parsers")

    @parsers.setter
    def parsers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigParserArgs']]]]):
        pulumi.set(self, "parsers", value)


@pulumi.input_type
class _LogIngestConfigState:
    def __init__(__self__, *,
                 parsers: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigParserArgs']]]] = None):
        """
        Input properties used for looking up and filtering LogIngestConfig resources.
        """
        if parsers is not None:
            pulumi.set(__self__, "parsers", parsers)

    @property
    @pulumi.getter
    def parsers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigParserArgs']]]]:
        return pulumi.get(self, "parsers")

    @parsers.setter
    def parsers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigParserArgs']]]]):
        pulumi.set(self, "parsers", value)


class LogIngestConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 parsers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogIngestConfigParserArgs']]]]] = None,
                 __props__=None):
        """
        Create a LogIngestConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LogIngestConfigArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogIngestConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogIngestConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogIngestConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 parsers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogIngestConfigParserArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogIngestConfigArgs.__new__(LogIngestConfigArgs)

            __props__.__dict__["parsers"] = parsers
        super(LogIngestConfig, __self__).__init__(
            'chronosphere:index/logIngestConfig:LogIngestConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            parsers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogIngestConfigParserArgs']]]]] = None) -> 'LogIngestConfig':
        """
        Get an existing LogIngestConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogIngestConfigState.__new__(_LogIngestConfigState)

        __props__.__dict__["parsers"] = parsers
        return LogIngestConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def parsers(self) -> pulumi.Output[Optional[Sequence['outputs.LogIngestConfigParser']]]:
        return pulumi.get(self, "parsers")

