[project]
name = "puyu"
version = "0.0.1a"
description = "Effortlessly build interactive, developer-friendly CLIs."
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [{ name = "STACiA", email = "stacia.dev@gmail.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
]
dependencies = [ #
    "prompt-toolkit>=3.0.51, <4.0.0",
]

[project.urls]
homepage = "https://github.com/staciax/puyu"
repository = "https://github.com/staciax/puyu"
issues = "https://github.com/staciax/puyu/issues"

[dependency-groups]
dev = [
    # formatter and linter
    "ruff>=0.12.0, <0.13.0",
    "ty>=0.0.1a12",

    # testing and coverage
    "pytest>=8.4.1, <9.0.0",
    "coverage>=7.9.2, <8.0.0",
]

# [project.scripts]
# puyu = "puyu:main"

[build-system]
requires = ["uv_build>=0.7.19, <0.8.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "puyu"
module-root = ""

# [build-system]
# requires = ["hatchling"]
# build-backend = "hatchling.build"

# [tool.hatch.build.targets.wheel]
# packages = ["puyu"]

# [tool.hatch.version]
# path = "puyu/__init__.py"

[tool.ty.src]
include = ["puyu", "tests"]
exclude = [
    # TODO: verbose
]

[tool.ruff]
line-length = 120
target-version = "py39"
exclude = [ #
    ".git",
    ".ruff_cache",
    ".pytest_cache",
    ".venv",
    ".vscode",
    # TODO: verbose
]

[tool.ruff.format]
preview = true
quote-style = "single"
skip-magic-trailing-comma = false

[tool.ruff.lint]
preview = true
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade

    # "ANN",   # flake8-annotations
    # "ASYNC", # flake8-async
    # "S",     # flake8-bandit
    # "BLE",   # flake8-blind-except
    # "A",     # flake8-builtins
    # "COM",   # flake8-commas
    # "DTZ",   # flake8-datetimez
    # "FA",    # flake8-future-annotations
    # "ISC",   # flake8-implicit-str-concat
    # "LOG",   # flake8-logging
    # "G",     # flake8-logging-format
    # "PIE",   # flake8-pie
    # "PYI",   # flake8-pyi
    # "PT",    # flake8-pytest-style
    # "Q",     # flake8-quotes
    # "RSE",   # flake8-raise 
    # "RET",   # flake8-return
    # "SIM",   # flake8-simplify
    # "TC",    # flake8-type-checking
    # "ARG",   # flake8-unused-arguments
    # "PTH",   # flake8-use-pathlib

    "PGH", # pygrep-hooks
    # "PL",   # pylint
    # "TRY",  # tryceratops
    # "FLY",  # flynt
    # "PERF", # perflint
    # "FURB", # refurb

    "RUF", # ruff-specific rules
]
ignore = [
    "ANN401",  # any-type
    "COM812",  # trailing-comma-missing
    "COM819",  # prohibited-trailing-comma
    "E501",    # line-too-long, handled by black
    "PLR6301", # no-self-use
    "TRY003",  # raise-vanilla-args
    "ISC001",  # single-line-implicit-string-concatenation, conflicts with black
]
# isort = { combine-as-imports = true, known-first-party = ["puyu"] }

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["puyu"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-type-checking]
quote-annotations = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.coverage.run]
source = ["tests", "puyu"]

[tool.coverage.report]
show_missing = true
precision = 2
# sort = "-Cover"
exclude_also = ["if TYPE_CHECKING:"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-vv --showlocals --tb=short --strict -p no:warnings"
# --cov=app --cov=tests
# asyncio_default_fixture_loop_scope = "session"
# filterwarnings = [
#     # This is a warning that is expected to happen: we have an async filter that raises an exception
#     "ignore:coroutine 'test_async_input_filter_fails.<locals>.invalid_input_filter' was never awaited:RuntimeWarning",
# ]
# markers = [
#     "allow_call_model_methods: mark test as allowing calls to real model implementations",
# ]
