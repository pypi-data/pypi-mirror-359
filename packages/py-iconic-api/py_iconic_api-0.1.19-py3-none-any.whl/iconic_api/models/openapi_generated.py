# generated by datamodel-codegen:
#   filename:  iconic_api_full.json
#   timestamp: 2025-05-12T03:28:31+00:00

from __future__ import annotations

from datetime import datetime as datetime_aliased
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, RootModel, ConfigDict, Field

from .attribute import (
    Attribute, 
    AttributeSet
)

class StatementType(Enum):
    """
    The statementType of the account statement.
    """

    marketplace = 'marketplace'
    consignment = 'consignment'


class ExportSalesReport(BaseModel):
    locale: str = Field(..., example='en_US')
    statementType: Optional[StatementType] = Field(
        'marketplace', description='The statementType of the account statement.'
    )
    currency: str = Field(
        ...,
        description='The currency of the account statement. This filter will be ignored when a search with a statementId (> 0) is getting executed',
        example='EUR',
    )
    statementId: Optional[float] = Field(
        0,
        description='The identifier of the account statement. The value 0 should be used to get the current open statement (or not provided parameter). This filter will be ignored when a search with a statementId (> 0) is getting executed.',
    )
    startDate: Optional[str] = Field(
        None,
        description='The start date will only be used in order to generate a sales report for future statements which contains installment transaction.  To load properly the data the statement id value needs to be 0',
    )
    endDate: Optional[str] = Field(
        None,
        description='The end date will only be used in order to generate a sales report for future statements which contains installment transaction. To load properly the data the statement id value needs to be 0 ',
    )


class StatementType1(Enum):
    """
    The statementType of the account statement. This filter will be ignored when a search with a statementId (> 0) is getting executed
    """

    marketplace = 'marketplace'
    consignment = 'consignment'


class ExportReportTransaction(BaseModel):
    locale: str = Field(..., example='en_US')
    transactionTypeIds: List[int] = Field(
        ...,
        description='Ids of all used transaction types of a selected account statement. Transaction Type Ids are mandatory if all transactions of an account statement should be exported or a sub area of the actually statement like (specific section or the sum of a section).',
    )
    statementType: Optional[StatementType1] = Field(
        'marketplace',
        description='The statementType of the account statement. This filter will be ignored when a search with a statementId (> 0) is getting executed',
    )
    currency: str = Field(
        ...,
        description='The currency of the account statement. This filter will be ignored when a search with a statementId (> 0) is getting executed',
        example='EUR',
    )
    statementId: Optional[float] = Field(
        0,
        description='The identifier of the account statement. The value 0 should be used to get the current open statement (or not provided parameter).',
    )
    label: Optional[str] = Field(
        None,
        description='Defines the title of the export file name.',
        example='Sales Revenue 15 Mar 2024 - 21 Mar 2024',
    )
    startDate: Optional[str] = Field(
        None,
        description='The start date will only be used in order to generate a sales report for future statements which contains installment transaction.  To load properly the data the statement id value needs to be 0',
    )
    endDate: Optional[str] = Field(
        None,
        description='The end date will only be used in order to generate a sales report for future statements which contains installment transaction. To load properly the data the statement id value needs to be 0 ',
    )


class PayoutStatus(Enum):
    """
    Filter by the transaction's association with account statement is paid.
    """

    paid = 'paid'
    unpaid = 'unpaid'
    partiallyPaid = 'partiallyPaid'


class StatusEnum(Enum):
    pending = 'pending'
    shipped = 'shipped'
    canceled = 'canceled'
    returned = 'returned'
    failed = 'failed'
    delivered = 'delivered'
    ready_to_ship = 'ready_to_ship'
    return_shipped_by_customer = 'return_shipped_by_customer'
    return_waiting_for_approval = 'return_waiting_for_approval'
    return_rejected = 'return_rejected'
    return_delivered = 'return_delivered'
    payment_pending = 'payment_pending'


class ShipmentTypes(Enum):
    """
    Shipment type of an order item.
    """

    warehouse = 'warehouse'
    dropshipping = 'dropshipping'
    cross_docking = 'crossdocking'


class StatementType2(Enum):
    """
    The statementType of the account statement.
    """

    marketplace = 'marketplace'
    consignment = 'consignment'


class ExportOrderItemTransaction(BaseModel):
    currency: str = Field(
        ..., description='The currency which an order item belongs to.', example='EUR'
    )
    isHybrid: Optional[bool] = Field(
        None,
        description="Filter by the transaction's association with order item which is hybrid.",
    )
    isOutlet: Optional[bool] = Field(
        None,
        description="Filter by the transaction's association with order item which is outlet.",
    )
    payoutStatus: Optional[PayoutStatus] = Field(
        None,
        description="Filter by the transaction's association with account statement is paid.",
    )
    status: Optional[List[StatusEnum]] = Field(
        None, description='String of all possible order item statuses'
    )
    locale: str = Field(..., example='en_US')
    startDate: Optional[str] = Field(
        None,
        description="Filter by the transaction's association with a order creation date that is greater than or equal to the provided value.",
        example='2024-01-01T22:00:00.000Z',
    )
    endDate: Optional[str] = Field(
        None,
        description="Filter by the transaction's association with a order creation date that is lower than or equal to the provided value.",
        example='2024-01-01T22:00:00.000Z',
    )
    orderNumbers: Optional[List[str]] = Field(
        None, description='Search by order number'
    )
    products: Optional[List[str]] = Field(
        None, description='Search by a product name, sku or seller sku'
    )
    shipmentTypes: Optional[Union[List[str], ShipmentTypes]] = Field(
        None, description='Shipment type of an order item.'
    )
    statementType: Optional[StatementType2] = Field(
        'marketplace', description='The statementType of the account statement.'
    )
    statementId: Optional[float] = Field(
        None,
        description='The identifier of the account statement. The value 0 is representing the current statement.',
        example=4,
    )


class ExportUnifiedTransactions(BaseModel):
    currency: str = Field(
        ..., description='The currency which an order item belongs to.', example='EUR'
    )
    isHybrid: Optional[bool] = Field(
        False,
        description="Filter by the transaction's association with order item which is hybrid.",
    )
    isOutlet: Optional[bool] = Field(
        False,
        description="Filter by the transaction's association with order item which is outlet.",
    )
    payoutStatus: Optional[PayoutStatus] = Field(
        'unpaid',
        description="Filter by the transaction's association with account statement is paid.",
    )
    locale: str = Field(..., example='en_US')
    startDate: Optional[str] = Field(
        None,
        description="Filter by the transaction's association with a order creation date that is greater than or equal to the provided value.",
        example='2024-01-01T22:00:00.000Z',
    )
    endDate: Optional[str] = Field(
        None,
        description="Filter by the transaction's association with a order creation date that is lower than or equal to the provided value.",
        example='2024-01-01T22:00:00.000Z',
    )
    orderNumbers: Optional[List[str]] = Field(
        None, description='Search by order number'
    )
    transactionNumbers: Optional[List[str]] = Field(
        None, description='Search by concrete transaction numbers'
    )
    transactionTypeIds: Optional[List[float]] = Field(
        None, description='Search by concrete transaction types'
    )
    products: Optional[List[str]] = Field(
        None, description='Search by a product name, sku or seller sku'
    )
    statementType: Optional[StatementType2] = Field(
        'marketplace', description='The statementType of the account statement.'
    )
    statementId: Optional[float] = Field(
        None,
        description='The identifier of the account statement. The value 0 is representing the current statement.',
        example=4,
    )


class InvoiceTaxDocument(BaseModel):
    locale: str = Field(..., example='en_US')
    statementType: Optional[StatementType2] = Field(
        'marketplace', description='The statementType of the account statement.'
    )
    currency: str = Field(
        ...,
        description='The currency of the account statement. This filter will be ignored when a search with a statementId (> 0) is getting executed',
        example='EUR',
    )
    statementId: float = Field(
        ...,
        description='The identifier of the account statement. The value 0 should be used to get the current open statement. This filter will be ignored when a search with a statementId (> 0) is getting executed',
    )
    sellerId: Optional[int] = Field(
        None, description='The identifier of the seller.', example=123456
    )


class OauthApp(BaseModel):
    uuid: Optional[str] = Field(
        None, description='App UUID', example='3f0c27aa-ca28-4526-88f0-a13e6c9a007b'
    )
    name: Optional[str] = Field(
        None, description='App name', example='cb56deed3d91799f86e5'
    )
    appId: Optional[str] = Field(
        None, description='App ID', example='cb56deed3d91799f86e5'
    )
    identifier: Optional[int] = Field(None, description='Increment ID in database.')
    createdAt: Optional[str] = Field(None, example='2022-09-01 16:35:42')
    updatedAt: Optional[str] = Field(None, example='2022-09-01 16:35:42')
    userId: Optional[int] = Field(
        None, description='Identifier of a user.', example=1024
    )


class AclResource(BaseModel):
    id: Optional[int] = None
    name: Optional[int] = None
    label: Optional[int] = None
    description: Optional[int] = None
    maintenanceOnly: Optional[bool] = False
    tags: Optional[List[str]] = None


class AclRoleResource(BaseModel):
    roleId: Optional[int] = None
    resourceId: Optional[int] = None


class AclRole(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    displayName: Optional[str] = None
    groupName: Optional[str] = None
    editableByRoles: Optional[List[int]] = None
    description: Optional[str] = None


class Status(Enum):
    active = 'active'
    inactive = 'inactive'
    deleted = 'deleted'


class Brand(BaseModel):
    id: Optional[int] = Field(None, example=111555)
    srcId: Optional[str] = Field(None, description='Internal id', example='ADI5341')
    uuid: Optional[str] = Field(None, example='1af9fe46-77d2-4ab2-8b4a-8c7eeac8bbc9')
    name: Optional[str] = Field(None, example='Adidas')
    status: Optional[Status] = None
    isActive: Optional[bool] = Field(None, example=True)
    isApproved: Optional[bool] = Field(None, example=True)
    isRestricted: Optional[bool] = Field(None, example=False)
    countries: Optional[str] = Field(None, example='RU,KZ')
    createdAt: Optional[datetime_aliased] = Field(
        None, example='2021-09-22T23:21:42+02:00'
    )
    updatedAt: Optional[datetime_aliased] = Field(
        None, example='2021-09-22T23:21:42+02:00'
    )


class RuleGroup(Enum):
    AttributeExists = 'AttributeExists'
    CategoryLevel = 'CategoryLevel'
    DescriptionBoldPercent = 'DescriptionBoldPercent'
    DescriptionBullets = 'DescriptionBullets'
    DescriptionWords = 'DescriptionWords'
    TitleChars = 'TitleChars'
    Barcode = 'Barcode'


class ScoreReport(BaseModel):
    points: Optional[float] = Field(
        None,
        description='Number of points product set has now. Different rules can have different scoring, for example\nhaving long enough title is counted for 10 points and length of description for 90. So\nwhen description is not filled at all it can be 0, when it filled by 50% of required it\nwill be 45.\n',
    )
    maxPoints: Optional[float] = Field(
        None,
        description='Like described in previous property for title it will 10 and for description - 90.\n',
    )
    isSuccessful: Optional[bool] = Field(
        None, description='Whether or not rule is considered to be fulfulled.\n'
    )
    productValue: Optional[str] = Field(
        None,
        description='Current product value. Can be useful when you want to get score for existing product set, in this\ncase you can receive here, for example, 9 for score for title length which means that current\nlength of title is 9 characters. When you send product data you already know this value.\n',
    )
    metric: Optional[str] = Field(
        None,
        description='Human readable and translated metric, can be displayed in UI\n',
        example='Description words',
    )
    recommendation: Optional[str] = Field(None, example='more or equal than 3')
    ruleGroup: Optional[RuleGroup] = None
    ruleParameters: Optional[Dict[str, Any]] = Field(
        None,
        description='Contains configuration data for the rule.\n\n\nRule of group Barcode does not have any configuration.\n\n\nRule of groups CategoryLevel, DescriptionBullets, DescriptionWords has property `min` in this\nobject.\n\n\nRule of group AttributeExists has property `attributeId` in this object.\n\n\nRule of groups DescriptionBoldPercent and TitleChars has properties `min` and `max` in this object.\n',
    )


class ContentScore(BaseModel):
    status: Optional[str] = Field(
        None,
        description='Always equals to "ok" when calculation completed successfully.',
        example='ok',
    )
    score: Optional[float] = Field(
        None,
        description='Percentage of the score. For example "60.00" means that from 100% current data scores to\nonly 60 percents. Depending on category configuration there can be threshold and products\nwith score below that threshold will be auto rejected during product QC.\n',
        example=50,
        ge=0.01,
        le=100.0,
    )
    score_report: Optional[ScoreReport] = None


class CalculateContentScore(BaseModel):
    productSetId: Optional[int] = None
    categoryId: int
    name: Optional[str] = None
    description: Optional[str] = None
    shortDescription: Optional[str] = Field(
        None,
        description='Value of attribute with **name** "short_description" or "highlights" (if any). This is legacy parameter and rules\nrelying on this parameter are in general not in use.\n',
    )
    attributeSetId: Optional[str] = Field(
        None,
        description='Previously when product changed category initial attribute set was kept (for example product was created in \ncategory "T-Shirts" with one attribute set, but then moved to category "Shoes" which has another attribute set). \nThis parameter was used, among other, to calculate content score. Currently this parameter is not used in \ncontent score calculation. AttributeSetId is now taken from current category. \n\nThis parameter is deprecated and will be removed in future versions of this endpoint.\n',
    )
    attributes: Optional[Dict[str, Any]] = Field(
        None,
        description='Array with attribute IDs as key plus value of attributes. Please, see description of endpoint for example value.\nMake sure to send all attributes, even with empty values.\n',
    )
    variations: Optional[Dict[str, Any]] = Field(
        None,
        description='Array of products (variations). Only one key is in each variation is expected - `ean`, as there is only\none content score rule for products itself. Deleted variations do not participate in calculating content\nscore, so when you are sending not yet saved data, then you should omit sending deleted variations.\n',
    )


class Option(BaseModel):
    id: Optional[int] = Field(None, example=321)
    name: Optional[str] = Field(None, example='Direct')


class BrandAttribute(BaseModel):
    id: Optional[int] = Field(None, example=123)
    name: Optional[str] = Field(None, example='supplier_type')
    options: Optional[List[Option]] = None


class BrandAttributeOption(BaseModel):
    id: Optional[int] = Field(None, example=321)
    name: Optional[str] = Field(None, example='Direct')


class Attributes(BaseModel):
    field_74: Optional[int] = Field(None, alias='74', example=307)
    field_131: Optional[str] = Field(
        None,
        alias='131',
        example='Best experience ever - super fast and easy navigation - better control',
    )
    field__comment_74: Optional[str] = Field(
        None,
        alias='__comment_74',
        example='Id of attribute (PackageType) with id of attribute option (eg Parcel)',
    )
    field__comment_131: Optional[str] = Field(
        None,
        alias='__comment_131',
        example='Id of attribute (ShortDescription) with some text area',
    )


class ProductSetSample(BaseModel):
    primaryCategoryId: Optional[int] = Field(None, example=2369)
    field__comment_primaryCategoryId: Optional[str] = Field(
        None,
        alias='__comment_primaryCategoryId',
        example='Id of primary category in our database',
    )
    name: Optional[str] = Field(None, example='Nikon Wide Angle Camera 10 MP black')
    field__comment_name: Optional[str] = Field(
        None, alias='__comment_name', example='Some descriptive product name'
    )
    brandId: Optional[int] = Field(None, example=1)
    field__comment_brandId: Optional[str] = Field(
        None, alias='__comment_brandId', example='Id of a brand in our database'
    )
    price: Optional[float] = Field(None, example=1.99)
    field__comment_price: Optional[str] = Field(
        None, alias='__comment_price', example='Some float value'
    )
    description: Optional[str] = Field(
        None,
        example="It's been the king of football games for years now. FIFA Soccer 12 delivers an authentic Match Day experience, faster and easier navigation, and over 500 officially licensed clubs.  FIFA Soccer 12 brings to the pitch the game-changing new Player Impact En",
    )
    field__comment_description: Optional[str] = Field(
        None, alias='__comment_description', example='Some descriptive text'
    )
    sellerSku: Optional[str] = Field(None, example='XMPL1')
    field__comment_sellerSku: Optional[str] = Field(
        None, alias='__comment_sellerSku', example='Unique text field in our database'
    )
    variation: Optional[str] = Field(None, example='M')
    field__comment_variation: Optional[str] = Field(
        None,
        alias='__comment_variation',
        example='Depending on input type - value from our database or a user-defined value. Rarely can be null',
    )
    attributes: Optional[Attributes] = None


class ProductSetRead(BaseModel):
    id: Optional[int] = Field(None, example=7865)
    uuid: Optional[str] = Field(None, example='5b29bccc-d8bb-4a5c-85f6-1109d12d8233')
    srcId: Optional[str] = Field(
        None,
        description='ID of image in Shop system. If empty means that image was not yet syncronized with Shop and is not visible to end customers.',
        example='94345',
    )
    name: Optional[str] = Field(None, example='Block Shell Jacket')
    parentSku: Optional[str] = Field(
        None,
        description='SKU of product, which acts as "main" one for ProductSet. Using this value you can add new products to ProductSet using XLS files. If feature of "parentSku" is disabled, then you should use SKU of first product in ProductSet when you work with XLS import files.',
        example='NHGB93523-12',
    )
    createdAt: Optional[datetime_aliased] = None
    updatedAt: Optional[datetime_aliased] = None
    description: Optional[str] = Field(
        None,
        description='Description which will be visible by end customers. Depending on settings of your seller and general configuration, there could be limit of minimum and maximum length of the description. Also, depending on configuration, description should be plain text or may contain HTML markup.',
        example="Experience the ultimate expression of functionality at BrandName with the Women's Block Shell Jacket. Our model is wearing size *. She usually wears a size 8 and is 177cm tall.",
    )
    brandId: Optional[int] = Field(
        None,
        description='Please, note that not every brand can be used without prior aproval. Also, there are some brand-specific limitation for variations (for example, for brand A it is possible to use only sizes 34, 35, 36, 37, 38, 39, 40, but size 35.5 or 33 will lead to validation error).',
        example=78,
    )
    primaryCategoryId: Optional[int] = Field(
        None,
        description='Please, note that there could limitation for certain sellers in which categories seller allowed to create ProductSets. Also, in cource of time categories can be marked as inactive (for example when category A is splitted to categories B and C).',
        example=309,
    )
    attributeSetId: Optional[int] = Field(
        None,
        description='Different categories has different AttributeSets. It means that for Shoes there is one set of attributes applied and for Hats another one. AttributeSet is defined by primary category of product set. In very rare cases attribute set of category can be changed to another one. In this case in order to successfully save ProductSet you will need to pass all required attributes for new AttributeSet. This value represent AttributeSet which was set for primary category of ProductSet during last save.',
        example=2,
    )
    sellerId: Optional[int] = Field(None, example=5623)
    categories: Optional[List[int]] = Field(
        None,
        description='ProductSet can be listed in multiple additional categories. There is a seller-specific limit regarding maximum count of additional categories',
        example=[421, 567],
    )
    attributes: Optional[Dict[str, Any]] = Field(
        None,
        description='Array of attributes\' values. Key is attribute ID and value depends on type of attribute. It can be one of: string (for "free text attributes" like "Warranty duration"), integer (for attributes with list of options, for example "Material" can have some set of fixed options), array of integers (for attributes with multiple choise of predefined options), null (when you didn\'t provide value for optional attribute), array of strings for attributes which allow multiple values with free text.',
        example={
            '421': 'string value',
            '533': [4, 5],
            '567': 123,
            '721': ['string1', 'string2'],
            '854': None,
        },
    )
    sizeSystem: Optional[int] = Field(
        None,
        description='Nullable field with same value as attribute that represents "size system". Please, read description of\n"GET /v2/brands/{brandId}/attributes" for more detailed explanation. This field will be removed in future\nversions of this endpoint and "size system" will be passed only in array of attributes.\n',
        example=5,
    )
    browseNodes: Optional[List[int]] = Field(None, example=[421, 567])


class ProductSetCreated(BaseModel):
    id: Optional[int] = Field(None, example=7865)
    uuid: Optional[str] = Field(None, example='5b29bccc-d8bb-4a5c-85f6-1109d12d8233')
    srcId: Optional[str] = Field(
        None,
        description='ID of image in Shop system. If empty means that image was not yet syncronized with Shop and is not visible to end customers.',
        example='94345',
    )
    name: Optional[str] = Field(None, example='Block Shell Jacket')
    parentSku: Optional[str] = Field(
        None,
        description='SKU of product, which acts as "main" one for ProductSet. Using this value you can add new products to ProductSet using XLS files. If feature of "parentSku" is disabled, then you should use SKU of first product in ProductSet when you work with XLS import files.',
        example='NHGB93523-12',
    )
    createdAt: Optional[datetime_aliased] = None
    updatedAt: Optional[datetime_aliased] = None
    description: Optional[str] = Field(
        None,
        description='Description which will be visible by end customers. Depending on settings of your seller and general configuration, there could be limit of minimum and maximum length of the description. Also, depending on configuration, description should be plain text or may contain HTML markup.',
        example="Experience the ultimate expression of functionality at BrandName with the Women's Block Shell Jacket. Our model is wearing size *. She usually wears a size 8 and is 177cm tall.",
    )
    brandId: Optional[int] = Field(
        None,
        description='Please, note that not every brand can be used without prior aproval. Also, there are some brand-specific limitation for variations (for example, for brand A it is possible to use only sizes 34, 35, 36, 37, 38, 39, 40, but size 35.5 or 33 will lead to validation error).',
        example=78,
    )
    primaryCategoryId: Optional[int] = Field(
        None,
        description='Please, note that there could limitation for certain sellers in which categories seller allowed to create ProductSets. Also, in cource of time categories can be marked as inactive (for example when category A is splitted to categories B and C).',
        example=309,
    )
    attributeSetId: Optional[int] = Field(
        None,
        description='Different categories has different AttributeSets. It means that for Shoes there is one set of attributes applied and for Hats another one. AttributeSet is defined by primary category of product set. In very rare cases attribute set of category can be changed to another one. In this case in order to successfully save ProductSet you will need to pass all required attributes for new AttributeSet. This value represent AttributeSet which was set for primary category of ProductSet during last save.',
        example=2,
    )
    sellerId: Optional[int] = Field(None, example=5623)
    categories: Optional[List[int]] = Field(
        None,
        description='ProductSet can be listed in multiple additional categories. There is a seller-specific limit regarding maximum count of additional categories',
        example=[421, 567],
    )
    attributes: Optional[Dict[str, Any]] = Field(
        None,
        description='Array of attributes\' values. Key is attribute ID and value depends on type of attribute. It can be one of: string (for "free text attributes" like "Warranty duration"), integer (for attributes with list of options, for example "Material" can have some set of fixed options), array of integers (for attributes with multiple choise of predefined options), null (when you didn\'t provide value for optional attribute), array of strings for attributes which allow multiple values with free text.',
        example={
            '421': 'string value',
            '533': [4, 5],
            '567': 123,
            '721': ['string1', 'string2'],
            '854': None,
        },
    )
    sizeSystem: Optional[int] = Field(
        None,
        description='Nullable field with same value as attribute that represents "size system". Please, read description of\n"GET /v2/brands/{brandId}/attributes" for more detailed explanation. This field will be removed in future\nversions of this endpoint and "size system" will be passed only in array of attributes.\n',
        example=5,
    )
    browseNodes: Optional[List[int]] = Field(None, example=[421, 567])
    sellerSku: Optional[str] = Field(
        None,
        description="SKU from seller's side. Should be unique across products of seller.",
        example='68040427550-1',
    )
    status: Optional[Status] = None
    sin: Optional[str] = Field(
        None,
        description='if not null indicates that product set is Hybrid\n',
        example='KMPWJ5',
    )


class ProductSetWrite(BaseModel):
    name: Optional[str] = Field(None, example='Block Shell Jacket')
    description: Optional[str] = Field(
        None,
        description='Description which will be visible by end customers. Depending on settings of your seller and general configuration, there could be limit of minimum and maximum length of the description. Also, depending on configuration, description should be plain text or may contain HTML markup.',
        example="Experience the ultimate expression of functionality at BrandName with the Women's Block Shell Jacket. Our model is wearing size *. She usually wears a size 8 and is 177cm tall.",
    )
    parentSku: Optional[str] = Field(
        None,
        description='Parent SKU is text identifier for your product set used in exports and imports. When you want to add new size to existing product set through importing file, you will provide Parent SKU for that new size and  it will be added to product set with given Parent SKU. You may omit providing Parent SKU, in this  case it will be autogenerated: we will take Seller SKU of first product within product set and it will be used as Parent SKU.',
        example='68040427550',
    )
    brandId: Optional[int] = Field(
        None,
        description='Please, note that not every brand can be used without prior approval. Also, there are some brand-specific limitation for variations (for example, for brand A it is possible to use only sizes 34, 35, 36, 37, 38, 39, 40, but size 35.5 or 33 will lead to validation error).',
        example=78,
    )
    primaryCategoryId: Optional[int] = Field(
        None,
        description='Please, note that there could limitation for certain sellers in which categories seller allowed to create ProductSets. Also, in cource of time categories can be marked as inactive (for example when category A is splitted to categories B and C).',
        example=309,
    )
    categories: Optional[List[int]] = Field(
        None,
        description='ProductSet can be listed in multiple additional categories. There is a seller-specific limit regarding maximum count of additional categories. Those categories are within one branch of the category tree, where the primary category is located.',
        example=[421, 567],
    )
    attributes: Optional[Dict[str, Any]] = Field(
        None,
        description='Array of attributes\' values. Key is attribute ID and value depends on type of attribute. It can be one of: string (for "free text attributes" like "Warranty duration"), integer (for attributes with list of options, for example "Material" can have some set of fixed options), array of integers (for attributes with multiple choise of predefined options), null (when you didn\'t provide value for optional attribute), array of strings for attributes which allow multiple values with free text.',
        example={
            '421': 'string value',
            '533': [4, 5],
            '567': 123,
            '721': ['string1', 'string2'],
            '854': None,
        },
    )
    sizeSystem: Optional[int] = Field(
        None,
        description='Represents the id of the attribute option that can represent for ex a country (AU). The values depend on the\nattribute mappings for sizeSystem. When creating the productSet this field can be null.\n',
        example=5,
    )
    browseNodes: Optional[List[int]] = Field(
        [],
        description="-> Any other category of the category tree, where you think the product shall fit also besides main 'categories', so it gets listed in the catalog under those categories as well.",
        example=[421, 567],
    )


class ApprovalStatus(Enum):
    """
    Product approval status
    """

    pending = 'pending'
    approved = 'approved'
    rejected = 'rejected'


class Status2(Enum):
    """
    Product status
    """

    active = 'active'
    inactive = 'inactive'
    deleted = 'deleted'


class Product(BaseModel):
    id: Optional[int] = Field(None, description='Product identifier', example=7865)
    uuid: Optional[str] = Field(
        None,
        description='Product UUID identifier',
        example='060cef12-08ef-4ae6-b15e-79398fedc774',
    )
    srcId: Optional[str] = Field(
        None,
        description='ID of product in Shop system. If empty means that product was not yet syncronized with Shop and is\nnot visible to end customers.\n',
        example='94345',
    )
    shopSku: Optional[str] = Field(
        None,
        description="SKU on the shop's side. Usually it is visible to end customer. If value is null, it means that product is not yet\nsyncronized with shop and SKU was not assigned.\n",
        example='NI464AKLCEZ0',
    )
    sellerSku: Optional[str] = Field(
        None,
        description="SKU from seller's side. Should be unique across products of seller.",
        example='shoe-123',
    )
    sin: Optional[str] = Field(
        None,
        description='Sometimes several sellers are selling same product. In this case products of different sellers can be displayed\nusing one single product card in shop. This parameter, if set, identifies to which product in shop system this\nproduct of seller belongs to.\n',
        example='KMPWJ5',
    )
    sellerId: Optional[int] = Field(None, example=252)
    productSetId: Optional[int] = Field(None, example=744)
    approvalStatus: Optional[ApprovalStatus] = Field(
        None, description='Product approval status', example='approved'
    )
    updatedByUserId: Optional[int] = Field(None, example=8732)
    status: Optional[Status2] = Field(
        None, description='Product status', example='active'
    )
    variation: Optional[str] = Field(
        None,
        description='name of variation, usually size like XL, 39, 62.',
        example='38',
    )
    taxClassId: Optional[int] = Field(
        None, description='Tax class Id specific for this particular size.', example=1
    )
    shipmentTypeId: Optional[int] = Field(
        None,
        description='Shipment type Id specific for this particular size. The Value include 1 - warehouse; 2 - dropshipping; 3 - crossdocking;  if the value is empty the variation will be created with the default value of this endpoint /v2/seller-settings with this parameter product_default_shipment_type',
        example=1,
    )
    productIdentifier: Optional[str] = Field(
        None, description='Identifier like EAN, Code-39, etc', example='460232163234'
    )
    duplicateGroupId: Optional[int] = Field(None, example=51)
    srcUpdatedAt: Optional[datetime_aliased] = Field(
        None,
        description='Datetime when product was last updated(synced) with shop system.',
    )
    createdAt: Optional[datetime_aliased] = None
    updatedAt: Optional[datetime_aliased] = None
    name: Optional[str] = Field(
        None, description='name of the product', example='1600 Slim Brushed Chrome '
    )


class ProductRead(BaseModel):
    id: Optional[int] = Field(None, description='Product identifier', example=7865)
    uuid: Optional[str] = Field(
        None,
        description='Product UUID identifier',
        example='060cef12-08ef-4ae6-b15e-79398fedc774',
    )
    srcId: Optional[str] = Field(
        None,
        description='ID of product in Shop system. If empty means that product was not yet syncronized with Shop and is\nnot visible to end customers.\n',
        example='94345',
    )
    shopSku: Optional[str] = Field(
        None,
        description="SKU on the shop's side. Usually it is visible to end customer. If value is null, it means that product is not yet\nsyncronized with shop and SKU was not assigned.\n",
        example='NI464AKLCEZ0',
    )
    sellerSku: Optional[str] = Field(
        None,
        description="SKU from seller's side. Should be unique across products of seller.",
        example='shoe-123',
    )
    sin: Optional[str] = Field(
        None,
        description='Sometimes several sellers are selling same product. In this case products of different sellers can be displayed\nusing one single product card in shop. This parameter, if set, identifies to which product in shop system this\nproduct of seller belongs to.\n',
        example='KMPWJ5',
    )
    sellerId: Optional[int] = Field(None, example=252)
    productSetId: Optional[int] = Field(None, example=744)
    approvalStatus: Optional[ApprovalStatus] = Field(
        None, description='Product approval status', example='approved'
    )
    updatedByUserId: Optional[int] = Field(None, example=8732)
    status: Optional[Status2] = Field(
        None, description='Product status', example='active'
    )
    variation: Optional[str] = Field(
        None,
        description='name of variation, usually size like XL, 39, 62',
        example='38',
    )
    taxClassId: Optional[int] = Field(
        None, description='Tax class Id specific for this particular size.', example=1
    )
    shipmentTypeId: Optional[int] = Field(
        None,
        description='Shipment type Id specific for this particular size.',
        example=1,
    )
    productIdentifier: Optional[str] = Field(
        None, description='Identifier like EAN, Code-39, etc', example='460232163234'
    )
    duplicateGroupId: Optional[int] = Field(None, example=51)
    srcUpdatedAt: Optional[datetime_aliased] = Field(
        None,
        description='Datetime when product was last updated(synced) with shop system.',
    )
    createdAt: Optional[datetime_aliased] = None
    updatedAt: Optional[datetime_aliased] = None


class Price(BaseModel):
    price: Optional[float] = Field(None, example=123.56)
    currency: Optional[str] = Field(None, example='HKD')
    country: Optional[str] = Field(None, example='HK')


class Image(BaseModel):
    imageId: Optional[int] = Field(None, example=11)
    displayUrl: Optional[str] = Field(None, example='https://p/lamoda-nike-11111.jpg')
    position: Optional[str] = Field(None, example=1)


class HybridProduct(BaseModel):
    sin: Optional[str] = Field(
        None,
        description='Sometimes several sellers are selling same product. In this case products of different sellers can be displayed \nusing one single product card in shop. This parameter, if set, identifies to which product in shop system this \nproduct of seller belongs to.\n',
        example='KMPWJ5',
    )
    sku: Optional[str] = Field(
        None,
        description="SKU on the shop's side. Usually it is visible to end customer. If value is null, it means that product is not yet \nsyncronized with shop and SKU was not assigned.\n",
        example='NI464AKLCEZ0',
    )
    name: Optional[str] = Field(None, example='Nike Shoes')
    description: Optional[str] = Field(None, example="Men's shoes")
    productUrl: Optional[str] = Field(
        None,
        description='For seller to be able to see how product looks like for end user.\n',
        example='https://absolute-product-url',
    )
    prices: Optional[List[Price]] = Field(
        None,
        description='Prices of product, it is an array of object consisting of price , currency and country.',
    )
    images: Optional[List[Image]] = Field(
        None,
        description='Images of product, it is an array of object consisting of imageId , displayUrl and position.',
    )
    brandName: Optional[str] = Field(None, description='Brand name', example='Nike')


class PriceRead(BaseModel):
    productSetId: Optional[float] = Field(None, example=672)
    productId: Optional[float] = Field(None, example=2223)
    price: Optional[float] = Field(
        None,
        description='Price of a product.\nMight be restricted by maximum or minimum allowed category price.\n',
        example=7.89,
    )
    salePrice: Optional[float] = Field(
        None,
        description='Sale price of a product. Can be added only if sale price feature is unlocked for the country.\nUser settings may forbid user from changing it.\nCountry settings may require minimum period of time product is active before sale price can be set.\nMust be lower than regular price.\nMight be restricted by maximum or minimum allowed category price and by allowed discount.\n',
        example=6,
    )
    saleStartDate: Optional[datetime_aliased] = Field(
        None,
        description='Start date of a sale pricing. Can be added only if sale price feature is unlocked for the country.\nUser settings may forbid user from changing it.\nMust be set after 2010-01-01.\n',
    )
    saleEndDate: Optional[datetime_aliased] = Field(
        None,
        description='End date of a sale pricing. Can be added only if sale price feature is unlocked for the country.\nUser settings may forbid user from changing it.\nMust be set in the future and be further in time than saleStartDate.\n',
    )
    country: Optional[str] = Field(None, example='ID')
    status: Optional[str] = Field(
        None,
        description='Indicates whether certain product should be sold in given country.',
        example='active',
    )


class PriceInGroup(BaseModel):
    price: Optional[float] = Field(
        None,
        description='Price of a product.\nMight be restricted by maximum or minimum allowed category price.\n',
        example=7.89,
    )
    salePrice: Optional[float] = Field(
        None,
        description='Sale price of a product. Can be added only if sale price feature is unlocked for the country.\nUser settings may forbid user from changing it.\nCountry settings may require minimum period of time product is active before sale price can be set.\nMust be lower than regular price.\nMight be restricted by maximum or minimum allowed category price and by allowed discount.\n',
        example=6,
    )
    saleStartDate: Optional[datetime_aliased] = Field(
        None,
        description='Start date of a sale pricing. Can be added only if sale price feature is unlocked for the country.\nUser settings may forbid user from changing it.\nMust be set after 2010-01-01.\n',
    )
    saleEndDate: Optional[datetime_aliased] = Field(
        None,
        description='End date of a sale pricing. Can be added only if sale price feature is unlocked for the country.\nUser settings may forbid user from changing it.\nMust be set in the future and be further in time than saleStartDate.\n',
    )
    country: Optional[str] = Field(None, example='ID')
    status: Optional[str] = Field(
        None,
        description='Indicates whether certain product should be sold in given country.',
        example='active',
    )


class Price1(BaseModel):
    price: Optional[float] = Field(
        None,
        description='Price of a product.\nMight be restricted by maximum or minimum allowed category price.\n',
        example=7.89,
    )
    salePrice: Optional[float] = Field(
        None,
        description='Sale price of a product. Can be added only if sale price feature is unlocked for the country.\nUser settings may forbid user from changing it.\nCountry settings may require minimum period of time product is active before sale price can be set.\nMust be lower than regular price.\nMight be restricted by maximum or minimum allowed category price and by allowed discount.\n',
        example=6,
    )
    saleStartDate: Optional[datetime_aliased] = Field(
        None,
        description='Start date of a sale pricing. Can be added only if sale price feature is unlocked for the country.\nUser settings may forbid user from changing it.\nMust be set after 2010-01-01.\n',
    )
    saleEndDate: Optional[datetime_aliased] = Field(
        None,
        description='End date of a sale pricing. Can be added only if sale price feature is unlocked for the country.\nUser settings may forbid user from changing it.\nMust be set in the future and be further in time than saleStartDate.\n',
    )
    country: Optional[str] = Field(None, example='ID')
    status: Optional[str] = Field(
        None,
        description='Indicates whether certain product should be sold in given country.',
        example='active',
    )


class Item(BaseModel):
    productId: Optional[int] = Field(None, example=3333)
    prices: Optional[List[Price1]] = None


class GroupedPriceRead(BaseModel):
    productSetId: Optional[int] = Field(None, example=432)
    items: Optional[List[Item]] = None


class GroupRead(BaseModel):
    name: Optional[str] = Field(None, example='Super products')


class Image1(BaseModel):
    id: Optional[int] = Field(None, example=7865)
    srcId: Optional[str] = Field(
        None,
        description='ID of image in Shop system. If empty means that image was not yet synchronized with Shop and is not visible to end customers.',
        example='94345',
    )
    productSetId: Optional[int] = Field(None, example=744)
    position: Optional[int] = Field(
        None,
        description='Contains information about desired order in which images should be displayed to end customer. May contain gaps in case if some image was deleted. Positions are usually recalculated starting from 1 during any update operation (adding new image, for example).',
        example=2,
    )
    displayUrl: Optional[str] = Field(
        None,
        description='Full public URL of image.',
        example='https://some.domain/path/image.jpg',
    )
    createdAt: Optional[datetime_aliased] = None
    updatedAt: Optional[datetime_aliased] = None


class ImageWrite(BaseModel):
    position: Optional[int] = Field(
        None,
        description='Contains information about desired order in which images should be displayed to end customer. May contain gaps in case if some image was deleted. Positions are usually recalculated starting from 1 during any update operation (adding new image, for example).',
        example=2,
    )
    displayUrl: Optional[str] = Field(
        None,
        description='Full public URL of image.',
        example='https://some.domain/path/image.jpg',
    )
    overwrite: Optional[bool] = Field(
        False,
        description='Indicates if the existing image at the specified position should be replaced.  If set to true, the image currently at the provided position will be overwritten  with the new image. If false or not provided, the image will be added without  replacing any existing image. Default is false.\n',
        example=False,
    )


class FormImagePosition(BaseModel):
    position: Optional[int] = Field(
        None,
        description='Contains information about desired order in which images should be displayed to end customer. May contain gaps in case if some image was deleted. Positions are usually recalculated starting from 1 during any update operation (adding new image, for example).',
        example=2,
    )


class ImagePosition(RootModel[int]):
    model_config = ConfigDict(
        json_schema_extra = {
            "description": "Contains information about desired order in which images should be displayed to end customer. May contain gaps in case if some image was deleted. Positions are usually recalculated starting from 1 during any update operation (adding new image, for example).",
            "example": 2
        }
    )


class ImageOverwrite(RootModel[bool]):
    model_config = ConfigDict(
        json_schema_extra = {
            "description": 'Indicates if the existing image at the specified position should be replaced.  If set to true, the image currently at the provided position will be overwritten  with the new image. If false or not provided, the image will be added without  replacing any existing image. Default is false.\n',
            "example": False
        }
    )


class OverwriteMultipart(BaseModel):
    overwrite: Optional[bool] = Field(
        False,
        description='Indicates if the existing image at the specified position should be replaced.  If set to true, the image currently at the provided position will be overwritten  with the new image. If false or not provided, the image will be added without  replacing any existing image. Default is false.\n',
        example=False,
    )


class ImageDisplayUrl(RootModel[str]):
    model_config = ConfigDict(
        json_schema_extra = {
            "description": 'Full public URL of image.',
            "example": 'https://some.domain/path/image.jpg'
        }
    )


class ImportFile(BaseModel):
    """
    The field name 'file1' is temporary - it will be changed

    """

    file1: bytes


class Product1(BaseModel):
    SellerSku: Optional[str] = None
    Quantity: Optional[int] = None


class ImportProductStockXml(BaseModel):
    """
    XML Request Example ``` <Request>
        <Product>
            <SellerSku>AAA3</SellerSku>
            <Quantity>1030</Quantity>
        </Product>
        <Product>
            <SellerSku>AAA1</SellerSku>
            <Quantity>1010</Quantity>
        </Product>
    </Request>
    """

    Product: Optional[Product1] = None


class ProductDatum(BaseModel):
    Megapixels: Optional[int] = Field(None, example=490)
    OpticalZoom: Optional[int] = Field(None, example=7)
    SystemMemory: Optional[int] = Field(None, example=4)
    NumberCpus: Optional[int] = Field(None, example=7)
    Network: Optional[str] = None


class Product2(BaseModel):
    SellerSku: Optional[str] = None
    ParentSku: Optional[str] = None
    Status: Optional[str] = None
    Name: Optional[str] = None
    Variation: Optional[str] = None
    PrimaryCategory: Optional[int] = None
    Categories: Optional[str] = None
    BrowseNodes: Optional[str] = None
    Description: Optional[str] = None
    Brand: Optional[str] = None
    Price: Optional[float] = Field(None, example=123.56)
    SalePrice: Optional[float] = Field(None, example=123.56)
    SaleStartDate: Optional[datetime_aliased] = Field(
        None, example='2023-11-01 03:33:47'
    )
    SaleEndDate: Optional[datetime_aliased] = Field(None, example='2023-11-12 03:33:47')
    TaxClass: Optional[str] = None
    ShipmentType: Optional[str] = None
    ProductId: Optional[str] = Field(
        None, description='ProductId is not id of product, it is EAN/GTIN'
    )
    ProductData: Optional[List[ProductDatum]] = None
    Quantity: Optional[int] = None


class ImportProductCreationXml(BaseModel):
    """
    ``` XML Request Example <Request>
      <Product>
        <SellerSku>4105382173aaee4</SellerSku>
        <ParentSku>asd23eadas</ParentSku>
        <Status>active</Status>
        <Name>Magic Product</Name>
        <Variation>XXL</Variation>
        <PrimaryCategory>4</PrimaryCategory>
        <Categories>2,3,5</Categories>
        <Description><![CDATA[This is a <b>bold</b> product.]]></Description>
        <Brand>ASM</Brand>
        <Price>100.00</Price>
        <SalePrice>32.5</SalePrice>
        <SaleStartDate>2023-11-01 03:33:47</SaleStartDate>
        <SaleEndDate>2023-11-12 03:33:47</SaleEndDate>
        <ShipmentType>dropshipping</ShipmentType>
        <ProductId>xyzabc</ProductId>
        <ProductData>
          <Megapixels>490</Megapixels>
          <OpticalZoom>7</OpticalZoom>
          <SystemMemory>4</SystemMemory>
          <NumberCpus>32</NumberCpus>
          <Network>This is network</Network>
        </ProductData>
        <Quantity>10</Quantity>
      </Product>
      <Product>
        <SellerSku>4105382173aaee4</SellerSku>
        <ParentSku>asd23eadas<ParentSku/>
        <Status>active</Status>
        <Name>Magic Product</Name>
        <Variation>XXL</Variation>
        <PrimaryCategory>4</PrimaryCategory>
        <Categories>2,3,5</Categories>
        <Description><![CDATA[This is a <b>bold</b> product.]]></Description>
        <Brand>ASM</Brand>
        <Price>100.00</Price>
        <SalePrice>32.5</SalePrice>
        <SaleStartDate>2023-11-01 03:33:47</SaleStartDate>
        <SaleEndDate>2023-11-12 03:33:47</SaleEndDate>
        <ShipmentType>dropshipping</ShipmentType>
        <ProductId>xyzabc</ProductId>
        <ProductData>
          <Megapixels>490</Megapixels>
          <OpticalZoom>7</OpticalZoom>
          <SystemMemory>4</SystemMemory>
          <NumberCpus>32</NumberCpus>
          <Network>This is network</Network>
        </ProductData>
        <Quantity>10</Quantity>
      </Product>
    </Request>
    """

    Product: Optional[Product2] = None


class Product3(BaseModel):
    SellerSku: Optional[str] = None
    ParentSku: Optional[str] = None
    Status: Optional[str] = None
    Name: Optional[str] = None
    Variation: Optional[str] = None
    PrimaryCategory: Optional[int] = None
    Categories: Optional[str] = None
    BrowseNodes: Optional[str] = None
    Description: Optional[str] = None
    Brand: Optional[str] = None
    Price: Optional[float] = Field(None, example=123.56)
    SalePrice: Optional[float] = Field(None, example=123.56)
    SaleStartDate: Optional[datetime_aliased] = Field(
        None, example='2023-11-02 03:33:47'
    )
    SaleEndDate: Optional[datetime_aliased] = Field(None, example='2023-11-12 03:33:47')
    TaxClass: Optional[str] = None
    ShipmentType: Optional[str] = None
    ProductId: Optional[str] = None
    ProductData: Optional[List[ProductDatum]] = None
    Quantity: Optional[int] = None
    ProductGroup: Optional[str] = None


class ImportProductUpdateXml(BaseModel):
    """
    ``` XML Request Example <Request>
      <Product>
        <SellerSku>4105382173aaee4</SellerSku>
        <ParentSku>asd23eadas</ParentSku>
        <Status>active</Status>
        <Name>Magic Product</Name>
        <Variation>XXL</Variation>
        <PrimaryCategory>4</PrimaryCategory>
        <Categories>2,3,5</Categories>
        <Description><![CDATA[This is a <b>bold</b> product.]]></Description>
        <Brand>ASM</Brand>
        <Price>100.00</Price>
        <SalePrice>32.5</SalePrice>
        <SaleStartDate>2023-11-01 03:33:47</SaleStartDate>
        <SaleEndDate>2023-11-12 03:33:47</SaleEndDate>
        <ShipmentType>dropshipping</ShipmentType>
        <ProductId>xyzabc</ProductId>
        <ProductData>
          <Megapixels>490</Megapixels>
          <OpticalZoom>7</OpticalZoom>
          <SystemMemory>4</SystemMemory>
          <NumberCpus>32</NumberCpus>
          <Network>This is network</Network>
        </ProductData>
        <Quantity>10</Quantity>
      </Product>
      <Product>
        <SellerSku>4105382173aaee4</SellerSku>
        <ParentSku>asd23eadas<ParentSku/>
        <Status>active</Status>
        <Name>Magic Product</Name>
        <Variation>XXL</Variation>
        <PrimaryCategory>4</PrimaryCategory>
        <Categories>2,3,5</Categories>
        <Description><![CDATA[This is a <b>bold</b> product.]]></Description>
        <Brand>ASM</Brand>
        <Price>100.00</Price>
        <SalePrice>32.5</SalePrice>
        <SaleStartDate>2023-11-01 03:33:47</SaleStartDate>
        <SaleEndDate>2023-11-12 03:33:47</SaleEndDate>
        <ShipmentType>dropshipping</ShipmentType>
        <ProductId>xyzabc</ProductId>
        <ProductData>
          <Megapixels>490</Megapixels>
          <OpticalZoom>7</OpticalZoom>
          <SystemMemory>4</SystemMemory>
          <NumberCpus>32</NumberCpus>
          <Network>This is network</Network>
        </ProductData>
        <Quantity>10</Quantity>
      </Product>
    </Request>
    """

    Product: Optional[Product3] = None


class ImportFileAccepted(BaseModel):
    success: Optional[bool] = Field(None, example=True)
    message: Optional[str] = Field(
        None,
        example='<b>File has been successfully uploaded.</b> Please be patient while data is being processed.',
    )
    errorMessages: Optional[List[str]] = None
    warningMessages: Optional[List[str]] = None
    feedId: Optional[int] = Field(None, example=7)
    feedUuid: Optional[str] = Field(
        None, example='060cef12-08ef-4ae6-b15e-79398fedc774'
    )


class Head(BaseModel):
    RequestId: Optional[str] = Field(
        None,
        description='The unique identifier for the request.',
        example='1adf8fc6-a08f-47d5-9613-e2af40243e2f',
    )
    RequestAction: Optional[str] = Field(
        None,
        description='The action that was successfully performed.',
        example='ProductStockUpdate',
    )
    ResponseType: Optional[str] = Field(
        None, description='The type of the response, if any.'
    )
    Timestamp: Optional[datetime_aliased] = Field(
        None,
        description='The timestamp of when the action was performed.',
        example='2023-05-26T17:26:50+0200',
    )


class WarningDetail(BaseModel):
    field: Optional[str] = Field(
        None, description='The field associated with the warning.', alias='Field'
    )
    Message: Optional[str] = Field(
        None, description='A message explaining the warning.'
    )
    Value: Optional[str] = Field(None, description='The value that caused the warning.')


class Body(BaseModel):
    WarningDetail: Optional[WarningDetail] = None


class ImportStockXmlSuccess(BaseModel):
    Head: Optional[Head] = None
    Body: Optional[Body] = None


class Head1(BaseModel):
    RequestAction: Optional[str] = Field(
        None,
        description='The action that was requested when the error occurred.',
        example='ProductStockUpdate',
    )
    ErrorType: Optional[str] = Field(
        None, description='The type of the error.', example='Platform'
    )
    ErrorCode: Optional[int] = Field(
        None, description='The code of the error.', example=30
    )
    ErrorMessage: Optional[str] = Field(
        None,
        description='A message describing the error.',
        example='E030: Empty Request',
    )


class ErrorDetailItem(BaseModel):
    field: Optional[str] = Field(
        None, description='The field where the error occurred.', example='field1', alias='Field'
    )
    Message: Optional[str] = Field(
        None, description='A message describing the error detail.', example='message1'
    )
    Value: Optional[str] = Field(
        None, description='The value that caused the error.', example='value1'
    )
    SellerSku: Optional[str] = Field(
        None, description='The seller SKU related to the error.', example='sku1'
    )


class Body1(BaseModel):
    ErrorDetail: Optional[List[ErrorDetailItem]] = None


class ErrorResponse(BaseModel):
    Head: Optional[Head1] = None
    Body: Optional[Body1] = None


class ImportStocksXmlError(BaseModel):
    ErrorResponse: Optional[ErrorResponse] = None


class Head2(BaseModel):
    RequestId: Optional[str] = Field(
        None,
        description='The unique identifier for the request.',
        example='cb106552-87f3-450b-aa8b-412246a24b34',
    )
    RequestAction: Optional[str] = Field(
        None,
        description='The action that was successfully performed.',
        example='ProductCreate',
    )
    ResponseType: Optional[str] = Field(
        None, description='The type of the response, if any.'
    )
    Timestamp: Optional[datetime_aliased] = Field(
        None,
        description='The timestamp of when the action was performed.',
        example='2016-06-22T04:40:14+0200',
    )


class Body2(BaseModel):
    WarningDetail: Optional[WarningDetail] = None


class ImportProductCreationXmlSuccess(BaseModel):
    Head: Optional[Head2] = None
    Body: Optional[Body2] = None


class Head3(BaseModel):
    RequestAction: Optional[str] = Field(
        None,
        description='The action that was requested when the error occurred.',
        example='ProductCreate',
    )
    ErrorType: Optional[str] = Field(
        None, description='The type of the error.', example='Platform'
    )
    ErrorCode: Optional[int] = Field(
        None, description='The code of the error.', example=1000
    )
    ErrorMessage: Optional[str] = Field(
        None,
        description='A message describing the error.',
        example='Could not save product: An exact match of the document is being processed, cb106552-87f3-450b-aa8b-412246a24b34',
    )


class Body3(BaseModel):
    ErrorDetail: Optional[List[ErrorDetailItem]] = None


class ErrorResponse1(BaseModel):
    Head: Optional[Head3] = None
    Body: Optional[Body3] = None


class ImportProductCreationXmlError(BaseModel):
    ErrorResponse: Optional[ErrorResponse1] = None


class Status4(Enum):
    active = 'active'
    inactive = 'inactive'
    deleted = 'deleted'


class Brands(BaseModel):
    id: Optional[int] = Field(None, example=111555)
    srcId: Optional[str] = Field(None, description='Internal id', example='ADI5341')
    uuid: Optional[str] = Field(None, example='1af9fe46-77d2-4ab2-8b4a-8c7eeac8bbc9')
    name: Optional[str] = Field(None, example='Adidas')
    status: Optional[Status4] = None
    isActive: Optional[bool] = Field(None, example=True)
    isApproved: Optional[bool] = Field(None, example=True)
    isRestricted: Optional[bool] = Field(None, example=False)
    countries: Optional[str] = Field(None, example='RU,KZ')
    createdAt: Optional[datetime_aliased] = Field(
        None, example='2021-09-22T23:21:42+02:00'
    )
    updatedAt: Optional[datetime_aliased] = Field(
        None, example='2021-09-22T23:21:42+02:00'
    )


class BrandAttributes(BaseModel):
    id: Optional[int] = Field(None, example=123)
    name: Optional[str] = Field(None, example='supplier_type')
    options: Optional[List[Option]] = None


class Consignments(BaseModel):
    """
    It will be populated if Seller Settings is activated (Seller Settings->Order Processing->Fulfilment by Venture) and If at least one consignment stock is higher than 0 (e.g receivedConsignment > 0)
    """

    received: Optional[int] = Field(None, description='Received consignment stock')
    quarantined: Optional[int] = Field(
        None, description='Quarantined consignment stock'
    )
    defective: Optional[int] = Field(None, description='Defective consignment stock')
    canceled: Optional[int] = Field(None, description='Canceled consignment stock')
    returned: Optional[int] = Field(None, description='Returned consignment stock')
    failed: Optional[int] = Field(None, description='Failed consignment stock')


class Warehouse(BaseModel):
    name: Optional[str] = Field(
        None, description='Warehouse Name', example='Central Warehouse'
    )
    stock: Optional[int] = Field(None, description='Warehouse stock', example=89)
    warehouseId: Optional[int] = Field(None, description='Warehouse id', example=1)


class StockRead(BaseModel):
    shopSku: Optional[str] = Field(
        None,
        description="SKU on the shop's side. Usually it is visible to end customer. If value is null, it means that product is not yet syncronized with shop and SKU was not assigned.",
        example='NI464AKLCEZ0',
    )
    sellerSku: Optional[str] = Field(
        None,
        description="SKU from seller's side. Should be unique across products of seller.",
        example='shoe-123',
    )
    name: Optional[str] = Field(
        None, description="Product's name", example='Block Shell Jacket'
    )
    quantity: Optional[int] = Field(
        None,
        description='The sellable stock in the Seller warehouse. This is current quantity from catalog product table.',
        example=63,
    )
    reservedStock: Optional[int] = Field(
        None,
        description='The product stock from Pending or Ready to Ship order items where shipment type is drop-shipping or cross-docking.',
        example=11,
    )
    preVerificationStock: Optional[int] = Field(
        None, description='The product stock in PreVerification', example=11
    )
    available: Optional[int] = Field(
        None,
        description='AvailableStock = (Quantity + ReceivedConsignment + CanceledConsignment + ReturnedConsignment + FailedConsignment - ReservedStock). If PreVerification stock is enabled and is higher than ReservedStock when the formula is: AvailableStock = (Quantity + ReceivedConsignment + CanceledConsignment + ReturnedConsignment + FailedConsignment - PreverificationStock)',
        example=12,
    )
    consignments: Optional[Consignments] = Field(
        None,
        description='It will be populated if Seller Settings is activated (Seller Settings->Order Processing->Fulfilment by Venture) and If at least one consignment stock is higher than 0 (e.g receivedConsignment > 0)',
    )
    sellableStock: Optional[int] = Field(
        None,
        description='ReceivedConsignment + CanceledConsignment + ReturnedConsignment + FailedConsignment',
        example=101,
    )
    nonSellableStock: Optional[int] = Field(
        None, description='QuarantinedConsignment + DefectiveConsignment', example=2
    )
    warehouses: Optional[List[Warehouse]] = Field(
        None,
        description='It will be populated if feature switch is enabled (core:seller/multi_warehouse/enabled) and Seller Settings is activated (Seller Settings->Product Management->Enable multi-warehouse usage) and If the warehouse stock is higher than 0.',
    )


class ConsignmentStock(BaseModel):
    id: Optional[int] = Field(None, description='Identifier')
    productId: Optional[int] = Field(None, description='Product identifier')
    received: Optional[int] = None
    quarantined: Optional[int] = None
    defective: Optional[int] = None
    canceled: Optional[int] = None
    returned: Optional[int] = None
    failed: Optional[int] = None


class GeneralError(BaseModel):
    type: Optional[str] = Field(None, description='')
    title: Optional[str] = Field(
        None,
        description='A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\n',
        example='Status Transition is not allowed',
    )
    status: Optional[int] = Field(
        None,
        description='The HTTP status code generated by the origin server for this occurrence of the problem.\n',
        example=400,
        ge=400,
        le=599,
    )
    detail: Optional[str] = Field(
        None,
        description='A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\n',
        example="Status 'InTransit2' is not valid status for order item.",
    )


class Paginator(BaseModel):
    limit: Optional[int] = Field(
        None, description='Entity limit per request\n', example=20
    )
    offset: Optional[int] = Field(
        None, description='Offset for entities in repository\n', example=10
    )
    totalCount: Optional[int] = Field(
        None, description='Total count of entities for request\n', example=100
    )


class PaginatorWithoutTotalCount(BaseModel):
    limit: Optional[int] = Field(
        None, description='Entity limit per request\n', example=20
    )
    offset: Optional[int] = Field(
        None, description='Offset for entities in repository\n', example=10
    )
    hasNext: Optional[bool] = Field(
        None,
        description='True if next page will have at least one result\n',
        example=False,
    )


class CustomKpiWrite(BaseModel):
    externalKpiName: Optional[str] = Field(None, example='Operational Score')
    sellerShortCode: Optional[str] = Field(None, example='NG1003C')
    value: Optional[float] = Field(None, example=50, ge=0.01, le=100.0)


class Status5(Enum):
    """
    Category status
    """

    active = 'active'
    inactive = 'inactive'
    inherited_inactive = 'inherited_inactive'
    deleted = 'deleted'


class Category(BaseModel):
    id: Optional[int] = Field(None, description='Category identifier', example=7865)
    parentId: Optional[int] = Field(
        None, description='Category parent identifier', example=1285
    )
    name: Optional[str] = Field(
        None, description='Category name', example='Sample category name'
    )
    attributeSetId: Optional[int] = Field(
        None, description='Attribute set identifier', example=8757345
    )
    pathIds: Optional[List[int]] = Field(
        None, description='Category path identifier list', example=[3461, 6783]
    )
    path: Optional[List[str]] = Field(
        None,
        description='Category path',
        example=['Back To School', 'For Kids', 'Books'],
    )
    childrenIds: Optional[List[int]] = Field(
        None, description='Category children id list', example=[7834, 7835]
    )
    visible: Optional[bool] = Field(
        None, description='Whether or not the category is visible', example=True
    )
    fulfillmentVisible: Optional[bool] = Field(
        None,
        description='Whether or not the category is visible in consignment',
        example=True,
    )
    qcDisabled: Optional[bool] = Field(
        None,
        description='Whether or not the category is disabled in quality-control',
        example=False,
    )
    serialNumberRequired: Optional[bool] = Field(
        None,
        description='Whether or not the category requires a serial number',
        example=False,
    )
    status: Optional[Status5] = Field(None, description='Category status')
    uuid: Optional[str] = Field(
        None,
        description='Category UUID identifier',
        example='060cef12-08ef-4ae6-b15e-79398fedc774',
    )


class CategoryBasicInfo(BaseModel):
    id: Optional[int] = Field(None, description='Category identifier', example=7865)
    parentId: Optional[int] = Field(
        None, description='Category parent identifier', example=1285
    )
    name: Optional[str] = Field(
        None, description='Category name', example='Sample category name'
    )
    attributeSetId: Optional[int] = Field(
        None, description='Attribute set identifier', example=8757345
    )
    pathIds: Optional[List[int]] = Field(
        None, description='Category path identifier list', example=[3461, 6783]
    )
    path: Optional[List[str]] = Field(
        None,
        description='Category path',
        example=['Back To School', 'For Kids', 'Books'],
    )
    uuid: Optional[str] = Field(
        None,
        description='Category UUID identifier',
        example='060cef12-08ef-4ae6-b15e-79398fedc774',
    )


class Child(BaseModel):
    id: Optional[int] = Field(None, description='Category identifier', example=7865)
    parentId: Optional[int] = Field(
        None, description='Category parent identifier', example=1285
    )
    name: Optional[str] = Field(
        None, description='Category name', example='Sample category name'
    )
    attributeSetId: Optional[int] = Field(
        None, description='Attribute set identifier', example=8757345
    )
    pathIds: Optional[List[int]] = Field(
        None, description='Category path identifier list', example=[3461, 6783]
    )
    path: Optional[List[str]] = Field(
        None,
        description='Category path',
        example=['Back To School', 'For Kids', 'Books'],
    )
    uuid: Optional[str] = Field(
        None,
        description='Category UUID identifier',
        example='060cef12-08ef-4ae6-b15e-79398fedc774',
    )
    children: Optional[List] = Field(None, description='Category children', example=[])


class CategoryTree(BaseModel):
    id: Optional[int] = Field(None, description='Category identifier', example=7865)
    parentId: Optional[int] = Field(
        None, description='Category parent identifier', example=1285
    )
    name: Optional[str] = Field(
        None, description='Category name', example='Sample category name'
    )
    attributeSetId: Optional[int] = Field(
        None, description='Attribute set identifier', example=8757345
    )
    pathIds: Optional[List[int]] = Field(
        None, description='Category path identifier list', example=[3461, 6783]
    )
    path: Optional[List[str]] = Field(
        None,
        description='Category path',
        example=['Back To School', 'For Kids', 'Books'],
    )
    uuid: Optional[str] = Field(
        None,
        description='Category UUID identifier',
        example='060cef12-08ef-4ae6-b15e-79398fedc774',
    )
    children: Optional[List[Child]] = Field(None, description='Category children')


class InputType(Enum):
    """
    Type of input to display to user. See enum values for possible values. This may be
    useful if you develop your own UI for SellerCenter.

    """

    checkbox = 'checkbox'
    datefield = 'datefield'
    datetime = 'datetime'
    dropdown = 'dropdown'
    multiselect = 'multiselect'
    numberfield = 'numberfield'
    textarea = 'textarea'
    textfield = 'textfield'


class AttributeType(Enum):
    """
    Type of an attribute, see enum for possible values. It defines how SellerCenter stores value of certain
    attribute. For type of "value" - it is stored "as-is", for "option" - ID of option stored,
    for "multi_option" - array or option IDs.

    This is useful when you get information about product set and you want to understand whether
    123 is plain value or ID of option.

    There is a special attribute type called "system". Attribute with those types returned for purposes
    of making aware about logic of those attributes. For example, you may see attribute "Brand" among them.
    From this attribute you will see useful information like "is it mandatory?", "what is example value of
    it?", "what description can I show to my users while I develop our own UI for SellerCenter".

    Attributes of this type should not be sent in array of "attributes" when you create or update your
    product sets. Continuing with example of Brand attribute: to pass this information you should use
    field brandId in root of payload for creation of product set.

    """

    value = 'value'
    option = 'option'
    multi_option = 'multi_option'
    system = 'system'


class AttributeDefinitionType(Enum):
    """
    Is used to define the attribute type

    """

    default = 'default'
    price_status = 'price_status'
    price = 'price'
    special_price = 'special_price'
    sale_start = 'sale_start'
    sale_end = 'sale_end'


class AttributeDefinitionCountry(Enum):
    """
    Is used to define the attribute's country/vendor

    """

    TW = 'TW'
    SG = 'SG'
    PH = 'PH'
    ID = 'ID'
    MY = 'MY'
    HK = 'HK'


class InputMode(Enum):
    """
    Is used to disable, hide a field. See enum values for possible values.

    """

    edit = 'edit'
    display = 'display'
    invisible = 'invisible'
    edit_on_create = 'edit_on_create'


class Option2(BaseModel):
    id: Optional[int] = Field(
        None,
        description='Option identifier. Please note that several attrbiutes can have options with same name,\nbut with different IDs. You need to use right option ID for right attribute. For example,\nthere are attributes "Colour" (ID=1) and "Soil color" (ID=2). "Color" has option "Black"\nwith ID=1234 and "Soil color" has option "Black" with ID=9876. Even though name of options\nare the same, when you want to pass value for "Soil color" you can send only 9876,\n',
        example=631,
    )
    name: Optional[str] = Field(
        None,
        description='Option name. If you implement own UI for SellerCenter you can display this to user, also\nsame value end user in the shop will see. If you are generating XLS files for future\nupload to SellerCenter then you need also to use this value. Please, note that very rarely\nthis value can be changed (for example, one colour got splitted in two or more, renamed\nto be more understandable for end user)\n',
        example='Black',
    )
    isDefault: Optional[bool] = Field(
        None,
        description='Is option default. Used as hint when this option is most commonly used. It may be useful\nif you implementing own UI for SellerCenter and this option should be displayed as\nselected by defaul when your user sees the screen of product set creation.\n',
        example=False,
    )


class CategoryAttribute(BaseModel):
    id: Optional[int] = Field(
        None,
        description='Attribute identifier. Please, consider the fact that there could be several attributes with\nthe same name, but with different IDs. For example, there can be AttributeSets "Shoes", "Dresses"\nand "Jewelry". Shoes and Dresses has "color", but there is no such attribute for "Jewelry".\n\nSo when you want to create product in "Shoes" or "Dresses" you can (and if "color" is mandatory -\nshould) pass value of "color". But this attribute "color" will have different IDs, probably\ndifferent set of options, maybe different validation rules and so on.\n',
        example=7865,
    )
    label: Optional[str] = Field(
        None,
        description='Attribute label, in general same as name, but can contain spaces and non-latin and/or non numeric\ncharacters. Subject to change. For example, there is attribute with label "Colour" but then new\nattribute "Second color" was added to make end users be able to shop for perfect colour combination.\nAfter that attribute with label "Colour" may change its label to "Main Colour". You can use this\nproperty if you are building your own UI for SellerCenter operations as label for attribute.\n',
        example='Sample attribute label',
    )
    name: Optional[str] = Field(
        None,
        description='Attribute name for internal usage. You can ignore this property.',
        example='Attribute name',
    )
    feedName: Optional[str] = Field(
        None,
        description='Feed name: this is how attribute is displayed in XLSX exports and expected to be in imports. When your\nintegration with SellerCenter will generate files for upload to SellerCenter, then you need to use this\nproperty as column name. Very rarely changed, but you need to consider that is can happen.\n',
        example='Feed name',
    )
    groupName: Optional[str] = Field(
        None,
        description='Attribute\'s group name. If you implement own UI for SellerCenter it is useful to display attributes in\ngroups, for example "Delivery", "Product Additional Details". By using this field you can split\nattributes in groups and display accordingly.\n',
        example='Content',
    )
    isMandatory: Optional[bool] = Field(
        None, description='Attribute is mandatory.\n', example=False
    )
    isGlobalAttribute: Optional[bool] = Field(
        None,
        description='Is true when attribute does not belong to certain AttributeSet and can be set for any product.\n',
        example=True,
    )
    description: Optional[str] = Field(
        None,
        description='Attribute description. Maybe useful to see more about meaning of attribute or when you develop\nown UI for SellerCenter operations.\n',
        example='Some description of an attribute',
    )
    productType: Optional[str] = Field(
        None,
        description='Legacy field indicating whether attribute belongs to product ("simple"), product set ("config") or very-special\n("sellercenter"). Please, do not rely on this field as it is subject to change in near future. It is left\nfor compatibility reasons for some clients of previous versions of API.\n',
        example='sellercenter',
    )
    inputType: Optional[InputType] = Field(
        None,
        description='Type of input to display to user. See enum values for possible values. This may be\nuseful if you develop your own UI for SellerCenter.\n',
        example='numberfield',
    )
    attributeType: Optional[AttributeType] = Field(
        None,
        description='Type of an attribute, see enum for possible values. It defines how SellerCenter stores value of certain\nattribute. For type of "value" - it is stored "as-is", for "option" - ID of option stored,\nfor "multi_option" - array or option IDs.\n\nThis is useful when you get information about product set and you want to understand whether\n123 is plain value or ID of option.\n\nThere is a special attribute type called "system". Attribute with those types returned for purposes\nof making aware about logic of those attributes. For example, you may see attribute "Brand" among them.\nFrom this attribute you will see useful information like "is it mandatory?", "what is example value of\nit?", "what description can I show to my users while I develop our own UI for SellerCenter".\n\nAttributes of this type should not be sent in array of "attributes" when you create or update your\nproduct sets. Continuing with example of Brand attribute: to pass this information you should use\nfield brandId in root of payload for creation of product set.\n',
        example='system',
    )
    exampleValue: Optional[str] = Field(None, description="Attribute's example value")
    maxLength: Optional[int] = Field(
        None,
        description="Attribute's max length, applicable for string attributes.\n",
        example=23,
    )
    isVisibleForHybrid: Optional[bool] = Field(
        None,
        description='This flag enables/disable if an attribute is visible or not for a hybrid product\n',
        example=True,
    )
    attributeDefinitionType: Optional[AttributeDefinitionType] = Field(
        None, description='Is used to define the attribute type\n', example='price'
    )
    attributeDefinitionCountry: Optional[AttributeDefinitionCountry] = Field(
        None,
        description="Is used to define the attribute's country/vendor\n",
        example='MY',
    )
    inputMode: Optional[InputMode] = Field(
        None,
        description='Is used to disable, hide a field. See enum values for possible values.\n',
        example='edit',
    )
    forbidEmpty: Optional[bool] = Field(
        None,
        description='If set to true an attribute can not be 0 or NULL.\n',
        example=True,
    )
    options: Optional[List[Option2]] = Field(
        None,
        description='Attribute options. List of all option for current attribute. Additional validation may apply\nlike validation "brand to attribute mappings", "attribute to attribute mapping". Example:\nyou want to create new product in category "Shoes". Option "45" is among options of attribute\n"Size", but there is a mapping which says that if for attribute "Age group" there is a value\n"Kids" selected then only allowed sizes are "20", "21", ... "32".\n',
    )
    isEditionBySellerBlocked: Optional[bool] = Field(
        None,
        description='If set to true then the value of the attribute can not be changed after the product was synced with the shop.\n',
        example=True,
    )
    isUsedInConsignmentFormulas: Optional[bool] = Field(
        None,
        description='If set to true then the attribute is used in consignment formulas.\n',
        example=True,
    )


class CategoryAttributeOption(BaseModel):
    id: Optional[int] = Field(
        None,
        description='Option identifier. Please note that several attrbiutes can have options with same name,\nbut with different IDs. You need to use right option ID for right attribute. For example,\nthere are attributes "Colour" (ID=1) and "Soil color" (ID=2). "Color" has option "Black"\nwith ID=1234 and "Soil color" has option "Black" with ID=9876. Even though name of options\nare the same, when you want to pass value for "Soil color" you can send only 9876,\n',
        example=631,
    )
    name: Optional[str] = Field(
        None,
        description='Option name. If you implement own UI for SellerCenter you can display this to user, also\nsame value end user in the shop will see. If you are generating XLS files for future\nupload to SellerCenter then you need also to use this value. Please, note that very rarely\nthis value can be changed (for example, one colour got splitted in two or more, renamed\nto be more understandable for end user)\n',
        example='Black',
    )
    isDefault: Optional[bool] = Field(
        None,
        description='Is option default. Used as hint when this option is most commonly used. It may be useful\nif you implementing own UI for SellerCenter and this option should be displayed as\nselected by defaul when your user sees the screen of product set creation.\n',
        example=False,
    )


class CategoryAttributeValidator(BaseModel):
    maxLength: Optional[int] = Field(None, description='Max length', example=255)
    decimalPlaces: Optional[int] = Field(None, description='Decimal places', example=2)
    type: Optional[str] = Field(None, description='Type')
    notEmpty: Optional[bool] = Field(None, description='Not empty', example=True)
    signed: Optional[bool] = Field(None, description='Is signed', example=False)
    checkedInBlacklist: Optional[bool] = Field(
        None, description='Is checked in blacklist', example=False
    )


class Attribute(BaseModel):
    attributeId: Optional[int] = Field(None, example=80)
    options: Optional[List[int]] = None


class CategoryMapping(BaseModel):
    categoryId: Optional[int] = Field(None, example=32)
    categoryName: Optional[str] = Field(None, example='Health')
    attributes: Optional[List[Attribute]] = None


class CategoryMappings(RootModel[List[CategoryMapping]]):
    pass


class Type(Enum):
    price = 'price'
    image = 'image'


class Name(Enum):
    image_allowed_background_color = 'image_allowed_background_color'
    image_max_background_percentage = 'image_max_background_percentage'
    image_max_blurriness_score = 'image_max_blurriness_score'
    max_discount_percentage = 'max_discount_percentage'
    max_price = 'max_price'
    max_sale_price = 'max_sale_price'
    min_discount_percentage = 'min_discount_percentage'
    min_price = 'min_price'
    min_sale_price = 'min_sale_price'


class Restriction(BaseModel):
    type: Optional[Type] = Field(None, example='price')
    name: Optional[Name] = Field(None, example='min_price')
    description: Optional[str] = Field(None, example='Min Price')
    country: Optional[str] = Field(None, example='DE')
    validationType: Optional[str] = Field(None, example='scalar')
    value: Optional[str] = Field(None, example='10')


class CategorySetting(BaseModel):
    id: Optional[int] = Field(None, example=32)
    shopId: Optional[str] = Field(
        None, description='Src ID of the category', example=139593
    )
    name: Optional[str] = Field(None, example='Electronics')
    restrictions: Optional[List[Restriction]] = None


class CategorySettings(RootModel[List[CategorySetting]]):
    pass


class Status6(Enum):
    active = 'active'
    inactive = 'inactive'
    inherited_inactive = 'inherited_inactive'
    deleted = 'deleted'


class CategoryById(BaseModel):
    id: Optional[int] = Field(None, description='Category identifier', example=7865)
    srcId: Optional[str] = Field(
        None,
        description='ID of category in Shop system. If null means that category was not yet synchronized with Shop and is not visible to end customers.',
        example='39487664',
    )
    uuid: Optional[str] = Field(
        None,
        description='Category UUID identifier',
        example='060cef12-08ef-4ae6-b15e-79398fedc774',
    )
    parentId: Optional[int] = Field(
        None, description='Category parent identifier', example=1285
    )
    name: Optional[str] = Field(
        None, description='Category name', example='Sample category name'
    )
    visible: Optional[bool] = Field(
        None, description='If the category is visible or not', example=True
    )
    status: Optional[Status6] = None
    path: Optional[List[str]] = Field(
        None,
        description='Category path',
        example=['Back To School', 'For Kids', 'Books'],
    )


class Status7(Enum):
    """
    Category status
    """

    active = 'active'
    inactive = 'inactive'
    inherited_inactive = 'inherited_inactive'
    deleted = 'deleted'


class ChildCategory(BaseModel):
    id: Optional[int] = Field(None, description='Category identifier', example=7865)
    uuid: Optional[str] = Field(
        None,
        description='Category UUID identifier',
        example='060cef12-08ef-4ae6-b15e-79398fedc774',
    )
    srcId: Optional[str] = Field(
        None,
        description='ID of category in Shop system. If null means that category was not yet synchronized with Shop and is not visible to end customers.',
        example='39487664',
    )
    status: Optional[Status7] = Field(None, description='Category status')
    visible: Optional[bool] = Field(
        None, description='Whether or not the category is visible', example=True
    )
    parentId: Optional[int] = Field(
        None, description='Category parent identifier', example=1285
    )
    name: Optional[str] = Field(
        None, description='Category name', example='Sample category name'
    )
    attributeSetId: Optional[int] = Field(
        None, description='Attribute set identifier', example=8757345
    )
    pathIds: Optional[List[int]] = Field(
        None, description='Category path identifier list', example=[3461, 6783]
    )
    path: Optional[List[str]] = Field(
        None,
        description='Category path',
        example=['Back To School', 'For Kids', 'Books'],
    )
    hasChildren: Optional[bool] = Field(
        None, description='Whether or not the category has children', example=True
    )


class Parent(BaseModel):
    """
    parent
    """

    attributeId: int = Field(..., description='attributeId', example=70)
    optionId: int = Field(..., description='optionId', example=200)


class Child1(BaseModel):
    """
    child
    """

    attributeId: int = Field(..., description='attributeId', example=75)
    optionId: int = Field(..., description='optionId', example=208)


class MappedAttribute(BaseModel):
    """
    Mapped Attribute Options
    """

    parent: Optional[Parent] = Field(None, description='parent')
    child: Optional[Child1] = Field(None, description='child')


class ProductStock(BaseModel):
    productId: Optional[int] = Field(
        None, description='Numeric ID of a product.', example=5283
    )
    quantity: Optional[int] = Field(
        None, description='The current level of inventory for this product.', example=12
    )


class Tag(BaseModel):
    """
    Tag
    """

    id: int = Field(..., description='numeric ID of Tag', example=68)
    name: str = Field(..., description='optionId', example='bestSellingProduct')


class TagSeller(BaseModel):
    """
    Seller tag
    """

    sellerId: Optional[int] = Field(
        None, description='Numeric ID of a Seller', example=42
    )
    tags: Optional[List[str]] = Field(
        None, description='Tag names', example=['test1', 'test2']
    )


class RejectedProductSet(BaseModel):
    """
    Rejected ProductSet
    """

    productSetId: int = Field(..., description='numeric ID of ProductSet', example=68)
    rejectedReasons: List[str] = Field(
        ...,
        description='list of human-readable reasons why ProductSet was rejected',
        example=['Images missing', 'Wrong category'],
    )
    qcComment: Optional[str] = Field(
        None,
        description='It is possible, but not mandatory for the QC person to add a comment on the rejection.',
        example='Some field was wrong',
    )


class Customer(BaseModel):
    """
    Customer name
    """

    firstName: Optional[str] = Field(None, description='First name', example='John')
    lastName: Optional[str] = Field(None, description='Last name', example='Doe')


class Billing(BaseModel):
    """
    Info about customer address with restricted access to certain fields
    """

    firstName: Optional[str] = Field(
        None, description='Customer first name', example='John'
    )
    lastName: Optional[str] = Field(
        None, description='Customer last name', example='Doe'
    )
    phone: Optional[List[str]] = Field(None, example=['#####'])
    address: Optional[List[str]] = Field(
        None,
        description='5 rows to show the address',
        example=['Johannisstr. 20', '', '', '', ''],
    )
    email: Optional[str] = Field(None, description='Customer email', example='#####')
    city: Optional[str] = Field(None, description='Customer city', example='Berlin')
    ward: Optional[str] = Field(None, example='')
    region: Optional[str] = Field(None, description='Customer region', example='')
    postCode: Optional[str] = Field(
        None, description='Customer post code', example='10117'
    )
    country: Optional[str] = Field(
        None, description='Customer country', example='Germany'
    )


class Shipping(BaseModel):
    """
    Info about customer address with restricted access to certain fields
    """

    firstName: Optional[str] = Field(
        None, description='Customer first name', example='John'
    )
    lastName: Optional[str] = Field(
        None, description='Customer last name', example='Doe'
    )
    phone: Optional[List[str]] = Field(None, example=['#####'])
    address: Optional[List[str]] = Field(
        None,
        description='5 rows to show the address',
        example=['Johannisstr. 20', '', '', '', ''],
    )
    email: Optional[str] = Field(None, description='Customer email', example='#####')
    city: Optional[str] = Field(None, description='Customer city', example='Berlin')
    ward: Optional[str] = Field(None, example='')
    region: Optional[str] = Field(None, description='Customer region', example='')
    postCode: Optional[str] = Field(
        None, description='Customer post code', example='10117'
    )
    country: Optional[str] = Field(
        None, description='Customer country', example='Germany'
    )


class Address(BaseModel):
    """
    Order address
    """

    billing: Billing = Field(
        ...,
        description='Info about customer address with restricted access to certain fields',
    )
    shipping: Shipping = Field(
        ...,
        description='Info about customer address with restricted access to certain fields',
    )


class Gift(BaseModel):
    option: bool = Field(..., description='Gift option', example=False)
    message: Any = Field(..., description='Gift message', example='msg')


class Voucher(BaseModel):
    code: str = Field(..., description='Voucher code', example='code')
    type: str = Field(..., description='Voucher type', example='type')


class ShipmentProviderType(Enum):
    """
    Calculated shipment provider type across all order items
    """

    express = 'express'
    standard = 'standard'
    economy = 'economy'
    digital = 'digital'
    air = 'air'
    surface = 'surface'
    mixed = 'mixed'
    sameday = 'sameday'


class OrderStatus(Enum):
    """
    Order Item status.
    """

    pending = 'pending'
    shipped = 'shipped'
    canceled = 'canceled'
    returned = 'returned'
    failed = 'failed'
    delivered = 'delivered'
    ready_to_ship = 'ready_to_ship'
    return_shipped_by_customer = 'return_shipped_by_customer'
    return_waiting_for_approval = 'return_waiting_for_approval'
    return_rejected = 'return_rejected'
    return_delivered = 'return_delivered'
    payment_pending = 'payment_pending'
    
    def get_preceeding_status(self):
        """
        Get the preceding status of the current order status.
        """
        preceding_statuses = {
            OrderStatus.pending: None,
            OrderStatus.shipped: OrderStatus.ready_to_ship,
            OrderStatus.canceled: OrderStatus.shipped,
            OrderStatus.returned: OrderStatus.shipped,
            OrderStatus.failed: OrderStatus.shipped,
            OrderStatus.delivered: OrderStatus.shipped,
            OrderStatus.ready_to_ship: OrderStatus.pending,
            OrderStatus.return_shipped_by_customer: OrderStatus.return_waiting_for_approval,
            OrderStatus.return_waiting_for_approval: None,
            OrderStatus.return_rejected: None,
            OrderStatus.return_delivered: None,
            OrderStatus.payment_pending: None
        }
        return preceding_statuses.get(self, None)

class PackedStatus(Enum):
    """
    Packed status.
    """

    fully_packed = 'fully_packed'
    partially_packed = 'partially_packed'
    not_packed = 'not_packed'
    
class FulfillmentType(Enum):
    merchant = 'merchant'
    venture = 'venture'

class Type1(Enum):
    """
    Failure reason type.

    """

    canceled = 'canceled'
    returned = 'returned'
    failed = 'failed'
    return_rejected = 'return_rejected'
    canceled_system = 'canceled_system'


class FailureReason(BaseModel):
    type: Optional[Type1] = Field(None, description='Failure reason type.\n')
    name: Optional[str] = Field(None, description='Reason name')
    description: Optional[str] = Field(None, description='Reason description')
    details: Optional[str] = Field(None, description='Reason details', example='')


class Type2(Enum):
    """
    Shipment type.
    """

    warehouse = 'warehouse'
    dropshipping = 'dropshipping'
    crossdocking = 'crossdocking'
    dropshipping_crossdocking = 'dropshipping_crossdocking'
    crossdocking_dropshipping = 'crossdocking_dropshipping'


class CrossdockingDeliveryType(Enum):
    """
    Crossdocking delivery type
    """

    send_to_warehouse = 'send_to_warehouse'
    pickup = 'pickup'


class Method(Enum):
    """
    Shipment method received from the Shop. It is intended to indicate where the order should be send to. Possible options are "home", "pickup", "address", "none"
    """

    home = 'home'
    pickup = 'pickup'
    address = 'address'
    work = 'work'
    none = 'none'


class PreProvider(BaseModel):
    """
    Pre-defined shipment provider
    """

    uuid: str = Field(..., example='f11a7fcb-53ea-45bf-aa54-f30a56a3a5gg')
    name: str = Field(
        ..., description='Shipment provider name', example='DafitiCarrier'
    )
    default: Optional[bool] = Field(
        None, description='True if it is the default shipment provider', example=True
    )
    digitalType: str = Field(..., description='Digital type')
    trackingUrl: str = Field(
        ..., description='Tracking URL', example='https://example.com/tracking/'
    )


class Provider(BaseModel):
    """
    Shipment provider
    """

    uuid: str = Field(..., example='f11a7fcb-53ea-45bf-aa54-f30a56a3a5gg')
    name: Optional[str] = Field(
        None, description='Shipment provider name', example='DafitiCarrier'
    )
    default: Optional[bool] = Field(
        None, description='True if it is the default shipment provider', example=True
    )
    digitalType: Optional[str] = Field(None, description='Digital type')
    trackingUrl: Optional[str] = Field(
        None, description='Tracking URL', example='https://example.com/tracking/'
    )


class ProviderType(Enum):
    """
    Shipment provider type
    """

    express = 'express'
    standard = 'standard'
    economy = 'economy'
    digital = 'digital'
    air = 'air'
    surface = 'surface'
    sameday = 'sameday'


class Shipment(BaseModel):
    type: Optional[Type2] = Field(None, description='Shipment type.', example='crossdocking')
    crossdockingDeliveryType: Optional[CrossdockingDeliveryType] = Field(
        None, description='Crossdocking delivery type'
    )
    method: Optional[Union[Method, str]] = Field(
        None, description='Shipment method received from the Shop. It is intended to indicate where the order should be send to. Possible options are "home", "pickup", "address", "none"',
        example='home',
    )
    preProvider: Optional[PreProvider] = Field(None, description='Pre-defined shipment provider')
    provider: Optional[Provider] = Field(None, description='Shipment provider')
    providerPreselected: Optional[bool] = Field(None, description='Is shipment provider preselected', example=False)
    providerProduct: Optional[str] = Field(None, example='')
    providerType: Optional[ProviderType] = Field(None, description='Shipment provider type')
    weight: Optional[float] = Field(None, description='Weight', example=0.5)
    trackingCode: Optional[str] = Field(None, description='Tracking code', example='123')
    preTrackingCode: Optional[str] = Field(None, description='PRE tracking code')


class Product4(BaseModel):
    name: str = Field(
        ..., description='Product name.', example='Short de Baño Azul Topper Slim'
    )
    sku: str = Field(..., description='Product SKU', example='TO076AT24RKHAR-2474097')
    variation: str = Field(
        ..., description='Variation value as received from the Shop', example='-'
    )
    sellerSku: Optional[str] = Field(None, description='Seller SKU', example='164097_L')


class Purchase(BaseModel):
    orderSrcId: Optional[int] = Field(None, description='Order src ID', example=555)
    orderNumber: Optional[str] = Field(None, description='Order number', example='MPDS-D1405061201')
    deliveryInfo: Optional[str] = Field(None, description='Delivery info')


class ExtraAttributes(BaseModel):
    """
    Extra attributes which were passed to SellerCenter on getMarketPlaceOrders call.
    """

    installment_fee: Optional[float] = Field(
        None, description='Installment fee', example=20.5
    )
    delivery_type: Optional[str] = Field(
        None, description='Delivery type', example='standard'
    )
    has_transfer_shipping_flat_fee: Optional[bool] = Field(
        None,
        description='Indicates, whether the order item has transfer shipping flat fee',
        example=False,
    )
    price_excluded_tax: Optional[float] = Field(
        None, description='Price excluded tax', example=24.99
    )
    sales_service_tax: Optional[float] = Field(
        None, description='Sales service tax', example=433.71
    )
    gst_free: Optional[str] = Field(
        None, description='Indicates, whether the order item is GST free', example='0'
    )
    shipping_fee_sst: Optional[float] = Field(
        None, description='Shipping fee SST', example=10.5
    )


class Action(Enum):
    create_manifest = 'create_manifest'
    create_pickup_request = 'create_pickup_request'
    generate_checklist = 'generate_checklist'
    generate_picklist = 'generate_picklist'
    generate_invoice = 'generate_invoice'
    generate_shipping_label = 'generate_shipping_label'
    generate_shipping_parcel = 'generate_shipping_parcel'
    generate_export_invoice = 'generate_export_invoice'
    generate_manifest = 'generate_manifest'
    generate_carrier_manifest = 'generate_carrier_manifest'
    generate_credit_note = 'generate_credit_note'
    generate_all_documents = 'generate_all_documents'
    set_invoice_number = 'set_invoice_number'
    set_invoice_access_key = 'set_invoice_access_key'
    set_tracking_code = 'set_tracking_code'
    set_shipment_provider = 'set_shipment_provider'
    status_set_to_delivered = 'status_set_to_delivered'
    status_set_to_shipped = 'status_set_to_shipped'
    status_set_to_canceled = 'status_set_to_canceled'
    status_set_to_packed_by_marketplace = 'status_set_to_packed_by_marketplace'
    status_set_to_ready_to_ship = 'status_set_to_ready_to_ship'
    status_set_to_returned = 'status_set_to_returned'
    status_set_to_rejected = 'status_set_to_rejected'
    status_set_to_return_rejected = 'status_set_to_return_rejected'
    status_set_to_failed_delivery = 'status_set_to_failed_delivery'
    status_set_to_payment_pending = 'status_set_to_payment_pending'
    status_set_to_return_delivered = 'status_set_to_return_delivered'
    status_set_to_return_waiting_for_approval = (
        'status_set_to_return_waiting_for_approval'
    )
    status_set_to_return_shipped_by_customer = (
        'status_set_to_return_shipped_by_customer'
    )


class Voucher1(BaseModel):
    code: str = Field(..., description='Discount code', example='AAA')
    amount: float = Field(..., description='Discount amount', example=14.5)
    cashbackPercentage: int = Field(
        ..., description='Promotion defined percentage value for cashback', example=0
    )
    voucherSellerShare: float = Field(
        ...,
        description='Promotion defined percentage value for the voucher, which is covered/funded by the seller',
        example=0,
    )
    cashbackSellerShare: float = Field(
        ...,
        description='Promotion defined percentage value for the cashback, which is covered/funded by the seller',
        example=0,
    )
    amountFundedBySeller: float = Field(
        ...,
        description='Actual calculated amount based on the voucher seller share percentage and the discount amount',
        example=0,
    )
    cashbackAmountFundedBySeller: str = Field(
        ...,
        description='Actual calculated amount based on the cashback seller share percentage and the discount amount',
        example=0,
    )


class ManifestStatus(Enum):
    """
    Manifest status
    """

    forward_ready_to_ship = 'forward_ready_to_ship'
    forward_received = 'forward_received'
    forward_shipped = 'forward_shipped'
    return_ready_to_ship = 'return_ready_to_ship'
    return_received = 'return_received'
    return_shipped = 'return_shipped'


class OrderItem(BaseModel):
    id: int = Field(..., description='Unique numeric identifier', example=1111)
    srcId: str = Field(..., description='Order item src ID', example='MY-32022990')
    sellerId: int = Field(..., description='Seller ID', example=11112)
    orderId: int = Field(..., description='Order ID', example=111134)
    uuid: str = Field(
        ...,
        description='Unique string ID',
        example='9d6ca7ce-4d71-46bf-aa5e-a0727eca880z',
    )
    status: OrderStatus = Field(..., description='Order Item status.\n', example='pending')
    isProcessable: bool = Field(
        ...,
        description="It's true if order item shipment type is not `consignment` and src_status is not `awaiting_fulfillment`",
        example=True,
    )
    failureReason: Optional[FailureReason] = Field(
        None, description='Reason for failure if applicable'
    )
    shipment: Optional[Shipment] = Field(
        None,
        description='Shipment information. It is not always available, for example, when order item is in `pending` status.',
    )
    invoiceNumber: Optional[str] = Field(None, description='Invoice Number', example='123re')
    invoiceAccesskey: Optional[str] = Field(
        None, description='Invoice Access Key'
    )
    inTransit: bool = Field(..., description='Order item is in transit', example=False)
    premium: bool = Field(
        ...,
        description='The flag indicates if the order item is premium or not',
        example=False,
    )
    targetToShipAt: Optional[datetime_aliased] = Field(
        None,
        description='Promised shipment date. It works only if Promised Shipping Date Feature is Enabled. The dates returned will follow the same format as in the example',
        example='2022-12-23T05:36:23.123456Z',
    )
    product: Product4
    unitPrice: float = Field(..., description='Order item price', example=2499)
    taxAmount: float = Field(
        ..., description='Tax amount for the order item', example=433.71
    )
    taxPercent: float = Field(
        ..., description='Tax percent for the order item', example=21
    )
    paidPrice: float = Field(..., description='Paid price', example=2499)
    paidCommission: Optional[float] = Field(None, description='Paid commission')
    shippingFee: float = Field(..., description='Shipping fee', example=0)
    shippingServiceCost: Optional[float] = Field(None, description='Shipping service cost')
    walletCredits: Optional[float] = Field(None, description='Indicated that the customer used wallet as payment aside from possible voucher', example=0)
    storeCredits: Optional[float] = Field(None, description='Store credits', example=0)
    shippingVoucherAmount: float = Field(
        ..., description='Shipping voucher amount', example=0
    )
    priceAfterDiscount: float = Field(
        ..., description='Price after discount', example=0
    )
    salesDueAmount: float = Field(..., description='Sales due amount', example=245)
    itemSerialNumber: Optional[str] = Field(None, description='Serial number')
    abatementRate: Optional[str] = Field(None, description='Abatement rate')
    exciseRate: Optional[str] = Field(None, description='Excise rate')
    hsnCode: Optional[str] = Field(None, description='HSN code')
    codCollectableAmount: Optional[str] = Field(None, description='Cod collectable amount')
    purchase: Optional[Purchase] = Field(
        None,
        description='Purchase information. It is not always available, for example, when order item is in `pending` status.',
    )
    createdAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the order item was created',
        example='2021-09-22T23:21:42.123456Z',
    )
    updatedAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the order item was updated. The dates returned will follow the same format as in the example',
        example='2021-09-22T23:21:42.123456Z',
    )
    lastStatusChangedAt: Optional[datetime_aliased] = Field(
        None,
        description='Date when the order item status was updated.\nNot every Order Item update changes its status. This is the difference between this field and updated_at. The dates returned will follow the same format as in the example\n',
        example='2021-09-22T23:21:42.123456Z',
    )
    warehouseName: Optional[str] = Field(
        None, description='Warehouse name'
    )
    extraAttributes: Optional[ExtraAttributes] = Field(
        None,
        description='Extra attributes which were passed to SellerCenter on getMarketPlaceOrders call.',
    )
    isHybrid: bool = Field(
        ...,
        description='Indicates, whether the product is a hybrid product for the Hybrid Depth / Size Fill feature.',
        example=False,
    )
    isOutlet: bool = Field(
        ...,
        description='Indicates, whether the order item has "outlet" flag.',
        example=False,
    )
    actions: List[Action] = Field(
        ...,
        description='Possible next actions for order item',
        example=['status_set_to_shipped', 'status_set_to_cancelled'],
    )
    vouchers: List[Voucher1] = Field(..., description='Discount list')
    manifestStatus: Optional[ManifestStatus] = Field(
        None, description='Manifest status', example='forward_ready_to_ship'
    )
    isPickupRequestSent: Optional[bool] = Field(
        None,
        description='The flag shows if Pickup Request has been sent for the item',
        example=False,
    )
    discountAmount: Optional[float] = Field(
        None, description='Discount value', example=0
    )


class Order(BaseModel):
    uuid: str = Field(
        ...,
        description='Unique order identifier',
        example='9d6ca7ce-4b71-46bf-aa5e-a0727eca880z',
    )
    invoiceRequired: bool = Field(
        ...,
        description='This flag means that invoice is required for the Order',
        example=False,
    )
    id: int = Field(..., description='Unique numeric order identifier', example=1111)
    regionId: Optional[str] = Field(
        None, description='Regions order identifier', example='2222-2'
    )
    sellerId: int = Field(..., description='Seller identifier', example=222)
    number: str = Field(
        ..., description='Order number given by the seller', example='MY-111143'
    )
    customer: Customer = Field(..., description='Customer name')
    address: Address = Field(..., description='Order address')
    nationalRegistrationNumber: Optional[str] = Field(
        None,
        description='It is the registration number of the customer',
        example='11114389',
    )
    payoutPending: bool = Field(
        ...,
        description='Flag that specifies whether the order will generate transactions or put them on hold until other requirements are met',
        example=False,
    )
    gift: Gift
    voucher: Voucher
    deliveryInfo: str = Field(
        ..., description='Additional info about delivery', example='1 D'
    )
    paymentMethod: str = Field(
        ..., description='Order payment method', example='NpsPayment'
    )
    currency: str = Field(..., description='Currency', example='ARS')
    remarks: str = Field(..., description='Additional info about order', example='')
    createdAt: Optional[datetime_aliased] = Field(
        ...,
        description='Date and time when the order was created',
        example='2021-09-22T23:21:42.123456Z',
    )
    updatedAt: Optional[datetime_aliased] = Field(
        ...,
        description='Date and time when the order was updated. The dates returned will follow the same format as in the example',
        example='2021-09-22T23:21:42.123456Z',
    )
    addressUpdatedAt: Optional[datetime_aliased] = Field(
        ...,
        description='Date and time when address was updated last time. The dates returned will follow the same format as in the example',
        example='2021-09-22T23:21:42.123456Z',
    )
    exchangeByOrderId: Optional[str] = Field(
        None,
        description='It indicates that current order is exchange order for other order. This field contains a new order ID',
    )
    exchangeForOrderId: Optional[str] = Field(
        None,
        description='It indicates that current order is exchange order for other order. This field contains an old order ID',
    )
    extraAttributes: Optional[str] = Field(
        None, description='Additional attributes set by the seller.'
    )
    statusList: Dict[str, Any] = Field(
        ...,
        description='Status list from order items as keys with count of items with particular status as a value',
        example={'pending': 2, 'canceled': 1},
    )
    source: str = Field(..., description='Order source', example='Zalora MY')
    itemCount: int = Field(..., description='Amount of items in order', example=1)
    unitPriceSumWithFees: float = Field(
        ..., description='Sum of unit prices from items with fees', example=10200.5
    )
    shippingFeeSstSum: float = Field(
        ..., description='Sum of shipping fee SST tax', example=10.5
    )
    grandTotal: Optional[float] = Field(
        None, description='Sum of paid prices from items with fees', example=100.5
    )
    targetToShip: str = Field(
        ...,
        description='Promised shipment date. It works only if Promised Shipping Date Feature is Enabled. The dates returned will follow the same format as in the example',
        example='2022-12-23T05:36:23.123456Z',
    )
    shipmentProviderType: Optional[Union[ShipmentProviderType, str]] = Field(
        None,
        description='Calculated shipment provider type across all order items',
        example='standard',
    )
    shipmentProviderPreSelected: bool = Field(
        ...,
        description='Information if the shipment provider has been pre-selected',
        example=True,
    )
    packedItemsCount: int = Field(
        ..., description='Amount of packed order items', example=3
    )
    orderItemIds: List[int] = Field(
        ..., description='Ids of the order items in the order', example=[1111]
    )
    items: List[OrderItem] = Field(..., description='Order items')


class SalesOrderCommentItem(BaseModel):
    src_id: Optional[str] = None
    status: Optional[str] = None
    content: Optional[str] = None
    sc_user: Optional[str] = None
    username: Optional[str] = None
    is_opened: Optional[int] = None
    created_at: Optional[datetime_aliased] = None
    updated_at: Optional[datetime_aliased] = None
    is_answered: Optional[int] = None
    comment_type: Optional[str] = None
    source_system: Optional[str] = None
    fk_sales_order: Optional[int] = None
    fk_sales_order_item: Optional[int] = None
    fk_sales_order_comment: Optional[int] = None
    id_sales_order_comment: Optional[int] = None


class SalesOrderExchangeItem(BaseModel):
    fk_sales_order_old: Optional[int] = None
    fk_sales_order_new: Optional[int] = None


class SalesOrderInvoiceItem(BaseModel):
    required: Optional[int] = None
    created_at: Optional[datetime_aliased] = None
    updated_at: Optional[datetime_aliased] = None
    fk_sales_order: Optional[int] = None
    id_sales_order_invoice: Optional[int] = None


class Properties(BaseModel):
    uuid: Optional[str] = None
    source: Optional[str] = None
    src_id: Optional[str] = None
    read_at: Optional[str] = None
    remarks: Optional[str] = None
    currency: Optional[str] = None
    order_nr: Optional[str] = None
    created_at: Optional[datetime_aliased] = None
    updated_at: Optional[datetime_aliased] = None
    gift_option: Optional[int] = None
    gift_message: Optional[str] = None
    voucher_code: Optional[str] = None
    voucher_type: Optional[str] = None
    delivery_info: Optional[str] = None
    id_sales_order: Optional[int] = None
    payment_method: Optional[str] = None
    payout_pending: Optional[int] = None
    src_created_at: Optional[datetime_aliased] = None
    address_billing: Optional[str] = None
    address_shipping: Optional[str] = None
    extra_attributes: Optional[str] = None
    address_updated_at: Optional[datetime_aliased] = None
    customer_last_name: Optional[str] = None
    customer_first_name: Optional[str] = None
    national_registration_number: Optional[str] = None


class InventoryStatusHistoryItem(BaseModel):
    uid: Optional[str] = None
    status: Optional[str] = None
    created_at: Optional[datetime_aliased] = None
    fk_catalog_product: Optional[int] = None
    fk_sales_order_item: Optional[int] = None
    id_inventory_status_history: Optional[int] = None


class OrderItemOosCancellationItem(BaseModel):
    shop_sku: Optional[str] = None
    fk_seller: Optional[int] = None
    created_at: Optional[datetime_aliased] = None
    stock_quantity: Optional[int] = None
    stock_updated_at: Optional[datetime_aliased] = None
    fk_catalog_product: Optional[int] = None
    fk_sales_order_item: Optional[int] = None


class ReturnRequest(BaseModel):
    comment: Optional[str] = None
    fk_user: Optional[int] = None
    fk_seller: Optional[int] = None
    created_at: Optional[datetime_aliased] = None
    updated_at: Optional[datetime_aliased] = None
    request_type: Optional[str] = None
    shipping_date: Optional[datetime_aliased] = None
    src_created_at: Optional[datetime_aliased] = None
    src_updated_at: Optional[datetime_aliased] = None
    id_return_request: Optional[int] = None
    return_delivery_type: Optional[str] = None
    id_supplier_return_oms: Optional[int] = None
    supplier_return_number_oms: Optional[str] = None


class ReturnRequestItemItem(BaseModel):
    created_at: Optional[datetime_aliased] = None
    updated_at: Optional[datetime_aliased] = None
    returnRequest: Optional[ReturnRequest] = None
    src_created_at: Optional[datetime_aliased] = None
    src_updated_at: Optional[datetime_aliased] = None
    fk_return_request: Optional[int] = None
    fk_sales_order_item: Optional[int] = None
    id_return_request_item: Optional[int] = None
    fk_return_request_status: Optional[int] = None
    id_supplier_return_item_oms: Optional[int] = None


class SalesOrderItemProperty(BaseModel):
    hsn_code: Optional[str] = None
    is_outlet: Optional[int] = None
    created_at: Optional[datetime_aliased] = None
    updated_at: Optional[datetime_aliased] = None
    excise_rate: Optional[str] = None
    abatement_rate: Optional[str] = None
    warehouse_name: Optional[str] = None
    volumetric_size: Optional[str] = None
    is_free_shipping: Optional[int] = None
    sales_due_amount: Optional[str] = None
    credit_note_number: Optional[str] = None
    item_serial_number: Optional[str] = None
    fk_sales_order_item: Optional[int] = None
    promotion_discounts: Optional[str] = None
    cod_collectable_amount: Optional[str] = None
    id_sales_order_item_properties: Optional[int] = None
    fk_sales_order_item_status_detail: Optional[str] = None


class SalesOrderItemStatusHistoryItem(BaseModel):
    note: Optional[str] = None
    user: Optional[str] = None
    created_at: Optional[datetime_aliased] = None
    src_created_at: Optional[str] = None
    fk_sales_order_item: Optional[int] = None
    fk_sales_order_item_status: Optional[int] = None
    id_sales_order_item_status_history: Optional[int] = None


class SalesOrderItemStatusManifestDetailSalesOrderItemItem(BaseModel):
    fk_manifest_type: Optional[int] = None
    fk_sales_order_item: Optional[int] = None
    fk_sales_order_item_status_manifest_detail: Optional[int] = None


class SalesOrderItemStatusTransitionTimeItem(BaseModel):
    fk_sales_order_item: Optional[int] = None
    created_to_shipped_business_hours: Optional[int] = None


class TagManagerSalesOrderItemItem(BaseModel):
    name: Optional[str] = None
    entity: Optional[str] = None
    fk_user: Optional[int] = None
    created_at: Optional[datetime_aliased] = None
    expiration: Optional[str] = None
    updated_at: Optional[datetime_aliased] = None
    description: Optional[str] = None
    id_tag_manager_tag: Optional[int] = None


class Properties1(BaseModel):
    fk_seller: Optional[int] = None
    created_at: Optional[datetime_aliased] = None
    updated_at: Optional[datetime_aliased] = None
    id_manifest: Optional[int] = None
    manifest_code: Optional[str] = None
    tracking_code: Optional[str] = None
    fk_manifest_type: Optional[int] = None
    fk_manifest_status: Optional[int] = None
    fk_shipment_provider: Optional[str] = None


class ManifestArchive(BaseModel):
    idManifest: Optional[int] = None
    properties: Optional[Properties1] = None


class OrderItemArchive(BaseModel):
    idSalesOrderItem: Optional[int] = None
    fkSeller: Optional[int] = None
    srcId: Optional[str] = None
    properties: Optional[Properties] = None
    inventoryStatusHistory: Optional[List[InventoryStatusHistoryItem]] = None
    orderItemOosCancellation: Optional[List[OrderItemOosCancellationItem]] = None
    returnRequestItem: Optional[List[ReturnRequestItemItem]] = None
    salesOrderItemProperties: Optional[List[SalesOrderItemProperty]] = None
    salesOrderItemStatusHistory: Optional[List[SalesOrderItemStatusHistoryItem]] = None
    salesOrderItemStatusManifestDetailSalesOrderItem: Optional[
        List[SalesOrderItemStatusManifestDetailSalesOrderItemItem]
    ] = None
    salesOrderItemStatusTransitionTime: Optional[
        List[SalesOrderItemStatusTransitionTimeItem]
    ] = None
    tagManagerSalesOrderItem: Optional[List[TagManagerSalesOrderItemItem]] = None
    manifestArchives: Optional[List[ManifestArchive]] = None


class Properties2(BaseModel):
    fk_seller: Optional[int] = None
    created_at: Optional[datetime_aliased] = None
    updated_at: Optional[datetime_aliased] = None
    id_package: Optional[int] = None
    package_code: Optional[str] = None
    tracking_code: Optional[str] = None
    fk_package_type: Optional[int] = None
    fk_package_status: Optional[int] = None
    fk_shipment_provider: Optional[str] = None


class PackageArchive(BaseModel):
    idPackage: Optional[int] = None
    properties: Optional[Properties2] = None
    packageItem: Optional[str] = None
    documentToken: Optional[str] = None
    salesOrderDocument: Optional[str] = None


class OrderArchive(BaseModel):
    idSalesOrder: Optional[int] = None
    srcId: Optional[str] = None
    orderNr: Optional[str] = None
    createdAt: Optional[datetime_aliased] = None
    currency: Optional[str] = None
    properties: Optional[Dict[str, Any]] = None
    salesOrderComment: Optional[List[SalesOrderCommentItem]] = None
    salesOrderExchange: Optional[List[SalesOrderExchangeItem]] = None
    salesOrderInvoice: Optional[List[SalesOrderInvoiceItem]] = None
    OrderItemArchives: Optional[List[OrderItemArchive]] = None
    packageArchives: Optional[List[PackageArchive]] = None


class OrderCustomer(BaseModel):
    """
    Customer name
    """

    firstName: Optional[str] = Field(None, description='First name', example='John')
    lastName: Optional[str] = Field(None, description='Last name', example='Doe')


class OrderAddress(BaseModel):
    """
    Order address
    """

    billing: Billing = Field(
        ...,
        description='Info about customer address with restricted access to certain fields',
    )
    shipping: Shipping = Field(
        ...,
        description='Info about customer address with restricted access to certain fields',
    )


class OrderAddressItem(BaseModel):
    """
    Info about customer address with restricted access to certain fields
    """

    firstName: Optional[str] = Field(
        None, description='Customer first name', example='John'
    )
    lastName: Optional[str] = Field(
        None, description='Customer last name', example='Doe'
    )
    phone: Optional[List[str]] = Field(None, example=['#####'])
    address: Optional[List[str]] = Field(
        None,
        description='5 rows to show the address',
        example=['Johannisstr. 20', '', '', '', ''],
    )
    email: Optional[str] = Field(None, description='Customer email', example='#####')
    city: Optional[str] = Field(None, description='Customer city', example='Berlin')
    ward: Optional[str] = Field(None, example='')
    region: Optional[str] = Field(None, description='Customer region', example='')
    postCode: Optional[str] = Field(
        None, description='Customer post code', example='10117'
    )
    country: Optional[str] = Field(
        None, description='Customer country', example='Germany'
    )


class OrderGift(BaseModel):
    option: bool = Field(..., description='Gift option', example=False)
    message: Any = Field(..., description='Gift message', example='msg')


class OrderVoucher(BaseModel):
    code: str = Field(..., description='Voucher code', example='code')
    type: str = Field(..., description='Voucher type', example='type')


class Type3(Enum):
    """
    Failure reason type.

    """

    canceled = 'canceled'
    returned = 'returned'
    failed = 'failed'
    return_rejected = 'return_rejected'
    canceled_system = 'canceled_system'


class FailureReason1(BaseModel):
    type: Type3 = Field(..., description='Failure reason type.\n')
    name: str = Field(..., description='Reason name')
    description: str = Field(..., description='Reason description')
    details: str = Field(..., description='Reason details', example='')


class Type4(Enum):
    """
    Shipment type.
    """

    warehouse = 'warehouse'
    dropshipping = 'dropshipping'
    crossdocking = 'crossdocking'
    dropshipping_crossdocking = 'dropshipping_crossdocking'
    crossdocking_dropshipping = 'crossdocking_dropshipping'


class Shipment1(BaseModel):
    type: Type4 = Field(..., description='Shipment type.', example='crossdocking')
    crossdockingDeliveryType: CrossdockingDeliveryType = Field(
        ..., description='Crossdocking delivery type'
    )
    method: Method = Field(
        ...,
        description='Shipment method received from the Shop. It is intended to indicate where the order should be send to. Possible options are "home", "pickup", "address", "none"',
        example='home',
    )
    preProvider: PreProvider = Field(..., description='Pre-defined shipment provider')
    provider: Provider = Field(..., description='Shipment provider')
    providerPreselected: bool = Field(
        ..., description='Is shipment provider preselected', example=False
    )
    providerProduct: str = Field(..., example='')
    providerType: ProviderType = Field(..., description='Shipment provider type')
    weight: float = Field(..., description='Weight', example=0.5)
    trackingCode: str = Field(..., description='Tracking code', example='123')
    preTrackingCode: str = Field(..., description='PRE tracking code')


class OrderItemReturn(BaseModel):
    orderItemId: int = Field(..., description='Order Item Id')
    returnComment: str = Field(..., description='Return comment')
    shipmentProvider: str = Field(..., description='Shipment Provider')
    srcId: str = Field(..., description='Src Id')
    trackingCode: str = Field(..., description='Tracking code')


class OrderItemReturns(RootModel[List[OrderItemReturn]]):
    """
    Collection of Return objects for given Order Items Ids
    """
    model_config = ConfigDict(
        json_schema_extra={
            "description": "Collection of Return objects for given Order Items Ids"
        }
    )

class OrderItemProduct(BaseModel):
    name: str = Field(
        ..., description='Product name.', example='Short de Baño Azul Topper Slim'
    )
    sku: str = Field(..., description='Product SKU', example='TO076AT24RKHAR-2474097')
    variation: str = Field(
        ..., description='Variation value as received from the Shop', example='-'
    )
    sellerSku: str = Field(..., description='Seller SKU', example='164097_L')


class OrderItemDigital(BaseModel):
    isDigital: Optional[bool] = Field(None, example=False)
    deliveryInfo: Optional[str] = None


class OrderItemPurchase(BaseModel):
    orderSrcId: int = Field(..., description='Order src ID', example=555)
    orderNumber: str = Field(
        ..., description='Order number', example='MPDS-D1405061201'
    )
    deliveryInfo: str = Field(..., description='Delivery info')


class Type5(Enum):
    """
    Failure reason type.

    """

    canceled = 'canceled'
    returned = 'returned'
    failed = 'failed'
    return_rejected = 'return_rejected'
    canceled_system = 'canceled_system'


class OrderItemFailureReason(BaseModel):
    type: Type5 = Field(..., description='Failure reason type.\n')
    name: str = Field(..., description='Reason name')
    description: str = Field(..., description='Reason description')
    details: str = Field(..., description='Reason details', example='')


class Type6(Enum):
    """
    Shipment type.
    """

    warehouse = 'warehouse'
    dropshipping = 'dropshipping'
    crossdocking = 'crossdocking'
    dropshipping_crossdocking = 'dropshipping_crossdocking'
    crossdocking_dropshipping = 'crossdocking_dropshipping'


class OrderItemShipment(BaseModel):
    type: Type6 = Field(..., description='Shipment type.', example='crossdocking')
    crossdockingDeliveryType: CrossdockingDeliveryType = Field(
        ..., description='Crossdocking delivery type'
    )
    method: Method = Field(
        ...,
        description='Shipment method received from the Shop. It is intended to indicate where the order should be send to. Possible options are "home", "pickup", "address", "none"',
        example='home',
    )
    preProvider: PreProvider = Field(..., description='Pre-defined shipment provider')
    provider: Provider = Field(..., description='Shipment provider')
    providerPreselected: bool = Field(
        ..., description='Is shipment provider preselected', example=False
    )
    providerProduct: str = Field(..., example='')
    providerType: ProviderType = Field(..., description='Shipment provider type')
    weight: float = Field(..., description='Weight', example=0.5)
    trackingCode: str = Field(..., description='Tracking code', example='123')
    preTrackingCode: str = Field(..., description='PRE tracking code')


class OrderItemShipmentProvider(BaseModel):
    uuid: str = Field(..., example='f11a7fcb-53ea-45bf-aa54-f30a56a3a5gg')
    name: str = Field(
        ..., description='Shipment provider name', example='DafitiCarrier'
    )
    default: Optional[bool] = Field(
        None, description='True if it is the default shipment provider', example=True
    )
    digitalType: str = Field(..., description='Digital type')
    trackingUrl: str = Field(
        ..., description='Tracking URL', example='https://example.com/tracking/'
    )


class OrderItemPackage(BaseModel):
    id: int = Field(..., example=123)
    srcId: Optional[str] = Field(
        None, description='Package src ID', example='MY-32022990'
    )
    orderItemIds: List[int] = Field(
        ..., description='Order items ids within package', example=[144, 152]
    )


class OrderItemInputFailureReason(BaseModel):
    reason: Optional[str] = Field(None, example='Changed mind')


class OrderItemInputFailureReasonAndDetails(BaseModel):
    reason: str = Field(
        ...,
        description='Failure reason. The list of reasons you can find /v2/orders-failure-reasons.',
        example='Not reachable',
    )
    reasonDetail: Optional[str] = Field(
        None, description='Additional information', example='Details'
    )


class TransactionSummaryItem(BaseModel):
    transactionTypeId: int = Field(..., description='Transaction Type Id', example=22)
    description: str = Field(
        ...,
        description='The description is taken from the TRE group or from the description of the transaction type.',
        example='Commission',
    )
    amount: float = Field(..., description='Amount', example=54.43)
    currency: str = Field(..., description='Currency', example='USD')


class OrderFinance(BaseModel):
    orderId: int = Field(..., description='Order Id', example=1)
    currency: str = Field(..., description='Order currency', example='USD')
    shippingFeeItems: float = Field(
        ..., description='Sum of Order Item shipping fee.', example=23.43
    )
    shippingServiceCostItems: float = Field(
        ..., description='Sum of Order Item shipping service cost.', example=43.43
    )
    voucherTotal: float = Field(
        ..., description='Sum of Order Item vouchers.', example=150.3
    )
    grandTotal: float = Field(..., description='Total price', example=250.23)
    unitPrice: float = Field(..., description='Order price', example=2499)
    taxAmount: float = Field(..., description='Tax amount', example=433.71)
    paidPrice: float = Field(..., description='Paid price', example=2499)
    walletCredits: float = Field(
        ...,
        description='Indicated that the customer used wallet as payment aside from possible voucher',
        example=0,
    )
    storeCredits: float = Field(..., description='Store credits', example=0)
    shippingVoucherAmount: float = Field(
        ..., description='Shipping voucher amount', example=0
    )
    transactionSummary: List[TransactionSummaryItem] = Field(
        ..., description='Calculated transaction data for Order'
    )
    installmentFee: float = Field(..., description='Installment fee', example=20.5)
    numberOfInstallments: int = Field(
        ..., description='Number of installments', example=3
    )
    shippingFeeSstSum: float = Field(
        ..., description='Sum of shipping fee SST tax', example=10.5
    )


class InvoiceNumber(BaseModel):
    generationType: Optional[str] = Field(
        None,
        description='Generation type',
        example='autoincrement_number | order_number | show_dialog',
    )
    prefix: Optional[str] = Field(
        None, description='Prefix for the credit note number', example='ABC'
    )
    nextNumber: Optional[int] = Field(None, description='The next number', example=123)
    nextFormatedValue: Optional[str] = Field(
        None, description='The next formated value', example='ABC123'
    )


class ReuploadAccepted(BaseModel):
    success: Optional[bool] = Field(None, example=True)


class Status10(Enum):
    active = 'active'
    inactive = 'inactive'
    deleted = 'deleted'


class Reason(Enum):
    """
    Reason for why the seller was delisted
    """

    USER_DEFINED = 'USER_DEFINED'
    HOLIDAY_MODE = 'HOLIDAY_MODE'
    DAILY_ORDER_LIMIT = 'DAILY_ORDER_LIMIT'
    PENDING_ORDER_LIMIT = 'PENDING_ORDER_LIMIT'
    PENDING_TO_SHIPPED_ORDER_LIMIT = 'PENDING_TO_SHIPPED_ORDER_LIMIT'


class DelistReason(BaseModel):
    reasonIdentifier: Optional[int] = Field(None, example=1)
    reason: Optional[Reason] = Field(
        None,
        description='Reason for why the seller was delisted',
        example='DAILY_ORDER_LIMIT',
    )
    message: Optional[str] = Field(
        None,
        description='Message for why the seller was delisted. This text might be shown to the seller but will not be translated.',
        example='Daily Order Limit reached',
    )
    reasonLimit: Optional[int] = Field(
        None,
        description='Optional limit for the delisted reason. E.g., the reason DAILY_ORDER_LIMIT might have a limit of 100 orders per day.\n',
        example=100,
    )


class ProfileField(BaseModel):
    name: Optional[str] = Field(None, example='shop_name')
    displayValue: Optional[str] = Field(
        None,
        description='Some fields, like dropdowns, have different internal values and "human readable" value. For example,\nfield "country" can have internal value "CL" and display value "Chile". In most cases, however, \ndisplayValue is equal to value.\n',
        example='some name',
    )
    value: Optional[str] = Field(None, example='some name')


class SellerRead(BaseModel):
    id: Optional[int] = Field(None, example=32)
    uuid: Optional[str] = Field(None, example='093a9e34-xxxx-xxxx-xxxx-53766e338abf')
    srcId: Optional[str] = Field(
        None,
        description='ID of the seller in the shop system. It is intentionally a string as in some systems this ID may be not numeric.',
        example='131',
    )
    shortCode: Optional[str] = Field(None, example='CI100AA')
    status: Optional[Status10] = Field(None, example='active')
    name: Optional[str] = Field(None, example='GFG eCommerce Technologies GmbH')
    companyName: Optional[str] = Field(None, example='GFG eCommerce Technologies GmbH')
    email: Optional[str] = Field(None, example='seller@example.com')
    taxClass: Optional[str] = Field(None, example='national')
    createdAt: Optional[datetime_aliased] = None
    updatedAt: Optional[datetime_aliased] = None
    verified: Optional[bool] = None
    listed: Optional[bool] = Field(None, example=False)
    delistReasons: Optional[List[DelistReason]] = None
    profileFields: Optional[List[ProfileField]] = None
    agreementsAccepted: Optional[bool] = Field(None, example=True)


class Address1(BaseModel):
    address1: Optional[str] = Field(None, example='Main Street nr.1')
    address2: Optional[str] = Field(None, example='Building A')
    city: Optional[str] = Field(None, example='Berlin')
    postalCode: Optional[str] = Field(None, example='10993')
    country: Optional[str] = Field(None, example='DE')


class Vat(BaseModel):
    number: Optional[str] = Field(None, example='303030303')
    registered: Optional[bool] = Field(None, example=True)


class BankAccount(BaseModel):
    name: Optional[str] = Field(None, example='John Smith')
    iban: Optional[str] = Field(None, example='DE20020289283838')
    swift: Optional[str] = Field(None, example='DE20020289283838')
    number: Optional[str] = Field(None, example='DE20020289283838')
    bank: Optional[str] = Field(None, example='Deutsche Bank')
    bankCode: Optional[str] = Field(None, example='DEB222')


class Contact(BaseModel):
    name: Optional[str] = Field(None, example='CS Support')
    email: Optional[str] = Field(None, example='support@mycompany.com')
    phone: Optional[str] = Field(None, example='+4920200239737')
    address: Optional[Address1] = None


class CustomField(BaseModel):
    name: Optional[str] = Field(None, example='sap_identifier')
    value: Optional[str] = Field(None, example='SAP_1234')


class SellerCreate(BaseModel):
    email: str = Field(..., example='seller@abc.com')
    shopName: str = Field(..., example='Amazing Shop')
    companyName: Optional[str] = Field(None, example='Shop LLC')
    sellerName: str = Field(..., example='John Smith')
    phone: Optional[str] = Field(None, example='+4920200239737')
    address: Optional[Address1] = None
    legalForm: Optional[str] = Field(None, example='GmbH')
    personInCharge: Optional[str] = Field(None, example='John Smith')
    businessRegNumber: Optional[str] = Field(None, example='DE029CSJ')
    vat: Optional[Vat] = None
    hasValidLicense: Optional[bool] = Field(None, example=True)
    bankAccount: Optional[BankAccount] = None
    contact: Optional[Contact] = None
    customFields: Optional[List[CustomField]] = None
    verified: Optional[bool] = Field(None, example=True)
    registrationSource: Optional[str] = Field(None, example='api')


class SellerCreated(BaseModel):
    id: Optional[int] = Field(None, example=32)
    uuid: Optional[str] = Field(None, example='093a9e34-xxxx-xxxx-xxxx-53766e338abf')
    shortCode: Optional[str] = Field(None, example='CI100AA')
    userId: Optional[int] = Field(None, example=32)
    verified: Optional[bool] = None


class ProfileFields(BaseModel):
    id: Optional[int] = None
    value: Optional[str] = None


class ProfileFields1(BaseModel):
    name: Optional[str] = None
    value: Optional[str] = None


class SellerPartialUpdate(BaseModel):
    email: Optional[str] = Field(None, example='seller@abc.com')
    profileFields: Optional[List[Union[ProfileFields, ProfileFields1]]] = None


class SellerProfileGeneralRead(BaseModel):
    id: Optional[int] = Field(None, example=123)
    value: Optional[str] = Field(
        None,
        description='If type=file then value is json string with two fields: "originalName" and "url". url - is a temporal link Example: {"originalName": "file1.pdf", "url": "https://some-s3-bucket.s3.amazonaws.com/path/to/your/object?Expires=EXPIRATION_TIMESTAMP&Signature=SIGNATURE"} If type<>file then value is plain value that can be presented in the UI\n',
        example='000-111-222-33345',
    )


class SellerProfileGeneralWrite(BaseModel):
    id: Optional[int] = Field(None, example=123)
    value: Optional[str] = Field(None, example='000-111-222-33345')


class SellerContractIds(BaseModel):
    contractIds: List[int] = Field(..., example=[123456, 654321])


class SellerAgreement(BaseModel):
    id: Optional[int] = Field(None, example=32)
    cmsPageId: Optional[int] = Field(None, example=32)
    content: Optional[str] = Field(None, example='example content')
    linkUrl: Optional[str] = Field(None, example='https://example.com/agreement.pdf')
    linkText: Optional[str] = Field(None, example='Agreement')
    date: Optional[datetime_aliased] = Field(None, example='2022-11-01 03:33:47')


class Version(BaseModel):
    id: Optional[int] = Field(None, example=32)
    cmsPageId: Optional[int] = Field(None, example=32)
    content: Optional[str] = Field(None, example='example content')
    linkUrl: Optional[str] = Field(None, example='https://example.com/agreement.pdf')
    linkText: Optional[str] = Field(None, example='Agreement')
    date: Optional[datetime_aliased] = Field(None, example='2022-11-01 03:33:47')


class SellerAgreementVersion(BaseModel):
    cmsPageId: Optional[int] = Field(None, example=32)
    versions: Optional[List[Version]] = None


class SellerAgreementApproval(BaseModel):
    username: Optional[str] = Field(
        None, description='user name of approver', example='maintenance'
    )
    createdAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the contract was created',
        example='2022-11-01 03:33:47',
    )
    acceptedAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the contract was last updated',
        example='2022-11-01 03:33:47',
    )
    email: Optional[str] = Field(
        None, description='email of approver', example='maintenance@sellercenter.net'
    )


class Type7(Enum):
    forward = 'forward'
    return_ = 'return'


class OrderItem1(BaseModel):
    """
    OrderItem
    """

    orderItemId: Optional[int] = Field(None, example=1)
    returnReason: Optional[str] = Field(None, example='Product not available')


class Action2(Enum):
    print_manifest = 'print_manifest'
    status_set_to_shipped = 'status_set_to_shipped'
    print_credit_note = 'print_credit_note'


class Status11(Enum):
    forward_ready_to_ship = 'forward_ready_to_ship'
    forward_received = 'forward_received'
    forward_shipped = 'forward_shipped'
    return_ready_to_ship = 'return_ready_to_ship'
    return_received = 'return_received'
    return_shipped = 'return_shipped'


class Manifest(BaseModel):
    """
    Manifest
    """

    manifestId: Optional[int] = Field(None, example=68)
    shipmentProvider: Optional[str] = Field(None, example='DHL')
    trackingCode: Optional[str] = Field(None, example='123ABC456EFG')
    type: Optional[Type7] = Field(None, example='forward')
    manifestCode: Optional[str] = Field(None, example='123ABC456EFG')
    orderItems: Optional[List[OrderItem1]] = None
    actions: Optional[List[Action2]] = None
    status: Optional[Status11] = Field(None, example='forward_ready_to_ship')
    packagesCount: Optional[int] = Field(None, example=1)
    createdAt: Optional[datetime_aliased] = Field(
        None, description='Created At', example='2022-05-04T12:39:13+00:00'
    )


class Status12(Enum):
    """
    Manifest status
    """

    forward_ready_to_ship = 'forward_ready_to_ship'
    forward_received = 'forward_received'
    forward_shipped = 'forward_shipped'
    return_ready_to_ship = 'return_ready_to_ship'
    return_received = 'return_received'
    return_shipped = 'return_shipped'


class Type8(Enum):
    """
    Manifest type
    """

    forward = 'forward'
    return_ = 'return'


class ManifestDetail(BaseModel):
    """
    Manifest
    """

    manifestId: Optional[int] = Field(None, description='Manifest Id', example=68)
    manifestCode: Optional[str] = Field(
        None, description='Manifest code', example='my-4231'
    )
    trackingCode: str = Field(..., description='Tracking Code', example='123ABC456EFG')
    orderItems: Optional[List[OrderItem1]] = None
    status: Status12 = Field(
        ..., description='Manifest status', example='forward_ready_to_ship'
    )
    type: Type8 = Field(..., description='Manifest type', example='forward')
    shipmentProviderId: int = Field(..., description='Shipment Provider Id', example=1)
    createdAt: datetime_aliased = Field(
        ..., description='Created At', example='2022-05-04T12:39:13+00:00'
    )
    sellerId: int = Field(..., description='Seller Id', example=1)


class ManifestDocument(BaseModel):
    DocumentType: Optional[str] = Field(None, example='manifest')
    MimeType: Optional[str] = Field(None, example='text/html')
    File: Optional[str] = Field(
        None,
        description='the manifest file encoded base64',
        example='0eWxlPmJvZHkgeyBmb250LXNpemU6MTBweDsgZm9udC1mYW1pbHk',
    )


class ManifestOrderItem(BaseModel):
    """
    OrderItem
    """

    orderItemId: Optional[int] = Field(None, example=1)
    returnReason: Optional[str] = Field(None, example='Product not available')


class Status13(Enum):
    Finished = 'Finished'
    Processing = 'Processing'
    Error = 'Error'
    Queued = 'Queued'
    Expired = 'Expired'


class RequestedFormat(Enum):
    csv = 'csv'
    xlsx = 'xlsx'


class ExportItem(BaseModel):
    id: Optional[int] = None
    userId: Optional[int] = Field(
        None,
        description='ID of user who triggered export. When you request exports you can see also exports\nwhich were created by another users from the same Seller\n',
        example=524,
    )
    sellerId: Optional[int] = Field(None, example=4089)
    status: Optional[Status13] = None
    isDeleted: Optional[bool] = Field(
        None,
        description='Export files has limited time of storage and after it they are deleted. This\nflag indicates that physical was already deleted and if you need to download\nthis export then you will need to generate it again.\n',
    )
    createdAt: Optional[datetime_aliased] = None
    updatedAt: Optional[datetime_aliased] = None
    expiresAt: Optional[datetime_aliased] = Field(
        None, description='datetime when this export file scheduled for deletion'
    )
    requestedFormats: Optional[List[RequestedFormat]] = Field(
        None, description='formats which were requested for export'
    )
    downloadLinks: Optional[List[str]] = Field(
        None,
        description='list of relative links to download export files. For some types of\nexport files are generated in several formats, therefore you may\nhave several links to download files.\n',
    )
    exportContent: Optional[str] = Field(
        None,
        description='short description of export file to distinguish between different export items\n',
        example='Products - Shoes',
    )
    uuid: Optional[str] = Field(
        None,
        description='Unique identifier of file. You can use it to download file.\n',
        example='a8fd052d-f29a-471a-b92b-52bb0d2c0be4',
    )
    note: Optional[str] = Field(
        None,
        description='Note on export item. It can be used to store some additional information eg. failure reason\n',
    )


class Image2(BaseModel):
    id: Optional[int] = Field(None, example=1357)
    displayUrl: Optional[str] = Field(
        None, description='URL of the image', example='https://example.com/image-1.jpg'
    )
    srcId: Optional[str] = Field(
        None,
        description='ID of image in Shop system. If null means that image was not yet synchronized with Shop and is not visible to end customers.',
        example='39487664',
    )


class ProductSetsImage(BaseModel):
    productSetId: Optional[int] = Field(None, example=5)
    images: Optional[List[Image2]] = None


class ProductSetsImages(RootModel[List[ProductSetsImage]]):
    pass


class ProductSetsCoverImage(BaseModel):
    productSetId: Optional[int] = Field(None, example=5)
    imageUrl: Optional[str] = Field(None, example='https://example.com/image-1.jpg')


class ProductSetsCoverImages(RootModel[List[ProductSetsCoverImage]]):
    pass


class ProductSkusImage(BaseModel):
    productSetId: Optional[int] = Field(None, example=5)
    shopSku: Optional[str] = Field(
        None,
        description="SKU on the shop's side. Usually it is visible to end customer. If value is null, it means that product is not yet\nsynchronized with shop and SKU was not assigned.\n",
        example='NI464AKLCEZ0',
    )
    sellerSku: Optional[str] = Field(
        None,
        description="SKU from seller's side. Should be unique across products of seller.\n",
        example='shoe-123',
    )
    mainImageUrl: Optional[str] = Field(None, example='https://example.com/image-1.jpg')


class ProductSkusImages(RootModel[List[ProductSkusImage]]):
    pass


class ProductSetsImage(BaseModel):
    productSetId: Optional[int] = Field(None, example=5)
    images: Optional[List[Image]] = None


class ProductSetsImages(RootModel[List[ProductSetsImage]]):
    pass


class ProductSetsTag(BaseModel):
    tagId: Optional[int] = Field(None, example=5)
    tagName: Optional[str] = Field(None, example='Fresh products')
    productSetId: Optional[int] = Field(None, example=5)


class ProductSetsTags(RootModel[List[ProductSetsTag]]):
    pass


class Kpi(BaseModel):
    name: Optional[str] = Field(
        None,
        description='name of the KPI',
        example='Average Business Delivery Time From Shipped',
    )
    period: Optional[int] = Field(
        None, description='calculation period of the KPI by day', example=30
    )
    kpiValue: Optional[float] = Field(None, description='KPI value', example=1)
    kpiUnit: Optional[str] = Field(None, description='unit KPI value', example='hrs')
    rating: Optional[str] = Field(
        None, description='KPI rating', example='Extremely Good'
    )
    score: Optional[float] = Field(None, description='KPI score', example=1)
    weight: Optional[float] = Field(None, description='KPI weight', example=10)
    sellerRatingScore: Optional[float] = Field(
        None, description='Actual score per KPI', example=10
    )


class Rating(BaseModel):
    overallScore: Optional[float] = Field(
        None, description='Overall rating of seller', example=10
    )
    endDate: Optional[datetime_aliased] = Field(
        None,
        description="Seller rating's end date",
        example='2022-05-22T23:59:59+00:00',
    )
    calculationDate: Optional[datetime_aliased] = Field(
        None,
        description="Seller rating's calculation date",
        example='2022-05-22T23:59:59+00:00',
    )
    kpis: Optional[List[Kpi]] = Field(None, description='List of KPIs')


class Status14(BaseModel):
    Active: Optional[str] = Field(
        None, description='Number of active products', example=22
    )
    All: Optional[str] = Field(None, description='Number of all products', example=32)
    Deleted: Optional[str] = Field(
        None, description='Number of deleted products', example=2
    )
    ImageMissing: Optional[str] = Field(
        None, description='Number of products with image missing', example=5
    )
    Inactive: Optional[str] = Field(
        None, description='Number of inactive products', example=3
    )
    Live: Optional[str] = Field(None, description='Number of live products', example=4)
    Pending: Optional[str] = Field(
        None, description='Number of product pending', example=8
    )
    PoorQuality: Optional[str] = Field(
        None, description='Number of products with poor quality', example=9
    )
    SoldOut: Optional[str] = Field(
        None, description='Number of sold out products', example=15
    )


class Products(BaseModel):
    Total: Optional[int] = Field(
        None, description='Total number of products', example=131
    )
    Status: Optional[Status14] = None


class Status15(BaseModel):
    Canceled: Optional[int] = Field(None, description='Number of canceled orders')
    Delivered: Optional[int] = Field(None, description='Number of delivered orders')
    Digital: Optional[int] = Field(None, description='Number of digital orders')
    Economy: Optional[int] = Field(
        None, description='Number of Economy shipping type status orders'
    )
    Express: Optional[int] = Field(
        None, description='Number of Express shipping type status orders'
    )
    Failed: Optional[int] = Field(None, description='Number of failed orders')
    NoExtInvoiceKey: Optional[int] = Field(
        None, description='Number of orders with no external invoice key'
    )
    NotPrintedPending: Optional[int] = Field(
        None, description='Number of not printed pending orders'
    )
    NotPrintedReadyToShip: Optional[int] = Field(
        None, description='Number of not printed ready to ship orders'
    )
    Pending: Optional[int] = Field(None, description='Number of pending orders')
    ReadyToShip: Optional[int] = Field(
        None, description='Number of ready to ship orders'
    )
    ReturnRejected: Optional[int] = Field(
        None, description='Number of orders with return rejected'
    )
    ReturnShippedByCustomer: Optional[int] = Field(
        None, description='Number of orders shipped by the customer'
    )
    ReturnWaitingForApproval: Optional[int] = Field(
        None, description='Number of orders with return waiting for approval'
    )
    Returned: Optional[int] = Field(None, description='Number of returned orders')
    Shipped: Optional[int] = Field(None, description='Number of shipped orders')
    Standard: Optional[int] = Field(
        None, description='Number of orders with Standard shipping type'
    )


class Orders(BaseModel):
    Status: Optional[Status15] = None
    Total: Optional[int] = Field(None, description='Total number of orders', example=12)


class OrdersItemsPending(BaseModel):
    Today: Optional[int] = Field(
        None, description='Number of order items pending in the last 24h'
    )
    Yesterday: Optional[int] = Field(
        None, description='Number of order items pending in the last 48h'
    )
    Older: Optional[int] = Field(
        None, description='Number of order items pending for more than 48h'
    )


class TwoDaysShippedPercentage(BaseModel):
    Percentage: Optional[float] = Field(
        None, description='Percent of orders shipped within 48h'
    )
    Text: Optional[str] = Field(
        None, description='A text label for the percentage grade'
    )


class ReturnPercentage(BaseModel):
    Percentage: Optional[float] = Field(None, description='Percent of orders returned')
    Text: Optional[str] = Field(
        None, description='A text label for the percentage grade'
    )


class CancellationPercentage(BaseModel):
    Percentage: Optional[float] = Field(None, description='Percent of order canceled')
    Text: Optional[str] = Field(
        None, description='A text label for the percentage grade'
    )


class Day(BaseModel):
    TwoDaysShippedPercentage: Optional[TwoDaysShippedPercentage] = None
    ReturnPercentage: Optional[ReturnPercentage] = None
    CancellationPercentage: Optional[CancellationPercentage] = None


class Week(BaseModel):
    TwoDaysShippedPercentage: Optional[TwoDaysShippedPercentage] = None
    ReturnPercentage: Optional[ReturnPercentage] = None
    CancellationPercentage: Optional[CancellationPercentage] = None


class Month(BaseModel):
    TwoDaysShippedPercentage: Optional[TwoDaysShippedPercentage] = None
    ReturnPercentage: Optional[ReturnPercentage] = None
    CancellationPercentage: Optional[CancellationPercentage] = None


class Alltime(BaseModel):
    TwoDaysShippedPercentage: Optional[TwoDaysShippedPercentage] = None
    ReturnPercentage: Optional[ReturnPercentage] = None
    CancellationPercentage: Optional[CancellationPercentage] = None


class Year(BaseModel):
    TwoDaysShippedPercentage: Optional[TwoDaysShippedPercentage] = None
    ReturnPercentage: Optional[ReturnPercentage] = None
    CancellationPercentage: Optional[CancellationPercentage] = None


class AccountHealth(BaseModel):
    Day: Optional[Day] = None
    Week: Optional[Week] = None
    Month: Optional[Month] = None
    Alltime: Optional[Alltime] = None
    Year: Optional[Year] = None


class Result(BaseModel):
    """
    Seller rating's end date
    """

    Products: Optional[Products] = None
    Orders: Optional[Orders] = None
    OrdersItemsPending: Optional[OrdersItemsPending] = None
    AccountHealth: Optional[AccountHealth] = None


class Statistics(BaseModel):
    LastDataUpdate: Optional[datetime_aliased] = Field(
        None,
        description='As response is cached, this value informs you on datetime when statistics were gathered.',
        example='2022-05-22T23:59:59+00:00',
    )
    result: Optional[Result] = Field(None, description="Seller rating's end date")


class StatisticType(Enum):
    year = 'year'
    month = 'month'
    week = 'week'
    day = 'day'
    alltime = 'alltime'


class Metrics(BaseModel):
    statistic_type: Optional[StatisticType] = None
    sku_number: Optional[int] = None
    sku_active_number: Optional[int] = None
    sales_total: Optional[float] = None
    orders: Optional[int] = None
    commissions: Optional[float] = None
    two_day_shipment_percentage: Optional[float] = None
    returns_percentage: Optional[float] = None
    cancellations_percentage: Optional[float] = None


class OrderItemIds(BaseModel):
    orderItemIds: List[int] = Field(..., example=[123456, 654321])


class SetInvoiceNumber(BaseModel):
    orderItemId: int = Field(..., description='Order item Identifier.', example=1)
    invoiceNumber: str = Field(
        ..., description='The actual invoice value.', example='INV-20'
    )


class OrderItem3(BaseModel):
    orderItemId: int = Field(..., example=1)
    accessKey: str = Field(
        ...,
        description='If this field is empty, try to get accessKey from InvoiceEncodedXml.',
        example='12345678901234567890123456789012345678901234',
    )
    documentUrl: Optional[str] = Field(
        None, description='The URL to the shipment document (optional)'
    )
    InvoiceEncodedXml: Optional[str] = Field(
        None,
        description='The invoice base64 encoded xml. Actually, it is replacement of DocumentUrl parameter. If both parameters are set, EncodedXml is used.',
    )


class SetInvoiceAccessKey(BaseModel):
    orderItems: List[OrderItem3] = Field(
        ..., description='A collection of order items to be updated or modified.'
    )


class Attribute1(BaseModel):
    id: Optional[int] = Field(
        None,
        description='Attribute identifier. Please, consider the fact that there could be several attributes with\nthe same name, but with different IDs. For example, there can be AttributeSets "Shoes", "Dresses"\nand "Jewelry". Shoes and Dresses has "color", but there is no such attribute for "Jewelry".\n\nSo when you want to create product in "Shoes" or "Dresses" you can (and if "color" is mandatory -\nshould) pass value of "color". But this attribute "color" will have different IDs, probably\ndifferent set of options, maybe different validation rules and so on.\n',
        example=7865,
    )
    label: Optional[str] = Field(
        None,
        description='Attribute label, in general same as name, but can contain spaces and non-latin and/or non numeric\ncharacters. Subject to change. For example, there is attribute with label "Colour" but then new\nattribute "Second color" was added to make end users be able to shop for perfect colour combination.\nAfter that attribute with label "Colour" may change its label to "Main Colour". You can use this\nproperty if you are building your own UI for SellerCenter operations as label for attribute.\n',
        example='Sample attribute label',
    )
    name: Optional[str] = Field(
        None,
        description='Attribute name for internal usage. You can ignore this property.',
        example='Attribute name',
    )
    feedName: Optional[str] = Field(
        None,
        description='Feed name: this is how attribute is displayed in XLSX exports and expected to be in imports. When your\nintegration with SellerCenter will generate files for upload to SellerCenter, then you need to use this\nproperty as column name. Very rarely changed, but you need to consider that is can happen.\n',
        example='Feed name',
    )
    groupName: Optional[str] = Field(
        None,
        description='Attribute\'s group name. If you implement own UI for SellerCenter it is useful to display attributes in\ngroups, for example "Delivery", "Product Additional Details". By using this field you can split\nattributes in groups and display accordingly.\n',
        example='Content',
    )
    isMandatory: Optional[bool] = Field(
        None, description='Attribute is mandatory.\n', example=False
    )
    isGlobalAttribute: Optional[bool] = Field(
        None,
        description='Is true when attribute does not belong to certain AttributeSet and can be set for any product.\n',
        example=True,
    )
    description: Optional[str] = Field(
        None,
        description='Attribute description. Maybe useful to see more about meaning of attribute or when you develop\nown UI for SellerCenter operations.\n',
        example='Some description of an attribute',
    )
    productType: Optional[str] = Field(
        None,
        description='Legacy field indicating whether attribute belongs to product ("simple"), product set ("config") or very-special\n("sellercenter"). Please, do not rely on this field as it is subject to change in near future. It is left\nfor compatibility reasons for some clients of previous versions of API.\n',
        example='sellercenter',
    )
    inputType: Optional[InputType] = Field(
        None,
        description='Type of input to display to user. See enum values for possible values. This may be\nuseful if you develop your own UI for SellerCenter.\n',
        example='numberfield',
    )
    attributeType: Optional[AttributeType] = Field(
        None,
        description='Type of an attribute, see enum for possible values. It defines how SellerCenter stores value of certain\nattribute. For type of "value" - it is stored "as-is", for "option" - ID of option stored,\nfor "multi_option" - array or option IDs.\n\nThis is useful when you get information about product set and you want to understand whether\n123 is plain value or ID of option.\n\nThere is a special attribute type called "system". Attribute with those types returned for purposes\nof making aware about logic of those attributes. For example, you may see attribute "Brand" among them.\nFrom this attribute you will see useful information like "is it mandatory?", "what is example value of\nit?", "what description can I show to my users while I develop our own UI for SellerCenter".\n\nAttributes of this type should not be sent in array of "attributes" when you create or update your\nproduct sets. Continuing with example of Brand attribute: to pass this information you should use\nfield brandId in root of payload for creation of product set.\n',
        example='system',
    )
    exampleValue: Optional[str] = Field(None, description="Attribute's example value")
    maxLength: Optional[int] = Field(
        None,
        description="Attribute's max length, applicable for string attributes.\n",
        example=23,
    )
    isVisibleForHybrid: Optional[bool] = Field(
        None,
        description='This flag enables/disable if an attribute is visible or not for a hybrid product\n',
        example=True,
    )
    attributeDefinitionType: Optional[AttributeDefinitionType] = Field(
        None, description='Is used to define the attribute type\n', example='price'
    )
    attributeDefinitionCountry: Optional[AttributeDefinitionCountry] = Field(
        None,
        description="Is used to define the attribute's country/vendor\n",
        example='MY',
    )
    inputMode: Optional[InputMode] = Field(
        None,
        description='Is used to disable, hide a field. See enum values for possible values.\n',
        example='edit',
    )
    forbidEmpty: Optional[bool] = Field(
        None,
        description='If set to true an attribute can not be 0 or NULL.\n',
        example=True,
    )
    options: Optional[List[Option2]] = Field(
        None,
        description='Attribute options. List of all option for current attribute. Additional validation may apply\nlike validation "brand to attribute mappings", "attribute to attribute mapping". Example:\nyou want to create new product in category "Shoes". Option "45" is among options of attribute\n"Size", but there is a mapping which says that if for attribute "Age group" there is a value\n"Kids" selected then only allowed sizes are "20", "21", ... "32".\n',
    )
    isEditionBySellerBlocked: Optional[bool] = Field(
        None,
        description='If set to true then the value of the attribute can not be changed after the product was synced with the shop.\n',
        example=True,
    )
    isUsedInConsignmentFormulas: Optional[bool] = Field(
        None,
        description='If set to true then the attribute is used in consignment formulas.\n',
        example=True,
    )


class AttributeOptions(BaseModel):
    id: Optional[int] = Field(
        None,
        description='Option identifier. Please note that several attrbiutes can have options with same name,\nbut with different IDs. You need to use right option ID for right attribute. For example,\nthere are attributes "Colour" (ID=1) and "Soil color" (ID=2). "Color" has option "Black"\nwith ID=1234 and "Soil color" has option "Black" with ID=9876. Even though name of options\nare the same, when you want to pass value for "Soil color" you can send only 9876,\n',
        example=631,
    )
    name: Optional[str] = Field(
        None,
        description='Option name. If you implement own UI for SellerCenter you can display this to user, also\nsame value end user in the shop will see. If you are generating XLS files for future\nupload to SellerCenter then you need also to use this value. Please, note that very rarely\nthis value can be changed (for example, one colour got splitted in two or more, renamed\nto be more understandable for end user)\n',
        example='Black',
    )
    isDefault: Optional[bool] = Field(
        None,
        description='Is option default. Used as hint when this option is most commonly used. It may be useful\nif you implementing own UI for SellerCenter and this option should be displayed as\nselected by defaul when your user sees the screen of product set creation.\n',
        example=False,
    )


class AttributeValidator(BaseModel):
    maxLength: Optional[int] = Field(None, description='Max length', example=255)
    decimalPlaces: Optional[int] = Field(None, description='Decimal places', example=2)
    type: Optional[str] = Field(None, description='Type')
    notEmpty: Optional[bool] = Field(None, description='Not empty', example=True)
    signed: Optional[bool] = Field(None, description='Is signed', example=False)
    checkedInBlacklist: Optional[bool] = Field(
        None, description='Is checked in blacklist', example=False
    )


class Status16(Enum):
    Finished = 'Finished'
    Processing = 'Processing'
    Error = 'Error'
    Queued = 'Queued'
    Canceled = 'Canceled'


class Action3(Enum):
    """
    Feed action ("what type of feed it was"). Types can be added, removed and renamed. You can
    use this string in UI to display to user or create your mapping/translation for that.

    """

    ProductCreate = 'ProductCreate'
    ProductUpdate = 'ProductUpdate'
    ProductRemove = 'ProductRemove'
    Image = 'Image'
    SendToWarehouse = 'SendToWarehouse'
    ReturnFromWarehouse = 'ReturnFromWarehouse'
    ProductCategoryMigrate = 'ProductCategoryMigrate'
    SellerAttributeImport = 'SellerAttributeImport'
    PendingTransactionApprove = 'PendingTransactionApprove'
    CsvShippingFee = 'CsvShippingFee'
    CsvCancellationFee = 'CsvCancellationFee'
    CsvReturnDeliveryFee = 'CsvReturnDeliveryFee'
    CsvReturnHandlingFee = 'CsvReturnHandlingFee'
    CsvReturnToSellerFee = 'CsvReturnToSellerFee'
    CsvMarkAsPaid = 'CsvMarkAsPaid'
    CsvDebitUpload = 'CsvDebitUpload'
    CsvCreditUpload = 'CsvCreditUpload'
    OrderSetStatusReadyToShip = 'OrderSetStatusReadyToShip'
    OrderSetInvoiceAccessKey = 'OrderSetInvoiceAccessKey'
    PromotionMassQcImport = 'PromotionMassQcImport'
    SellerFeesImport = 'SellerFeesImport'
    SubsidySkuImport = 'SubsidySkuImport'
    SellerCounterfeitBrandConfiguration = 'SellerCounterfeitBrandConfiguration'
    FinanceQcImport = 'FinanceQcImport'
    OrderCreateForwardManifest = 'OrderCreateForwardManifest'
    CsvInventoryStatusUpload = 'CsvInventoryStatusUpload'
    OrderSetStatusToShipped = 'OrderSetStatusToShipped'
    SellerMailSend = 'SellerMailSend'
    CounterfeitBrandUpdate = 'CounterfeitBrandUpdate'
    OrderSetStatusToDelivered = 'OrderSetStatusToDelivered'
    CreateThirdPartyOrder = 'CreateThirdPartyOrder'
    OrderUpdateManifestStatus = 'OrderUpdateManifestStatus'
    ProductMassQcImport = 'ProductMassQcImport'
    CategorySetupImport = 'CategorySetupImport'
    TransactionOrderItemImport = 'TransactionOrderItemImport'
    TransactionProductImport = 'TransactionProductImport'
    TransactionSellerItemImport = 'TransactionSellerItemImport'
    UnauthorizeMultipleProductsImport = 'UnauthorizeMultipleProductsImport'
    SellerProfileMassUpdate = 'SellerProfileMassUpdate'
    PromotionEligibleProductsImport = 'PromotionEligibleProductsImport'
    PendingTransactionReject = 'PendingTransactionReject'
    PackageWeightImport = 'PackageWeightImport'
    ConsignmentReplenishmentImport = 'ConsignmentReplenishmentImport'
    OrderItemTagImport = 'OrderItemTagImport'
    FeedConfigChangePol = 'FeedConfigChangePol'
    FeedConfigChangePsol = 'FeedConfigChangePsol'
    SellerTagImport = 'SellerTagImport'
    ProductTagImport = 'ProductTagImport'
    SellerRatingCustomKpiSellerValuesImport = 'SellerRatingCustomKpiSellerValuesImport'
    ImportExternalSellerFiles = 'ImportExternalSellerFiles'
    UpdateInventoryStatusImport = 'UpdateInventoryStatusImport'
    AttributePropertiesImport = 'AttributePropertiesImport'
    ConsignmentSerialNumberSetupImport = 'ConsignmentSerialNumberSetupImport'
    ConsignmentRequestImport = 'ConsignmentRequestImport'
    OrderLogisticsImport = 'OrderLogisticsImport'
    ProductStockUpdate = 'ProductStockUpdate'
    ConsignmentReturnRequestImport = 'ConsignmentReturnRequestImport'
    ProductWarehouseStockUpdate = 'ProductWarehouseStockUpdate'
    CategoriesRestrictionImport = 'CategoriesRestrictionImport'
    OrderSetStatusReturned = 'OrderSetStatusReturned'
    OrderSetStatusReturnReceived = 'OrderSetStatusReturnReceived'
    OrderSetStatusReturnApproved = 'OrderSetStatusReturnApproved'
    OrderSetStatusReturnRejected = 'OrderSetStatusReturnRejected'
    CategoryAttributeMappingImport = 'CategoryAttributeMappingImport'


class Feed(BaseModel):
    id: Optional[int] = None
    userId: Optional[int] = Field(None, description='ID of the feed.\n', example=524)
    sellerId: Optional[int] = Field(
        None,
        description='ID of seller for who this feed is. Useful when your user role allow you to manage multiple sellers.',
        example=4089,
    )
    status: Optional[Status16] = None
    action: Optional[Action3] = Field(
        None,
        description='Feed action ("what type of feed it was"). Types can be added, removed and renamed. You can\nuse this string in UI to display to user or create your mapping/translation for that.\n',
    )
    createdAt: Optional[datetime_aliased] = None
    updatedAt: Optional[datetime_aliased] = None
    source: Optional[str] = Field(
        None, description='way Feed was created (API, XLS, UI).'
    )
    requestedFormats: Optional[List[str]] = None
    downloadLinks: Optional[List[str]] = Field(
        None,
        description='list of relative links to download export files. For some types of\nexport files are generated in several formats, therefore you may\nhave several links to download files.\n',
    )
    totalRecords: Optional[int] = Field(
        None,
        description='Feed can contain multiple items and this number indicated total number of recognized items\n',
        example=4089,
    )
    processedRecords: Optional[int] = Field(
        None,
        description='Feed items are processed in chunks and using this number you can see how many items were processed.\n',
        example=123,
    )
    failedRecords: Optional[int] = Field(
        None,
        description='How many items were failed to process (contains wrong data, validation failed for data, etc).\n',
        example=64,
    )
    failureReportExportItemid: Optional[int] = Field(
        None,
        description='ID of related export item. Can be null if there is no related error for feed. If present, you can\nget information about this export item by doing another request to export endpoint. Export item can\nhave download link and by using it you can download CSV or XLSX file with errors or warnings related\nto this feed.\n',
        example=64,
    )


class FeedItemError(BaseModel):
    itemId: Optional[UUID] = None
    errorCode: Optional[int] = None
    fieldName: Optional[str] = None
    errorMessage: Optional[str] = None
    sellerSku: Optional[str] = None


class FeedItemWarning(BaseModel):
    itemId: Optional[UUID] = None
    message: Optional[str] = None
    fieldName: Optional[str] = None
    sellerSku: Optional[str] = None


class FeedRawInput(BaseModel):
    FeedUuid: Optional[str] = Field(
        None, example='2283380623-57c9-4163-b062-9f558d1934c2'
    )
    MimeType: Optional[str] = Field(None, example='text/html')
    File: Optional[str] = Field(
        None,
        description='the manifest file encoded base64',
        example='0eWxlPmJvZHkgeyBmb250LXNpemU6MTBweDsgZm9udC1mYW1pbHk',
    )


class Type9(Enum):
    product = 'product'
    seller = 'seller'
    consignment = 'consignment'
    promotion = 'promotion'
    finance = 'finance'


class QcRejectReason(BaseModel):
    id: Optional[int] = Field(None, description='Id of the reject reason.\n', example=1)
    name: Optional[str] = Field(
        None,
        description="The name of the reject reason in venture locale. The ones set to 'Not Authorized' will have (Not Authorized) added as suffix.\n",
        example='Wrong description',
    )
    type: Optional[Type9] = Field(None, example='product')
    isSetToNotAuthorized: Optional[bool] = Field(
        None,
        description='If true, this reason can be used to set product to not authorized status.\nNot authorized products are taken offline and blocked from going to product QC. Cannot be edited after saving.\n',
        example=False,
    )
    isEnabled: Optional[bool] = Field(
        None,
        description='Whether or not the reject reason is currently enabled.\n',
        example=True,
    )


class CreateWebhook(BaseModel):
    webhookId: Optional[str] = Field(
        None, example='7dffaa4e-1713-42c2-84ba-1d2fbd4537ab'
    )
    createdAt: Optional[datetime_aliased] = None


class UpdateWebhook(BaseModel):
    webhookId: Optional[str] = Field(
        None, example='7dffaa4e-1713-42c2-84ba-1d2fbd4537ab'
    )
    updatedAt: Optional[datetime_aliased] = None


class ProductSetId(BaseModel):
    """
    numeric ID of ProductSet
    """

    syncClass: Optional[str] = Field(
        None,
        description='Used to know if the icon for product uploaded should be displayed or not',
        example='iconset-visible',
    )
    message: Optional[str] = Field(
        None,
        description='Message for the product set containing successful message or error message. If the product set is\nuploaded the message will be "Uploaded to shop", all other messages representing that product was not uploaded \nsuccessfully\n',
        example='Latest version not yet uploaded to shop',
    )
    dirtStatus: Optional[bool] = Field(
        None,
        description='Represents a flag to know if the product set has dirty data',
        example=True,
    )

class QualityControlStatus(BaseModel):
    """
    Model for quality control status information.
    """
    product_set_id: int = Field(alias="productSetId")
    status: str  # enum: "approved", "rejected", "pending"
    created_at: datetime_aliased = Field(alias="createdAt")


class ProductImageBySKU(BaseModel):
    """
    Model for product image information by SKU.
    """
    product_set_id: int = Field(alias="productSetId")
    shop_sku: str = Field(alias="shopSku")
    seller_sku: str = Field(alias="sellerSku")
    main_image_url: Optional[str] = Field(alias="mainImageUrl")


class LastVersionUploaded(BaseModel):
    """
    ProductSet upload statuses
    """

    productSetId: Optional[ProductSetId] = Field(
        None, description='numeric ID of ProductSet'
    )


class Event(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Human readable string identifier of an Event.',
        example='Updated',
    )
    alias: Optional[str] = Field(
        None,
        description='Human readable string identifier of an Event combined with its Entity.',
        example='onMetricsUpdated',
    )


class WebhookEntity(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Human readable string identifier of an Entity.',
        example='Metrics',
    )
    events: Optional[List[Event]] = None


class CreationSource(Enum):
    """
    The webhook source of creation.
    """

    web = 'web'
    api = 'api'


class Webhook(BaseModel):
    publicId: Optional[str] = Field(
        None,
        description='Identifier of a Webhook as assigned by SellerCenter.',
        example='3f0c27aa-ca28-4526-88f0-a13e6c9a007b',
    )
    sellerId: Optional[int] = Field(
        None,
        description='Identifier of a Seller as assigned by SellerCenter.',
        example=1024,
    )
    callbackUrl: Optional[str] = Field(
        None,
        description='The webhook url that will be called by SellerCenter.',
        example='https://sellercenter.com/callbacks',
    )
    creationSource: Optional[CreationSource] = Field(
        None, description='The webhook source of creation.'
    )
    createdAt: Optional[str] = Field(None, example='2022-09-01 16:35:42')
    updatedAt: Optional[str] = Field(None, example='2022-09-01 16:35:42')
    isEnabled: Optional[bool] = Field(None, example=True)
    events: Optional[List[Event]] = Field(
        None, description='List of webhook related events identified by its alias.'
    )


class Status17(Enum):
    """
    Status of the webhook callback.
    """

    success = 'success'
    fail = 'fail'
    inprogress = 'inprogress'
    queueing_failed = 'queueing_failed'


class WebhookCallback(BaseModel):
    id: Optional[int] = Field(
        None, description='Identifier of a Webhook Callback', example=1
    )
    sellerId: Optional[int] = Field(
        None,
        description='Identifier of a Seller as assigned by SellerCenter.',
        example=1024,
    )
    url: Optional[str] = Field(
        None,
        description='The webhook url that will be called by SellerCenter.',
        example='https://sellercenter.com/callbacks',
    )
    status: Optional[Status17] = Field(
        None, description='Status of the webhook callback.', example='inprogress'
    )
    createdAt: Optional[str] = Field(None, example='2023-10-25T23:30:34+00:00')
    lastCallAt: Optional[str] = Field(None, example='2023-10-25T23:30:34+00:00')
    event: Optional[str] = Field(None, example='onOrderItemsStatusChanged')
    payload: Optional[str] = Field(
        None,
        example='{"event":"onOrderItemsStatusChanged","payload":{"OrderId":1,"OrderItemIds":["2"],"NewStatus":"ready_to_ship"}}',
    )


class WebhookEntityEvent(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Human readable string identifier of an Event.',
        example='Updated',
    )
    alias: Optional[str] = Field(
        None,
        description='Human readable string identifier of an Event combined with its Entity.',
        example='onMetricsUpdated',
    )


class QualityControlStatus(Enum):
    """
    The quality control status of the ProductSet without details (comment/reject reason)

    """

    accepted = 'accepted'
    rejected = 'rejected'
    pending = 'pending'


class VisibilityRule(BaseModel):
    productSetId: Optional[int] = Field(
        None, description='Id of the ProductSet\n', example=1
    )
    hasAtLeastOneActiveProduct: Optional[bool] = Field(
        None,
        description='The flag shows if the ProductSet has at least one active Product\n',
        example=True,
    )
    isSellerActive: Optional[bool] = Field(
        None,
        description='The flag shows if the Seller of the ProductSet is active or not\n',
        example=True,
    )
    isBrandActive: Optional[bool] = Field(
        None,
        description='The flag shows if the Brand of the ProductSet is active or not\n',
        example=True,
    )
    hasZeroPrices: Optional[bool] = Field(
        None,
        description='The flag shows if any variations of the ProductSet has a price with 0 value\n',
        example=True,
    )
    hasZeroStocks: Optional[bool] = Field(
        None,
        description='The flag shows if any variations of the ProductSet have no stocks in the warehouse\n',
        example=True,
    )
    hasImages: Optional[bool] = Field(
        None,
        description='The flag shows if at least 1 image was uploaded for the ProductSet\n',
        example=True,
    )
    hasActiveCategories: Optional[bool] = Field(
        None,
        description='The flag shows if at least 1 image was uploaded for the ProductSet\n',
        example=True,
    )
    isBrandApproved: Optional[bool] = Field(
        None,
        description='The flag shows if the Brand of the ProductSet is approved or not\n',
        example=True,
    )
    isProductSetAuthorized: Optional[bool] = Field(
        None,
        description='The flag shows if the ProductSet is authorized or not\n',
        example=True,
    )
    isLatestVersionUploaded: Optional[bool] = Field(
        None,
        description='The flag shows if the latest version of the ProductSet was uploaded to the store\n',
        example=True,
    )
    latestVersionUploadedMessage: Optional[str] = Field(
        None,
        description='A detailed message (with error) about the latest uploaded version of the ProductSet\n',
        example='Latest version not yet uploaded to shopLatest version not yet uploaded to shop',
    )
    qualityControlStatus: Optional[QualityControlStatus] = Field(
        None,
        description='The quality control status of the ProductSet without details (comment/reject reason)\n',
        example='pending',
    )


class Status18(Enum):
    active = 'active'
    inactive = 'inactive'


class UserCreate(BaseModel):
    aclRoleId: Optional[int] = Field(None, description='Role Id', example=2)
    apiKey: Optional[str] = Field(None, example='093a9e34dqw2312241gcz53766e338abf')
    email: Optional[str] = Field(None, example='email@gmail.com')
    languageId: Optional[int] = Field(None, description='Language Id', example=3)
    name: Optional[str] = Field(None, example='John')
    notifyNewUser: Optional[bool] = None
    sellerId: Optional[int] = Field(None, example=1)
    status: Optional[Status18] = None
    enablePassword: Optional[bool] = Field(
        None,
        description='Indicates whether the user is allowed to use a password for authentication',
        example=True,
    )
    switchableSellerIds: Optional[List[int]] = Field(
        None,
        description='Array of seller IDs that the user can switch between',
        example=[1, 2, 232],
    )


class UserUpdate(BaseModel):
    roleId: Optional[int] = Field(None, description='Role Id', example=2)
    apiKey: Optional[str] = Field(None, example='093a9e34dqw2312241gcz53766e338abf')
    email: Optional[str] = Field(None, example='email@gmail.com')
    name: Optional[str] = Field(None, example='John')
    status: Optional[Status18] = None
    enablePassword: Optional[bool] = Field(
        None,
        description='Indicates whether the user is allowed to use a password for authentication',
        example=True,
    )
    switchableSellerIds: Optional[List[int]] = Field(
        None,
        description='Array of seller IDs that the user can switch between',
        example=[1, 2, 232],
    )


class SwitchableSeller(BaseModel):
    id: Optional[str] = Field(None, example='123')
    name: Optional[str] = Field(None, example='Seller Name')


class User(BaseModel):
    id: Optional[int] = Field(None, example=32)
    email: Optional[str] = Field(None, example='test@example.com')
    name: Optional[str] = Field(None, example='Test name')
    apiKey: Optional[str] = Field(
        None,
        description='Only available for admin, maintenance, and seller full access roles',
        example='5b7878b7b1ed868cc549c2c2f7202309bcfe9737',
    )
    aclRoleId: Optional[int] = Field(None, example=2)
    sellerId: Optional[int] = Field(None, example=1)
    status: Optional[str] = Field(
        None,
        description='Status can be one of these: active, deactivated, seller_deactivated, seller_deleted',
        example='active',
    )
    enablePassword: Optional[bool] = Field(
        None,
        description='Indicates if the password is enabled for the user',
        example=True,
    )
    switchableSellers: Optional[List[SwitchableSeller]] = Field(
        None, description='List of switchable sellers with their IDs and names'
    )


class UserChangePassword(BaseModel):
    currentPassword: Optional[str] = Field(None, description='Current password')
    newPassword: Optional[str] = Field(None, description='New password')


class Pending(BaseModel):
    """
    Counter of pending order items (order items in status "pending"). Order items may have field
    shipping_provider_type with possible values 'express', 'standard', 'economy', 'air', 'surface',
    'sameday' or null.


    For order items with not-null shipping_provider_type you can find counter for that particular provider type. If
    you develop your own UI for SellerCenter: when count for certain shipping provider type is not zero, then you
    can show filter for this particular shipping provider type. For example: pendingEconomyCount=6 and all other
    counters are equal to 0. In this case it make sense to show in UI section "Pending", sub-section "Economy" and
    no sections "Air", "Surface" and others.

    """

    pending: Optional[int] = Field(
        None, description='Count of all pending order items.'
    )
    notPrintedPendingCount: Optional[int] = Field(
        None, description='Count of all pending order items which were not printed.'
    )
    pendingExpressCount: Optional[int] = Field(
        None,
        description='Count of pending order items with shipping_provider_type=express',
    )
    pendingEconomyCount: Optional[int] = Field(
        None,
        description='Count of pending order items with shipping_provider_type=economy',
    )
    pendingStandardCount: Optional[int] = Field(
        None,
        description='Count of pending order items with shipping_provider_type=standard',
    )
    pendingSamedayCount: Optional[int] = Field(
        None,
        description='Count of pending order items with shipping_provider_type=sameday',
    )
    pendingAirCount: Optional[int] = Field(
        None, description='Count of pending order items with shipping_provider_type=air'
    )
    pendingSurfaceCount: Optional[int] = Field(
        None,
        description='Count of pending order items with shipping_provider_type=surface',
    )


class OrdersCounters(BaseModel):
    pending: Optional[Pending] = Field(
        None,
        description='Counter of pending order items (order items in status "pending"). Order items may have field\nshipping_provider_type with possible values \'express\', \'standard\', \'economy\', \'air\', \'surface\',\n\'sameday\' or null.\n\n\nFor order items with not-null shipping_provider_type you can find counter for that particular provider type. If\nyou develop your own UI for SellerCenter: when count for certain shipping provider type is not zero, then you\ncan show filter for this particular shipping provider type. For example: pendingEconomyCount=6 and all other\ncounters are equal to 0. In this case it make sense to show in UI section "Pending", sub-section "Economy" and\nno sections "Air", "Surface" and others.\n',
    )
    readyToShipCount: Optional[int] = Field(
        None, description='Count or order items in "ready to ship" status.'
    )
    paymentPendingCount: Optional[int] = Field(
        None,
        description='Count or order items in "payment_pending" status. This status is separate status from "pending". If you want\nto display in your UI "overall" count of pending order items, then recommended formula is "payment pending count +\npending count".\n',
    )
    notPrintedReadyToShipCount: Optional[int] = Field(
        None,
        description='Count of order items in status "ready_to_ship" which were not printed yet.\n',
    )
    shippedCount: Optional[int] = Field(
        None, description='Count of order items in status "shipped".'
    )


class Status20(Enum):
    """
    Order Item status.

    """

    pending = 'pending'
    shipped = 'shipped'
    canceled = 'canceled'
    returned = 'returned'
    failed = 'failed'
    delivered = 'delivered'
    ready_to_ship = 'ready_to_ship'
    return_shipped_by_customer = 'return_shipped_by_customer'
    return_waiting_for_approval = 'return_waiting_for_approval'
    return_rejected = 'return_rejected'
    return_delivered = 'return_delivered'
    payment_pending = 'payment_pending'


class OrderHistory(BaseModel):
    orderItemId: int = Field(..., description='Order item identifier', example=1111)
    shopSku: str = Field(..., description='Shop SKU', example='164097_L')
    status: Status20 = Field(..., description='Order Item status.\n', example='pending')
    note: Optional[str] = Field(None, description='Additional information')
    createdAt: str = Field(
        ...,
        description='Date when change occurred',
        example='2021-09-22T23:21:42.123456Z',
    )
    editor: Optional[str] = Field(
        None, description='Author of the change', example='admin@sellercenter.net'
    )


class OrderItemStatus(Enum):
    """
    Order Item status.

    """

    pending = 'pending'
    shipped = 'shipped'
    canceled = 'canceled'
    returned = 'returned'
    failed = 'failed'
    delivered = 'delivered'
    ready_to_ship = 'ready_to_ship'
    return_shipped_by_customer = 'return_shipped_by_customer'
    return_waiting_for_approval = 'return_waiting_for_approval'
    return_rejected = 'return_rejected'
    return_delivered = 'return_delivered'
    payment_pending = 'payment_pending'


class Type10(Enum):
    """
    Type of the contract
    """

    terms = 'terms'
    contract = 'contract'


class SellerContract(BaseModel):
    contractId: Optional[int] = Field(
        None, description='Id of the contract', example=123
    )
    sellerId: Optional[int] = Field(None, description='Id of the seller', example=123)
    type: Optional[Type10] = Field(None, description='Type of the contract')
    url: Optional[str] = Field(
        None,
        description='Url of the contract file',
        example='https://example.com/contract.pdf',
    )
    approvedAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the contract was approved',
        example='2022-11-01 03:33:47',
    )
    createdAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the contract was created',
        example='2022-11-01 03:33:47',
    )
    updatedAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the contract was last updated',
        example='2022-11-01 03:33:47',
    )
    expirationDate: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the contract will expire',
        example='2022-11-01 03:33:47',
    )
    approverUserName: Optional[str] = Field(
        None, description='Username of the approver', example='seller1'
    )
    approverEmail: Optional[str] = Field(
        None, description='Email of the approver', example='seller1@sc.net'
    )


class SellerPayoutTransactionStatement(BaseModel):
    statementNumber: Optional[str] = Field(
        None, description='Url of the contract file', example='TEST1234-20221122'
    )
    createdAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the statement was created',
        example='2022-11-01 03:33:47',
    )
    updatedAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the statement was last updated',
        example='2022-11-01 03:33:47',
    )
    openingBalance: Optional[float] = Field(None, description='The opening balance')
    itemRevenue: Optional[float] = Field(
        None, description='The revenue generated by the item.'
    )
    shipmentFee: Optional[float] = Field(None, description='Cost of shipping.')
    shipmentFeeCredit: Optional[float] = Field(
        None, description='Shipping credit, if any.'
    )
    otherRevenueTotal: Optional[float] = None
    feesTotal: Optional[float] = Field(
        None, description='Sum of Payment Fee & Return to Seller Fee'
    )
    subtotal1: Optional[float] = Field(
        None, description='(Sum of Item Revenue, Other Revenue) - Fees(Total)'
    )
    refunds: Optional[float] = Field(None, description='Sum of all refunds, if any.')
    feesOnRefundsTotal: Optional[float] = Field(
        None, description='Accumulated fees on refunds issued.'
    )
    subtotal2: Optional[float] = Field(None, description='(Sum of Subtotal1) - Refunds')
    closingBalance: Optional[float] = Field(None, description='Closing Balance')
    guaranteeDeposit: Optional[float] = Field(None, description='Guarantee Deposit')
    payout: Optional[float] = Field(
        None, description='Amount to be Paid Out to Seller for Statement'
    )
    paid: Optional[bool] = Field(
        None, description='Payout Status of Statement. 1 is Paid. 0 is Not Paid'
    )
    paymentReference: Optional[str] = None


class TransactionSource(Enum):
    """
    Transaction source
    """

    sellercenter = 'sellercenter'
    web = 'web'
    csv = 'csv'


class Transaction(BaseModel):
    """
    Transaction info
    """

    id: Optional[int] = Field(None, description='Unique ID of transaction', example=1)
    sellerId: Optional[int] = Field(None, description='Seller Id', example=1)
    transactionTypeId: Optional[int] = Field(
        None,
        description='Transaction type Id.\nList of types you can find In /v2/transaction/types\n',
        example=1,
    )
    treStatementGroupId: Optional[int] = Field(
        None, description='Transaction Rule Engine group Id', example=2
    )
    transactionGroupName: Optional[str] = Field(
        None, description='Transaction Rule Engine group name'
    )
    transactionTriggerEventId: Optional[int] = Field(
        None,
        description='Transaction trigger event Id.\nList of events you can find In /v2/transaction/trigger-events\n',
        example=1,
    )
    isUnique: Optional[bool] = Field(None, description='Is unique transaction')
    transactionSource: Optional[Union[TransactionSource, str]] = Field(None, description='Transaction source')
    userId: Optional[int] = Field(None, description='User Id')
    description: Optional[str] = Field(None, description='Info about transaction')
    value: Optional[float] = Field(None, description='Value', example=65.3)
    taxesVat: Optional[float] = Field(None, description='Value-Added Tax', example=2.3)
    taxesWht: Optional[float] = Field(None, description='Withholding tax', example=1.3)
    isWhtInAmount: Optional[bool] = Field(None, description='Is Withholding tax in amount', example=True)
    ref: Optional[int] = Field(None, description='Reference to the transaction object. For example on Order Item Id.', example=12)
    refDate: Optional[int] = Field(None, description='Reference date')
    number: Optional[str] = Field(None, description='Transaction number')
    transactionStatementId: Optional[int] = Field(None, description='Transaction statement Id')
    createdAt: Optional[datetime_aliased] = Field(
        None,
        description='Transaction create date-time',
        example='2021-09-22T23:21:42+02:00',
    )
    updatedAt: Optional[datetime_aliased] = Field(
        None,
        description='Transaction last update date-time',
        example='2021-09-22T23:21:42+02:00',
    )
    qcUserId: Optional[int] = Field(None, description='QC User Id', example=44)
    hash: Optional[str] = Field(None, description='Unique hash of transaction')
    currency: Optional[str] = Field(None, description='Currency', example='USD')
    reference: Optional[int] = Field(None, description='Identifier of the reference type.')
    referenceType: Optional[str] = Field(
        None, description='Reference type tels who was the creator of given transaction'
    )


class AccountStatementSection(Enum):
    """
    Account statement section
    """

    item_revenue = 'item_revenue'
    other_revenue = 'other_revenue'
    subsidy = 'subsidy'
    subsidy_refund = 'subsidy_refund'
    fees = 'fees'
    item_refunds = 'item_refunds'
    refunds = 'refunds'
    other_transactions = 'other_transactions'
    debit_other_revenues = 'debit_other_revenues'


class Type11(Enum):
    """
    Type
    """

    debit = 'debit'
    credit = 'credit'


class TransactionType(BaseModel):
    """
    Transaction info
    """

    accountStatementSection: AccountStatementSection = Field(
        ..., description='Account statement section', example='other_transactions'
    )
    description: str = Field(..., description='Description')
    feeType: int = Field(..., description='Fee type')
    id: int = Field(..., description='Id', example=1)
    refSource: str = Field(..., description='Ref source', example='sales_order_item')
    type: Type11 = Field(..., description='Type')


class Outcome(BaseModel):
    """
    Outcome
    """

    value: Optional[str] = Field(
        None, description='outcome value', example='debit_transaction'
    )


class StatementType5(Enum):
    """
    Shows to which statement this groups is associated
    """

    marketplace = 'marketplace'
    consignment = 'consignment'


class TransactionAccountStatementGroup(BaseModel):
    """
    Transaction account statement group info
    """

    accountStatementGroupId: str = Field(
        ..., description='Account statement group identifier', example=1
    )
    name: str = Field(
        ..., description='Account statement group name', example='Payment Deposit'
    )
    outcome: Outcome = Field(..., description='Outcome')
    transactionTypeId: int = Field(
        ..., description='Transaction type identifier', example=1
    )
    accountStatementSection: str = Field(
        ..., description='Account statement section', example='fees'
    )
    transactionType: str = Field(
        ..., description='Transaction type name', example='Selling Fee Credit'
    )
    marker: str = Field(
        ...,
        description='Marker',
        example='account_statement_group-balance-deduction-10',
    )
    statementType: StatementType5 = Field(
        ..., description='Shows to which statement this groups is associated'
    )
    transactionTypeRefSource: str = Field(
        ..., description='Transaction type reference source', example='seller'
    )


class TransactionTriggerEvent(BaseModel):
    """
    Transaction info
    """

    id: int = Field(..., description='Id', example=1)
    name: str = Field(..., description='Trigger name', example='order_item_shipped')
    label: str = Field(..., description='Display name', example='Item Shipped')


class TransactionStatement(BaseModel):
    """
    Transaction info
    """

    id: int = Field(..., description='Id', example=1)
    sellerId: int = Field(..., description='Seller Id', example=2)
    startDate: datetime_aliased = Field(
        ...,
        description='Transaction statement start date.',
        example='2021-09-22T23:21:42+02:00',
    )
    endDate: datetime_aliased = Field(
        ...,
        description='Transaction statement end date.',
        example='2021-09-22T23:21:42+02:00',
    )
    openingBalance: float = Field(
        ..., description='Balance before transaction', example=32.5
    )
    guaranteeDeposit: str = Field(..., description='Guarantee deposit')
    closingBalance: float = Field(
        ..., description='Balance after transaction', example=30.6
    )
    payout: float = Field(..., description='Payout amount', example=2.4)
    currency: str = Field(..., description='Currency', example='USD')
    createdAt: datetime_aliased = Field(
        ...,
        description='Transaction statement create date-time.',
        example='2021-09-22T23:21:42+02:00',
    )
    updatedAt: datetime_aliased = Field(
        ...,
        description='Transaction statement last update date-time.',
        example='2021-09-22T23:21:42+02:00',
    )
    paid: bool = Field(..., description='Is paid', example=False)
    note: str = Field(..., description='Additional info about statement')
    userId: int = Field(..., description='User Id')
    number: str = Field(..., description='Statement number')
    uuid: str = Field(..., description='Unique string identifier')
    paymentRef: str = Field(..., description='Payment reference')
    uploadId: int = Field(..., description='Upload Id')
    paidAt: datetime_aliased = Field(
        ..., description='Date of payment.', example='2021-09-22T23:21:42+02:00'
    )
    dueAt: datetime_aliased = Field(
        ..., description='Due at.', example='2021-09-22T23:21:42+02:00'
    )


class Resource(BaseModel):
    id: Optional[int] = Field(None, description='Id of user resource.\n', example=1)
    name: Optional[str] = Field(
        None, description='The name of the user resource.\n', example='login'
    )
    label: Optional[str] = Field(
        None, description='The label of the user resource.\n', example='Frontend login'
    )
    description: Optional[str] = Field(
        None,
        description='A descriptive text of the user resource.\n',
        example='Some details about the user resource',
    )
    maintenanceOnly: Optional[bool] = Field(
        None,
        description='Whether or not the resource is only available for maintenance user.\n',
        example=True,
    )
    tags: Optional[List[str]] = None


class Role(BaseModel):
    id: Optional[int] = Field(None, description='Id of role.\n', example=1)
    name: Optional[str] = Field(
        None, description='The name of the role.\n', example='maintenance'
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the role.\n', example='Maintenance'
    )
    group: Optional[str] = Field(
        None, description='What group the role belongs to.\n', example='venture'
    )
    description: Optional[str] = Field(
        None,
        description='A descriptive text of the user role.\n',
        example='Some details about the role',
    )
    canBeEditedByRoleIds: Optional[List[int]] = Field(
        None, description='Ids of roles that can edit the role'
    )
    userCount: Optional[int] = Field(
        None, description='How many users share the user role.\n', example=103
    )
    canEdit: Optional[bool] = Field(
        None,
        description='Whether or not you have enough rights to edit the role. Use this to check whether or not to show the resources.\n',
        example=True,
    )
    canDelete: Optional[bool] = Field(
        None,
        description='Whether or not you can delete the role. If there are users that are assigned to the role, this will\nbe false even if you have enough permissions for deletion.\n',
        example=False,
    )
    resources: Optional[List[Resource]] = None


class UserResource(BaseModel):
    id: Optional[int] = Field(None, description='Id of user resource.\n', example=1)
    name: Optional[str] = Field(
        None, description='The name of the user resource.\n', example='login'
    )
    label: Optional[str] = Field(
        None, description='The label of the user resource.\n', example='Frontend login'
    )
    description: Optional[str] = Field(
        None,
        description='A descriptive text of the user resource.\n',
        example='Some details about the user resource',
    )
    maintenanceOnly: Optional[bool] = Field(
        None,
        description='Whether or not the resource is only available for maintenance user.\n',
        example=True,
    )
    tags: Optional[List[str]] = None


class ApiKeyGenerate(BaseModel):
    apiKey: Optional[str] = Field(
        None,
        description='The generated api key.',
        example='3b521ea8c6e7fcaf7e9ed82fc9a869bc',
    )


class RoleAdd(BaseModel):
    id: Optional[int] = Field(None, description='Id of role.\n', example=123)
    displayName: Optional[str] = Field(
        None, description='The display name of the role.\n', example='Maintenance'
    )
    group: Optional[str] = Field(
        None, description='What group the role belongs to.\n', example='venture'
    )
    description: Optional[str] = Field(
        None,
        description='A descriptive text of the user role.\n',
        example='Some details about the role',
    )
    canBeEditedByRoleIds: Optional[List[int]] = Field(
        None, description='Ids of roles that can edit the role'
    )


class RoleEdit(BaseModel):
    id: Optional[int] = Field(None, description='Id of role.\n', example=123)
    displayName: Optional[str] = Field(
        None, description='The display name of the role.\n', example='Maintenance'
    )
    group: Optional[str] = Field(
        None, description='What group the role belongs to.\n', example='venture'
    )
    description: Optional[str] = Field(
        None,
        description='A descriptive text of the user role.\n',
        example='Some details about the role',
    )
    canBeEditedByRoleIds: Optional[List[int]] = Field(
        None, description='Ids of roles that can edit the role'
    )


class EnabledResourcesListItem(BaseModel):
    id: Optional[int] = Field(None, description='Id of user resource.\n', example=1)
    name: Optional[str] = Field(
        None, description='The name of the user resource.\n', example='login'
    )
    label: Optional[str] = Field(
        None, description='The label of the user resource.\n', example='Frontend login'
    )
    description: Optional[str] = Field(
        None,
        description='A descriptive text of the user resource.\n',
        example='Some details about the user resource',
    )
    maintenanceOnly: Optional[bool] = Field(
        None,
        description='Whether or not the resource is only available for maintenance user.\n',
        example=True,
    )
    tags: Optional[List[str]] = None


class ResourcesListItem(BaseModel):
    id: Optional[int] = Field(None, description='Id of user resource.\n', example=1)
    name: Optional[str] = Field(
        None, description='The name of the user resource.\n', example='login'
    )
    label: Optional[str] = Field(
        None, description='The label of the user resource.\n', example='Frontend login'
    )
    description: Optional[str] = Field(
        None,
        description='A descriptive text of the user resource.\n',
        example='Some details about the user resource',
    )
    maintenanceOnly: Optional[bool] = Field(
        None,
        description='Whether or not the resource is only available for maintenance user.\n',
        example=True,
    )
    tags: Optional[List[str]] = None


class Resources(BaseModel):
    enabledResourcesList: Optional[List[EnabledResourcesListItem]] = Field(
        None, description='The list of enabled resources.\n'
    )
    resourcesList: Optional[List[ResourcesListItem]] = Field(
        None, description='The list of available resources.\n'
    )


class Type12(Enum):
    """
    The type of the account statement
    """

    marketplace = 'marketplace'
    consignment = 'consignment'


class FinanceStatement(BaseModel):
    id: int = Field(
        ...,
        description='The ID of the statement associated with the transaction. 0 means statement is current',
    )
    sellerId: int
    number: str
    startDate: Optional[datetime_aliased]
    endDate: Optional[datetime_aliased]
    dueDate: Optional[datetime_aliased]
    paidAt: Optional[datetime_aliased]
    note: Optional[str] = Field(
        None,
        description='Optional note for the finance statement.',
    )
    openingBalance: float
    closingBalance: float
    payoutAmount: float
    guaranteeDeposit: float
    paid: bool
    currency: str = Field(
        ...,
        description='The currency of the transaction. Three-letter code, ISO 4217 standard.',
        example='USD',
    )
    country: str = Field(
        ...,
        description='The country code of the transaction. Two-letter code, ISO 3166-1 alpha-2 standard.',
        example='US',
    )
    type: Type12 = Field(
        ..., description='The type of the account statement', example='marketplace'
    )


class Group(BaseModel):
    id: Optional[int] = Field(
        None,
        description='This field represents the internal identifier of a transaction type and not the account statement group',
    )
    name: Optional[str] = None
    amount: Optional[float] = None


class ItemRevenue(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class OtherRevenue(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Fees(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Subsidy(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Order1(BaseModel):
    itemRevenue: Optional[ItemRevenue] = None
    otherRevenue: Optional[OtherRevenue] = None
    fees: Optional[Fees] = None
    subsidy: Optional[Subsidy] = None
    vatAmount: Optional[float] = None
    whtAmount: Optional[float] = None
    subtotal: Optional[float] = None


class ItemRefunds(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Refunds1(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class DebitOtherRevenues(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class SubsidyRefunds(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Refunds(BaseModel):
    itemRefunds: Optional[ItemRefunds] = None
    refunds: Optional[Refunds1] = None
    debitOtherRevenues: Optional[DebitOtherRevenues] = None
    subsidyRefunds: Optional[SubsidyRefunds] = None
    vatAmount: Optional[float] = None
    whtAmount: Optional[float] = None
    subtotal: Optional[float] = None


class Others1(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Others(BaseModel):
    others: Optional[Others1] = None
    vatAmount: Optional[float] = None
    whtAmount: Optional[float] = None


class Details(BaseModel):
    order: Order1
    refunds: Refunds
    others: Others


class FinanceStatementDetails(BaseModel):
    id: int
    currency: str = Field(
        ...,
        description='The currency of the transaction. Three-letter code, ISO 4217 standard.',
        example='USD',
    )
    country: str = Field(
        ...,
        description='The country code of the transaction. Two-letter code, ISO 3166-1 alpha-2 standard.',
        example='DE',
    )
    details: Details


class FinanceStatementDetailsGroup(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Source(Enum):
    """
    The source of the transaction.
    """

    sellercenter = 'sellercenter'
    web = 'web'
    csv = 'csv'


class StatementType6(Enum):
    """
    The 'statementType' field specifies the type of account statement to which the transaction belongs.
    """

    marketplace = 'marketplace'
    consignment = 'consignment'


class FinanceTransaction(BaseModel):
    id: int = Field(..., description='The ID of the transaction.')
    date: datetime_aliased = Field(..., description='The date of the transaction.')
    number: str = Field(..., description='Transaction number.')
    typeId: int = Field(..., description='The type of the transaction.')
    treStatementGroupId: int = Field(
        ..., description='Transaction Rule Engine group Id', example=2
    )
    amount: float = Field(..., description='The amount of the transaction.')
    vatAmount: float = Field(..., description='The VAT amount of the transaction.')
    whtAmount: float = Field(..., description='The WHT amount of the transaction.')
    source: Source = Field(..., description='The source of the transaction.')
    comment: Optional[str] = Field(None, description='The comment of the transaction.')
    statementId: int = Field(
        ...,
        description='The ID of the statement associated with the transaction. 0 means that statement is current',
    )
    orderItemId: int = Field(
        ..., description='The ID of the order item associated with the transaction.'
    )
    currency: str = Field(
        ...,
        description='The currency of the transaction. Three-letter code, ISO 4217 standard.',
        example='USD',
    )
    country: str = Field(
        ...,
        description='The country code of the transaction. Two-letter code, ISO 3166-1 alpha-2 standard.',
        example='DE',
    )
    typeName: str = Field(..., description='The name of the transaction type.')
    groupName: str = Field(..., description='The name of the transaction group.')
    orderNumber: str = Field(..., description='Order number.')
    statementType: StatementType6 = Field(
        ...,
        description="The 'statementType' field specifies the type of account statement to which the transaction belongs.",
    )


class AccountStatementGroup(BaseModel):
    id: int = Field(..., description='The identifier of an account statement group.')
    name: str = Field(..., description='The name of an account statement group.')


class TransactionType1(BaseModel):
    id: int = Field(..., description='The identifier of a transaction type.')
    name: str = Field(..., description='The name of a transaction type.')
    accountStatementGroup: Optional[AccountStatementGroup] = None


class Amount(BaseModel):
    value: float = Field(..., description='Total fee amount of the transaction.')
    vatTax: float = Field(..., description='Amount of VAT tax.')
    whtTax: float = Field(..., description='Amount of WHT tax.')
    currency: str = Field(
        ..., description='The currency in which the transaction will be paid.'
    )


class StatementType7(Enum):
    """
    The type indicates to which account statement the transaction is associated.
    """

    marketplace = 'marketplace'
    consignment = 'consignment'


class FinanceTransactionsV21(BaseModel):
    createdAt: str = Field(..., description='The creation date of the transaction.')
    transactionNumber: str = Field(
        ..., description='The registration number of the transaction.'
    )
    transactionType: TransactionType1
    userId: Optional[int] = Field(
        None, description='The user id of who created the transaction manually.'
    )
    comment: str = Field(..., description='A comment related to a transaction.')
    amount: Amount
    accountStatementId: Optional[int] = Field(
        None, description='The identifier of the account statement.'
    )
    orderNumber: Optional[str] = Field(
        None,
        description='The order number if the transaction type is associated with an order item.',
    )
    productSku: Optional[str] = Field(
        None,
        description='The product SKU if the transaction type is associated with an order item.',
    )
    country: str = Field(
        ..., description='The country in which the orders were placed.'
    )
    isWhtInAmount: bool = Field(
        ...,
        description='Is defining is the amount.whtTax value already included in amount value.',
    )
    transactionReference: Optional[int] = Field(
        None,
        description='The identifier of the transaction reference. (Can be related to an order, order item, product, seller or other)',
    )
    qcUserId: Optional[int] = Field(
        None, description='The id of a user who approved a pending transaction.'
    )
    hash: str = Field(
        ...,
        description='The hash of a transaction to ensure that a transaction is unique.',
    )
    statementType: StatementType7 = Field(
        ...,
        description='The type indicates to which account statement the transaction is associated.',
    )
    accountStatementIsPaid: Optional[bool] = Field(
        None, description='Status of account statement payment.'
    )
    accountStatementNumber: Optional[str] = Field(
        None, description='The number of the account statement.'
    )
    accountStatementStartDate: Optional[str] = Field(
        None, description='The start date of the account statement.'
    )
    accountStatementEndDate: Optional[str] = Field(
        None, description='The end date of the account statement.'
    )
    accountStatementPaymentDueDate: Optional[datetime_aliased] = Field(
        None, description='The payment due date of the account statement.'
    )
    ruleId: Optional[int] = Field(
        None, description='The identifier of the rule that applied to the transaction.'
    )


class FinanceVariable(BaseModel):
    sellerId: Optional[int] = None
    sellerSrcId: Optional[str] = Field(None, description='External seller id.')
    name: Optional[str] = None
    description: Optional[str] = None
    sellerDescription: Optional[str] = None
    type: Optional[str] = None
    value: Optional[float] = None
    globalValue: Optional[bool] = None


class StatementType8(Enum):
    """
    The transaction's associated statement type.
    """

    marketplace = 'marketplace'
    consignment = 'consignment'


class FinanceOrderItemTransaction(BaseModel):
    orderItemId: int = Field(
        ..., description='The ID of the order item associated with the transaction.'
    )
    orderId: int = Field(
        ..., description='The ID of the order associated with the transaction.'
    )
    commission: float = Field(
        ..., description='The commission amount of the transaction.'
    )
    fees: float = Field(..., description='The fees amount of the transaction.')
    vatAmount: float = Field(..., description='The VAT amount of the transaction.')
    whtAmount: float = Field(..., description='The WHT amount of the transaction.')
    payoutAmount: float = Field(
        ..., description='The payout amount of the transaction related to item.'
    )
    statementId: int = Field(
        ...,
        description='The ID of the statement associated with the transaction. 0 means that transaction belongs to current statement',
    )
    currency: str = Field(
        ...,
        description='The currency of the transaction. Three-letter code, ISO 4217 standard.',
        example='USD',
    )
    country: str = Field(
        ...,
        description='The country code of the transaction. Two-letter code, ISO 3166-1 alpha-2 standard.',
        example='DE',
    )
    statementType: StatementType8 = Field(
        ..., description="The transaction's associated statement type."
    )
    payoutStatus: Optional[str] = Field(
        None, description='The payout status of the transaction.'
    )
    accountStatementPaymentDueDate: Optional[datetime_aliased] = Field(
        None, description='The payment due date of the account statement.'
    )


class Type13(Enum):
    """
    Type of an account statement
    """

    marketplace = 'marketplace'
    consignment = 'consignment'


class CurrentFinanceStatement(BaseModel):
    sellerId: int
    number: str
    startDate: datetime_aliased
    endDate: datetime_aliased
    openingBalance: float
    closingBalance: float
    payoutAmount: float
    currency: str
    country: Optional[str] = None
    guaranteeDeposit: float
    paid: Optional[bool] = None
    note: Optional[str] = None
    paymentRef: Optional[str] = None
    uploadId: Optional[str] = None
    paidAt: Optional[datetime_aliased] = None
    dueDate: Optional[datetime_aliased] = None
    type: Type13 = Field(..., description='Type of an account statement')


class Type14(Enum):
    marketplace = 'marketplace'
    consignment = 'consignment'


class ItemRevenue1(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class OtherRevenue1(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Fees1(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Subsidy1(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Order2(BaseModel):
    itemRevenue: Optional[ItemRevenue1] = None
    otherRevenue: Optional[OtherRevenue1] = None
    fees: Optional[Fees1] = None
    subsidy: Optional[Subsidy1] = None
    vatAmount: Optional[float] = None
    whtAmount: Optional[float] = None
    subtotal: Optional[float] = None


class ItemRefunds1(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Refunds3(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class DebitOtherRevenues1(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class SubsidyRefunds1(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Refunds2(BaseModel):
    itemRefunds: Optional[ItemRefunds1] = None
    refunds: Optional[Refunds3] = None
    debitOtherRevenues: Optional[DebitOtherRevenues1] = None
    subsidyRefunds: Optional[SubsidyRefunds1] = None
    vatAmount: Optional[float] = None
    whtAmount: Optional[float] = None
    subtotal: Optional[float] = None


class Others3(BaseModel):
    total: Optional[float] = None
    groups: Optional[List[Group]] = None


class Others2(BaseModel):
    others: Optional[Others3] = None
    vatAmount: Optional[float] = None
    whtAmount: Optional[float] = None


class Details1(BaseModel):
    order: Order2
    refunds: Refunds2
    others: Others2


class CurrentFinanceStatementDetails(BaseModel):
    id: int
    currency: str
    type: Type14
    details: Details1


class CheckStatus(BaseModel):
    processStatus: Optional[str] = Field(
        None, description='Current status of the file.', example='FINISHED'
    )


class CreditNoteNumber(BaseModel):
    generationType: Optional[str] = Field(
        None, description='Generation type', example='autoincrement_number'
    )
    prefix: Optional[str] = Field(
        None, description='Prefix for the credit note number', example='ABC'
    )
    nextNumber: Optional[int] = Field(None, description='The next number', example=123)
    nextFormatedValue: Optional[str] = Field(
        None, description='The next formated value', example='CNCODEABC123'
    )


class FileType(Enum):
    """
    Type of the file. Note that types can be added and/or removed in future.

    """

    generic = 'generic'
    contract = 'contract'
    terms = 'terms'


class SellerExternalFile(BaseModel):
    fileType: Optional[FileType] = Field(
        None,
        description='Type of the file. Note that types can be added and/or removed in future.\n',
        example='generic',
    )
    fileName: Optional[str] = Field(
        None,
        description='Name of the file, usually original name of the file. You can use this field to display the file name in the UI  and to understand what kind of information is in certain file.\n',
        example='Addendum_May2024.pdf',
    )
    uploadedAt: Optional[datetime_aliased] = Field(
        None,
        description='Date and time when the file was uploaded.\n',
        example='2024-10-08T13:35:17+00:00',
    )
    downloadUrl: Optional[str] = Field(
        None,
        description='Temporal link to download the file. This link is valid for 1 hour and can be used to download the file.\n',
        example='https://some-s3-bucket.s3.amazonaws.com/path/to/your/object?Expires=EXPIRATION_TIMESTAMP&Signature=SIGNATURE',
    )
