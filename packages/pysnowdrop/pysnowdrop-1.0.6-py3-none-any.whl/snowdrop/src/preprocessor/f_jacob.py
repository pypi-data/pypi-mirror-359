from numba import njit
    
@njit
def f_jacob(x,p,exog=[0]):
    
    ### This code was generated by Python.
    ### Monetary policy model example
    
    from sympy import DiracDelta
    from snowdrop.src.preprocessor.condition import IfThenElse,IfThen,Derivative,Subs,Positive,Negative,myzif
    from snowdrop.src.preprocessor.functions import Heaviside

    import numpy as np
    from numpy import log,exp,sin,cos,tan,sqrt,sign
    from numpy import maximum as Max, min as Min, abs as Abs
     
    # Initialize variables
    _xi_1 = 0 
    _xi_2 = 0 
    _xi_3 = 0 
    PDOT__ = x[0]
    RR__ = x[1]
    RS__ = x[2]
    Y__ = x[3]
    ey__ = x[4]
    err__ = x[5]
    ers__ = x[6]
    epdot__ = x[7]


    # Set parameters
    g = p[0]
    p_pdot1 = p[1]
    p_pdot2 = p[2]
    p_pdot3 = p[3]
    p_rs1 = p[4]
    p_y1 = p[5]
    p_y2 = p[6]
    p_y3 = p[7]

    # Set exogenous variables
    exo__ = exog[0]

    # Jacobian: 
    jacobian = np.zeros((4,8))
    jacobian[0,3] = -g**2*p_pdot2/(-Y__ + g)**2 - g**2*p_pdot3/(-Y__ + g)**2
    jacobian[0,7] = -1
    jacobian[1,1] = 1
    jacobian[1,2] = -1
    jacobian[1,5] = -1
    jacobian[2,0] = -p_rs1
    jacobian[2,2] = 1
    jacobian[2,3] = -1
    jacobian[2,6] = -1
    jacobian[3,1] = p_y2 + p_y3
    jacobian[3,3] = 1 - p_y1
    jacobian[3,4] = -1

    return jacobian 
