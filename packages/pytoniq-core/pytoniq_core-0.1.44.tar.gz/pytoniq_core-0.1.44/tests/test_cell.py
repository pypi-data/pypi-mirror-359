from pytoniq_core.boc import begin_cell, Builder, Address, Cell


def test_boc():

    empty_cell = Cell.one_from_boc('b5ee9c72010101010002000000')

    assert empty_cell == Cell.empty()
    assert empty_cell == begin_cell().end_cell()
    assert empty_cell == begin_cell().store_cell(empty_cell).end_cell()

    block_boc = ''

    assert Cell.from_boc(block_boc)[0] == Cell.one_from_boc(block_boc)

    assert Cell.one_from_boc(block_boc).hash.hex() == 'b0c09b7c116f951092b3d1b258fb98adc01c698a227b3b2e268469c24173eeb2'


def test_copy():

    cell = begin_cell().store_uint(10, 10).end_cell()

    cell_copy = cell.copy()

    cs = cell.begin_parse()

    cs.load_uint(10)

    assert cell == cell_copy
    assert cs.remaining_bits == 0

    cb = cell.to_builder()
    cb.store_uint(1, 32)

    assert cell == cell_copy
    assert cb.used_bits == 42


def test_hashes():

    exotic = Builder(type_=1).store_uint(1, 8).store_bytes(b'\x01').store_bytes(Cell.empty().hash).store_uint(0, 16).end_cell()

    assert exotic.is_exotic
    assert exotic.hash != exotic.get_hash(0)
    assert exotic.get_hash(0) == Cell.empty().hash
