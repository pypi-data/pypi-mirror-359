import argparse
import os
from .selector import list_and_select_backend, check_authentication, setup_authentication


def create_base_file(filename: str = "qhrf_experiment_base.py") -> None:
    """
    Create a base template file for QHRF experiments.
    
    Args:
        filename: Name of the file to create
    """
    
    base_code = '''"""
QHRF Experiment Base Template

This file provides a starting template for your Quantum Harmonic Resonance 
Framework (QHRF) experiments using the qhrf-backend-selector package.

Author: Generated by qhrf-backend-selector
Usage: Customize this template for your specific QHRF experiments
"""

from qhrf_backend_selector import list_and_select_backend, get_backend_details
from qiskit_ibm_runtime import SamplerV2 as Sampler
from qiskit import QuantumCircuit, transpile
import numpy as np


def create_qhrf_circuit():
    """
    Create your QHRF quantum circuit here.
    
    This is a placeholder - replace with your actual QHRF circuit design.
    Consider using validated QHRF parameters like:
    - Golden ratio (φ = 1.618034) for breathing fields
    - Fibonacci sequences for resonance patterns
    - Optimized frequencies from your research
    """
    
    # Example: Simple 3-qubit QHRF circuit
    qc = QuantumCircuit(3, 3)
    
    # QHRF parameters (customize these)
    phi = 1.618034  # Golden ratio
    breathing_freq = 0.2857  # Breathing frequency
    
    # Initialize superposition
    for i in range(3):
        qc.h(i)
    
    qc.barrier(label="Superposition")
    
    # Apply QHRF breathing field
    for i in range(3):
        qc.ry(breathing_freq * phi / (i + 1), i)
        qc.rz(0.42 / (i + 2), i)  # Phase modulation
    
    qc.barrier(label="Breathing_Field")
    
    # Entanglement coupling
    qc.cx(0, 1)
    qc.cx(1, 2)
    
    # Final stabilization
    for i in range(3):
        qc.ry(breathing_freq / 2, i)
    
    qc.barrier(label="Stabilization")
    qc.measure_all()
    
    return qc


def run_qhrf_experiment():
    """
    Main experiment function.
    """
    
    print("🧪 QHRF EXPERIMENT TEMPLATE")
    print("=" * 50)
    
    # Step 1: Select backend interactively
    service, backend = list_and_select_backend()
    
    if service and backend:
        # Step 2: Show detailed information
        get_backend_details(backend)
        
        # Step 3: Create your QHRF circuit
        print("\\n🔬 Creating QHRF circuit...")
        circuit = create_qhrf_circuit()
        print(f"Circuit created: {circuit.num_qubits} qubits, depth {circuit.depth()}")
        
        # Step 4: Transpile for the selected backend
        print(f"\\n⚙️  Transpiling for {backend.name}...")
        transpiled_circuit = transpile(circuit, backend=backend, optimization_level=2)
        print(f"Transpiled depth: {transpiled_circuit.depth()}")
        
        # Step 5: Execute the experiment
        print(f"\\n🚀 Executing experiment on {backend.name}...")
        try:
            sampler = Sampler(backend)
            job = sampler.run([transpiled_circuit], shots=1024)
            print(f"Job submitted: {job.job_id()}")
            
            # Get results
            result = job.result()
            counts = result[0].data.meas.get_counts()
            
            # Step 6: Analyze results
            print("\\n📊 EXPERIMENT RESULTS:")
            print("-" * 30)
            
            # Sort by probability
            sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)
            total_shots = sum(counts.values())
            
            # Show top results
            for i, (state, count) in enumerate(sorted_counts[:5]):
                prob = count / total_shots
                print(f"{i+1}. |{state}⟩: {prob:.1%} ({count} counts)")
            
            # QHRF analysis (customize this)
            top_4_concentration = sum([count for _, count in sorted_counts[:4]]) / total_shots
            print(f"\\n🎯 Top 4 state concentration: {top_4_concentration:.1%}")
            
            if top_4_concentration > 0.6:
                print("✅ Strong QHRF effects detected!")
            elif top_4_concentration > 0.5:
                print("⚡ Moderate QHRF effects observed")
            else:
                print("📊 Standard quantum distribution")
            
            print(f"\\n📋 Job completed: {job.job_id()}")
            print(f"🎊 Experiment finished successfully!")
            
        except Exception as e:
            print(f"❌ Experiment failed: {e}")
            print("💡 Check your authentication and backend availability")
    
    else:
        print("❌ No backend selected - experiment cancelled")
        return None


def main():
    """
    Entry point for the experiment.
    
    Customize this function to run your specific QHRF experiments.
    """
    
    print("🌟 Welcome to QHRF Experiment Template!")
    print("📝 Customize this code for your research needs")
    print("")
    
    # Run the experiment
    run_qhrf_experiment()


if __name__ == "__main__":
    main()
'''
    
    try:
        # Check if file already exists
        if os.path.exists(filename):
            overwrite = input(f"⚠️  File '{filename}' already exists. Overwrite? (y/n): ")
            if overwrite.lower() != 'y':
                print("❌ File creation cancelled")
                return
        
        # Write the base code to file
        with open(filename, 'w') as f:
            f.write(base_code)
        
        print(f"✅ Created base template: {filename}")
        print(f"📝 Customize the file for your QHRF experiments")
        print(f"🚀 Run with: python {filename}")
        
    except Exception as e:
        print(f"❌ Error creating file: {e}")


def main():
    """Main CLI entry point."""
    
    parser = argparse.ArgumentParser(
        description="QHRF Backend Selector - Interactive IBM Quantum backend selection"
    )
    parser.add_argument(
        "--check-auth", 
        action="store_true",
        help="Check if IBM Quantum authentication is working"
    )
    parser.add_argument(
        "--setup-auth",
        action="store_true", 
        help="Show authentication setup instructions"
    )
    parser.add_argument(
        "--base",
        metavar="FILENAME",
        nargs="?",
        const="qhrf_experiment_base.py",
        help="Create a base template file for QHRF experiments (default: qhrf_experiment_base.py)"
    )
    parser.add_argument(
        "--version",
        action="version",
        version="%(prog)s 1.0.0"
    )
    
    args = parser.parse_args()
    
    if args.check_auth:
        check_authentication()
    elif args.setup_auth:
        setup_authentication()
    elif args.base is not None:
        create_base_file(args.base)
    else:
        # Default: run interactive backend selection
        print("🧪 QHRF Backend Selector")
        print("="*40)
        
        if check_authentication():
            service, backend = list_and_select_backend()
            if service and backend:
                print("\n✅ Backend selection complete!")
                print("🚀 Ready for QHRF experiments!")
                print("\n💡 Tip: Use 'qhrf-backends --base' to create a template file")
            else:
                print("\n❌ No backend selected")
        else:
            print("\nPlease authenticate first before selecting backends.")


if __name__ == "__main__":
    main()