import numpy as np
from qiskit import QuantumCircuit
from numpy import arange
from numpy.random import default_rng


coupling_maps = {
    "8qL": [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]],
    "12qO": [
        [0, 1],
        [0, 11],
        [1, 2],
        [2, 3],
        [3, 4],
        [4, 5],
        [5, 6],
        [6, 7],
        [7, 8],
        [8, 9],
        [9, 10],
        [10, 11],
    ],
    "27": [
        [1, 0],
        [2, 1],
        [3, 2],
        [3, 5],
        [4, 1],
        [6, 7],
        [7, 4],
        [7, 10],
        [8, 5],
        [8, 9],
        [8, 11],
        [11, 14],
        [12, 10],
        [12, 13],
        [12, 15],
        [13, 14],
        [16, 14],
        [17, 18],
        [18, 15],
        [18, 21],
        [19, 16],
        [19, 22],
        [20, 19],
        [21, 23],
        [23, 24],
        [25, 22],
        [25, 24],
        [26, 25],
    ],
    "33": [
        [1, 0],
        [2, 1],
        [2, 3],
        [3, 5],
        [3, 30],
        [4, 1],
        [4, 7],
        [7, 6],
        [7, 10],
        [8, 5],
        [8, 9],
        [8, 11],
        [11, 14],
        [12, 10],
        [12, 13],
        [12, 15],
        [13, 14],
        [16, 14],
        [16, 19],
        [18, 15],
        [18, 17],
        [18, 21],
        [19, 20],
        [19, 22],
        [21, 23],
        [24, 23],
        [24, 25],
        [25, 22],
        [25, 26],
        [27, 23],
        [27, 28],
        [28, 29],
        [30, 31],
        [31, 32],
    ],
    "65": [
        [0, 1],
        [0, 10],
        [1, 2],
        [2, 3],
        [4, 3],
        [5, 4],
        [5, 6],
        [6, 7],
        [8, 7],
        [9, 8],
        [10, 13],
        [11, 4],
        [12, 8],
        [14, 13],
        [14, 15],
        [15, 16],
        [15, 24],
        [17, 11],
        [17, 16],
        [17, 18],
        [19, 18],
        [20, 19],
        [21, 12],
        [21, 20],
        [21, 22],
        [22, 23],
        [23, 26],
        [25, 19],
        [27, 38],
        [28, 27],
        [28, 29],
        [29, 24],
        [29, 30],
        [31, 30],
        [31, 39],
        [32, 31],
        [33, 25],
        [33, 32],
        [34, 33],
        [34, 35],
        [35, 36],
        [36, 37],
        [37, 26],
        [38, 41],
        [40, 35],
        [42, 41],
        [42, 43],
        [43, 44],
        [43, 52],
        [44, 45],
        [45, 39],
        [46, 45],
        [47, 46],
        [47, 48],
        [47, 53],
        [49, 40],
        [49, 48],
        [49, 50],
        [51, 50],
        [51, 54],
        [52, 56],
        [53, 60],
        [54, 64],
        [56, 55],
        [57, 56],
        [57, 58],
        [58, 59],
        [60, 59],
        [60, 61],
        [62, 61],
        [63, 62],
        [64, 63],
    ],
}

PERMUTATION_COUPLING_MAPS_BY_HASHES_DICT = {
    "653d67ad3d369bf2cd63d0027cde92ec": [
        [0, 1],
        [1, 2],
        [2, 3],
        [3, 4],
        [4, 5],
        [5, 6],
        [6, 7],
    ],
    "b8a6d35c01a1367bb3145d687fac2c5d": [
        [0, 1],
        [0, 11],
        [1, 2],
        [2, 3],
        [3, 4],
        [4, 5],
        [5, 6],
        [6, 7],
        [7, 8],
        [8, 9],
        [9, 10],
        [10, 11],
    ],
    "727c8afd4c70cbf6ff6ebc3e0a17e2e5": [
        [1, 0],
        [2, 1],
        [3, 2],
        [3, 5],
        [4, 1],
        [6, 7],
        [7, 4],
        [7, 10],
        [8, 5],
        [8, 9],
        [8, 11],
        [11, 14],
        [12, 10],
        [12, 13],
        [12, 15],
        [13, 14],
        [16, 14],
        [17, 18],
        [18, 15],
        [18, 21],
        [19, 16],
        [19, 22],
        [20, 19],
        [21, 23],
        [23, 24],
        [25, 22],
        [25, 24],
        [26, 25],
    ],
    "12500281ba3e72639a25f3368f533227": [
        [1, 0],
        [2, 1],
        [2, 3],
        [3, 5],
        [3, 30],
        [4, 1],
        [4, 7],
        [7, 6],
        [7, 10],
        [8, 5],
        [8, 9],
        [8, 11],
        [11, 14],
        [12, 10],
        [12, 13],
        [12, 15],
        [13, 14],
        [16, 14],
        [16, 19],
        [18, 15],
        [18, 17],
        [18, 21],
        [19, 20],
        [19, 22],
        [21, 23],
        [24, 23],
        [24, 25],
        [25, 22],
        [25, 26],
        [27, 23],
        [27, 28],
        [28, 29],
        [30, 31],
        [31, 32],
    ],
    "6b18d9958c088c79950163ef7d4e6c6a": [
        [0, 1],
        [0, 10],
        [1, 2],
        [2, 3],
        [4, 3],
        [5, 4],
        [5, 6],
        [6, 7],
        [8, 7],
        [9, 8],
        [10, 13],
        [11, 4],
        [12, 8],
        [14, 13],
        [14, 15],
        [15, 16],
        [15, 24],
        [17, 11],
        [17, 16],
        [17, 18],
        [19, 18],
        [20, 19],
        [21, 12],
        [21, 20],
        [21, 22],
        [22, 23],
        [23, 26],
        [25, 19],
        [27, 38],
        [28, 27],
        [28, 29],
        [29, 24],
        [29, 30],
        [31, 30],
        [31, 39],
        [32, 31],
        [33, 25],
        [33, 32],
        [34, 33],
        [34, 35],
        [35, 36],
        [36, 37],
        [37, 26],
        [38, 41],
        [40, 35],
        [42, 41],
        [42, 43],
        [43, 44],
        [43, 52],
        [44, 45],
        [45, 39],
        [46, 45],
        [47, 46],
        [47, 48],
        [47, 53],
        [49, 40],
        [49, 48],
        [49, 50],
        [51, 50],
        [51, 54],
        [52, 56],
        [53, 60],
        [54, 64],
        [56, 55],
        [57, 56],
        [57, 58],
        [58, 59],
        [60, 59],
        [60, 61],
        [62, 61],
        [63, 62],
        [64, 63],
    ],
}


def embed_perm(perm_circ, nq):
    """Embed the permutation in a larger permutation with nq qubits"""
    if nq < len(perm_circ):
        raise ValueError(
            f"Trying to embed a permutation with {len(perm_circ)} qubits in a {nq} qubits permutation."
        )
    new_perm_circ = np.array(range(nq))
    new_perm_circ[: len(perm_circ)] = perm_circ
    return new_perm_circ


def get_perm_array_from_circuit(synth_circ: QuantumCircuit):
    """Get the permutation array for a given circuit with only swaps"""
    synth_circ_arr = np.arange(synth_circ.num_qubits)
    for gate in synth_circ.data:
        p1, p2 = [synth_circ.find_bit(qubit).index for qubit in gate.qubits]
        synth_circ_arr[p1], synth_circ_arr[p2] = (
            synth_circ_arr[p2],
            synth_circ_arr[p1],
        )
    return synth_circ_arr


def get_random_permutation(n_qubits, seed=42):
    """Generate a random permutation of n_qubits qubits."""
    rng = default_rng(seed=seed)
    return rng.permutation(arange(n_qubits))
