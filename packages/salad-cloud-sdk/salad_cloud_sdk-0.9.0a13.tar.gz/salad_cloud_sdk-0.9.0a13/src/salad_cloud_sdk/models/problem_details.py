from .utils.json_map import JsonMap
from ..net.transport.api_error import ApiError
from .utils.sentinel import SENTINEL


@JsonMap({"type_": "type"})
class ProblemDetails(ApiError):
    """Represents an API error

    :param type_: The URI reference that identifies the error type., defaults to None
    :type type_: str, optional
    :param title: The short, human-readable summary of the error type., defaults to None
    :type title: str, optional
    :param status: The HTTP status code generated by the origin server for this occurrence of the error., defaults to None
    :type status: int, optional
    :param detail: The human-readable explanation specific to this occurrence of the error., defaults to None
    :type detail: str, optional
    :param instance: The URI reference that identifies the specific occurrence of the error., defaults to None
    :type instance: str, optional
    """

    def __init__(
        self,
        type_: str = SENTINEL,
        title: str = SENTINEL,
        status: int = SENTINEL,
        detail: str = SENTINEL,
        instance: str = SENTINEL,
        **kwargs
    ):
        """Represents an API error

        :param type_: The URI reference that identifies the error type., defaults to None
        :type type_: str, optional
        :param title: The short, human-readable summary of the error type., defaults to None
        :type title: str, optional
        :param status: The HTTP status code generated by the origin server for this occurrence of the error., defaults to None
        :type status: int, optional
        :param detail: The human-readable explanation specific to this occurrence of the error., defaults to None
        :type detail: str, optional
        :param instance: The URI reference that identifies the specific occurrence of the error., defaults to None
        :type instance: str, optional
        """
        if type_ is not SENTINEL:
            self.type_ = self._define_str("type_", type_, min_length=1, max_length=2048)
        if title is not SENTINEL:
            self.title = self._define_str("title", title, min_length=1, max_length=2000)
        if status is not SENTINEL:
            self.status = self._define_number("status", status, ge=100, le=599)
        if detail is not SENTINEL:
            self.detail = self._define_str(
                "detail", detail, min_length=1, max_length=2000
            )
        if instance is not SENTINEL:
            self.instance = self._define_str(
                "instance", instance, min_length=1, max_length=2048
            )
        self._kwargs = kwargs
