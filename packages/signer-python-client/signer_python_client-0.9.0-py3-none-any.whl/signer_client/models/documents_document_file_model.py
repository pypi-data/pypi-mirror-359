# coding: utf-8

"""
    Dropsigner (HML)

    <!--------------------------------------------------------------------------------------------------------------------->  <h2>Authentication</h2>  <p>  In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>: </p>  <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>  <!---------------------------------------------------------------------------------------------------------------------> <br />  <h2>HTTP Codes</h2>  <p>  The APIs will return the following HTTP codes: </p>  <table>  <thead>   <tr>    <th>Code</th>    <th>Description</th>   </tr>  </thead>  <tbody>   <tr>    <td><strong class=\"model-title\">200 (OK)</strong></td>    <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>   </tr>   <tr>    <td><strong class=\"model-title\">400 (Bad Request)</strong></td>    <td>Syntax error. For instance, when a required field was not provided</td>   </tr>   <tr>    <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>    <td>API key not provided or invalid</td>   </tr>   <tr>    <td><strong class=\"model-title\">403 (Forbidden)</strong></td>    <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>   </tr>   <tr>    <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>    <td>API error. The response is as defined in <a href=\"#model-ErrorModel\">ErrorModel</a></td>   </tr>  </tbody> </table>  <br />  <h3>Error Codes</h3>  <p>Some of the error codes returned in a 422 response are provided bellow*:</p>  <ul>  <li>CertificateNotFound</li>  <li>DocumentNotFound</li>  <li>FolderNotFound</li>  <li>CpfMismatch</li>  <li>CpfNotExpected</li>  <li>InvalidFlowAction</li>  <li>DocumentInvalidKey</li> </ul>  <p style=\"font-size: 0.9em\">  *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning. </p>  <!--------------------------------------------------------------------------------------------------------------------->  <br />  <h2>Webhooks</h2>  <p>  It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request  whenever one of the events bellow occur. </p> <p>  All requests have the format described in <a href=\"#model-Webhooks.WebhookModel\">Webhooks.WebhookModel</a>.  The data field varies according to the webhook event type: </p>   <table>  <thead>   <tr>    <th>Event type</th>    <th>Description</th>    <th>Payload</th>   </tr>  </thead>  <tbody>   <tr>    <td><strong class=\"model-title\">DocumentSigned</strong></td>    <td>Triggered when a document is signed.</td>    <td><a href=\"#model-Webhooks.DocumentSignedModel\">Webhooks.DocumentSignedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentApproved</strong></td>    <td>Triggered when a document is approved.</td>    <td><a href=\"#model-Webhooks.DocumentApprovedModel\">Webhooks.DocumentApprovedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentRefused</strong></td>    <td>Triggered when a document is refused.</td>    <td><a href=\"#model-Webhooks.DocumentRefusedModel\">Webhooks.DocumentRefusedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentConcluded</strong></td>    <td>Triggered when the flow of a document is concluded.</td>    <td><a href=\"#model-Webhooks.DocumentConcludedModel\">Webhooks.DocumentConcludedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentCanceled</strong></td>    <td>Triggered when the document is canceled.</td>    <td><a href=\"#model-Webhooks.DocumentCanceledModel\">Webhooks.DocumentCanceledModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentExpired (v1.33.0)</strong></td>    <td>Triggered when the document is expired.</td>    <td><a href=\"#model-Webhooks.DocumentExpiredModel\">Webhooks.DocumentExpiredModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentsCreated (v1.50.0)</strong></td>    <td>Triggered when one or more documents are created.</td>    <td><a href=\"#model-Webhooks.DocumentsCreatedModel\">Webhooks.DocumentsCreatedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentsDeleted (v1.78.0)</strong></td>    <td>Triggered when one or more documents are deleted.</td>    <td><a href=\"#model-Webhooks.DocumentsDeletedModel\">Webhooks.DocumentsDeletedModel</a></td>   </tr>  </tbody> </table>  <p>  To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>. </p>   # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentsDocumentFileModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'is_signed': 'bool',
        'is_envelope_part': 'bool',
        'envelope_start_page': 'int',
        'number_pages': 'int',
        'mime_type': 'str',
        'filename': 'str',
        'creation_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'is_signed': 'isSigned',
        'is_envelope_part': 'isEnvelopePart',
        'envelope_start_page': 'envelopeStartPage',
        'number_pages': 'numberPages',
        'mime_type': 'mimeType',
        'filename': 'filename',
        'creation_date': 'creationDate'
    }

    def __init__(self, id=None, name=None, is_signed=None, is_envelope_part=None, envelope_start_page=None, number_pages=None, mime_type=None, filename=None, creation_date=None):  # noqa: E501
        """DocumentsDocumentFileModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._is_signed = None
        self._is_envelope_part = None
        self._envelope_start_page = None
        self._number_pages = None
        self._mime_type = None
        self._filename = None
        self._creation_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if is_signed is not None:
            self.is_signed = is_signed
        if is_envelope_part is not None:
            self.is_envelope_part = is_envelope_part
        if envelope_start_page is not None:
            self.envelope_start_page = envelope_start_page
        if number_pages is not None:
            self.number_pages = number_pages
        if mime_type is not None:
            self.mime_type = mime_type
        if filename is not None:
            self.filename = filename
        if creation_date is not None:
            self.creation_date = creation_date

    @property
    def id(self):
        """Gets the id of this DocumentsDocumentFileModel.  # noqa: E501


        :return: The id of this DocumentsDocumentFileModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentsDocumentFileModel.


        :param id: The id of this DocumentsDocumentFileModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DocumentsDocumentFileModel.  # noqa: E501


        :return: The name of this DocumentsDocumentFileModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentsDocumentFileModel.


        :param name: The name of this DocumentsDocumentFileModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_signed(self):
        """Gets the is_signed of this DocumentsDocumentFileModel.  # noqa: E501


        :return: The is_signed of this DocumentsDocumentFileModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_signed

    @is_signed.setter
    def is_signed(self, is_signed):
        """Sets the is_signed of this DocumentsDocumentFileModel.


        :param is_signed: The is_signed of this DocumentsDocumentFileModel.  # noqa: E501
        :type: bool
        """

        self._is_signed = is_signed

    @property
    def is_envelope_part(self):
        """Gets the is_envelope_part of this DocumentsDocumentFileModel.  # noqa: E501


        :return: The is_envelope_part of this DocumentsDocumentFileModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_envelope_part

    @is_envelope_part.setter
    def is_envelope_part(self, is_envelope_part):
        """Sets the is_envelope_part of this DocumentsDocumentFileModel.


        :param is_envelope_part: The is_envelope_part of this DocumentsDocumentFileModel.  # noqa: E501
        :type: bool
        """

        self._is_envelope_part = is_envelope_part

    @property
    def envelope_start_page(self):
        """Gets the envelope_start_page of this DocumentsDocumentFileModel.  # noqa: E501


        :return: The envelope_start_page of this DocumentsDocumentFileModel.  # noqa: E501
        :rtype: int
        """
        return self._envelope_start_page

    @envelope_start_page.setter
    def envelope_start_page(self, envelope_start_page):
        """Sets the envelope_start_page of this DocumentsDocumentFileModel.


        :param envelope_start_page: The envelope_start_page of this DocumentsDocumentFileModel.  # noqa: E501
        :type: int
        """

        self._envelope_start_page = envelope_start_page

    @property
    def number_pages(self):
        """Gets the number_pages of this DocumentsDocumentFileModel.  # noqa: E501


        :return: The number_pages of this DocumentsDocumentFileModel.  # noqa: E501
        :rtype: int
        """
        return self._number_pages

    @number_pages.setter
    def number_pages(self, number_pages):
        """Sets the number_pages of this DocumentsDocumentFileModel.


        :param number_pages: The number_pages of this DocumentsDocumentFileModel.  # noqa: E501
        :type: int
        """

        self._number_pages = number_pages

    @property
    def mime_type(self):
        """Gets the mime_type of this DocumentsDocumentFileModel.  # noqa: E501


        :return: The mime_type of this DocumentsDocumentFileModel.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this DocumentsDocumentFileModel.


        :param mime_type: The mime_type of this DocumentsDocumentFileModel.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def filename(self):
        """Gets the filename of this DocumentsDocumentFileModel.  # noqa: E501


        :return: The filename of this DocumentsDocumentFileModel.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DocumentsDocumentFileModel.


        :param filename: The filename of this DocumentsDocumentFileModel.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def creation_date(self):
        """Gets the creation_date of this DocumentsDocumentFileModel.  # noqa: E501


        :return: The creation_date of this DocumentsDocumentFileModel.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this DocumentsDocumentFileModel.


        :param creation_date: The creation_date of this DocumentsDocumentFileModel.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentsDocumentFileModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentsDocumentFileModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
