# coding: utf-8

"""
    Dropsigner (HML)

    <!--------------------------------------------------------------------------------------------------------------------->  <h2>Authentication</h2>  <p>  In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>: </p>  <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>  <!---------------------------------------------------------------------------------------------------------------------> <br />  <h2>HTTP Codes</h2>  <p>  The APIs will return the following HTTP codes: </p>  <table>  <thead>   <tr>    <th>Code</th>    <th>Description</th>   </tr>  </thead>  <tbody>   <tr>    <td><strong class=\"model-title\">200 (OK)</strong></td>    <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>   </tr>   <tr>    <td><strong class=\"model-title\">400 (Bad Request)</strong></td>    <td>Syntax error. For instance, when a required field was not provided</td>   </tr>   <tr>    <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>    <td>API key not provided or invalid</td>   </tr>   <tr>    <td><strong class=\"model-title\">403 (Forbidden)</strong></td>    <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>   </tr>   <tr>    <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>    <td>API error. The response is as defined in <a href=\"#model-ErrorModel\">ErrorModel</a></td>   </tr>  </tbody> </table>  <br />  <h3>Error Codes</h3>  <p>Some of the error codes returned in a 422 response are provided bellow*:</p>  <ul>  <li>CertificateNotFound</li>  <li>DocumentNotFound</li>  <li>FolderNotFound</li>  <li>CpfMismatch</li>  <li>CpfNotExpected</li>  <li>InvalidFlowAction</li>  <li>DocumentInvalidKey</li> </ul>  <p style=\"font-size: 0.9em\">  *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning. </p>  <!--------------------------------------------------------------------------------------------------------------------->  <br />  <h2>Webhooks</h2>  <p>  It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request  whenever one of the events bellow occur. </p> <p>  All requests have the format described in <a href=\"#model-Webhooks.WebhookModel\">Webhooks.WebhookModel</a>.  The data field varies according to the webhook event type: </p>   <table>  <thead>   <tr>    <th>Event type</th>    <th>Description</th>    <th>Payload</th>   </tr>  </thead>  <tbody>   <tr>    <td><strong class=\"model-title\">DocumentSigned</strong></td>    <td>Triggered when a document is signed.</td>    <td><a href=\"#model-Webhooks.DocumentSignedModel\">Webhooks.DocumentSignedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentApproved</strong></td>    <td>Triggered when a document is approved.</td>    <td><a href=\"#model-Webhooks.DocumentApprovedModel\">Webhooks.DocumentApprovedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentRefused</strong></td>    <td>Triggered when a document is refused.</td>    <td><a href=\"#model-Webhooks.DocumentRefusedModel\">Webhooks.DocumentRefusedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentConcluded</strong></td>    <td>Triggered when the flow of a document is concluded.</td>    <td><a href=\"#model-Webhooks.DocumentConcludedModel\">Webhooks.DocumentConcludedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentCanceled</strong></td>    <td>Triggered when the document is canceled.</td>    <td><a href=\"#model-Webhooks.DocumentCanceledModel\">Webhooks.DocumentCanceledModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentExpired (v1.33.0)</strong></td>    <td>Triggered when the document is expired.</td>    <td><a href=\"#model-Webhooks.DocumentExpiredModel\">Webhooks.DocumentExpiredModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentsCreated (v1.50.0)</strong></td>    <td>Triggered when one or more documents are created.</td>    <td><a href=\"#model-Webhooks.DocumentsCreatedModel\">Webhooks.DocumentsCreatedModel</a></td>   </tr>   <tr>    <td><strong class=\"model-title\">DocumentsDeleted (v1.78.0)</strong></td>    <td>Triggered when one or more documents are deleted.</td>    <td><a href=\"#model-Webhooks.DocumentsDeletedModel\">Webhooks.DocumentsDeletedModel</a></td>   </tr>  </tbody> </table>  <p>  To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>. </p>   # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhooksDocumentExpiredModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration_date': 'datetime',
        'expiration_date_without_time': 'str',
        'id': 'str',
        'name': 'str',
        'creation_date': 'datetime',
        'update_date': 'datetime',
        'folder': 'FoldersFolderInfoModel',
        'organization': 'OrganizationsOrganizationInfoModel',
        'created_by': 'DocumentsCreatorModel'
    }

    attribute_map = {
        'expiration_date': 'expirationDate',
        'expiration_date_without_time': 'expirationDateWithoutTime',
        'id': 'id',
        'name': 'name',
        'creation_date': 'creationDate',
        'update_date': 'updateDate',
        'folder': 'folder',
        'organization': 'organization',
        'created_by': 'createdBy'
    }

    def __init__(self, expiration_date=None, expiration_date_without_time=None, id=None, name=None, creation_date=None, update_date=None, folder=None, organization=None, created_by=None):  # noqa: E501
        """WebhooksDocumentExpiredModel - a model defined in Swagger"""  # noqa: E501
        self._expiration_date = None
        self._expiration_date_without_time = None
        self._id = None
        self._name = None
        self._creation_date = None
        self._update_date = None
        self._folder = None
        self._organization = None
        self._created_by = None
        self.discriminator = None
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if expiration_date_without_time is not None:
            self.expiration_date_without_time = expiration_date_without_time
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if creation_date is not None:
            self.creation_date = creation_date
        if update_date is not None:
            self.update_date = update_date
        if folder is not None:
            self.folder = folder
        if organization is not None:
            self.organization = organization
        if created_by is not None:
            self.created_by = created_by

    @property
    def expiration_date(self):
        """Gets the expiration_date of this WebhooksDocumentExpiredModel.  # noqa: E501

        The expiration date of the document in the default timezone.  # noqa: E501

        :return: The expiration_date of this WebhooksDocumentExpiredModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this WebhooksDocumentExpiredModel.

        The expiration date of the document in the default timezone.  # noqa: E501

        :param expiration_date: The expiration_date of this WebhooksDocumentExpiredModel.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def expiration_date_without_time(self):
        """Gets the expiration_date_without_time of this WebhooksDocumentExpiredModel.  # noqa: E501

        The expiration date without time: in yyyy-MM-dd format (useful for display purposes).  # noqa: E501

        :return: The expiration_date_without_time of this WebhooksDocumentExpiredModel.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date_without_time

    @expiration_date_without_time.setter
    def expiration_date_without_time(self, expiration_date_without_time):
        """Sets the expiration_date_without_time of this WebhooksDocumentExpiredModel.

        The expiration date without time: in yyyy-MM-dd format (useful for display purposes).  # noqa: E501

        :param expiration_date_without_time: The expiration_date_without_time of this WebhooksDocumentExpiredModel.  # noqa: E501
        :type: str
        """

        self._expiration_date_without_time = expiration_date_without_time

    @property
    def id(self):
        """Gets the id of this WebhooksDocumentExpiredModel.  # noqa: E501

        The document's id  # noqa: E501

        :return: The id of this WebhooksDocumentExpiredModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhooksDocumentExpiredModel.

        The document's id  # noqa: E501

        :param id: The id of this WebhooksDocumentExpiredModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WebhooksDocumentExpiredModel.  # noqa: E501

        The document's name  # noqa: E501

        :return: The name of this WebhooksDocumentExpiredModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhooksDocumentExpiredModel.

        The document's name  # noqa: E501

        :param name: The name of this WebhooksDocumentExpiredModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def creation_date(self):
        """Gets the creation_date of this WebhooksDocumentExpiredModel.  # noqa: E501

        The date the document was created.  # noqa: E501

        :return: The creation_date of this WebhooksDocumentExpiredModel.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this WebhooksDocumentExpiredModel.

        The date the document was created.  # noqa: E501

        :param creation_date: The creation_date of this WebhooksDocumentExpiredModel.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def update_date(self):
        """Gets the update_date of this WebhooksDocumentExpiredModel.  # noqa: E501

        The date of the last update to the document.  # noqa: E501

        :return: The update_date of this WebhooksDocumentExpiredModel.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this WebhooksDocumentExpiredModel.

        The date of the last update to the document.  # noqa: E501

        :param update_date: The update_date of this WebhooksDocumentExpiredModel.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def folder(self):
        """Gets the folder of this WebhooksDocumentExpiredModel.  # noqa: E501


        :return: The folder of this WebhooksDocumentExpiredModel.  # noqa: E501
        :rtype: FoldersFolderInfoModel
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this WebhooksDocumentExpiredModel.


        :param folder: The folder of this WebhooksDocumentExpiredModel.  # noqa: E501
        :type: FoldersFolderInfoModel
        """

        self._folder = folder

    @property
    def organization(self):
        """Gets the organization of this WebhooksDocumentExpiredModel.  # noqa: E501


        :return: The organization of this WebhooksDocumentExpiredModel.  # noqa: E501
        :rtype: OrganizationsOrganizationInfoModel
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this WebhooksDocumentExpiredModel.


        :param organization: The organization of this WebhooksDocumentExpiredModel.  # noqa: E501
        :type: OrganizationsOrganizationInfoModel
        """

        self._organization = organization

    @property
    def created_by(self):
        """Gets the created_by of this WebhooksDocumentExpiredModel.  # noqa: E501


        :return: The created_by of this WebhooksDocumentExpiredModel.  # noqa: E501
        :rtype: DocumentsCreatorModel
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WebhooksDocumentExpiredModel.


        :param created_by: The created_by of this WebhooksDocumentExpiredModel.  # noqa: E501
        :type: DocumentsCreatorModel
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhooksDocumentExpiredModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhooksDocumentExpiredModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
