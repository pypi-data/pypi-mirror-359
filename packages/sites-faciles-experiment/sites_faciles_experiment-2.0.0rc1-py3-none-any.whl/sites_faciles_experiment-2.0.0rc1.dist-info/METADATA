Metadata-Version: 2.4
Name: sites-faciles-experiment
Version: 2.0.0rc1
Summary: Gestionnaire de contenu permettant de cr√©er et g√©rer un site internet bas√© sur le Syst√®me de design de l‚Äô√âtat, accessible et responsive
Author-email: S√©bastien Reuiller <sebastien.reuiller@beta.gouv.fr>, Sylvain Boissel <sylvain.boissel@beta.gouv.fr>
Maintainer-email: Sylvain Boissel <sylvain.boissel@beta.gouv.fr>
Requires-Python: <4.0,>=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: django<6.0.0,>=5.1.4
Requires-Dist: wagtail<7.0,>=6.1
Requires-Dist: django-dsfr (>=2.1.0,<3.0.0)
Requires-Dist: python-dotenv<2.0.0,>=1.0.0
Requires-Dist: dj-static<1.0.0,>=0.0.6
Requires-Dist: wagtailmenus<5.0,>=4.0
Requires-Dist: wagtail-modeladmin<3.0.0,>=2.0.0
Requires-Dist: wagtail-markdown<1.0.0,>=0.11.1
Requires-Dist: unidecode<2.0.0,>=1.3.8
Requires-Dist: django-storages[s3]<2.0.0,>=1.14.2
Requires-Dist: boto3==1.35.99
Requires-Dist: beautifulsoup4<5.0.0,>=4.12.3
Requires-Dist: django-taggit<6.0.0,>=5.0.1
Requires-Dist: wagtail-localize<2.0,>=1.9
Requires-Dist: django-sass-processor<2.0,>=1.3
Requires-Dist: libsass<1.0.0,>=0.22.0
Requires-Dist: icalendar<6.0.0,>=5.0.13

# Sites Faciles - Exp√©rimentation sous forme de package

Sites Faciles est un gestionnaire de contenu permettant de cr√©er et g√©rer un site internet bas√© sur le Syst√®me de design de l'√âtat, accessible et responsive.
D√©velopp√© sous forme de site Wagtail, il n'est √† l'heure actuelle pas possible de l'utiliser comme d√©pendance d'un projet Wagtail existant.

Le projet courant vise cet objectif.

C'est un soft-fork, au sens o√π aucune fonctionnalit√© ne sera ajout√©e via Sites Faciles dans ce fork.
Cependant une synchronisation directe des deux d√©p√¥ts n'est pas possible car l'empaquetage de Sites Faciles n√©cessite de d√©placer des fichiers, ce qui fausse la synchronisation.

Un script de synchronisation a donc √©t√© √©crit qui vise √† :
- d√©placer l'arborescence dans un sous-dossier
- namespacer tout ce qui doit l'√™tre dans le code source de Sites Faciles

---

Pour l'utilisation de Sites Faciles, voir le [README](./sites_faciles/README.md) original.

---

Le versionning et les tags suit de mani√®re iso ceux de Sites Faciles.

## üôã‚Äç‚ôÇÔ∏è Comment tester 

**Pour le tester dans un projet wagtail existant** (‚ö† c'est hautement exp√©rimental, √† ne tester que sur un projet local) :
- `poetry add sites-faciles-experiment` ou `pip install sites-faciles-experiment`
- ajouter quelques **settings** n√©cessaires au bon fonctionnement du projet, √† savoir 
```py
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                # ...
                "wagtailmenus.context_processors.wagtailmenus",
                "sites_faciles.content_manager.context_processors.skiplinks",
                "sites_faciles.content_manager.context_processors.mega_menus",
            ],
        },
    },
]

INSTALLED_APPS.extend(
    [
        "sites_faciles",
        "sites_faciles.blog",
        "sites_faciles.content_manager",
        "sites_faciles.events",
        "sass_processor",
        "wagtail.contrib.settings",
        "wagtail_modeladmin",
        "wagtailmenus",
        "wagtailmarkdown",
    ]
)

STATICFILES_FINDERS.extend([
    "sass_processor.finders.CssFinder",
])
```  
- √âventuellement **overrider le template de base de Sites Faciles** pour utiliser directement les mod√®les de page propos√©s
```html
{# sites_faciles/base.html #}

{% extends "votre_wagtail_existant/base.html" %}

{# Fournir un block content dans lequel les mod√®les de pages de sites faciles peuvent render le contenu #}
{% block content %}{% endblock %}
```
- Sinon utiliser le **champ streamfield sur un mod√®le existant**
```py 
# models.py 
from sites_faciles.content_manager.blocks import STREAMFIELD_COMMON_BLOCKS

# ... 

class CMSPage(Page):
    body = StreamField(
        STREAMFIELD_COMMON_BLOCKS,
        blank=True,
        use_json_field=True,
    )
```

- Voir la PR en cours c√¥t√© [quefairemesdechets / longue vie aux objets](https://github.com/incubateur-ademe/quefairedemesobjets/pull/1375/files) pour l'ajout de wagtail + sites faciles √† un projet Django

## üîç Quelques infos / observations en vrac 

- On a fait une solution _quick&dirty_ pour √©valuer la faisabilit√©, on r√©cup√®re **tout** : les mod√®les, les templates etc
- Id√©alement il serait int√©ressant de pouvoir importer que le champ streamfield avec le rendering qui va bien, mais comme de nombreux blocs d√©pendent de `blog` et `event`, on se retrouve √† devoir ajouter ces apps. Donc √† voir pour rendre √ßa plus modulaire 
- Il y a un certains nombres de d√©pendances n√©cessaires √† Sites Faciles qui sont normalement g√©r√©es par le wagtail existant qui accueille `sites-faciles-experiment` : `gunicorn`, `dj-database-url`...
- La d√©pendance √† sass semble superflue, pourrait-on imaginer s'en passer ?

## ‚úÖ Reste √† faire 

- [ ] Voir comment rendre une √©ventuelle refacto r√©tro compatible avec les sites d√©j√† d√©ploy√©s
- [ ] Rendre le streamfield de `content_manager` plus modulaire pour le rendre utilisable sans les d√©pendances aux apps blog et event
- [ ] D√©finir le scope
  - [ ] SSO / proconnect ? 
  - [ ] Streamfield
  - [ ] Mod√®les de page
  - [ ] Config wagtail

