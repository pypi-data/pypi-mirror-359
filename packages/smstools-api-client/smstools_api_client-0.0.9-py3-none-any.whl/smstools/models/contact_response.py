# coding: utf-8

"""
    Smstools API

    The integration of our SMS gateway is simple. Integrate our SMS API and easily provide your website or software package with text messaging features in minutes.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class ContactResponse(BaseModel):
    """
    ContactResponse
    """
    id: Optional[StrictStr] = Field(None, alias="ID")
    phone: Optional[StrictStr] = None
    firstname: Optional[StrictStr] = None
    lastname: Optional[StrictStr] = None
    unsubscribed: Optional[StrictBool] = None
    groupid: Optional[StrictStr] = None
    memo: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    extra1: Optional[StrictStr] = None
    extra2: Optional[StrictStr] = None
    extra3: Optional[StrictStr] = None
    extra4: Optional[StrictStr] = None
    extra5: Optional[StrictStr] = None
    extra6: Optional[StrictStr] = None
    extra7: Optional[StrictStr] = None
    extra8: Optional[StrictStr] = None
    extra9: Optional[StrictStr] = None
    extra10: Optional[StrictStr] = None
    birthday: Optional[StrictStr] = None
    __properties = ["ID", "phone", "firstname", "lastname", "unsubscribed", "groupid", "memo", "email", "extra1", "extra2", "extra3", "extra4", "extra5", "extra6", "extra7", "extra8", "extra9", "extra10", "birthday"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContactResponse:
        """Create an instance of ContactResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if extra9 (nullable) is None
        # and __fields_set__ contains the field
        if self.extra9 is None and "extra9" in self.__fields_set__:
            _dict['extra9'] = None

        # set to None if extra10 (nullable) is None
        # and __fields_set__ contains the field
        if self.extra10 is None and "extra10" in self.__fields_set__:
            _dict['extra10'] = None

        # set to None if birthday (nullable) is None
        # and __fields_set__ contains the field
        if self.birthday is None and "birthday" in self.__fields_set__:
            _dict['birthday'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContactResponse:
        """Create an instance of ContactResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContactResponse.parse_obj(obj)

        _obj = ContactResponse.parse_obj({
            "id": obj.get("ID"),
            "phone": obj.get("phone"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "unsubscribed": obj.get("unsubscribed"),
            "groupid": obj.get("groupid"),
            "memo": obj.get("memo"),
            "email": obj.get("email"),
            "extra1": obj.get("extra1"),
            "extra2": obj.get("extra2"),
            "extra3": obj.get("extra3"),
            "extra4": obj.get("extra4"),
            "extra5": obj.get("extra5"),
            "extra6": obj.get("extra6"),
            "extra7": obj.get("extra7"),
            "extra8": obj.get("extra8"),
            "extra9": obj.get("extra9"),
            "extra10": obj.get("extra10"),
            "birthday": obj.get("birthday")
        })
        return _obj


