# coding: utf-8

"""
    Smstools API

    The SMS Gateway API for smstools provides a robust and easy-to-integrate solution for sending and receiving SMS messages programmatically. It enables developers to integrate text messaging capabilities into their applications, websites, and software, offering features such as sending single or bulk SMS, managing contacts and groups, receiving inbound messages, and accessing delivery reports. This API facilitates various communication needs, from marketing campaigns to CRM integrations and automated alerts. Please note that this API description is independently created and not affiliated with smstools.com. Official documentation at: https://www.smstools.com/en/sms-gateway-api/

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class WhatsappSendFileRequest(BaseModel):
    """
    WhatsappSendFileRequest
    """ # noqa: E501
    message: StrictStr = Field(description="the message to be sent")
    sender: StrictStr = Field(description="The number or name of the sender. A number can't be longer than 14 characters. A name can't be longer than 11 characters and can't contain special characters")
    to: StrictStr = Field(description="the number that will receive the message in international format (eg: 324xx, 316xx, ...)")
    var_date: Optional[StrictStr] = Field(default=None, description="Format: yyyy-MM-dd HH:mm. If not provided, the message will be sent as soon as possible", alias="date")
    reference: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="String of max. 255 characters")
    test: Optional[StrictBool] = Field(default=False, description="The system will check all parameters but will not send an SMS message (no credits/balance used).")
    subid: Optional[StrictStr] = Field(default=None, description="If specified, the message will be sent from the subaccount.")
    attachment: StrictStr = Field(description="The URL of the attachment")
    attachment_type: StrictStr = Field(description="The type of the attachment, possible values are 'file', 'image', 'audio' or 'video'")
    __properties: ClassVar[List[str]] = ["message", "sender", "to", "date", "reference", "test", "subid", "attachment", "attachment_type"]

    @field_validator('attachment_type')
    def attachment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['file', 'image', 'audio', 'video']):
            raise ValueError("must be one of enum values ('file', 'image', 'audio', 'video')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WhatsappSendFileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WhatsappSendFileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "sender": obj.get("sender"),
            "to": obj.get("to"),
            "date": obj.get("date"),
            "reference": obj.get("reference"),
            "test": obj.get("test") if obj.get("test") is not None else False,
            "subid": obj.get("subid"),
            "attachment": obj.get("attachment"),
            "attachment_type": obj.get("attachment_type")
        })
        return _obj


