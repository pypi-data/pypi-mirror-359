// ZX Spectrum BASIC expression grammar
//
// Copyright (c) 2024 Melissa E. O'Neill. MIT License. NO WARRANTY.

// Basic program structure
Program: /\s*/ lines*=ProgLine[/[\r\n]\s*/] /\s*/;
ProgLine: SourceLine | CommentLine;
CommentLine: char=/[#']/ comment=/.*/;
StmtIgnored: Colon | ColourCode;
SourceLine: (line_number=INT)? (label=Label ':')? statements*=JankyStatement[':'] after*=StmtIgnored ;

JankyStatement: ( before+=StmtIgnored )? actual=Statement ( after+=ColourCode )? | before+=StmtIgnored;
StmtIgnored: Colon | ColourCode;
Colon: /:/;
ColourCode: /\\\{([ipfrbo]\d+|vi|vn)+\}/;


// =====================================
// Syntactic Class Patterns, as described in the ROM
// =====================================

// CLASS_00: No operands
// Usage: Just the keyword alone
// Example: NEW, STOP, RETURN

// CLASS_01: Variable
// Usage: Requires a variable name
// Example: Used in LET
// Rule needed for runtime single-letter check

// CLASS_02: Expression
// Usage: Requires any expression
// Example: Right side of LET

// CLASS_03: Optional numeric expression
// Usage: Optional expression that must be numeric at runtime
// Example: RUN [expr]
// Pattern: (expression=Expression)?

// CLASS_04: Single-character variable
// Usage: Single letter variable name
// Example: FOR/NEXT control variables
// Uses Variable rule but with runtime check for single letter

// CLASS_05: List of items
// Usage: Set of items separated by delimiters
// Example: PRINT items
// Rule needed for complex cases like PRINT

// CLASS_06: Required numeric expression
// Usage: Expression that must be numeric at runtime
// Example: GOTO expr
// Pattern: expression=Expression

// CLASS_07: Colour items
// Usage: Colour parameters
// Example: INK, PAPER

// CLASS_08: Two numeric expressions with comma
// Usage: Two expressions that must be numeric at runtime
// Example: POKE addr, value
// Pattern: expr1=Expression ',' expr2=Expression

// CLASS_09: CLASS_08 with optional colour items
// Usage: Like CLASS_08 but with optional colour parameters
// Example: PLOT
// Pattern: (colour=ColourParam)* expr1=Expression ',' expr2=Expression

// CLASS_0A: String expression
// Usage: Expression that must be string at runtime
// Example: SAVE with filename
// Pattern: expression=Expression

// CLASS_0B: Cassette operations
// Usage: Complex patterns for tape operations
// Example: SAVE, LOAD, VERIFY
// Will need specific rules for each variant

// Expressions

// Expression grammar for ZX Spectrum BASIC

// Top level expression handles OR (lowest precedence)
Expression: OrExpr;

// Precedence levels from low (1) to high (10)
// You (priority 1)
// You're the one that matters most, so you're at Priority 1.  Unfortunately,
// the ZX Spectrum cannot contain your wonderfulness, and didn't want to send
// the message that "you don't bind tightly", so this spot is left empty.

// OR operator (priority 2)
OrExpr: first=AndExpr rest*=OrOpExpr;
OrOpExpr: op=/OR\b/ expr=AndExpr;

// AND operator (priority 3)
AndExpr: first=NotExpr rest*=AndOpExpr;
AndOpExpr: op=/AND\b/ expr=NotExpr;

// NOT operator (priority 4)
NotExpr: Not | CompareExpr;
Not: op=/NOT\b/ expr=NotExpr;

// All comparison operators have same precedence (5)
CompareExpr: first=AddExpr rest*=CompareOpExpr;
CompareOpExpr: op=CompareOp expr=AddExpr;
CompareOp: '<=' | '>=' | '<>' | '>' | '<' | '=';

// Addition/subtraction (priority 6)
// AddExpr: exprs=MultExpr (('+' | '-') MultExpr)*;
AddExpr: first=MultExpr rest*=AddOpExpr;
AddOpExpr: op=AddOp expr=MultExpr;
AddOp: '+' | '-';

// Mefipulation (priority 7)
// The ZX Spectrum does not support mefipulation, because no one knows what
// it is.  But if anyone figures it out, we're ready for it right here.

// Multiplication/division (priority 8)
MultExpr: first=UMinusExpr rest*=MultOpExpr;
MultOpExpr: op=MultOp expr=UMinusExpr;
MultOp: '*' | '/';

// Unary minus (priority 9)
UMinusExpr: Neg | PowerExpr;
Neg: op='-' expr=UMinusExpr;

// Power operator (priority 10)
// PowerExpr: FunctionExpr ('^' FunctionExpr)*;
PowerExpr: first=JankyFunctionExpr rest*=PowerOpExpr;
PowerOpExpr: op='^' expr=JankyFunctionExpr;

// Evilness to handle people who want to colour their expressions
JankyFunctionExpr: (before+=ColourCode)? actual=FunctionExpr (after+=ColourCode)?;

// Functions and primary expressions
FunctionExpr: Function | SpecialFn | Primary;

// Functions (parentheses optional unless needed for precedence)
Function: name=FunctionName (expr=FunctionExpr | '(' expr=Expression ')');
FunctionName: /ABS\b/ | /ACS\b/ | /ASN\b/ | /ATN\b/ | /COS\b/ | /EXP\b/ | /INT\b/ | 
             /LN\b/ | /SGN\b/ | /SIN\b/ | /SQR\b/ | /TAN\b/ | /USR\b/ | /LEN\b/ |
             /CODE\b/ | /IN\b/ | /VAL\b/ | /PEEK\b/ | 'CHR$' | 'STR$' | 'VAL$';

// Functions with multiple arguments
TwoArgName: /ATTR\b/ | /POINT\b/ | 'SCREEN$';
TwoArgFn: name=TwoArgName '(' expr1=Expression ',' expr2=Expression ')';
CompValue: /PI\b/ | /RND\b/ | /INKEY\$/;
BinValue: /BIN\b/ ( digits=/[01]+/ )?;
Fn: /FN\b/ name=VarSymbol '(' args*=Expression[','] ')';
SpecialFn: TwoArgFn | CompValue | BinValue | Fn;

// Primary expressions
Primary: Number | LitStringExpr | Label | VarDest | ParenExpr;

LitStringExpr: expr=String ( '(' subscript=SliceExpression ')' )?;
ParenExpr: '(' expr=Expression ')' ( '(' subscript=SliceExpression ')' )?;

Number: value=NUMBER | value=/\$[0-9A-Fa-f]+/ | value=/@[01]+/;
String: value=/"(?:[^"\n]|"")*"/;

// Variables and Array references
ArrayRef: name=VarSymbol '(' subscripts+=SliceExpression[','] ')';
Variable: name=VarSymbol;
VarSymbol: /[A-Z]([A-Z0-9_]*|[ \t]+(?!THEN))+\$?/;
VarDest: ArrayRef | Variable;

Slice: 
    /TO\b/ max=Expression |                  // From start: A$(TO 10)
    min=Expression /TO\b/ max=Expression |   // Range: A$(2 TO 10)
    min=Expression /TO\b/;                   // To end: A$(2 TO)

SliceExpression: Slice | Expression;

// =====================================
// Initial Statement Implementation
// =====================================
Statement: New | Stop | Return | Continue | Copy | Cls | Cat | ContinueLoop |
    Goto | Gosub |
    Restore | Pause | Border | Run | List | LList | Clear | Randomize | Beep |
    Out | Poke | Let | Read | Data | Dim | For | Next | If | LongIf | ElseIf |
    Else | EndIf | Until | Repeat | While | Exit |
    ColourStmt | Plot | Draw | Circle | Print | Lprint | Input | Play |
    Save | Load | Verify | Merge | OpenHash | CloseHash | DefFn | Rem ;


// Statement types organized by their class patterns

// ==================================
// CLASS_00 - No operands
// ==================================
New: /NEW\b/;
Stop: /STOP\b/;
Return: /RETURN\b/;
Continue: /CONTINUE\b/;
Copy: /COPY\b/;
Cls: /CLS\b/;
Cat: /CAT\b/;

// ==================================
// Simple CLASS_06 - Single numeric expression
// ==================================
Goto: /GOTO\b/ expr=Expression | /GO TO\b/ expr=Expression;
Gosub: /GOSUB\b/ expr=Expression | /GO SUB\b/ expr=Expression;
Restore: /RESTORE\b/ ( expr=Expression )?;
Pause: /PAUSE\b/ expr=Expression;
Border: /BORDER\b/ expr=Expression;

// ==================================
// CLASS_03 - Optional numeric expression
// ==================================
Run: /RUN\b/ (expr=Expression)?;
Clear: /CLEAR\b/ (expr=Expression)?;
Randomize: /RANDOMIZE\b/ (expr=Expression)?;
List: /LIST\b/ (expr=Expression)?;
LList: /LLIST\b/ (expr=Expression)?;

// ==================================
// CLASS_08 - Two numeric expressions
// ==================================
Beep: /BEEP\b/ expr1=Expression ',' expr2=Expression;
Out: /OUT\b/ expr1=Expression ',' expr2=Expression;
Poke: /POKE\b/ expr1=Expression ',' expr2=Expression;

// ==================================
// Variable and assignment statements
// ==================================
Let: /LET\b/ var=VarDest '=' expr=Expression;
Read: /READ\b/ vars+=VarDest[','];
Data: /DATA\b/ items+=Expression[','];
Dim: /DIM\b/ name=VarSymbol '(' dims+=Expression[','] ')';

// ==================================
// Loop and control statements
// ==================================
For: /FOR\b/ var=Variable '=' start=Expression /TO\b/ end=Expression (/STEP\b/ step=Expression)?;
Next: /NEXT\b/ var=Variable;
If: /IF\b/ condition=Expression /THEN\b/ statements+=JankyStatement[':'] after*=StmtIgnored;
LongIf: /IF\b/ condition=Expression;
ElseIf: /EL(SE[ \t]*|S|)IF\b/ condition=Expression;
Else: /ELSE\b/ statements*=JankyStatement[':'] after*=StmtIgnored;
EndIf: keyword=/END[ \t]*IF\b/;
Repeat: keyword=/REPEAT\b/;
Until: /(REPEAT[ \t]+|)UNTIL\b/ condition=Expression;
While: /WHILE\b/ condition=Expression;
Exit: exits+=ExitKeyword[':'] (line=Expression)?;
ExitKeyword: /EXIT\b/;
ContinueLoop: /GOTO\b/ nexts+=NextKeyword | /GO TO\b/ nexts+=NextKeyword;
NextKeyword: /NEXT\b/;

// ==================================
// Colour control statements (CLASS_07)
// ==================================
ColourOp: /INK\b/ | /PAPER\b/ | /FLASH\b/ | /BRIGHT\b/ | /INVERSE\b/ | /OVER\b/;
ColourParam: name=ColourOp expr=Expression;
ColourStmt: ColourParam;

// ==================================
// Graphics statements (CLASS_09)
// ==================================
Plot: /PLOT\b/ (colours*=ColourParam[';'] ';')? expr1=Expression ',' expr2=Expression;
Draw: /DRAW\b/ (colours*=ColourParam[';'] ';')? expr1=Expression ',' expr2=Expression (',' expr3=Expression)?;
Circle: /CIRCLE\b/ (colours*=ColourParam[';'] ';')? expr1=Expression ',' expr2=Expression ',' expr3=Expression;

// ==================================
// Print and Input statements (CLASS_05)
// ==================================
PrintItem: ColourParam | At | Tab | ChanSpec | Expression;
At: /AT\b/ expr1=Expression ',' expr2=Expression;
Tab: /TAB\b/ expr=Expression;
PrintSeparator: ',' | ';' | '\'';
PrintSeparatedItem: item=PrintItem? sep=PrintSeparator;
Print: /PRINT\b/ items*=PrintSeparatedItem (final=PrintItem)?;
Lprint: /LPRINT\b/ items*=PrintItem[','];

InputItem: ColourParam | At | Tab | ChanSpec | InputLine | VarDest | InputExpr;
InputExpr: expr=Expression;
PrintSeparator: ',' | ';' | '\'';
InputSeparatedItem: item=InputItem? sep=PrintSeparator;
Input: /INPUT\b/ items*=InputSeparatedItem (final=InputItem)?;
InputLine: /LINE\b/ var=VarDest;

ChanSpec: '#' chan=Expression;
OpenHash: /OPEN[ \t]*#/ chan=Expression ',' dev=Expression;
CloseHash: /CLOSE[ \t]*#/ chan=Expression;

// ==================================
// Cassette/Storage statements (CLASS_0B)
// ==================================

SaveLine: name=/LINE\b/ expr=Expression;
SaveCode: name=/CODE\b/ addr=Expression ',' length=Expression;
LoadCode: name=/CODE\b/ (addr=Expression (',' length=Expression)?)?;
FileData: name=/DATA\b/ array=VarSymbol '(' ')';
FileScreen: 'SCREEN$';

SaveMode: SaveLine | SaveCode | FileData | FileScreen;
Save: /SAVE\b/ expr=Expression (mode=SaveMode)?;
LoadMode: LoadCode | FileData | FileScreen;
Load: /LOAD\b/ expr=Expression (mode=LoadMode)?;
Verify: /VERIFY\b/ expr=Expression (mode=LoadMode)?;
Merge: /MERGE\b/ expr=Expression;

// ==================================
// User-defined functions
// ==================================
DefFn: /DEF\b/ /FN\b/ name=VarSymbol ('(' params*=VarSymbol[','] ')')? '=' expr=Expression;

// ==================================
// Rem (special case - consumes to EOL)
// ==================================
Rem: /REM\b/ comment=/[^\r\n]*/;

// ==================================
// Music and sound statements
// ==================================
Play: /PLAY\b/ items+=Expression[','];

// ==================================
// Additions to the ZX Spectrum BASIC grammar
// ==================================
Label: name=/@[A-Z][A-Z0-9_]*/;
