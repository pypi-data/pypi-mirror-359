[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "sseed"
version = "1.12.1"
description = "Offline BIP39/SLIP39 CLI Tool for secure cryptocurrency seed management"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "sseed", email = "shroomshroom@gmail.com"},
]
keywords = ["bip39", "slip39", "cryptocurrency", "mnemonic", "seed", "cli", "offline"]
license = "MIT"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security :: Cryptography",
    "Topic :: System :: Systems Administration",
]
dependencies = [
    "bip-utils>=2.9.3",
    "shamir-mnemonic>=0.3.0",
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest>=8.3.4",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.6.1",
    "pytest-html>=4.1.1",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.112.0",
    "coverage[toml]>=7.3.0",
    
    # Code quality and linting
    "pylint>=3.0.0",
    "mypy>=1.16.1",
    "flake8>=7.0.0",
    "black>=25.1.0",
    "isort>=5.13.0",
    "ruff>=0.12.0",
    
    # Security tools
    "bandit>=1.8.5",
    "safety>=3.0.0",
    "pip-audit>=2.6.0",
    
    # Build and distribution
    "build>=1.0.0",
    "twine>=4.0.0",
    "wheel>=0.42.0",
    "setuptools>=69.0.0",
    
    # Performance monitoring
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
    
    # Cross-tool compatibility testing (optional)
    "shamir-mnemonic[cli]>=0.3.0",
]

[project.scripts]
sseed = "sseed.__main__:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["sseed*"]

# =============================================================================
# DEVELOPMENT TOOL CONFIGURATIONS
# =============================================================================
# This section contains configuration for various development tools used in
# the SSeed project. Each tool has specific configuration keys that control
# how the tool behaves during development and CI/CD processes.
#
# Key Configuration Examples:
# ┌─────────────────────────────────────────────────────────────────────────┐
# │ Config Key              │ Example Value │ What it tells the tool        │
# ├─────────────────────────────────────────────────────────────────────────┤
# │ python_version          │ "3.12"        │ "Type-check my code as if it  │
# │ under [tool.mypy]       │               │ will execute on Python 3.12." │
# │                         │               │ MyPy enables/disables features│
# │                         │               │ and built-ins accordingly.    │
# ├─────────────────────────────────────────────────────────────────────────┤
# │ target-version          │ "py312"       │ "Lint my code against the     │
# │ under [tool.ruff]       │               │ syntax and std-lib available  │
# │                         │               │ in Python 3.12." Ruff will   │
# │                         │               │ allow/forbid newer syntax     │
# │                         │               │ based on this setting.        │
# ├─────────────────────────────────────────────────────────────────────────┤
# │ line-length             │ 88            │ "Format code lines to this    │
# │ under [tool.black]      │               │ maximum character width."     │
# │                         │               │ Black will wrap longer lines. │
# ├─────────────────────────────────────────────────────────────────────────┤
# │ target-version          │ ["py310",     │ "Generate code compatible     │
# │ under [tool.black]      │  "py311",     │ with these Python versions."  │
# │                         │  "py312"]     │ Affects syntax choices.       │
# ├─────────────────────────────────────────────────────────────────────────┤
# │ profile                 │ "black"       │ "Use Black-compatible import  │
# │ under [tool.isort]      │               │ sorting rules." Ensures isort │
# │                         │               │ and Black work together.      │
# └─────────────────────────────────────────────────────────────────────────┘
#
# IMPORTANT: Keep target versions synchronized across tools for consistency.
# Current project targets: Python 3.10, 3.11, and 3.12
#
# NOTE: flake8 configuration is handled via command-line arguments in Makefile
# and GitHub Actions since flake8 doesn't natively support pyproject.toml
# =============================================================================

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]

[tool.isort]
profile = "black"
line_length = 88
force_grid_wrap = 2

[tool.ruff]
line-length = 88
target-version = "1.12.1"

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "D", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "FLY", "NPY", "AIR", "PERF", "FURB", "LOG", "RUF"]
ignore = ["D100", "D104", "D107", "EM101", "EM102", "TRY003", "TRY300", "TRY400", "PLR2004", "PLC0415", "COM812", "T201", "BLE001", "C901", "PLW2901", "PTH119", "PTH120", "PTH123", "DTZ005", "E501", "PERF203", "PLR0912", "PLR0915", "PLR0911", "UP038", "FBT001", "FBT002"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "1.12.1"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = [
    "B107",  # Test for hardcoded password default - false positive for empty passphrase default in BIP-39
    "B105",  # Test for hardcoded password string - false positive for empty passphrase strings
    "B404",  # subprocess import - acceptable for cross-tool compatibility testing
    "B603",  # subprocess without shell=True - using shlex.split() for security
]

[tool.bandit.assert_used]
# Allow assert statements in tests
skips = ["*test*.py"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--strict-markers --strict-config"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
asyncio_mode = "strict" 