# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import TesseralEnvironment
import os
import httpx
from .core.client_wrapper import SyncClientWrapper
from .api_key_role_assignments.client import ApiKeyRoleAssignmentsClient
from .api_keys.client import ApiKeysClient
from .audit_log_events.client import AuditLogEventsClient
from .oidc_connections.client import OidcConnectionsClient
from .organizations.client import OrganizationsClient
from .passkeys.client import PasskeysClient
from .projects.client import ProjectsClient
from .roles.client import RolesClient
from .saml_connections.client import SamlConnectionsClient
from .scim_api_keys.client import ScimApiKeysClient
from .sessions.client import SessionsClient
from .user_invites.client import UserInvitesClient
from .user_role_assignments.client import UserRoleAssignmentsClient
from .users.client import UsersClient
from .core.client_wrapper import AsyncClientWrapper
from .api_key_role_assignments.client import AsyncApiKeyRoleAssignmentsClient
from .api_keys.client import AsyncApiKeysClient
from .audit_log_events.client import AsyncAuditLogEventsClient
from .oidc_connections.client import AsyncOidcConnectionsClient
from .organizations.client import AsyncOrganizationsClient
from .passkeys.client import AsyncPasskeysClient
from .projects.client import AsyncProjectsClient
from .roles.client import AsyncRolesClient
from .saml_connections.client import AsyncSamlConnectionsClient
from .scim_api_keys.client import AsyncScimApiKeysClient
from .sessions.client import AsyncSessionsClient
from .user_invites.client import AsyncUserInvitesClient
from .user_role_assignments.client import AsyncUserRoleAssignmentsClient
from .users.client import AsyncUsersClient


class Tesseral:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : TesseralEnvironment
        The environment to use for requests from the client. from .environment import TesseralEnvironment



        Defaults to TesseralEnvironment.DEFAULT



    backend_api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from tesseral import Tesseral

    client = Tesseral(
        backend_api_key="YOUR_BACKEND_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: TesseralEnvironment = TesseralEnvironment.DEFAULT,
        backend_api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv(
            "TESSERAL_BACKEND_API_KEY"
        ),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            backend_api_key=backend_api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.api_key_role_assignments = ApiKeyRoleAssignmentsClient(client_wrapper=self._client_wrapper)
        self.api_keys = ApiKeysClient(client_wrapper=self._client_wrapper)
        self.audit_log_events = AuditLogEventsClient(client_wrapper=self._client_wrapper)
        self.oidc_connections = OidcConnectionsClient(client_wrapper=self._client_wrapper)
        self.organizations = OrganizationsClient(client_wrapper=self._client_wrapper)
        self.passkeys = PasskeysClient(client_wrapper=self._client_wrapper)
        self.projects = ProjectsClient(client_wrapper=self._client_wrapper)
        self.roles = RolesClient(client_wrapper=self._client_wrapper)
        self.saml_connections = SamlConnectionsClient(client_wrapper=self._client_wrapper)
        self.scim_api_keys = ScimApiKeysClient(client_wrapper=self._client_wrapper)
        self.sessions = SessionsClient(client_wrapper=self._client_wrapper)
        self.user_invites = UserInvitesClient(client_wrapper=self._client_wrapper)
        self.user_role_assignments = UserRoleAssignmentsClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)


class AsyncTesseral:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : TesseralEnvironment
        The environment to use for requests from the client. from .environment import TesseralEnvironment



        Defaults to TesseralEnvironment.DEFAULT



    backend_api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from tesseral import AsyncTesseral

    client = AsyncTesseral(
        backend_api_key="YOUR_BACKEND_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: TesseralEnvironment = TesseralEnvironment.DEFAULT,
        backend_api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv(
            "TESSERAL_BACKEND_API_KEY"
        ),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            backend_api_key=backend_api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.api_key_role_assignments = AsyncApiKeyRoleAssignmentsClient(client_wrapper=self._client_wrapper)
        self.api_keys = AsyncApiKeysClient(client_wrapper=self._client_wrapper)
        self.audit_log_events = AsyncAuditLogEventsClient(client_wrapper=self._client_wrapper)
        self.oidc_connections = AsyncOidcConnectionsClient(client_wrapper=self._client_wrapper)
        self.organizations = AsyncOrganizationsClient(client_wrapper=self._client_wrapper)
        self.passkeys = AsyncPasskeysClient(client_wrapper=self._client_wrapper)
        self.projects = AsyncProjectsClient(client_wrapper=self._client_wrapper)
        self.roles = AsyncRolesClient(client_wrapper=self._client_wrapper)
        self.saml_connections = AsyncSamlConnectionsClient(client_wrapper=self._client_wrapper)
        self.scim_api_keys = AsyncScimApiKeysClient(client_wrapper=self._client_wrapper)
        self.sessions = AsyncSessionsClient(client_wrapper=self._client_wrapper)
        self.user_invites = AsyncUserInvitesClient(client_wrapper=self._client_wrapper)
        self.user_role_assignments = AsyncUserRoleAssignmentsClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: TesseralEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
