# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.list_passkeys_response import ListPasskeysResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..types.api_error import ApiError as types_api_error_ApiError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError as core_api_error_ApiError
from ..types.get_passkey_response import GetPasskeyResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..types.delete_passkey_response import DeletePasskeyResponse
import datetime as dt
from ..types.update_passkey_response import UpdatePasskeyResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PasskeysClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_passkeys(
        self,
        *,
        user_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListPasskeysResponse:
        """
        List Passkeys.

        Parameters
        ----------
        user_id : typing.Optional[str]
            The ID of the User.

        page_token : typing.Optional[str]
            A pagination token. Leave empty to get the first page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPasskeysResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.passkeys.list_passkeys()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/passkeys",
            method="GET",
            params={
                "userId": user_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListPasskeysResponse,
                    parse_obj_as(
                        type_=ListPasskeysResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def get_passkey(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetPasskeyResponse:
        """
        Get a Passkey.

        Parameters
        ----------
        id : str
            The Passkey ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPasskeyResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.passkeys.get_passkey(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/passkeys/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetPasskeyResponse,
                    parse_obj_as(
                        type_=GetPasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def delete_passkey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeletePasskeyResponse:
        """
        Delete a Passkey.

        Parameters
        ----------
        id : str
            The Passkey ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePasskeyResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.passkeys.delete_passkey(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/passkeys/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeletePasskeyResponse,
                    parse_obj_as(
                        type_=DeletePasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def update_passkey(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        disabled: typing.Optional[bool] = OMIT,
        credential_id: typing.Optional[str] = OMIT,
        public_key_pkix: typing.Optional[str] = OMIT,
        aaguid: typing.Optional[str] = OMIT,
        rp_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePasskeyResponse:
        """
        Update a Passkey.

        Parameters
        ----------
        id_ : str
            The Passkey ID.

        id : typing.Optional[str]
            The Passkey ID. Starts with `passkey_...`.

        user_id : typing.Optional[str]
            The User this Passkey belongs to.

        create_time : typing.Optional[dt.datetime]
            The timestamp of when the Passkey was created.

        update_time : typing.Optional[dt.datetime]
            The timestamp of when the Passkey was last updated.

        disabled : typing.Optional[bool]
            Indicates whether the Passkey is disabled.

        credential_id : typing.Optional[str]
            The unique credential ID for the Passkey, as a binary value.

        public_key_pkix : typing.Optional[str]
            The public key associated with the Passkey, in PEM-encoded PKIX format.

             Starts with `-----BEGIN PUBLIC KEY-----`.

        aaguid : typing.Optional[str]
            The Authenticator Attestation GUID (AAGUID) for the Passkey.

        rp_id : typing.Optional[str]
            The relying party ID associated with the Passkey.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePasskeyResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.passkeys.update_passkey(
            id_="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/passkeys/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "userId": user_id,
                "createTime": create_time,
                "updateTime": update_time,
                "disabled": disabled,
                "credentialId": credential_id,
                "publicKeyPkix": public_key_pkix,
                "aaguid": aaguid,
                "rpId": rp_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdatePasskeyResponse,
                    parse_obj_as(
                        type_=UpdatePasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPasskeysClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_passkeys(
        self,
        *,
        user_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListPasskeysResponse:
        """
        List Passkeys.

        Parameters
        ----------
        user_id : typing.Optional[str]
            The ID of the User.

        page_token : typing.Optional[str]
            A pagination token. Leave empty to get the first page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPasskeysResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.passkeys.list_passkeys()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/passkeys",
            method="GET",
            params={
                "userId": user_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListPasskeysResponse,
                    parse_obj_as(
                        type_=ListPasskeysResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def get_passkey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetPasskeyResponse:
        """
        Get a Passkey.

        Parameters
        ----------
        id : str
            The Passkey ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPasskeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.passkeys.get_passkey(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/passkeys/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetPasskeyResponse,
                    parse_obj_as(
                        type_=GetPasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_passkey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeletePasskeyResponse:
        """
        Delete a Passkey.

        Parameters
        ----------
        id : str
            The Passkey ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePasskeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.passkeys.delete_passkey(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/passkeys/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeletePasskeyResponse,
                    parse_obj_as(
                        type_=DeletePasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def update_passkey(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        disabled: typing.Optional[bool] = OMIT,
        credential_id: typing.Optional[str] = OMIT,
        public_key_pkix: typing.Optional[str] = OMIT,
        aaguid: typing.Optional[str] = OMIT,
        rp_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePasskeyResponse:
        """
        Update a Passkey.

        Parameters
        ----------
        id_ : str
            The Passkey ID.

        id : typing.Optional[str]
            The Passkey ID. Starts with `passkey_...`.

        user_id : typing.Optional[str]
            The User this Passkey belongs to.

        create_time : typing.Optional[dt.datetime]
            The timestamp of when the Passkey was created.

        update_time : typing.Optional[dt.datetime]
            The timestamp of when the Passkey was last updated.

        disabled : typing.Optional[bool]
            Indicates whether the Passkey is disabled.

        credential_id : typing.Optional[str]
            The unique credential ID for the Passkey, as a binary value.

        public_key_pkix : typing.Optional[str]
            The public key associated with the Passkey, in PEM-encoded PKIX format.

             Starts with `-----BEGIN PUBLIC KEY-----`.

        aaguid : typing.Optional[str]
            The Authenticator Attestation GUID (AAGUID) for the Passkey.

        rp_id : typing.Optional[str]
            The relying party ID associated with the Passkey.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePasskeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.passkeys.update_passkey(
                id_="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/passkeys/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "userId": user_id,
                "createTime": create_time,
                "updateTime": update_time,
                "disabled": disabled,
                "credentialId": credential_id,
                "publicKeyPkix": public_key_pkix,
                "aaguid": aaguid,
                "rpId": rp_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdatePasskeyResponse,
                    parse_obj_as(
                        type_=UpdatePasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)
