# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AuditLogEvent(UniversalBaseModel):
    """
    AuditLogEvent represents a record in the Project's audit log.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The Audit Log Event ID. Starts with `audit_log_event_...`.
    """

    organization_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="organizationId")] = (
        pydantic.Field(default=None)
    )
    """
    The Organization the event occurred within, if any.
    """

    actor_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="actorUserId")] = (
        pydantic.Field(default=None)
    )
    """
    The User that performed the event, if any.
    """

    actor_session_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="actorSessionId")] = (
        pydantic.Field(default=None)
    )
    """
    The Session that performed the event, if any.
    """

    actor_api_key_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="actorApiKeyId")] = (
        pydantic.Field(default=None)
    )
    """
    The API Key that performed the event, if any.
    """

    actor_backend_api_key_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="actorBackendApiKeyId")
    ] = pydantic.Field(default=None)
    """
    The Backend API key that performed the event, if any.
    """

    actor_intermediate_session_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="actorIntermediateSessionId")
    ] = pydantic.Field(default=None)
    """
    The Intermediate Session that performed the action, if any.
    """

    event_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="eventTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the event occurred.
    """

    event_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="eventName")] = pydantic.Field(
        default=None
    )
    """
    The name of the event.
    """

    event_details: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="eventDetails")
    ] = pydantic.Field(default=None)
    """
    The event payload JSON.
    """

    actor_credentials: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="actorCredentials")] = (
        pydantic.Field(default=None)
    )
    """
    Credentials for the actor performing the action. Input-only.
    
     Can be used as a shorthand for actor information when calling CreateAuditLogEvent.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
