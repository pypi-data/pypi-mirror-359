# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class OidcConnection(UniversalBaseModel):
    """
    OIDCConnection represents an OpenID Connect configuration for an Organization.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The OIDC Connection ID. Starts with `oidc_connection_...`.
    """

    organization_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="organizationId")] = (
        pydantic.Field(default=None)
    )
    """
    The Organization this OIDC Connection belongs to.
    """

    create_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the OIDC Connection was created.
    """

    update_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updateTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the OIDC Connection was last updated.
    """

    primary: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether this is the primary OIDC Connection for the Organization.
    """

    configuration_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="configurationUrl")] = (
        pydantic.Field(default=None)
    )
    """
    The OIDC Provider's configuration URL.
    """

    client_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="clientId")] = pydantic.Field(
        default=None
    )
    """
    The OIDC Provider's Client ID.
    """

    client_secret: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="clientSecret")] = (
        pydantic.Field(default=None)
    )
    """
    The OIDC Provider's Client Secret.
     This field is write-only.
    """

    redirect_uri: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="redirectUri")] = (
        pydantic.Field(default=None)
    )
    """
    The OIDC Provider's redirect URI.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
