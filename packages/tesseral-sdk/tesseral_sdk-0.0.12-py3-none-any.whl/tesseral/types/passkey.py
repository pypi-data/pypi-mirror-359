# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Passkey(UniversalBaseModel):
    """
    Passkey represents a WebAuthn public key credential registered by a User.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The Passkey ID. Starts with `passkey_...`.
    """

    user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="userId")] = pydantic.Field(
        default=None
    )
    """
    The User this Passkey belongs to.
    """

    create_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createTime")] = (
        pydantic.Field(default=None)
    )
    """
    The timestamp of when the Passkey was created.
    """

    update_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updateTime")] = (
        pydantic.Field(default=None)
    )
    """
    The timestamp of when the Passkey was last updated.
    """

    disabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the Passkey is disabled.
    """

    credential_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="credentialId")] = (
        pydantic.Field(default=None)
    )
    """
    The unique credential ID for the Passkey, as a binary value.
    """

    public_key_pkix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="publicKeyPkix")] = (
        pydantic.Field(default=None)
    )
    """
    The public key associated with the Passkey, in PEM-encoded PKIX format.
    
     Starts with `-----BEGIN PUBLIC KEY-----`.
    """

    aaguid: typing.Optional[str] = pydantic.Field(default=None)
    """
    The Authenticator Attestation GUID (AAGUID) for the Passkey.
    """

    rp_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="rpId")] = pydantic.Field(default=None)
    """
    The relying party ID associated with the Passkey.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
