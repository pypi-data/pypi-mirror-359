# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class SamlConnection(UniversalBaseModel):
    """
    SAMLConnection represents a SAML configuration for an Organization.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The SAML Connection ID. Starts with `saml_connection_...`.
    """

    organization_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="organizationId")] = (
        pydantic.Field(default=None)
    )
    """
    The Organization this SAML Connection belongs to.
    """

    create_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the SAML Connection was created.
    """

    update_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updateTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the SAML Connection was last updated.
    """

    primary: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether this is the primary SAML Connection for the Organization.
    """

    sp_acs_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="spAcsUrl")] = pydantic.Field(
        default=None
    )
    """
    The Service Provider Assertion Consumer Service (ACS) URL.
    """

    sp_entity_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="spEntityId")] = pydantic.Field(
        default=None
    )
    """
    The Service Provider Entity ID.
    """

    idp_redirect_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="idpRedirectUrl")] = (
        pydantic.Field(default=None)
    )
    """
    The Identity Provider Redirect URL.
    """

    idp_x509certificate: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="idpX509Certificate")
    ] = pydantic.Field(default=None)
    """
    The Identity Provider certificate, in PEM-encoded X.509 format.
    
     Starts with `----BEGIN CERTIFICATE----`.
    """

    idp_entity_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="idpEntityId")] = (
        pydantic.Field(default=None)
    )
    """
    The Identity Provider Entity ID.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
