# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
import datetime as dt
from ..core.request_options import RequestOptions
from ..types.create_audit_log_event_response import CreateAuditLogEventResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..types.api_error import ApiError as types_api_error_ApiError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError as core_api_error_ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuditLogEventsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_audit_log_event(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        actor_user_id: typing.Optional[str] = OMIT,
        actor_session_id: typing.Optional[str] = OMIT,
        actor_api_key_id: typing.Optional[str] = OMIT,
        actor_backend_api_key_id: typing.Optional[str] = OMIT,
        actor_intermediate_session_id: typing.Optional[str] = OMIT,
        event_time: typing.Optional[dt.datetime] = OMIT,
        event_name: typing.Optional[str] = OMIT,
        event_details: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        actor_credentials: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateAuditLogEventResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]
            The Audit Log Event ID. Starts with `audit_log_event_...`.

        organization_id : typing.Optional[str]
            The Organization the event occurred within, if any.

        actor_user_id : typing.Optional[str]
            The User that performed the event, if any.

        actor_session_id : typing.Optional[str]
            The Session that performed the event, if any.

        actor_api_key_id : typing.Optional[str]
            The API Key that performed the event, if any.

        actor_backend_api_key_id : typing.Optional[str]
            The Backend API key that performed the event, if any.

        actor_intermediate_session_id : typing.Optional[str]
            The Intermediate Session that performed the action, if any.

        event_time : typing.Optional[dt.datetime]
            When the event occurred.

        event_name : typing.Optional[str]
            The name of the event.

        event_details : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            The event payload JSON.

        actor_credentials : typing.Optional[str]
            Credentials for the actor performing the action. Input-only.

             Can be used as a shorthand for actor information when calling CreateAuditLogEvent.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAuditLogEventResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.audit_log_events.create_audit_log_event()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/audit-log-events",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "actorUserId": actor_user_id,
                "actorSessionId": actor_session_id,
                "actorApiKeyId": actor_api_key_id,
                "actorBackendApiKeyId": actor_backend_api_key_id,
                "actorIntermediateSessionId": actor_intermediate_session_id,
                "eventTime": event_time,
                "eventName": event_name,
                "eventDetails": event_details,
                "actorCredentials": actor_credentials,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateAuditLogEventResponse,
                    parse_obj_as(
                        type_=CreateAuditLogEventResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAuditLogEventsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_audit_log_event(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        actor_user_id: typing.Optional[str] = OMIT,
        actor_session_id: typing.Optional[str] = OMIT,
        actor_api_key_id: typing.Optional[str] = OMIT,
        actor_backend_api_key_id: typing.Optional[str] = OMIT,
        actor_intermediate_session_id: typing.Optional[str] = OMIT,
        event_time: typing.Optional[dt.datetime] = OMIT,
        event_name: typing.Optional[str] = OMIT,
        event_details: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        actor_credentials: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateAuditLogEventResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]
            The Audit Log Event ID. Starts with `audit_log_event_...`.

        organization_id : typing.Optional[str]
            The Organization the event occurred within, if any.

        actor_user_id : typing.Optional[str]
            The User that performed the event, if any.

        actor_session_id : typing.Optional[str]
            The Session that performed the event, if any.

        actor_api_key_id : typing.Optional[str]
            The API Key that performed the event, if any.

        actor_backend_api_key_id : typing.Optional[str]
            The Backend API key that performed the event, if any.

        actor_intermediate_session_id : typing.Optional[str]
            The Intermediate Session that performed the action, if any.

        event_time : typing.Optional[dt.datetime]
            When the event occurred.

        event_name : typing.Optional[str]
            The name of the event.

        event_details : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            The event payload JSON.

        actor_credentials : typing.Optional[str]
            Credentials for the actor performing the action. Input-only.

             Can be used as a shorthand for actor information when calling CreateAuditLogEvent.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAuditLogEventResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.audit_log_events.create_audit_log_event()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/audit-log-events",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "actorUserId": actor_user_id,
                "actorSessionId": actor_session_id,
                "actorApiKeyId": actor_api_key_id,
                "actorBackendApiKeyId": actor_backend_api_key_id,
                "actorIntermediateSessionId": actor_intermediate_session_id,
                "eventTime": event_time,
                "eventName": event_name,
                "eventDetails": event_details,
                "actorCredentials": actor_credentials,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateAuditLogEventResponse,
                    parse_obj_as(
                        type_=CreateAuditLogEventResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)
