# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .access_token_organization import AccessTokenOrganization
from .access_token_user import AccessTokenUser
from .access_token_session import AccessTokenSession
from .access_token_impersonator import AccessTokenImpersonator
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AccessTokenClaims(UniversalBaseModel):
    """
    The claims encoded in an Access Token.
    """

    iss: str = pydantic.Field()
    """
    Will always be of the form "https://project-xxx.tesseral.app", where
     "project-xxx" is your Project ID.
    """

    sub: str = pydantic.Field()
    """
    Will always be equal to the `user.id` claim.
    """

    aud: str = pydantic.Field()
    """
    Will always be equal to the `iss` claim.
    """

    exp: float = pydantic.Field()
    """
    When this Access Token expires, in seconds since the unix epoch.
    """

    nbf: float = pydantic.Field()
    """
    When this Access Token was issued, in seconds since the unix epoch.
    """

    iat: float = pydantic.Field()
    """
    Will always be equal to the `nbf` claim.
    """

    actions: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The set of actions the User has permission to carry out.
    """

    organization: AccessTokenOrganization = pydantic.Field()
    """
    The Organization the User is logged into.
    """

    user: AccessTokenUser = pydantic.Field()
    """
    The User that's logged in.
    """

    session: AccessTokenSession = pydantic.Field()
    """
    The user's current Session.
    """

    impersonator: typing.Optional[AccessTokenImpersonator] = pydantic.Field(default=None)
    """
    If this is an impersonated Session, this contains information about who on
     your staff is impersonating the user.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
