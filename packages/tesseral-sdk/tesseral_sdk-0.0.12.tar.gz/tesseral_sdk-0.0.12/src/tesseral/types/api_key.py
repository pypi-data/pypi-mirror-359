# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ApiKey(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The API Key ID. Starts with `api_key_...`.
    """

    organization_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="organizationId")] = (
        pydantic.Field(default=None)
    )
    """
    The Organization this API Key belongs to.
    """

    create_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the API Key was created.
    """

    update_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updateTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the API Key was last updated.
    """

    expire_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="expireTime")] = (
        pydantic.Field(default=None)
    )
    """
    The expire time of the API Key.
    """

    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = (
        pydantic.Field(default=None)
    )
    """
    A human-readable display name for this API Key.
    """

    secret_token: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="secretToken")] = (
        pydantic.Field(default=None)
    )
    """
    The secret token for this API Key.
    """

    secret_token_suffix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="secretTokenSuffix")] = (
        pydantic.Field(default=None)
    )
    """
    The secret token suffix for this API Key.
    """

    revoked: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether this API Key is revoked.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
