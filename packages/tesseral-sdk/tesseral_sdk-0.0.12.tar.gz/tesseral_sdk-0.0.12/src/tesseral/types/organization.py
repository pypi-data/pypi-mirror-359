# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Organization(UniversalBaseModel):
    """
    An Organization represents one of your corporate customers.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The Organization ID. Starts with `org_...`.
    """

    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = (
        pydantic.Field(default=None)
    )
    """
    A human-friendly name for the Organization.
    """

    create_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the Organization was created.
    """

    update_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updateTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the Organization was last updated.
    """

    log_in_with_google: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithGoogle")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Organization supports "Log in with Google".
    """

    log_in_with_microsoft: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="logInWithMicrosoft")
    ] = pydantic.Field(default=None)
    """
    Whether the Organization supports "Log in with Microsoft".
    """

    log_in_with_github: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithGithub")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Organization supports Log in with GitHub.
    """

    log_in_with_email: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithEmail")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Organization supports "Log in with email".
    """

    log_in_with_password: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="logInWithPassword")
    ] = pydantic.Field(default=None)
    """
    Whether the Organization supports "Log in with password".
    """

    log_in_with_saml: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithSaml")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Organization supports "Log in with SAML".
    """

    log_in_with_oidc: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithOidc")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Organization supports "Log in with OIDC".
    """

    log_in_with_authenticator_app: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="logInWithAuthenticatorApp")
    ] = pydantic.Field(default=None)
    """
    Whether the Organization supports authenticator apps as a secondary auth factor.
    """

    log_in_with_passkey: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithPasskey")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Organization supports passkeys as a secondary auth factor.
    """

    require_mfa: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="requireMfa")] = pydantic.Field(
        default=None
    )
    """
    Whether the Organization requires a secondary auth factor.
    """

    scim_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="scimEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Organization has SCIM enabled.
    """

    custom_roles_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="customRolesEnabled")
    ] = pydantic.Field(default=None)
    """
    Whether the Organization's Users can create Organization-specific Roles.
    """

    api_keys_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="apiKeysEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    Whether API Keys are enabled for the Organization.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
