# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Project(UniversalBaseModel):
    """
    Projects are the top-level object in Tesseral.

     Everything in Tesseral happens within the context of a Project.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The Project ID. Starts with `project_...`.
    """

    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = (
        pydantic.Field(default=None)
    )
    """
    A human-friendly name for the Project.
    """

    create_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the Project was created.
    """

    update_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updateTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the Project was last modified.
    """

    log_in_with_google: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithGoogle")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Project supports "Log in with Google".
    """

    log_in_with_microsoft: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="logInWithMicrosoft")
    ] = pydantic.Field(default=None)
    """
    Whether the Project supports "Log in with Microsoft".
    """

    log_in_with_github: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithGithub")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Project supports "Log in with GitHub".
    """

    log_in_with_email: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithEmail")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Project supports "Log in with email".
    """

    log_in_with_password: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="logInWithPassword")
    ] = pydantic.Field(default=None)
    """
    Whether the Project supports "Log in with password".
    """

    log_in_with_saml: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithSaml")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Project supports "Log in with SAML".
    """

    log_in_with_oidc: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithOidc")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Project supports "Log in with OIDC".
    """

    log_in_with_authenticator_app: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="logInWithAuthenticatorApp")
    ] = pydantic.Field(default=None)
    """
    Whether the Project supports authenticator apps as a secondary auth factor.
    """

    log_in_with_passkey: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="logInWithPasskey")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Project supports passkeys as a secondary auth factor.
    """

    google_oauth_client_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="googleOauthClientId")
    ] = pydantic.Field(default=None)
    """
    The OAuth Client ID to use for "Log in with Google".
    """

    google_oauth_client_secret: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="googleOauthClientSecret")
    ] = pydantic.Field(default=None)
    """
    The OAuth Client Secret to use for "Log in with Google".
    
     This field is write-only.
    """

    microsoft_oauth_client_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="microsoftOauthClientId")
    ] = pydantic.Field(default=None)
    """
    The OAuth Client ID to use for "Log in with Microsoft".
    """

    microsoft_oauth_client_secret: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="microsoftOauthClientSecret")
    ] = pydantic.Field(default=None)
    """
    The OAuth Client Secret to use for "Log in with Microsoft".
    
     This field is write-only.
    """

    github_oauth_client_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="githubOauthClientId")
    ] = pydantic.Field(default=None)
    """
    The OAuth Client ID to use for "Log in with GitHub".
    """

    github_oauth_client_secret: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="githubOauthClientSecret")
    ] = pydantic.Field(default=None)
    """
    The OAuth Client ID to use for "Log in with GitHub"
    
     This field is write only.
    """

    vault_domain: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="vaultDomain")] = (
        pydantic.Field(default=None)
    )
    """
    The domain where the Project's Vault lives.
    """

    vault_domain_custom: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="vaultDomainCustom")
    ] = pydantic.Field(default=None)
    """
    Whether vault_domain is different from the automatically-assigned one.
    """

    trusted_domains: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="trustedDomains")
    ] = pydantic.Field(default=None)
    """
    The set of domains the Project trusts.
    
     Client-side JavaScript on these domains can take actions on behalf of
     logged-in Users.
    """

    cookie_domain: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="cookieDomain")] = (
        pydantic.Field(default=None)
    )
    """
    The domain that authentication cookies are stored on.
    """

    redirect_uri: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="redirectUri")] = (
        pydantic.Field(default=None)
    )
    """
    Where Users are redirected after returning from the Vault.
    """

    after_login_redirect_uri: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="afterLoginRedirectUri")
    ] = pydantic.Field(default=None)
    """
    Where Users are redirected after logging in.
    """

    after_signup_redirect_uri: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="afterSignupRedirectUri")
    ] = pydantic.Field(default=None)
    """
    Where Users are redirected after signing up.
    """

    email_send_from_domain: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="emailSendFromDomain")
    ] = pydantic.Field(default=None)
    """
    Emails sent to Users come from this domain.
    """

    api_keys_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="apiKeysEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Project supports API Keys.
    """

    api_key_secret_token_prefix: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="apiKeySecretTokenPrefix")
    ] = pydantic.Field(default=None)
    """
    The prefix used for API Key secret tokens.
    """

    audit_logs_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="auditLogsEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the Project has audit logging enabled.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
