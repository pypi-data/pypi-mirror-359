# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class User(UniversalBaseModel):
    """
    A User represents an individual working for one of your corporate customers.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The User ID. Starts with `user_...`.
    """

    organization_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="organizationId")] = (
        pydantic.Field(default=None)
    )
    """
    The Organization this User belongs to.
    """

    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    The User's email address.
    
     This email is verified and unique within the Organization. Two Users in
     different Organizations may have the same email.
    """

    create_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the User was created.
    """

    update_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updateTime")] = (
        pydantic.Field(default=None)
    )
    """
    When the User was last updated.
    """

    owner: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the User is an owner of their Organization.
    """

    google_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="googleUserId")] = (
        pydantic.Field(default=None)
    )
    """
    The Google User ID, if the User has ever logged in with Google.
    """

    microsoft_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="microsoftUserId")] = (
        pydantic.Field(default=None)
    )
    """
    The Microsoft User ID, if the User has ever logged in with Microsoft.
    """

    github_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="githubUserId")] = (
        pydantic.Field(default=None)
    )
    """
    The Github User ID, if the User has ever logged in with GitHub.
    """

    has_authenticator_app: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="hasAuthenticatorApp")
    ] = pydantic.Field(default=None)
    """
    Whether the User has an authenticator app set up.
    """

    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = (
        pydantic.Field(default=None)
    )
    """
    The User's human-friendly name.
    """

    profile_picture_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="profilePictureUrl")] = (
        pydantic.Field(default=None)
    )
    """
    The URL of the User's profile picture.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
