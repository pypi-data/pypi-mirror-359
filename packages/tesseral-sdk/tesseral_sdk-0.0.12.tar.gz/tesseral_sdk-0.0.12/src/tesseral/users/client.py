# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.list_users_response import ListUsersResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..types.api_error import ApiError as types_api_error_ApiError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError as core_api_error_ApiError
import datetime as dt
from ..types.create_user_response import CreateUserResponse
from ..types.get_user_response import GetUserResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..types.delete_user_response import DeleteUserResponse
from ..types.update_user_response import UpdateUserResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_users(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersResponse:
        """
        List Users.

        Parameters
        ----------
        organization_id : typing.Optional[str]
            The Organization ID.

        page_token : typing.Optional[str]
            A pagination token. Leave empty to get the first page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.users.list_users()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/users",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListUsersResponse,
                    parse_obj_as(
                        type_=ListUsersResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def create_user(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        google_user_id: typing.Optional[str] = OMIT,
        microsoft_user_id: typing.Optional[str] = OMIT,
        github_user_id: typing.Optional[str] = OMIT,
        has_authenticator_app: typing.Optional[bool] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        profile_picture_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateUserResponse:
        """
        Create a User.

        Parameters
        ----------
        id : typing.Optional[str]
            The User ID. Starts with `user_...`.

        organization_id : typing.Optional[str]
            The Organization this User belongs to.

        email : typing.Optional[str]
            The User's email address.

             This email is verified and unique within the Organization. Two Users in
             different Organizations may have the same email.

        create_time : typing.Optional[dt.datetime]
            When the User was created.

        update_time : typing.Optional[dt.datetime]
            When the User was last updated.

        owner : typing.Optional[bool]
            Whether the User is an owner of their Organization.

        google_user_id : typing.Optional[str]
            The Google User ID, if the User has ever logged in with Google.

        microsoft_user_id : typing.Optional[str]
            The Microsoft User ID, if the User has ever logged in with Microsoft.

        github_user_id : typing.Optional[str]
            The Github User ID, if the User has ever logged in with GitHub.

        has_authenticator_app : typing.Optional[bool]
            Whether the User has an authenticator app set up.

        display_name : typing.Optional[str]
            The User's human-friendly name.

        profile_picture_url : typing.Optional[str]
            The URL of the User's profile picture.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateUserResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.users.create_user()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/users",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "email": email,
                "createTime": create_time,
                "updateTime": update_time,
                "owner": owner,
                "googleUserId": google_user_id,
                "microsoftUserId": microsoft_user_id,
                "githubUserId": github_user_id,
                "hasAuthenticatorApp": has_authenticator_app,
                "displayName": display_name,
                "profilePictureUrl": profile_picture_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateUserResponse,
                    parse_obj_as(
                        type_=CreateUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def get_user(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetUserResponse:
        """
        Get a User.

        Parameters
        ----------
        id : str
            The User ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.users.get_user(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/users/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetUserResponse,
                    parse_obj_as(
                        type_=GetUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def delete_user(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> DeleteUserResponse:
        """
        Delete a User.

        Parameters
        ----------
        id : str
            The User ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteUserResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.users.delete_user(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/users/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteUserResponse,
                    parse_obj_as(
                        type_=DeleteUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def update_user(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        google_user_id: typing.Optional[str] = OMIT,
        microsoft_user_id: typing.Optional[str] = OMIT,
        github_user_id: typing.Optional[str] = OMIT,
        has_authenticator_app: typing.Optional[bool] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        profile_picture_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateUserResponse:
        """
        Update a User.

        Parameters
        ----------
        id_ : str
            The User ID.

        id : typing.Optional[str]
            The User ID. Starts with `user_...`.

        organization_id : typing.Optional[str]
            The Organization this User belongs to.

        email : typing.Optional[str]
            The User's email address.

             This email is verified and unique within the Organization. Two Users in
             different Organizations may have the same email.

        create_time : typing.Optional[dt.datetime]
            When the User was created.

        update_time : typing.Optional[dt.datetime]
            When the User was last updated.

        owner : typing.Optional[bool]
            Whether the User is an owner of their Organization.

        google_user_id : typing.Optional[str]
            The Google User ID, if the User has ever logged in with Google.

        microsoft_user_id : typing.Optional[str]
            The Microsoft User ID, if the User has ever logged in with Microsoft.

        github_user_id : typing.Optional[str]
            The Github User ID, if the User has ever logged in with GitHub.

        has_authenticator_app : typing.Optional[bool]
            Whether the User has an authenticator app set up.

        display_name : typing.Optional[str]
            The User's human-friendly name.

        profile_picture_url : typing.Optional[str]
            The URL of the User's profile picture.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateUserResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.users.update_user(
            id_="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/users/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "organizationId": organization_id,
                "email": email,
                "createTime": create_time,
                "updateTime": update_time,
                "owner": owner,
                "googleUserId": google_user_id,
                "microsoftUserId": microsoft_user_id,
                "githubUserId": github_user_id,
                "hasAuthenticatorApp": has_authenticator_app,
                "displayName": display_name,
                "profilePictureUrl": profile_picture_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateUserResponse,
                    parse_obj_as(
                        type_=UpdateUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_users(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersResponse:
        """
        List Users.

        Parameters
        ----------
        organization_id : typing.Optional[str]
            The Organization ID.

        page_token : typing.Optional[str]
            A pagination token. Leave empty to get the first page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.users.list_users()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/users",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListUsersResponse,
                    parse_obj_as(
                        type_=ListUsersResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def create_user(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        google_user_id: typing.Optional[str] = OMIT,
        microsoft_user_id: typing.Optional[str] = OMIT,
        github_user_id: typing.Optional[str] = OMIT,
        has_authenticator_app: typing.Optional[bool] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        profile_picture_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateUserResponse:
        """
        Create a User.

        Parameters
        ----------
        id : typing.Optional[str]
            The User ID. Starts with `user_...`.

        organization_id : typing.Optional[str]
            The Organization this User belongs to.

        email : typing.Optional[str]
            The User's email address.

             This email is verified and unique within the Organization. Two Users in
             different Organizations may have the same email.

        create_time : typing.Optional[dt.datetime]
            When the User was created.

        update_time : typing.Optional[dt.datetime]
            When the User was last updated.

        owner : typing.Optional[bool]
            Whether the User is an owner of their Organization.

        google_user_id : typing.Optional[str]
            The Google User ID, if the User has ever logged in with Google.

        microsoft_user_id : typing.Optional[str]
            The Microsoft User ID, if the User has ever logged in with Microsoft.

        github_user_id : typing.Optional[str]
            The Github User ID, if the User has ever logged in with GitHub.

        has_authenticator_app : typing.Optional[bool]
            Whether the User has an authenticator app set up.

        display_name : typing.Optional[str]
            The User's human-friendly name.

        profile_picture_url : typing.Optional[str]
            The URL of the User's profile picture.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateUserResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.users.create_user()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/users",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "email": email,
                "createTime": create_time,
                "updateTime": update_time,
                "owner": owner,
                "googleUserId": google_user_id,
                "microsoftUserId": microsoft_user_id,
                "githubUserId": github_user_id,
                "hasAuthenticatorApp": has_authenticator_app,
                "displayName": display_name,
                "profilePictureUrl": profile_picture_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateUserResponse,
                    parse_obj_as(
                        type_=CreateUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def get_user(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetUserResponse:
        """
        Get a User.

        Parameters
        ----------
        id : str
            The User ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.users.get_user(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/users/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetUserResponse,
                    parse_obj_as(
                        type_=GetUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_user(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteUserResponse:
        """
        Delete a User.

        Parameters
        ----------
        id : str
            The User ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteUserResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.users.delete_user(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/users/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteUserResponse,
                    parse_obj_as(
                        type_=DeleteUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def update_user(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        google_user_id: typing.Optional[str] = OMIT,
        microsoft_user_id: typing.Optional[str] = OMIT,
        github_user_id: typing.Optional[str] = OMIT,
        has_authenticator_app: typing.Optional[bool] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        profile_picture_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateUserResponse:
        """
        Update a User.

        Parameters
        ----------
        id_ : str
            The User ID.

        id : typing.Optional[str]
            The User ID. Starts with `user_...`.

        organization_id : typing.Optional[str]
            The Organization this User belongs to.

        email : typing.Optional[str]
            The User's email address.

             This email is verified and unique within the Organization. Two Users in
             different Organizations may have the same email.

        create_time : typing.Optional[dt.datetime]
            When the User was created.

        update_time : typing.Optional[dt.datetime]
            When the User was last updated.

        owner : typing.Optional[bool]
            Whether the User is an owner of their Organization.

        google_user_id : typing.Optional[str]
            The Google User ID, if the User has ever logged in with Google.

        microsoft_user_id : typing.Optional[str]
            The Microsoft User ID, if the User has ever logged in with Microsoft.

        github_user_id : typing.Optional[str]
            The Github User ID, if the User has ever logged in with GitHub.

        has_authenticator_app : typing.Optional[bool]
            Whether the User has an authenticator app set up.

        display_name : typing.Optional[str]
            The User's human-friendly name.

        profile_picture_url : typing.Optional[str]
            The URL of the User's profile picture.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateUserResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.users.update_user(
                id_="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/users/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "organizationId": organization_id,
                "email": email,
                "createTime": create_time,
                "updateTime": update_time,
                "owner": owner,
                "googleUserId": google_user_id,
                "microsoftUserId": microsoft_user_id,
                "githubUserId": github_user_id,
                "hasAuthenticatorApp": has_authenticator_app,
                "displayName": display_name,
                "profilePictureUrl": profile_picture_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateUserResponse,
                    parse_obj_as(
                        type_=UpdateUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)
