# ───────────────────────── tinyAgent config ─────────────────────────
# If you turn on `structured_outputs`, the *default* model **must**
# advertise "Structured Outputs" on OpenRouter, otherwise you'll get
# 404 / 422 errors.  Check compatible models here:
# https://openrouter.ai/models?fmt=cards&order=newest&supported_parameters=structured_outputs
# -------------------------------------------------------------------

base_url: "https://openrouter.ai/api/v1"

structured_outputs: true # <- leave off unless model supports it
#Any openrouter model will work, but r1 is a good compromise between cost and performance, for tool calling v3 is bearable, claude 3.5+ is ideal but expensive
model:
  default: "openai/gpt-4.1"

embedding_provider:
  provider_type: "openai"
  model_name: "text-embedding-3-small"
  api_key: ${OPENAI_API_KEY}

parsing:
  strict_json: true # strict only; set false to allow fallbacks
  fallback_parsers:
    template: true
    regex: true

retries:
  max_attempts: 2
  temperature: { initial: 0.2, increment: 0.4, max: 1.0 }
  model_escalation:
    enabled: true
    sequence: ["deepseek/deepseek-r1"]
dynamic_agents: { allow_new_tools_by_default: false }

code_execution:
  allow_dangerous_operations: true
  allowed_operations:
    file_operations: true
    os_operations: false
    imports: ["os", "sys"]

file_operations:
  output_dir: "tinyAgent_output"
  allowed_extensions: [".txt", ".json", ".yaml", ".md", ".py", ".log"]
  max_file_size: 10_485_760 # 10 MB
  create_subdirs: true
  allow_overwrite: true

proxy:
  enabled: false # set true + creds below to activate
  url: "http://customer-%s-cc-%s:%s@pr.oxylabs.io:7777"
  username: ${TINYAGENT_PROXY_USERNAME}
  password: ${TINYAGENT_PROXY_PASSWORD}
  country: ${TINYAGENT_PROXY_COUNTRY}

logging:
  level: INFO
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  handlers: ["console"]

observability:
  tracing:
    enabled: false
    service_name: "tinyagent"
    sampling_rate: 1.0
    # Available exporter types:
    # - "console": Outputs traces to console
    # - "otlp": Sends traces to an OpenTelemetry collector
    # - "sqlite": Stores traces in a SQLite database (requires db_path)
    exporter:
      type: "sqlite"
      db_path: "data/traces.db"
    # Example SQLite exporter configuration:
    # exporter:
    #   type: "sqlite"
    #   db_path: "data/traces.db"
    attributes: { environment: "development", version: "0.1.0" }
