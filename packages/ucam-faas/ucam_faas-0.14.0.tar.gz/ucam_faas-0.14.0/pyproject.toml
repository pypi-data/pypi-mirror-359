[tool.poetry]
name = "ucam-faas"
version = "0.14.0"
description = "Opinionated FaaS support framework extending Google's functions-framework"
authors = ["University of Cambridge Information Services <devops-wilson@uis.cam.ac.uk>"]
readme = "README.md"
license = "MIT"
repository = "https://gitlab.developers.cam.ac.uk/uis/devops/ucam-faas-python/ucam-faas"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[tool.poetry.scripts]
ucam-faas = "ucam_faas:_cli"

[tool.poe.tasks.example]
help = "Run the example application"
cmd = "docker compose up --build"
env = { COMPOSE_PROFILES = "example" }

[tool.poe.tasks.fix]
help = "Run pre-commit checks to fix formatting errors"
cmd = "pre-commit run --all-files"

[tool.poe.tasks.tox]
help = "Run the Python test suite via tox"
cmd = "docker compose run --build --rm tox"

[tool.poe.tasks.example-long-run]
help = "Run the Python test suite via tox"
cmd = "docker compose run --build --rm example-long-run"

[tool.poe.tasks.down]
help = "Stop any running containers"
cmd = "docker compose down"
env = { COMPOSE_PROFILES = "example,utilities,entra,example-long-run" }

[tool.poe.tasks."compose:build"]
help = "Build or rebuild all container images"
cmd = "docker compose build"
env = { COMPOSE_PROFILES = "example,utilities,entra,example-long-run" }

[tool.poe.tasks."compose:pull"]
help = "Pull any upstream container images"
cmd = "docker compose pull --ignore-buildable --ignore-pull-failures"
env = { COMPOSE_PROFILES = "example,utilities,entra,example-long-run" }

[tool.poe.tasks."tox:local"]
help = "Run the Python test suite via tox using the locally installed Python version"
cmd = "tox"

[tool.poe.tasks."pytest:local"]
help = "Run the Python test suite via pytest using the locally installed Python version"
cmd = "pytest"

[tool.poetry.dependencies]
python = "^3.10.0"
requests = "^2.31.0"
structlog = "^24.1.0"
functions-framework = "^3.5.0"
click = "^8.1.7"
gunicorn = ">=22.0.0"
flask = "^3.0.3"
cloudevents = {extras = ["pydantic"], version = "^1.10.1"}
ucam-observe = "^0.2.0"
pytest = {version = "^8.1.1", optional = true}
polyfactory = {version = "^2.16.0", optional = true}
google-cloud-storage = "^3.1.1"

[tool.poetry.extras]
testing = ["pytest", "polyfactory"]

[tool.poetry.group.dev.dependencies]
pytest-cov = "^4.1.0"
pre-commit = "^3.6.2"
tox = "^4.14.2"
pytest-mock = "^3.12.0"
pytest-env = "^1.1.3"
responses = "^0.25.7"
faker = "^37.4.0"

[tool.poetry.group.typecheck.dependencies]
mypy = "^1.15.0"

[tool.poetry.group.entra]
optional = true

[tool.poetry.group.entra.dependencies]
pydantic-settings = "^2.9.1"
google-cloud-pubsub = "^2.29.0"
pydantic = "^2.11.5"
verify-oidc-identity = "^0.4.30"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.10"  # ensure stdlib imports work on our min Python version
strict = true

[[tool.mypy.overrides]]
module = ["google.cloud.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["federatedidentity.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["jwcrypto.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["responses.*"]
ignore_missing_imports = true


[tool.black]
line-length = 99

[tool.coverage.run]
omit= [
  ".tox/*",
  "setup.py",
  "manage.py",
  "gunicorn.conf.py",
  "example/*",
  "*/test/*",
  "*/tests/*",
]

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
env = [
    "ENTRA_PUBSUB_TOPIC_PATH=projects/dev/topics/test",
    "ENTRA_EXPECTED_SERVICE_PRINCIPAL_GUID=expected-guid",
]
testpaths = [
    "example/test.py",
    "**/tests/*.py",
    "**/test/*.py",
]
