# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .open_ai_function import OpenAiFunction
from .server import Server
from .text_editor_tool_messages_item import TextEditorToolMessagesItem


class TextEditorTool(UncheckedBaseModel):
    messages: typing.Optional[typing.List[TextEditorToolMessagesItem]] = pydantic.Field(default=None)
    """
    These are the messages that will be spoken to the user as the tool is running.
    
    For some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.
    """

    type: typing.Literal["textEditor"] = "textEditor"
    sub_type: typing_extensions.Annotated[typing.Literal["text_editor_20241022"], FieldMetadata(alias="subType")] = (
        pydantic.Field(default="text_editor_20241022")
    )
    """
    The sub type of tool.
    """

    server: typing.Optional[Server] = pydantic.Field(default=None)
    """
    
      This is the server where a `tool-calls` webhook will be sent.
    
      Notes:
      - Webhook is sent to this server when a tool call is made.
      - Webhook contains the call, assistant, and phone number objects.
      - Webhook contains the variables set on the assistant.
      - Webhook is sent to the first available URL in this order: {{tool.server.url}}, {{assistant.server.url}}, {{phoneNumber.server.url}}, {{org.server.url}}.
      - Webhook expects a response with tool call result.
    """

    id: str = pydantic.Field()
    """
    This is the unique identifier for the tool.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    This is the unique identifier for the organization that this tool belongs to.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the tool was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the tool was last updated.
    """

    function: typing.Optional[OpenAiFunction] = pydantic.Field(default=None)
    """
    This is the function definition of the tool.
    
    For `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.
    
    An example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument "reason". Then, in `messages` array, you can have many "request-complete" messages. One of these messages will be triggered if the `messages[].conditions` matches the "reason" argument.
    """

    name: typing.Literal["str_replace_editor"] = pydantic.Field(default="str_replace_editor")
    """
    The name of the tool, fixed to 'str_replace_editor'
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
