# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .campaign_ended_reason import CampaignEndedReason
from .campaign_status import CampaignStatus
from .create_customer_dto import CreateCustomerDto
from .schedule_plan import SchedulePlan


class Campaign(UncheckedBaseModel):
    status: CampaignStatus = pydantic.Field()
    """
    This is the status of the campaign.
    """

    ended_reason: typing_extensions.Annotated[
        typing.Optional[CampaignEndedReason], FieldMetadata(alias="endedReason")
    ] = pydantic.Field(default=None)
    """
    This is the explanation for how the campaign ended.
    """

    name: str = pydantic.Field()
    """
    This is the name of the campaign. This is just for your own reference.
    """

    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
    """

    workflow_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workflowId")] = pydantic.Field(
        default=None
    )
    """
    This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
    """

    phone_number_id: typing_extensions.Annotated[str, FieldMetadata(alias="phoneNumberId")] = pydantic.Field()
    """
    This is the phone number ID that will be used for the campaign calls.
    """

    schedule_plan: typing_extensions.Annotated[typing.Optional[SchedulePlan], FieldMetadata(alias="schedulePlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the schedule plan for the campaign.
    """

    customers: typing.List[CreateCustomerDto] = pydantic.Field()
    """
    These are the customers that will be called in the campaign.
    """

    id: str = pydantic.Field()
    """
    This is the unique identifier for the campaign.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    This is the unique identifier for the org that this campaign belongs to.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the campaign was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the campaign was last updated.
    """

    calls: typing.Dict[str, typing.Optional[typing.Any]] = pydantic.Field()
    """
    This is a map of call IDs to campaign call details.
    """

    calls_counter_scheduled: typing_extensions.Annotated[float, FieldMetadata(alias="callsCounterScheduled")] = (
        pydantic.Field()
    )
    """
    This is the number of calls that have been scheduled.
    """

    calls_counter_queued: typing_extensions.Annotated[float, FieldMetadata(alias="callsCounterQueued")] = (
        pydantic.Field()
    )
    """
    This is the number of calls that have been queued.
    """

    calls_counter_in_progress: typing_extensions.Annotated[float, FieldMetadata(alias="callsCounterInProgress")] = (
        pydantic.Field()
    )
    """
    This is the number of calls that have been in progress.
    """

    calls_counter_ended_voicemail: typing_extensions.Annotated[
        float, FieldMetadata(alias="callsCounterEndedVoicemail")
    ] = pydantic.Field()
    """
    This is the number of calls whose ended reason is 'voicemail'.
    """

    calls_counter_ended: typing_extensions.Annotated[float, FieldMetadata(alias="callsCounterEnded")] = pydantic.Field()
    """
    This is the number of calls that have ended.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
