# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .artifact import Artifact
from .call import Call
from .chat import Chat
from .create_assistant_dto import CreateAssistantDto
from .create_customer_dto import CreateCustomerDto
from .open_ai_message import OpenAiMessage
from .server_message_call_endpointing_request_messages_item import ServerMessageCallEndpointingRequestMessagesItem
from .server_message_call_endpointing_request_phone_number import ServerMessageCallEndpointingRequestPhoneNumber


class ServerMessageCallEndpointingRequest(UncheckedBaseModel):
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageCallEndpointingRequestPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = pydantic.Field(default=None)
    """
    This is the phone number that the message is associated with.
    """

    type: typing.Literal["call.endpointing.request"] = pydantic.Field(default="call.endpointing.request")
    """
    This is the type of the message. "call.endpointing.request" is sent when using `assistant.startSpeakingPlan.smartEndpointingPlan={ "provider": "custom-endpointing-model" }`.
    
    Here is what the request will look like:
    
    POST https://{assistant.startSpeakingPlan.smartEndpointingPlan.server.url}
    Content-Type: application/json
    
    {
      "message": {
        "type": "call.endpointing.request",
        "messages": [
          {
            "role": "user",
            "message": "Hello, how are you?",
            "time": 1234567890,
            "secondsFromStart": 0
          }
        ],
        ...other metadata about the call...
      }
    }
    
    The expected response:
    {
      "timeoutSeconds": 0.5
    }
    """

    messages: typing.Optional[typing.List[ServerMessageCallEndpointingRequestMessagesItem]] = pydantic.Field(
        default=None
    )
    """
    This is the conversation history at the time of the endpointing request.
    """

    messages_open_ai_formatted: typing_extensions.Annotated[
        typing.List[OpenAiMessage], FieldMetadata(alias="messagesOpenAIFormatted")
    ] = pydantic.Field()
    """
    This is just `messages` formatted for OpenAI.
    """

    timestamp: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the timestamp of the message.
    """

    artifact: typing.Optional[Artifact] = pydantic.Field(default=None)
    """
    This is a live version of the `call.artifact`.
    
    This matches what is stored on `call.artifact` after the call.
    """

    assistant: typing.Optional[CreateAssistantDto] = pydantic.Field(default=None)
    """
    This is the assistant that the message is associated with.
    """

    customer: typing.Optional[CreateCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer that the message is associated with.
    """

    call: typing.Optional[Call] = pydantic.Field(default=None)
    """
    This is the call that the message is associated with.
    """

    chat: typing.Optional[Chat] = pydantic.Field(default=None)
    """
    This is the chat object.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
