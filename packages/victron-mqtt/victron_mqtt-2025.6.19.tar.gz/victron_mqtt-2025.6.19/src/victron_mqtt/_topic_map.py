"""
Maps all the MQTT topics to either attributes or metrics.
"""

from victron_mqtt.constants import DeviceType, EvChargerMode, GenericOnOff, MetricKind, MetricNature, MetricType, ValueType, InverterMode
from victron_mqtt.data_classes import TopicDescriptor


topic_map: dict[str, TopicDescriptor] = {
    # generic device attributes
    "N/+/+/+/ProductName": TopicDescriptor(
        message_type=MetricKind.ATTRIBUTE,
        short_id="model",
        unit_of_measurement=None,
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        value_type=ValueType.STRING,
    ),
    "N/+/+/+/Serial": TopicDescriptor(
        message_type=MetricKind.ATTRIBUTE,
        short_id="serial_number",
        unit_of_measurement=None,
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        value_type=ValueType.STRING,
    ),
    # inverter hides its serial number away in a different topic
    "N/+/vebus/+/Devices/0/SerialNumber": TopicDescriptor(
        message_type=MetricKind.ATTRIBUTE,
        short_id="serial_number",
        unit_of_measurement=None,
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        value_type=ValueType.STRING,
    ),
    "N/+/+/+/Manufacturer": TopicDescriptor(
        message_type=MetricKind.ATTRIBUTE,
        short_id="manufacturer",
        unit_of_measurement=None,
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        value_type=ValueType.STRING,
    ),
    "N/+/+/+/ProductId": TopicDescriptor(
        message_type=MetricKind.ATTRIBUTE,
        short_id="victron_productid",
        unit_of_measurement=None,
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        value_type=ValueType.INT,
        precision=0,
    ),
    "N/+/+/+/FirmwareVersion": TopicDescriptor(
        message_type=MetricKind.ATTRIBUTE,
        short_id="firmware_version",
        unit_of_measurement=None,
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        value_type=ValueType.STRING,
    ),
    # grid
    "N/+/system/+/Ac/Grid/NumberOfPhases": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="system_grid_phases",  # system attribute
        unit_of_measurement=None,
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.GRID,
        value_type=ValueType.INT_DEFAULT_0,
        precision=0,
    ),
    # individual grid phases
    "N/+/grid/+/Ac/+/Voltage": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="grid_voltage_{phase}",
        unit_of_measurement="V",
        metric_type=MetricType.VOLTAGE,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.GRID,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/grid/+/Ac/+/Current": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="grid_current_{phase}",
        unit_of_measurement="A",
        metric_type=MetricType.CURRENT,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.GRID,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/grid/+/Ac/+/Power": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="grid_power_{phase}",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.GRID,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    # total grid
    "N/+/grid/+/Ac/Voltage": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="grid_voltage",
        unit_of_measurement="V",
        metric_type=MetricType.VOLTAGE,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.GRID,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/grid/+/Ac/Current": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="grid_current",
        unit_of_measurement="A",
        metric_type=MetricType.CURRENT,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.GRID,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/grid/+/Ac/Power": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="grid_power",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.GRID,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/grid/+/Ac/Energy/Forward": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="grid_energy_forward",
        unit_of_measurement="kWh",
        metric_type=MetricType.ENERGY,
        metric_nature=MetricNature.CUMULATIVE,
        device_type=DeviceType.GRID,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/grid/+/Ac/Energy/Reverse": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="grid_energy_reverse",
        unit_of_measurement="kWh",
        metric_type=MetricType.ENERGY,
        metric_nature=MetricNature.CUMULATIVE,
        device_type=DeviceType.GRID,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    #  cspell:ignore solarcharger MPPT
    # solar / MPPT  """ cspell:ignore  """
    "N/+/solarcharger/+/Dc/0/Voltage": TopicDescriptor(  # """ cspell:ignore  """
        message_type=MetricKind.SENSOR,
        short_id="solar_voltage",
        unit_of_measurement="V",
        metric_type=MetricType.VOLTAGE,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.SOLAR_CHARGER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/solarcharger/+/Dc/0/Current": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="solar_current",
        unit_of_measurement="A",
        metric_type=MetricType.CURRENT,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.SOLAR_CHARGER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/solarcharger/+/Yield/Power": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="solar_power",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.SOLAR_CHARGER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/solarcharger/+/Yield/User": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="solar_yield",
        unit_of_measurement="kWh",
        metric_type=MetricType.ENERGY,
        metric_nature=MetricNature.CUMULATIVE,
        device_type=DeviceType.SOLAR_CHARGER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/solarcharger/+/History/Daily/0/MaxPower": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="solar_max_power",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.SOLAR_CHARGER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    # batteries
    "N/+/battery/+/Dc/0/Voltage": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="battery_voltage",
        unit_of_measurement="V",
        metric_type=MetricType.VOLTAGE,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.BATTERY,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/battery/+/Dc/0/Current": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="battery_current",
        unit_of_measurement="A",
        metric_type=MetricType.CURRENT,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.BATTERY,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/battery/+/Dc/0/Power": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="battery_power",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.BATTERY,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/battery/+/Dc/0/Temperature": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="battery_temperature",
        unit_of_measurement="Â°C",
        metric_type=MetricType.TEMPERATURE,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.BATTERY,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/battery/+/History/DischargedEnergy": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="battery_discharged_energy",
        unit_of_measurement="kWh",
        metric_type=MetricType.ENERGY,
        metric_nature=MetricNature.CUMULATIVE,
        device_type=DeviceType.BATTERY,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/battery/+/History/ChargedEnergy": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="battery_charged_energy",
        unit_of_measurement="kWh",
        metric_type=MetricType.ENERGY,
        metric_nature=MetricNature.CUMULATIVE,
        device_type=DeviceType.BATTERY,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/battery/+/Capacity": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="battery_capacity",
        unit_of_measurement="Ah",
        metric_type=MetricType.ELECTRIC_STORAGE_CAPACITY,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.BATTERY,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/battery/+/InstalledCapacity": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="battery_installed_capacity",
        unit_of_measurement="Ah",
        metric_type=MetricType.ELECTRIC_STORAGE_CAPACITY,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.BATTERY,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/battery/+/Soc": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="battery_soc",
        unit_of_measurement="%",
        metric_type=MetricType.PERCENTAGE,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.BATTERY,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    # inverter
    "N/+/vebus/+/Mode": TopicDescriptor(
        message_type=MetricKind.SELECT,
        short_id="inverter_mode",
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        device_type=DeviceType.INVERTER,
        value_type=ValueType.ENUM,
        enum=InverterMode,
    ),
    "N/+/vebus/+/Ac/ActiveIn/+/P": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="inverter_input_power_{phase}",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.INVERTER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/vebus/+/Ac/ActiveIn/+/F": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="inverter_input_frequency_{phase}",
        unit_of_measurement="Hz",
        metric_type=MetricType.FREQUENCY,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.INVERTER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/vebus/+/Ac/ActiveIn/+/S": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="inverter_input_apparent_power_{phase}",
        unit_of_measurement="VA",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.INVERTER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/vebus/+/Ac/Out/+/P": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="inverter_output_power_{phase}",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.INVERTER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/vebus/+/Ac/Out/+/F": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="inverter_output_frequency_{phase}",
        unit_of_measurement="Hz",
        metric_type=MetricType.FREQUENCY,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.INVERTER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/vebus/+/Ac/Out/+/S": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="inverter_output_apparent_power_{phase}",
        unit_of_measurement="VA",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.INVERTER,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    # integrated system. Note that this might not be currently accurate for all systems
    #  as there are different physical configurations
    # and don't have access to any other for testing or feedback.
    "N/+/system/+/Ac/ConsumptionOnOutput/+/Power": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="system_critical_loads_{phase}",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.SYSTEM,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    "N/+/system/+/Ac/ConsumptionOnInput/+/Power": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="system_ac_loads_{phase}",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.SYSTEM,
        value_type=ValueType.FLOAT,
        precision=1,
    ),
    # evcharger
    "/N/+/evcharger/+/Mode": TopicDescriptor(
        message_type=MetricKind.SELECT,
        short_id="evcharger_mode",
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        device_type=DeviceType.EVCHARGER,
        value_type=ValueType.ENUM,
        enum=EvChargerMode,
    ),
    "/N/+/evcharger/+/StartStop": TopicDescriptor(
        message_type=MetricKind.SWITCH,
        short_id="evcharger_charge",
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        device_type=DeviceType.EVCHARGER,
        value_type=ValueType.ENUM,
        enum=GenericOnOff,
    ),
    "/N/+/evcharger/+/Connected": TopicDescriptor(
        message_type=MetricKind.BINARY_SENSOR,
        short_id="evcharger_connected",
        metric_type=MetricType.NONE,
        metric_nature=MetricNature.NONE,
        device_type=DeviceType.EVCHARGER,
        value_type=ValueType.ENUM,
        enum=GenericOnOff,
    ),
    "/N/+/evcharger/+/Current": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="evcharger_current",
        unit_of_measurement="A",
        metric_type=MetricType.CURRENT,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.EVCHARGER,
        value_type=ValueType.FLOAT,
        precision=1
    ),
    "/N/+/evcharger/+/Ac/+/Power": TopicDescriptor(
        message_type=MetricKind.SENSOR,
        short_id="evcharger_power_{phase}",
        unit_of_measurement="W",
        metric_type=MetricType.POWER,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.EVCHARGER,
        value_type=ValueType.FLOAT,
        precision=1
    ),
    "/N/+/evcharger/+/SetCurrent": TopicDescriptor(
        message_type=MetricKind.NUMBER,
        short_id="evcharger_set_current",
        unit_of_measurement="A",
        metric_type=MetricType.CURRENT,
        metric_nature=MetricNature.INSTANTANEOUS,
        device_type=DeviceType.EVCHARGER,
        value_type=ValueType.FLOAT,
        precision=0,
        min=0,
        max=0,
    ),
}
