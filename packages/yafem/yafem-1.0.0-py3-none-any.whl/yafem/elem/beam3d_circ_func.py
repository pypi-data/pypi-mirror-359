import numpy

def beam3d_circ_Kl(D1, D2, E, G, H, L, alpha, fa, fby, fbz, k0a, k0b, rho, theta):
    return numpy.array([[((1/2)*numpy.pi*E*H*(D1 + D2 - 2*H) + (1/3)*L**2*k0a)/L, 0, 0, 0, 0, 0, (1/6)*(-3*numpy.pi*E*H*(D1 + D2 - 2*H) + L**2*k0a)/L, 0, 0, 0, 0, 0], [0, (1/280)*(21*numpy.pi*E*H*(7*D1**3 + 3*D1**2*D2 - 24*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 40*D1*H**2 + 7*D2**3 - 24*D2**2*H + 40*D2*H**2 - 40*H**3) + 104*L**4*k0b)/L**3, 0, 0, 0, (1/840)*(21*numpy.pi*E*H*(15*D1**3 + 6*D1**2*D2 - 51*D1**2*H + 3*D1*D2**2 - 18*D1*D2*H + 80*D1*H**2 + 6*D2**3 - 21*D2**2*H + 40*D2*H**2 - 60*H**3) + 44*L**4*k0b)/L**2, 0, (3/280)*(-7*numpy.pi*E*H*(7*D1**3 + 3*D1**2*D2 - 24*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 40*D1*H**2 + 7*D2**3 - 24*D2**2*H + 40*D2*H**2 - 40*H**3) + 12*L**4*k0b)/L**3, 0, 0, 0, (1/840)*(21*numpy.pi*E*H*(6*D1**3 + 3*D1**2*D2 - 21*D1**2*H + 6*D1*D2**2 - 18*D1*D2*H + 40*D1*H**2 + 15*D2**3 - 51*D2**2*H + 80*D2*H**2 - 60*H**3) - 26*L**4*k0b)/L**2], [0, 0, (1/280)*(21*numpy.pi*E*H*(7*D1**3 + 3*D1**2*D2 - 24*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 40*D1*H**2 + 7*D2**3 - 24*D2**2*H + 40*D2*H**2 - 40*H**3) + 104*L**4*k0b)/L**3, 0, (1/840)*(-21*numpy.pi*E*H*(15*D1**3 + 6*D1**2*D2 - 51*D1**2*H + 3*D1*D2**2 - 18*D1*D2*H + 80*D1*H**2 + 6*D2**3 - 21*D2**2*H + 40*D2*H**2 - 60*H**3) - 44*L**4*k0b)/L**2, 0, 0, 0, (3/280)*(-7*numpy.pi*E*H*(7*D1**3 + 3*D1**2*D2 - 24*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 40*D1*H**2 + 7*D2**3 - 24*D2**2*H + 40*D2*H**2 - 40*H**3) + 12*L**4*k0b)/L**3, 0, (1/840)*(-21*numpy.pi*E*H*(6*D1**3 + 3*D1**2*D2 - 21*D1**2*H + 6*D1*D2**2 - 18*D1*D2*H + 40*D1*H**2 + 15*D2**3 - 51*D2**2*H + 80*D2*H**2 - 60*H**3) + 26*L**4*k0b)/L**2, 0], [0, 0, 0, (1/16)*numpy.pi*G*H*(D1**3 + D1**2*D2 - 4*D1**2*H + D1*D2**2 - 4*D1*D2*H + 8*D1*H**2 + D2**3 - 4*D2**2*H + 8*D2*H**2 - 8*H**3)/L, 0, 0, 0, 0, 0, (1/16)*numpy.pi*G*H*(-D1**3 - D1**2*D2 + 4*D1**2*H - D1*D2**2 + 4*D1*D2*H - 8*D1*H**2 - D2**3 + 4*D2**2*H - 8*D2*H**2 + 8*H**3)/L, 0, 0], [0, 0, (1/840)*(-21*numpy.pi*E*H*(15*D1**3 + 6*D1**2*D2 - 51*D1**2*H + 3*D1*D2**2 - 18*D1*D2*H + 80*D1*H**2 + 6*D2**3 - 21*D2**2*H + 40*D2*H**2 - 60*H**3) - 44*L**4*k0b)/L**2, 0, ((1/40)*numpy.pi*E*H*(11*D1**3 + 5*D1**2*D2 - 38*D1**2*H + 2*D1*D2**2 - 14*D1*D2*H + 60*D1*H**2 + 2*D2**3 - 8*D2**2*H + 20*D2*H**2 - 40*H**3) + (1/105)*L**4*k0b)/L, 0, 0, 0, (1/840)*(21*numpy.pi*E*H*(15*D1**3 + 6*D1**2*D2 - 51*D1**2*H + 3*D1*D2**2 - 18*D1*D2*H + 80*D1*H**2 + 6*D2**3 - 21*D2**2*H + 40*D2*H**2 - 60*H**3) - 26*L**4*k0b)/L**2, 0, ((1/40)*numpy.pi*E*H*(4*D1**3 + D1**2*D2 - 13*D1**2*H + D1*D2**2 - 4*D1*D2*H + 20*D1*H**2 + 4*D2**3 - 13*D2**2*H + 20*D2*H**2 - 20*H**3) - 1/140*L**4*k0b)/L, 0], [0, (1/840)*(21*numpy.pi*E*H*(15*D1**3 + 6*D1**2*D2 - 51*D1**2*H + 3*D1*D2**2 - 18*D1*D2*H + 80*D1*H**2 + 6*D2**3 - 21*D2**2*H + 40*D2*H**2 - 60*H**3) + 44*L**4*k0b)/L**2, 0, 0, 0, ((1/40)*numpy.pi*E*H*(11*D1**3 + 5*D1**2*D2 - 38*D1**2*H + 2*D1*D2**2 - 14*D1*D2*H + 60*D1*H**2 + 2*D2**3 - 8*D2**2*H + 20*D2*H**2 - 40*H**3) + (1/105)*L**4*k0b)/L, 0, (1/840)*(-21*numpy.pi*E*H*(15*D1**3 + 6*D1**2*D2 - 51*D1**2*H + 3*D1*D2**2 - 18*D1*D2*H + 80*D1*H**2 + 6*D2**3 - 21*D2**2*H + 40*D2*H**2 - 60*H**3) + 26*L**4*k0b)/L**2, 0, 0, 0, ((1/40)*numpy.pi*E*H*(4*D1**3 + D1**2*D2 - 13*D1**2*H + D1*D2**2 - 4*D1*D2*H + 20*D1*H**2 + 4*D2**3 - 13*D2**2*H + 20*D2*H**2 - 20*H**3) - 1/140*L**4*k0b)/L], [(1/6)*(-3*numpy.pi*E*H*(D1 + D2 - 2*H) + L**2*k0a)/L, 0, 0, 0, 0, 0, ((1/2)*numpy.pi*E*H*(D1 + D2 - 2*H) + (1/3)*L**2*k0a)/L, 0, 0, 0, 0, 0], [0, (3/280)*(-7*numpy.pi*E*H*(7*D1**3 + 3*D1**2*D2 - 24*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 40*D1*H**2 + 7*D2**3 - 24*D2**2*H + 40*D2*H**2 - 40*H**3) + 12*L**4*k0b)/L**3, 0, 0, 0, (1/840)*(-21*numpy.pi*E*H*(15*D1**3 + 6*D1**2*D2 - 51*D1**2*H + 3*D1*D2**2 - 18*D1*D2*H + 80*D1*H**2 + 6*D2**3 - 21*D2**2*H + 40*D2*H**2 - 60*H**3) + 26*L**4*k0b)/L**2, 0, (1/280)*(21*numpy.pi*E*H*(7*D1**3 + 3*D1**2*D2 - 24*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 40*D1*H**2 + 7*D2**3 - 24*D2**2*H + 40*D2*H**2 - 40*H**3) + 104*L**4*k0b)/L**3, 0, 0, 0, (1/840)*(-21*numpy.pi*E*H*(6*D1**3 + 3*D1**2*D2 - 21*D1**2*H + 6*D1*D2**2 - 18*D1*D2*H + 40*D1*H**2 + 15*D2**3 - 51*D2**2*H + 80*D2*H**2 - 60*H**3) - 44*L**4*k0b)/L**2], [0, 0, (3/280)*(-7*numpy.pi*E*H*(7*D1**3 + 3*D1**2*D2 - 24*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 40*D1*H**2 + 7*D2**3 - 24*D2**2*H + 40*D2*H**2 - 40*H**3) + 12*L**4*k0b)/L**3, 0, (1/840)*(21*numpy.pi*E*H*(15*D1**3 + 6*D1**2*D2 - 51*D1**2*H + 3*D1*D2**2 - 18*D1*D2*H + 80*D1*H**2 + 6*D2**3 - 21*D2**2*H + 40*D2*H**2 - 60*H**3) - 26*L**4*k0b)/L**2, 0, 0, 0, (1/280)*(21*numpy.pi*E*H*(7*D1**3 + 3*D1**2*D2 - 24*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 40*D1*H**2 + 7*D2**3 - 24*D2**2*H + 40*D2*H**2 - 40*H**3) + 104*L**4*k0b)/L**3, 0, (1/840)*(21*numpy.pi*E*H*(6*D1**3 + 3*D1**2*D2 - 21*D1**2*H + 6*D1*D2**2 - 18*D1*D2*H + 40*D1*H**2 + 15*D2**3 - 51*D2**2*H + 80*D2*H**2 - 60*H**3) + 44*L**4*k0b)/L**2, 0], [0, 0, 0, (1/16)*numpy.pi*G*H*(-D1**3 - D1**2*D2 + 4*D1**2*H - D1*D2**2 + 4*D1*D2*H - 8*D1*H**2 - D2**3 + 4*D2**2*H - 8*D2*H**2 + 8*H**3)/L, 0, 0, 0, 0, 0, (1/16)*numpy.pi*G*H*(D1**3 + D1**2*D2 - 4*D1**2*H + D1*D2**2 - 4*D1*D2*H + 8*D1*H**2 + D2**3 - 4*D2**2*H + 8*D2*H**2 - 8*H**3)/L, 0, 0], [0, 0, (1/840)*(-21*numpy.pi*E*H*(6*D1**3 + 3*D1**2*D2 - 21*D1**2*H + 6*D1*D2**2 - 18*D1*D2*H + 40*D1*H**2 + 15*D2**3 - 51*D2**2*H + 80*D2*H**2 - 60*H**3) + 26*L**4*k0b)/L**2, 0, ((1/40)*numpy.pi*E*H*(4*D1**3 + D1**2*D2 - 13*D1**2*H + D1*D2**2 - 4*D1*D2*H + 20*D1*H**2 + 4*D2**3 - 13*D2**2*H + 20*D2*H**2 - 20*H**3) - 1/140*L**4*k0b)/L, 0, 0, 0, (1/840)*(21*numpy.pi*E*H*(6*D1**3 + 3*D1**2*D2 - 21*D1**2*H + 6*D1*D2**2 - 18*D1*D2*H + 40*D1*H**2 + 15*D2**3 - 51*D2**2*H + 80*D2*H**2 - 60*H**3) + 44*L**4*k0b)/L**2, 0, ((1/40)*numpy.pi*E*H*(2*D1**3 + 2*D1**2*D2 - 8*D1**2*H + 5*D1*D2**2 - 14*D1*D2*H + 20*D1*H**2 + 11*D2**3 - 38*D2**2*H + 60*D2*H**2 - 40*H**3) + (1/105)*L**4*k0b)/L, 0], [0, (1/840)*(21*numpy.pi*E*H*(6*D1**3 + 3*D1**2*D2 - 21*D1**2*H + 6*D1*D2**2 - 18*D1*D2*H + 40*D1*H**2 + 15*D2**3 - 51*D2**2*H + 80*D2*H**2 - 60*H**3) - 26*L**4*k0b)/L**2, 0, 0, 0, ((1/40)*numpy.pi*E*H*(4*D1**3 + D1**2*D2 - 13*D1**2*H + D1*D2**2 - 4*D1*D2*H + 20*D1*H**2 + 4*D2**3 - 13*D2**2*H + 20*D2*H**2 - 20*H**3) - 1/140*L**4*k0b)/L, 0, (1/840)*(-21*numpy.pi*E*H*(6*D1**3 + 3*D1**2*D2 - 21*D1**2*H + 6*D1*D2**2 - 18*D1*D2*H + 40*D1*H**2 + 15*D2**3 - 51*D2**2*H + 80*D2*H**2 - 60*H**3) - 44*L**4*k0b)/L**2, 0, 0, 0, ((1/40)*numpy.pi*E*H*(2*D1**3 + 2*D1**2*D2 - 8*D1**2*H + 5*D1*D2**2 - 14*D1*D2*H + 20*D1*H**2 + 11*D2**3 - 38*D2**2*H + 60*D2*H**2 - 40*H**3) + (1/105)*L**4*k0b)/L]])

def beam3d_circ_Ml(D1, D2, E, G, H, L, alpha, fa, fby, fbz, k0a, k0b, rho, theta):
    return numpy.array([[(1/12)*numpy.pi*H*L*rho*(3*D1 + D2 - 4*H), 0, 0, 0, 0, 0, (1/12)*numpy.pi*H*L*rho*(D1 + D2 - 2*H), 0, 0, 0, 0, 0], [0, (1/560)*numpy.pi*H*rho*(15*D1**3 + 27*D1**2*D2 - 72*D1**2*H + 27*D1*D2**2 - 108*D1*D2*H + 168*D1*H**2 + 15*D2**3 - 72*D2**2*H + 168*D2*H**2 - 168*H**3 + L**2*(160*D1 + 48*D2 - 208*H))/L, 0, 0, 0, (1/3360)*numpy.pi*H*rho*(-15*D1**3 + 9*D1**2*D2 + 36*D1**2*H + 27*D1*D2**2 - 72*D1*D2*H + 120*D1*L**2 + 21*D2**3 - 90*D2**2*H + 168*D2*H**2 + 56*D2*L**2 - 84*H**3 - 176*H*L**2), 0, -3/560*numpy.pi*H*rho*(5*D1**3 + 9*D1**2*D2 - 24*D1**2*H + 9*D1*D2**2 - 36*D1*D2*H + 56*D1*H**2 + 5*D2**3 - 24*D2**2*H + 56*D2*H**2 - 56*H**3 - 12*L**2*(D1 + D2 - 2*H))/L, 0, 0, 0, (1/3360)*numpy.pi*H*rho*(21*D1**3 + 27*D1**2*D2 - 90*D1**2*H + 9*D1*D2**2 - 72*D1*D2*H + 168*D1*H**2 - 56*D1*L**2 - 15*D2**3 + 36*D2**2*H - 48*D2*L**2 - 84*H**3 + 104*H*L**2)], [0, 0, (1/560)*numpy.pi*H*rho*(15*D1**3 + 27*D1**2*D2 - 72*D1**2*H + 27*D1*D2**2 - 108*D1*D2*H + 168*D1*H**2 + 15*D2**3 - 72*D2**2*H + 168*D2*H**2 - 168*H**3 + L**2*(160*D1 + 48*D2 - 208*H))/L, 0, (1/3360)*numpy.pi*H*rho*(15*D1**3 - 9*D1**2*D2 - 36*D1**2*H - 27*D1*D2**2 + 72*D1*D2*H - 120*D1*L**2 - 21*D2**3 + 90*D2**2*H - 168*D2*H**2 - 56*D2*L**2 + 84*H**3 + 176*H*L**2), 0, 0, 0, -3/560*numpy.pi*H*rho*(5*D1**3 + 9*D1**2*D2 - 24*D1**2*H + 9*D1*D2**2 - 36*D1*D2*H + 56*D1*H**2 + 5*D2**3 - 24*D2**2*H + 56*D2*H**2 - 56*H**3 - 12*L**2*(D1 + D2 - 2*H))/L, 0, (1/3360)*numpy.pi*H*rho*(-21*D1**3 - 27*D1**2*D2 + 90*D1**2*H - 9*D1*D2**2 + 72*D1*D2*H - 168*D1*H**2 + 56*D1*L**2 + 15*D2**3 - 36*D2**2*H + 48*D2*L**2 + 84*H**3 - 104*H*L**2), 0], [0, 0, 0, (1/240)*numpy.pi*H*L*rho*(10*D1**3 + 6*D1**2*D2 - 36*D1**2*H + 3*D1*D2**2 - 18*D1*D2*H + 60*D1*H**2 + D2**3 - 6*D2**2*H + 20*D2*H**2 - 40*H**3), 0, 0, 0, 0, 0, (1/240)*numpy.pi*H*L*rho*(2*D1**3 + 3*D1**2*D2 - 9*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 20*D1*H**2 + 2*D2**3 - 9*D2**2*H + 20*D2*H**2 - 20*H**3), 0, 0], [0, 0, (1/3360)*numpy.pi*H*rho*(15*D1**3 - 9*D1**2*D2 - 36*D1**2*H - 27*D1*D2**2 + 72*D1*D2*H - 120*D1*L**2 - 21*D2**3 + 90*D2**2*H - 168*D2*H**2 - 56*D2*L**2 + 84*H**3 + 176*H*L**2), 0, (1/6720)*numpy.pi*H*L*rho*(65*D1**3 + 21*D1**2*D2 - 216*D1**2*H + 15*D1*D2**2 - 72*D1*D2*H + 336*D1*H**2 + 40*D1*L**2 + 11*D2**3 - 48*D2**2*H + 112*D2*H**2 + 24*D2*L**2 - 224*H**3 - 64*H*L**2), 0, 0, 0, (1/3360)*numpy.pi*H*rho*(-15*D1**3 + 9*D1**2*D2 + 36*D1**2*H + 27*D1*D2**2 - 72*D1*D2*H - 48*D1*L**2 + 21*D2**3 - 90*D2**2*H + 168*D2*H**2 - 56*D2*L**2 - 84*H**3 + 104*H*L**2), 0, (1/6720)*numpy.pi*H*L*rho*(-11*D1**3 - 3*D1**2*D2 + 36*D1**2*H - 3*D1*D2**2 + 12*D1*D2*H - 56*D1*H**2 - 24*D1*L**2 - 11*D2**3 + 36*D2**2*H - 56*D2*H**2 - 24*D2*L**2 + 56*H**3 + 48*H*L**2), 0], [0, (1/3360)*numpy.pi*H*rho*(-15*D1**3 + 9*D1**2*D2 + 36*D1**2*H + 27*D1*D2**2 - 72*D1*D2*H + 120*D1*L**2 + 21*D2**3 - 90*D2**2*H + 168*D2*H**2 + 56*D2*L**2 - 84*H**3 - 176*H*L**2), 0, 0, 0, (1/6720)*numpy.pi*H*L*rho*(65*D1**3 + 21*D1**2*D2 - 216*D1**2*H + 15*D1*D2**2 - 72*D1*D2*H + 336*D1*H**2 + 40*D1*L**2 + 11*D2**3 - 48*D2**2*H + 112*D2*H**2 + 24*D2*L**2 - 224*H**3 - 64*H*L**2), 0, (1/3360)*numpy.pi*H*rho*(15*D1**3 - 9*D1**2*D2 - 36*D1**2*H - 27*D1*D2**2 + 72*D1*D2*H + 48*D1*L**2 - 21*D2**3 + 90*D2**2*H - 168*D2*H**2 + 56*D2*L**2 + 84*H**3 - 104*H*L**2), 0, 0, 0, (1/6720)*numpy.pi*H*L*rho*(-11*D1**3 - 3*D1**2*D2 + 36*D1**2*H - 3*D1*D2**2 + 12*D1*D2*H - 56*D1*H**2 - 24*D1*L**2 - 11*D2**3 + 36*D2**2*H - 56*D2*H**2 - 24*D2*L**2 + 56*H**3 + 48*H*L**2)], [(1/12)*numpy.pi*H*L*rho*(D1 + D2 - 2*H), 0, 0, 0, 0, 0, (1/12)*numpy.pi*H*L*rho*(D1 + 3*D2 - 4*H), 0, 0, 0, 0, 0], [0, -3/560*numpy.pi*H*rho*(5*D1**3 + 9*D1**2*D2 - 24*D1**2*H + 9*D1*D2**2 - 36*D1*D2*H + 56*D1*H**2 + 5*D2**3 - 24*D2**2*H + 56*D2*H**2 - 56*H**3 - 12*L**2*(D1 + D2 - 2*H))/L, 0, 0, 0, (1/3360)*numpy.pi*H*rho*(15*D1**3 - 9*D1**2*D2 - 36*D1**2*H - 27*D1*D2**2 + 72*D1*D2*H + 48*D1*L**2 - 21*D2**3 + 90*D2**2*H - 168*D2*H**2 + 56*D2*L**2 + 84*H**3 - 104*H*L**2), 0, (1/560)*numpy.pi*H*rho*(15*D1**3 + 27*D1**2*D2 - 72*D1**2*H + 27*D1*D2**2 - 108*D1*D2*H + 168*D1*H**2 + 15*D2**3 - 72*D2**2*H + 168*D2*H**2 - 168*H**3 + L**2*(48*D1 + 160*D2 - 208*H))/L, 0, 0, 0, (1/3360)*numpy.pi*H*rho*(-21*D1**3 - 27*D1**2*D2 + 90*D1**2*H - 9*D1*D2**2 + 72*D1*D2*H - 168*D1*H**2 - 56*D1*L**2 + 15*D2**3 - 36*D2**2*H - 120*D2*L**2 + 84*H**3 + 176*H*L**2)], [0, 0, -3/560*numpy.pi*H*rho*(5*D1**3 + 9*D1**2*D2 - 24*D1**2*H + 9*D1*D2**2 - 36*D1*D2*H + 56*D1*H**2 + 5*D2**3 - 24*D2**2*H + 56*D2*H**2 - 56*H**3 - 12*L**2*(D1 + D2 - 2*H))/L, 0, (1/3360)*numpy.pi*H*rho*(-15*D1**3 + 9*D1**2*D2 + 36*D1**2*H + 27*D1*D2**2 - 72*D1*D2*H - 48*D1*L**2 + 21*D2**3 - 90*D2**2*H + 168*D2*H**2 - 56*D2*L**2 - 84*H**3 + 104*H*L**2), 0, 0, 0, (1/560)*numpy.pi*H*rho*(15*D1**3 + 27*D1**2*D2 - 72*D1**2*H + 27*D1*D2**2 - 108*D1*D2*H + 168*D1*H**2 + 15*D2**3 - 72*D2**2*H + 168*D2*H**2 - 168*H**3 + L**2*(48*D1 + 160*D2 - 208*H))/L, 0, (1/3360)*numpy.pi*H*rho*(21*D1**3 + 27*D1**2*D2 - 90*D1**2*H + 9*D1*D2**2 - 72*D1*D2*H + 168*D1*H**2 + 56*D1*L**2 - 15*D2**3 + 36*D2**2*H + 120*D2*L**2 - 84*H**3 - 176*H*L**2), 0], [0, 0, 0, (1/240)*numpy.pi*H*L*rho*(2*D1**3 + 3*D1**2*D2 - 9*D1**2*H + 3*D1*D2**2 - 12*D1*D2*H + 20*D1*H**2 + 2*D2**3 - 9*D2**2*H + 20*D2*H**2 - 20*H**3), 0, 0, 0, 0, 0, (1/240)*numpy.pi*H*L*rho*(D1**3 + 3*D1**2*D2 - 6*D1**2*H + 6*D1*D2**2 - 18*D1*D2*H + 20*D1*H**2 + 10*D2**3 - 36*D2**2*H + 60*D2*H**2 - 40*H**3), 0, 0], [0, 0, (1/3360)*numpy.pi*H*rho*(-21*D1**3 - 27*D1**2*D2 + 90*D1**2*H - 9*D1*D2**2 + 72*D1*D2*H - 168*D1*H**2 + 56*D1*L**2 + 15*D2**3 - 36*D2**2*H + 48*D2*L**2 + 84*H**3 - 104*H*L**2), 0, (1/6720)*numpy.pi*H*L*rho*(-11*D1**3 - 3*D1**2*D2 + 36*D1**2*H - 3*D1*D2**2 + 12*D1*D2*H - 56*D1*H**2 - 24*D1*L**2 - 11*D2**3 + 36*D2**2*H - 56*D2*H**2 - 24*D2*L**2 + 56*H**3 + 48*H*L**2), 0, 0, 0, (1/3360)*numpy.pi*H*rho*(21*D1**3 + 27*D1**2*D2 - 90*D1**2*H + 9*D1*D2**2 - 72*D1*D2*H + 168*D1*H**2 + 56*D1*L**2 - 15*D2**3 + 36*D2**2*H + 120*D2*L**2 - 84*H**3 - 176*H*L**2), 0, (1/6720)*numpy.pi*H*L*rho*(11*D1**3 + 15*D1**2*D2 - 48*D1**2*H + 21*D1*D2**2 - 72*D1*D2*H + 112*D1*H**2 + 24*D1*L**2 + 65*D2**3 - 216*D2**2*H + 336*D2*H**2 + 40*D2*L**2 - 224*H**3 - 64*H*L**2), 0], [0, (1/3360)*numpy.pi*H*rho*(21*D1**3 + 27*D1**2*D2 - 90*D1**2*H + 9*D1*D2**2 - 72*D1*D2*H + 168*D1*H**2 - 56*D1*L**2 - 15*D2**3 + 36*D2**2*H - 48*D2*L**2 - 84*H**3 + 104*H*L**2), 0, 0, 0, (1/6720)*numpy.pi*H*L*rho*(-11*D1**3 - 3*D1**2*D2 + 36*D1**2*H - 3*D1*D2**2 + 12*D1*D2*H - 56*D1*H**2 - 24*D1*L**2 - 11*D2**3 + 36*D2**2*H - 56*D2*H**2 - 24*D2*L**2 + 56*H**3 + 48*H*L**2), 0, (1/3360)*numpy.pi*H*rho*(-21*D1**3 - 27*D1**2*D2 + 90*D1**2*H - 9*D1*D2**2 + 72*D1*D2*H - 168*D1*H**2 - 56*D1*L**2 + 15*D2**3 - 36*D2**2*H - 120*D2*L**2 + 84*H**3 + 176*H*L**2), 0, 0, 0, (1/6720)*numpy.pi*H*L*rho*(11*D1**3 + 15*D1**2*D2 - 48*D1**2*H + 21*D1*D2**2 - 72*D1*D2*H + 112*D1*H**2 + 24*D1*L**2 + 65*D2**3 - 216*D2**2*H + 336*D2*H**2 + 40*D2*L**2 - 224*H**3 - 64*H*L**2)]])

def beam3d_circ_rl(D1, D2, E, G, H, L, alpha, fa, fby, fbz, k0a, k0b, rho, theta):
    return numpy.array([[-1/2*numpy.pi*E*H*alpha*theta*(D1 + D2 - 2*H) + (1/2)*L*fa], [(1/2)*L*fby], [(1/2)*L*fbz], [0], [-1/12*L**2*fbz], [(1/12)*L**2*fby], [(1/2)*numpy.pi*E*H*alpha*theta*(D1 + D2 - 2*H) + (1/2)*L*fa], [(1/2)*L*fby], [(1/2)*L*fbz], [0], [(1/12)*L**2*fbz], [-1/12*L**2*fby]])

def beam3d_circ_Nl(D1, D2, E, G, H, L, alpha, fa, fby, fbz, k0a, k0b, rho, theta):
    return numpy.array([[1/2, 0, 0, 0, 0, 0, 1/2, 0, 0, 0, 0, 0], [0, 1/2, 0, 0, 0, (1/8)*L, 0, 1/2, 0, 0, 0, -1/8*L], [0, 0, 1/2, 0, -1/8*L, 0, 0, 0, 1/2, 0, (1/8)*L, 0]])

def beam3d_circ_Bl(D1, D2, E, G, H, L, alpha, fa, fby, fbz, k0a, k0b, rho, theta):
    return numpy.array([[-1/L, 0, 0, 0, 0, 0, L**(-1.0), 0, 0, 0, 0, 0], [0, 0, 0, 0, L**(-1.0), -1/L, 0, 0, 0, 0, -1/L, L**(-1.0)], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

def beam3d_circ_Dcs_mid(D1, D2, E, G, H, L, alpha, fa, fby, fbz, k0a, k0b, rho, theta):
    return numpy.array([[E*(numpy.pi*((1/4)*D1 + (1/4)*D2)**2 - numpy.pi*((1/4)*D1 + (1/4)*D2 - H)**2), 0, 0], [0, E*((1/4)*numpy.pi*((1/4)*D1 + (1/4)*D2)**4 - 1/4*numpy.pi*((1/4)*D1 + (1/4)*D2 - H)**4), 0], [0, 0, E*((1/4)*numpy.pi*((1/4)*D1 + (1/4)*D2)**4 - 1/4*numpy.pi*((1/4)*D1 + (1/4)*D2 - H)**4)]])

