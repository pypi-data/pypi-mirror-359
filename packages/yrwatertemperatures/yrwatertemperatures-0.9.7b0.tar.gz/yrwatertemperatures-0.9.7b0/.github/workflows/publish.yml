name: "Auto Release and Publish to PyPI"

on:
  push:
    branches: [ main, master, workflow-publish ]
    paths:
      - 'setup.py'

jobs:
  versioning:
    name: "Determine Version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.COMPONENT_VERSION }}
      should-release: ${{ steps.check_tag.outputs.exists == 'false' }}
    steps:
    - name: "‚úèÔ∏è Checkout code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "üè∑Ô∏è Get version tag"
      id: set_var
      run: |
        VERSION=$(python -c "import re; content=open('setup.py').read(); match=re.search(r\"version\s*=\s*['\\\"]([^'\\\"]+)['\\\"]\", content); print(match.group(1) if match else 'unknown')")
        echo "COMPONENT_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version found: $VERSION"

    - name: "üè∑Ô∏è Check if tag exists already"
      uses: mukunku/tag-exists-action@v1.6.0
      id: "check_tag"
      with: 
        tag: "v${{ env.COMPONENT_VERSION }}"

    - name: "‚ùå Cancel if tag is already present"
      run: |
        echo "Tag already present: v${{ env.COMPONENT_VERSION }}. Not creating a new release"
        gh run cancel ${{ github.run_id }}
        gh run watch ${{ github.run_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: steps.check_tag.outputs.exists == 'true'

  test:
    name: "Run Tests"
    needs: versioning
    if: needs.versioning.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-test.txt
    
    - name: Run tests
      run: |
        pytest tests/ -v

  build-and-publish:
    name: "Build and Publish to PyPI"
    needs: [versioning, test]
    if: needs.versioning.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: "‚úèÔ∏è Checkout code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "üóùÔ∏è Get previous release version"
      id: last_release
      uses: InsonusK/get-latest-release@v1.1.0
      with:
        myToken: ${{ github.token }}
        exclude_types: "draft|prerelease"

    - name: "üè∑Ô∏è Create new tag"
      uses: rickstaa/action-create-tag@v1
      id: "tag_create"
      with:
        tag: "v${{ needs.auto-release.outputs.version }}"
        tag_exists_error: false
        message: "Version ${{ needs.auto-release.outputs.version }}"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: "üóíÔ∏è Generate release changelog"
      id: changelog
      uses: heinrichreimer/github-changelog-generator-action@v2.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        sinceTag: ${{ steps.last_release.outputs.tag_name }}
        headerLabel: "# Notable changes since ${{ steps.last_release.outputs.tag_name }}"
        stripGeneratorNotice: true
      continue-on-error: true
    
    - name: üëç Create Stable release
      uses: softprops/action-gh-release@v2
      with:
        prerelease: false
        body: |
          Release of version ${{ needs.auto-release.outputs.version }}
          
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          ```bash
          pip install yrwatertemperatures==${{ needs.auto-release.outputs.version }}
          ```
        name: "Version ${{ needs.auto-release.outputs.version }}"
        tag_name: "v${{ needs.auto-release.outputs.version }}"
      if: contains(needs.auto-release.outputs.version, 'beta') == false

    - name: ü§û Create Beta release
      uses: softprops/action-gh-release@v2
      with:
        prerelease: true
        body: |
          Release of version ${{ needs.auto-release.outputs.version }}
          
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          ```bash
          pip install yrwatertemperatures==${{ needs.auto-release.outputs.version }}
          ```
        name: "Version ${{ needs.auto-release.outputs.version }}"
        tag_name: "v${{ needs.auto-release.outputs.version }}"
      if: contains(needs.auto-release.outputs.version, 'beta') == true
